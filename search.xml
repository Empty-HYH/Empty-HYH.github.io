<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HDFS Shell 命令</title>
      <link href="post/d1e7dfd3.html"/>
      <url>post/d1e7dfd3.html</url>
      
        <content type="html"><![CDATA[<h1 id="FS-Shell"><a href="#FS-Shell" class="headerlink" title="FS Shell"></a>FS Shell</h1><ul><li><p>调用文件系统（FS）的 Shell 命令应使用 <code>bin/hadoop fs &lt;args&gt;</code> 的形式。</p></li><li><p>所有的 FS shell 命令使用 URI 路径作为参数。</p></li><li><p>URI 格式是 <code>scheme://authority/path</code>。对 HDFS 文件系统，<code>scheme</code> 是 <code>hdfs</code>，对本地文件系统，<code>scheme</code> 是 <code>file</code>。其中 <code>scheme</code> 和 <code>authority</code> 参数都是可选的，如果未加指定，就会使用配置中指定的默认 <code>scheme</code>。</p></li><li><p>一个 HDFS 文件或目录比如 <code>/parent/child</code> 可以表示成 <code>hdfs://namenode:namenodeport/parent/child</code>，或者更简单的 <code>/parent/child</code>（假设你配置文件中的默认值是 <code>namenode:namenodeport</code>）。</p></li><li><p>大多数 FS Shell 命令的行为和对应的 Unix Shell 命令类似，不同之处会在下面介绍各命令使用详情时指出。出错信息会输出到 <code>stderr</code>，其他信息输出到 <code>stdout</code>。</p></li></ul><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cat URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将路径指定文件的内容输出到 <code>stdout</code>。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cat hdfs://host1:port1/file1 hdfs://host2:port2/file2<br>hadoop fs -cat file:///file3 /user/hadoop/file4<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -chgrp [-R] GROUP URI [URI …]`<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：改变文件所属的组。使用 <code>-R</code> 将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。</li></ul><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：改变文件的权限。使用 <code>-R</code> 将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。</li></ul><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -chown [-R] [OWNER][:[GROUP]] URI [URI ]<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：改变文件的拥有者。使用 <code>-R</code> 将使改变在目录结构下递归进行。命令的使用者必须是超级用户。</li></ul><h1 id="copyFromLocal"><a href="#copyFromLocal" class="headerlink" title="copyFromLocal"></a>copyFromLocal</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -copyFromLocal &lt;localsrc&gt; URI<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：除了限定源路径是一个本地文件外，和 <a href="#put">put</a> 命令相似。</li></ul><h1 id="copyToLocal"><a href="#copyToLocal" class="headerlink" title="copyToLocal"></a>copyToLocal</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -copyToLocal [-ignorecrc] [-crc] URI &lt;localdst&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：除了限定目标路径是一个本地文件外，和 <a href="#get">get</a> 命令类似。</li></ul><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cp URI [URI …] &lt;dest&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将文件从源路径复制到目标路径。这个命令允许有多个源路径，此时目标路径必须是一个目录。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cp /user/hadoop/file1 /user/hadoop/file2<br>hadoop fs -cp /user/hadoop/file1 /user/hadoop/file2 /user/hadoop/dir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -du URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：显示目录中所有文件的大小，或者当只指定一个文件时，显示此文件的大小。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -du /user/hadoop/dir1 /user/hadoop/file1 hdfs://host:port/user/hadoop/dir1<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="dus"><a href="#dus" class="headerlink" title="dus"></a>dus</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -dus &lt;args&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：显示文件的大小。</li></ul><h1 id="expunge"><a href="#expunge" class="headerlink" title="expunge"></a>expunge</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -expunge<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：清空回收站。请参考 <a href="http://hadoop.apache.org/docs/r1.0.4/cn/hdfs_design.html">HDFS 设计文档</a> 以获取更多关于回收站特性的信息。</li></ul><h1 id="get"><a href="#get" class="headerlink" title="get"></a>get</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -get [-ignorecrc] [-crc] &lt;src&gt; &lt;localdst&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：复制文件到本地文件系统。可用 <code>-ignorecrc</code> 选项复制 CRC 校验失败的文件。使用 <code>-crc</code> 选项复制文件以及 CRC 信息。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -get /user/hadoop/file localfile<br>hadoop fs -get hdfs://host:port/user/hadoop/file localfile<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="getmerge"><a href="#getmerge" class="headerlink" title="getmerge"></a>getmerge</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -getmerge &lt;src&gt; &lt;localdst&gt; [addnl]<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：接受一个源目录和一个目标文件作为输入，并且将源目录中所有的文件连接成本地目标文件。<code>addnl</code> 是可选的，用于指定在每个文件结尾添加一个换行符。</li></ul><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -ls &lt;args&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：</p><ul><li><p>如果是文件，则按照如下格式返回文件信息：</p><p>  文件名 | &lt;副本数&gt; | 文件大小 | 修改日期 | 修改时间 | 权限 | 用户ID | 组ID</p></li><li><p>如果是目录，则返回它直接子文件的一个列表，就像在 Unix 中一样。目录返回列表的信息：</p><p>  目录名 | <code>&lt;dir&gt;</code> | 修改日期 | 修改时间 | 权限 | 用户ID | 组ID</p></li></ul></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -ls /user/hadoop/file1 /user/hadoop/file2 hdfs://host:port/user/hadoop/dir1 /nonexistentfile<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="lsr"><a href="#lsr" class="headerlink" title="lsr"></a>lsr</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -lsr &lt;args&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：<a href="#ls">ls</a> 命令的递归版本。类似于 Unix 中的 <code>ls -R</code>。</li></ul><h1 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mkdir &lt;paths&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：接受路径指定的 <code>URI</code> 作为参数，创建这些目录。其行为类似于 Unix 的 <code>mkdir -p</code>，它会创建路径中的各级父目录。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mkdir /user/hadoop/dir1 /user/hadoop/dir2<br>hadoop fs -mkdir hdfs://host1:port1/user/hadoop/dir hdfs://host2:port2/user/hadoop/dir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="movefromLocal"><a href="#movefromLocal" class="headerlink" title="movefromLocal"></a>movefromLocal</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dfs -moveFromLocal &lt;src&gt; &lt;dst&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：输出一个 <code>not implemented</code> 信息。</li></ul><h1 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mv URI [URI …] &lt;dest&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将文件从源路径移动到目标路径。这个命令允许有多个源路径，此时目标路径必须是一个目录。不允许在不同的文件系统间移动文件。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mv /user/hadoop/file1 /user/hadoop/file2<br>hadoop fs -mv hdfs://host:port/file1 hdfs://host:port/file2 hdfs://host:port/file3 hdfs://host:port/dir1<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="put"><a href="#put" class="headerlink" title="put"></a>put</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -put &lt;localsrc&gt; ... &lt;dst&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：从本地文件系统中复制单个或多个源路径到目标文件系统。也支持从标准输入中读取输入写入目标文件系统。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -put localfile /user/hadoop/hadoopfile<br>hadoop fs -put localfile1 localfile2 /user/hadoop/hadoopdir<br>hadoop fs -put localfile hdfs://host:port/hadoop/hadoopfile<br>hadoop fs -put - hdfs://host:port/hadoop/hadoopfile<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rm URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：删除指定的文件。只删除非空目录和文件。请参考 <a href="#rmr">rmr</a> 命令了解递归删除。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rm hdfs://host:port/file /user/hadoop/emptydir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="rmr"><a href="#rmr" class="headerlink" title="rmr"></a>rmr</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rmr URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：<a href="#rm">rm</a> 命令的递归版本。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rmr /user/hadoop/dir<br>hadoop fs -rmr hdfs://host:port/user/hadoop/dir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="setrep"><a href="#setrep" class="headerlink" title="setrep"></a>setrep</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -setrep [-R] &lt;path&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：改变一个文件的副本系数。<code>-R</code> 选项用于递归改变目录下所有文件的副本系数。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -setrep -w 3 -R /user/hadoop/dir1<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -stat URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：返回指定路径的统计信息。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -stat path<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -tail [-f] URI<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将文件尾部 1K 字节的内容输出到 <code>stdout</code>。支持 <code>-f</code> 选项，行为和 Unix 中一致。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -tail pathname<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -test -[ezd] URI<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：</p><ul><li><code>e</code> 检查文件是否存在。如果存在则返回 <code>0</code>。</li><li><code>z</code> 检查文件是否是 0 字节。如果是则返回 <code>0</code>。</li><li><code>d</code> 如果路径是个目录，则返回 <code>1</code>，否则返回 <code>0</code>。</li></ul></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -test -e filename<br></code></pre></td></tr></table></figure></p></li></ul><h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -text &lt;src&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：将源文件输出为文本格式。允许的格式是 <code>zip</code> 和 <code>TextRecordInputStream</code>。</li></ul><h1 id="touchz"><a href="#touchz" class="headerlink" title="touchz"></a>touchz</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -touchz URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：创建一个 0 字节的空文件。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop -touchz pathname<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐘Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 使用教程</title>
      <link href="post/c3cf24c7.html"/>
      <url>post/c3cf24c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h1><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS，Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h1 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h1><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。</p><p>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。</p><p>Git 与 SVN 区别点：</p><ol><li>Git 是分布式的，SVN 是集中式的：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li><li>Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</li><li>Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</li><li>Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</li><li>Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><h1 id="Git-的安装和配置"><a href="#Git-的安装和配置" class="headerlink" title="Git 的安装和配置"></a>Git 的安装和配置</h1><p><a href="https://git-scm.com/downloads">Git 下载地址（Linux/Unix，Mac，Windows 等相关平台）</a></p><p><a href="http://git-scm.com/docs">Git 完整命令手册地址</a></p><p><a href="github-git-cheat-sheet.pdf">Git PDF 版命令手册</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">### 配置所有 Git 仓库的 用户名 和 email </span><br>$ git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;youremail@example.com&quot;</span><br><br><span class="hljs-comment">### 配置当前 Git 仓库的 用户名 和 email</span><br>$ git config user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>$ git config user.email <span class="hljs-string">&quot;youremail@example.com&quot;</span><br><br><span class="hljs-comment">### 查看全局配置的 用户名 和 email </span><br>$ git config --global user.name      查看用户名<br>$ git config --global user.email     查看邮箱地址<br><br><span class="hljs-comment">### 查看当前仓库配置的 用户名 和 email </span><br>$ git config user.name      查看用户名<br>$ git config user.email     查看邮箱地址<br><br><span class="hljs-comment"># Git 是分布式版本控制系统，所以，每个机器都配置你的名字和 Email 地址</span><br><span class="hljs-comment"># git config 命令的 --global 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址（不加 --global）。</span><br></code></pre></td></tr></table></figure></p><h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/git/workflow.png" alt></p><p>以上包括一些简单而常用的命令，但是先不关心这些，先来了解下面这 4 个专有名词。</p><ul><li>Workspace：<a href="#工作区">工作区</a></li><li>Index/Stage：<a href="#暂存区">暂存区</a></li><li>Repository：<a href="#本地仓库">仓库区（或本地仓库）</a></li><li>Remote：<a href="#远程仓库">远程仓库</a></li></ul><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p>程序员进行开发改动的地方，是你当前看到的，也是最新的。</p><p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p>.git 目录下的 index 文件，暂存区会记录 <code>git add</code> 添加文件的相关信息（文件名、大小、timestamp...），不保存文件实体，通过 id 指向每个文件实体。可以使用 <code>git status</code> 查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被 git 管理的。</p><p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过 <code>git add</code> 先提交到暂存区，被 git 管理。</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>保存了对象被提交过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p><p><code>git commit</code> 后同步 index 的目录树到本地仓库，方便从下一步通过 <code>git push</code> 同步本地仓库与远程仓库的同步。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>任何对象都是在工作区中诞生和被修改；</li><li>任何修改都是从进入 <code>index</code> 区才开始被版本控制；</li><li>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</li><li>与协作者分享本地的修改，可以把它们 <code>push</code> 到远程仓库来共享。</li></ul><p>下面这幅图更加直接阐述了四个区域之间的关系，可能有些命令不太清楚，下面将会详细介绍。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/git/workflow2.png" alt></p><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/git/command.png" alt></p><h2 id="版本与配置"><a href="#版本与配置" class="headerlink" title="版本与配置"></a>版本与配置</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git                         查看 git 的相关命令（git --<span class="hljs-built_in">help</span>）<br>$ git --version               查看 git 的版本<br>$ git config                  查看 git config 的相关命令<br></code></pre></td></tr></table></figure></p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p>Git 使用 <code>git init</code> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <code>git init</code> 是使用 Git 的第一个命令。</p><p>在执行完成 <code>git init</code> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init                    创建本地仓库<br>$ git <span class="hljs-built_in">clone</span>                   克隆远程仓库<br></code></pre></td></tr></table></figure></p><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add &lt;file&gt;                 如: git add readme.txt<br>$ git commit -m <span class="hljs-string">&quot;description&quot;</span>    如: git commit -m <span class="hljs-string">&quot;add readme.txt&quot;</span><br><br><span class="hljs-comment"># 添加文件到仓库分两步:</span><br><span class="hljs-comment"># 1. add 添加该文件到仓库</span><br><span class="hljs-comment"># 添加许多同种类型的文件，可以使用通配符 *（记得加引号），如: git add &quot;*.txt&quot; 命令就是添加所有 .txt 文件</span><br><span class="hljs-comment"># 2. commit 提交该文件到仓库，description 为你对该次提交的描述说明</span><br><span class="hljs-comment"># 注意: 可以多次 add 不同的文件，commit 可以一次提交多个文件</span><br></code></pre></td></tr></table></figure></p><h2 id="查看仓库目前状态"><a href="#查看仓库目前状态" class="headerlink" title="查看仓库目前状态"></a>查看仓库目前状态</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status                 查看项目是否有修改、添加、未追踪的文件等<br></code></pre></td></tr></table></figure></p><h2 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git diff                   查看工作区（work dict）和暂存区（stage）的区别<br>$ git diff &lt;file&gt;<br>$ git diff --cached          查看暂存区（stage）和分支（master）的区别<br>$ git diff HEAD -- &lt;file&gt;    查看工作区和版本库里面最新版本的区别<br><br><span class="hljs-comment">#如: git diff readme.txt     查看 readme.txt 修改了什么，有什么不同</span><br></code></pre></td></tr></table></figure></p><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br>$ git <span class="hljs-built_in">log</span> --oneline           美化输出信息，每个记录显示为一行，显示 commit_id 前几位数<br>$ git <span class="hljs-built_in">log</span> --pretty=oneline    美化输出信息，每个记录显示为一行，显示完整的 commit_id<br>$ git <span class="hljs-built_in">log</span> --graph --pretty=format:<span class="hljs-string">&#x27;%h -%d %s (%cr)&#x27;</span> --abbrev-commit --<br>$ git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit<br><br><span class="hljs-comment"># 显示从最近到最远的提交日志</span><br><span class="hljs-comment"># 日志输出一大串类似 3628164...882e1e0 的是 commit_id（版本号），和 SVN 不一样，Git 的 commit_id 不是 1，2，3... 递增的数字，而是一个 SHA1 计算出来的一个非常大的数字，用十六进制表示，因为 Git 是分布式的版本控制系统，当多人在同一个版本库里工作，如果大家都用 1，2，3... 作为版本号，那肯定就冲突了</span><br><span class="hljs-comment"># 最后一个会打印出提交的时间等，（HEAD -&gt; master）指向的是当前的版本</span><br><span class="hljs-comment"># 退出查看 log 日志，输入字母 q（英文状态）</span><br></code></pre></td></tr></table></figure></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard HEAD^<br>$ git reset --hard &lt;commit_id&gt;<br><br><span class="hljs-comment"># HEAD        表示当前版本，也就是最新的提交</span><br><span class="hljs-comment"># HEAD^       上一个版本</span><br><span class="hljs-comment"># HEAD^^      上上一个版本</span><br><span class="hljs-comment"># HEAD~100    往上100个版本</span><br><br><span class="hljs-comment"># 回退到 commit_id 对应的那个版本，commit_id 为版本号，只需要前几位就行</span><br></code></pre></td></tr></table></figure></p><h2 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reflog<br><span class="hljs-comment"># 假如我们依次提交了三个版本 a-&gt;b-&gt;c，然后昨天我们从版本 c 回退到了版本 b，今天我们又想要回到版本 c，此时就可以使用 reflog 命令来查找 c 版本的 commit_id，然后使用 reset 命令来进行版本回退</span><br></code></pre></td></tr></table></figure></p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p><strong>丢弃工作区（Working Directory）的修改</strong></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git restore &lt;file&gt;        （建议使用，如: git restore readme.txt）<br>$ git checkout -- &lt;file&gt;<br><span class="hljs-comment"># 命令中 -- 很重要，没有就变成 “切换到另一个分支” 的命令</span><br></code></pre></td></tr></table></figure></p><p><strong>丢弃暂存区（stage/index）的修改</strong></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一步: 把暂存区的修改撤销掉（unstage），重新放回工作区</span><br>$ git restore --staged &lt;file&gt;<br><br><span class="hljs-comment"># 第二步: 撤销工作区的修改</span><br>$ git restore &lt;file&gt;<br></code></pre></td></tr></table></figure></p><p><strong>小结</strong></p><ul><li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git restore &lt;file&gt;</code>。</p></li><li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git restore --staged &lt;file&gt;</code>，就回到了场景 1，第二步按场景 1 操作。</p></li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="#版本回退">版本回退</a>一节，不过前提是没有推送到远程库。</p></li></ul><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git rm &lt;file&gt;<br><br><span class="hljs-comment"># git rm &lt;file&gt; 相当于执行</span><br>- rm &lt;file&gt;<br>- git add &lt;file&gt;<br></code></pre></td></tr></table></figure></p><h1 id="远程仓库-1"><a href="#远程仓库-1" class="headerlink" title="远程仓库"></a>远程仓库</h1><ol><li><p>创建 SSH Key</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br><span class="hljs-comment"># 邮件地址换成你自己的邮件地址，然后一直回车，使用默认值即可，无需设置密码。</span><br></code></pre></td></tr></table></figure></p><p> 在用户主目录下，看看有没有 .ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，创建 SSH Key</p><p> 如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p></li><li><p>登录 GitHub，在 Settings 中找到 SSH 设置项中添加新的 SSH Key，设置任意 title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容</p></li><li><p>关联远程仓库（先有本地仓库）</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add origin git@github.com:username/repo.git<br><span class="hljs-comment"># 后面的地址换成自己的 GitHub 仓库地址</span><br></code></pre></td></tr></table></figure></p></li><li><p>推送到远程仓库</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote       查看远程库信息<br>$ git remote -v    查看远程库详细信息<br>$ git remote rm origin  删除已关联的远程库 origin<br>$ git push -u origin master    <span class="hljs-comment">#第一次推送</span><br>$ git push origin master      推送本地 master 分支到远程库<br>$ git push origin dev         推送本地 dev 分支到远程库<br><span class="hljs-comment">#  除了第一次推送，不需要添加 -u 参数</span><br><br><span class="hljs-comment"># 一个本地库关联多个远程库，例如同时关联 GitHub 和 Gitee:</span><br><span class="hljs-comment"># 1. 先关联GitHub的远程库：（注意:远程库的名称叫 github，不叫 origin）</span><br>$ git remote add github git@github.com:username/repo.git<br><span class="hljs-comment"># 2. 再关联Gitee的远程库：（注意:远程库的名称叫 gitee，不叫 origin）</span><br>$ git remote add gitee git@gitee.com:username/repo.git<br><span class="hljs-comment"># 3. 推送到远程库</span><br>$ git push github master<br>$ git push gitee master<br></code></pre></td></tr></table></figure></p><p> 加上了 <code>-u</code> 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来</p></li><li><p>从远程仓库克隆（先有远程库）</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:username/repo.git<br><span class="hljs-comment"># GitHub 支持多种协议，上面是 ssh 协议，还有 https 协议</span><br></code></pre></td></tr></table></figure></p></li></ol><h1 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch           查看分支列表及当前分支<br>$ git branch dev       创建 dev 分支<br><br>$ git switch dev       切换到 dev 分支（git checkout dev）<br>$ git switch -c dev    创建并切换到新的 dev 分支（git checkout -b dev）<br>$ git switch -c dev origin/dev  创建远程 origin 的 dev 分支到本地并切换到该分支<br><br>$ git branch -d dev    删除 dev 分支<br>$ git branch -D dev    强制删除 dev 分支<br><br>$ git merge dev        合并 dev 分支到当前分支（当有冲突的时候，需要先解决冲突）<br>$ git merge --no-ff -m <span class="hljs-string">&quot;merge with no-ff&quot;</span> dev    合并 dev 分支到当前分支（禁用 Fast forward 合并策略）<br><br>$ git pull  拉取远程分支最新的内容<br>$ git branch --set-upstream-to=origin/dev dev    指定本地 dev 分支与远程 origin/dev 分支的链接<br><br><span class="hljs-comment"># 为本次合并要创建一个新的commit，所以加上 -m 参数，把 commit 描述写进去</span><br><span class="hljs-comment"># 合并分支时，加上 --no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span> --graph    查看分支合并图<br>$ git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit<br><br>$ git stash          保存当前工作区和暂存区的修改状态，切换到其他分支修复 bug 等工作，然后在回来继续工作<br>$ git stash list     查看保存现场的列表<br>$ git stash pop      恢复的同时把 stash 内容也删除<br>$ git stash apply    恢复现场，stash内容并不删除<br>$ git stash drop     删除 stash 内容<br>$ git stash apply stash@&#123;0&#125;    多次 stash，恢复的时候，先用 git stash list 查看，然后恢复指定的 stash<br><span class="hljs-comment"># 通常在 dev 分支开发时，需要有紧急 bug 需要马上处理，保存现在修改的文件等，先修复 bug 后再回来继续工作的情况</span><br><br>$ git cherry-pick &lt;commit&gt;    复制一个特定的提交到当前分支（当前分支的内容需要先 commit，然后冲突的文件需要解决冲突，然后 commit）<br><br>$ git rebase    把本地未 push 的分叉提交历史整理成直线（使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比）<br></code></pre></td></tr></table></figure></p><h1 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到对应的分支 branch 上，查看或者操作对应的标签 tag </span><br>$ git tag                                 查看所有的标签<br>$ git tag &lt;tagname&gt;                       打标签（默认标签是打在最新提交的commit上），如: git tag v1.0<br>$ git tag &lt;tagname&gt; &lt;commit_id&gt;           给对应的 commit_id 打标签<br>$ git tag -a &lt;tagname&gt; -m <span class="hljs-string">&quot;标签说明信息&quot;</span> &lt;commit_id&gt;    创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字<br>$ git tag -d &lt;tagname&gt;                    删除一个本地标签<br>$ git push origin :refs/tags/&lt;tagname&gt;    可以删除一个远程标签<br>$ git show &lt;tagname&gt;                      查看标签信息<br><br>$ git push origin &lt;tagname&gt;               推送一个本地标签到远程<br>$ git push origin --tags                  一次性推送全部尚未推送到远程的本地标签<br><br><span class="hljs-comment"># 删除远程标签，需要先删除本地标签，然后在删除远程标签，如:删除标签 v0.9</span><br>$ git tag -d v0.9<br>$ git push origin :refs/tags/v0.9<br></code></pre></td></tr></table></figure></p><h1 id="Commit-message-格式"><a href="#Commit-message-格式" class="headerlink" title="Commit message 格式"></a>Commit message 格式</h1><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。但是，一般来说，Commit message 应该清晰明了，说明本次提交的目的。</p><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span></span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span></span>): <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">subject</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><p>其中，header 是必需的，body 和 footer 可以省略。</p><p>不管是哪一个部分，任何一行都不得超过 72 个字符（或 100 个字符）。这是为了避免自动换行影响美观。</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>用于说明 commit 的类别，只允许使用下面7个标识。</p><ul><li><code>feat</code>：新功能（feature）</li><li><code>fix</code>：修补 bug</li><li><code>docs</code>：文档（documentation）</li><li><code>style</code>：格式（不影响代码运行的变动）</li><li><code>refactor</code>：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li><code>test</code>：增加测试</li><li><code>chore</code>：构建过程或辅助工具的变动</li></ul><p>如果 type 为 <code>feat</code> 和 <code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p>例如在 Angular，可以是 <code>$location</code>, <code>$browser</code>, <code>$compile</code>, <code>$rootScope</code>, <code>ngHref</code>, <code>ngClick</code>, <code>ngView</code> 等。</p><p>如果你的修改影响了不止一个 <code>scope</code>，你可以使用 <code>*</code> 代替。</p><h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p>subject 是 commit 目的的简短描述，不超过 50 个字符。</p><p>其他注意事项：</p><ul><li>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">More detailed explanatory text, if necessary.  Wrap it to about 72 characters or so. <br><br>Further paragraphs come after blank lines.<br><br><span class="hljs-bullet">-</span> Bullet points are okay, too<br><span class="hljs-bullet">-</span> Use a hanging indent<br></code></pre></td></tr></table></figure></p><p>有三个注意点:</p><ul><li>使用第一人称现在时，比如使用 change 而不是 changed 或 changes。</li><li>永远别忘了第 2 行是空行</li><li>应该说明代码变动的动机，以及与以前行为的对比。</li></ul><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>Footer 部分只用于以下两种情况：</p><h3 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">BREAKING CHANGE: isolate scope bindings definition has changed.<br><br><span class="hljs-code">    To migrate the code follow the example below:</span><br><span class="hljs-code"></span><br><span class="hljs-code">    Before:</span><br><span class="hljs-code"></span><br><span class="hljs-code">    scope: &#123;</span><br><span class="hljs-code">      myAttr: &#x27;attribute&#x27;,</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    After:</span><br><span class="hljs-code"></span><br><span class="hljs-code">    scope: &#123;</span><br><span class="hljs-code">      myAttr: &#x27;@&#x27;,</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></code></pre></td></tr></table></figure></p><h3 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h3><p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Closes #234<br></code></pre></td></tr></table></figure></p><h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">revert: feat(pencil): add &#x27;graphiteWidth&#x27; option<br><br>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.<br></code></pre></td></tr></table></figure></p><p>Body 部分的格式是固定的，必须写成 <code>This reverts commit &amp;lt;hash&gt;.</code>，其中的 hash 是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts 小标题下面。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💠git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26 个字母 26 句话</title>
      <link href="post/e8b7be43.html"/>
      <url>post/e8b7be43.html</url>
      
        <content type="html"><![CDATA[<p><style>#article-container img {width: 50%}</style></p><p>一个字母一张图，一张图一个感悟，一个感悟一份思考，一份思考一个行动。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/a_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/b_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/c_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/d_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/e_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/f_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/g_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/h_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/i_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/j_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/k_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/l_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/m_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/n_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/o_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/p_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/q_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/r_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/s_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/t_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/u_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/v_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/w_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/x_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/y_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/letter/z_proverb.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 💬生活随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💬生活随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作品案例</title>
      <link href="post/8b714264.html"/>
      <url>post/8b714264.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 🖥️作品案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🖥️作品案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言统计分析</title>
      <link href="post/741c153c.html"/>
      <url>post/741c153c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>R 中的统计分析通过使用许多内置函数来执行。这些函数大多数是 R 基础包的一部分。这些函数将 R 向量作为输入和参数，并给出结果。</p><h1 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h1><p>通过求出数据集的和再除以求和数的总量得到平均值</p><p>函数 <code>mean()</code> 用于在 R 语言中计算平均值。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>用于计算 R 中的平均值的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">mean(x, trim = <span class="hljs-number">0</span>, na.rm = <span class="hljs-literal">FALSE</span>, ...)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是输入向量。</li><li><code>trim</code> 用于从排序向量的两端丢弃一些观察结果。</li><li><code>na.rm</code> 用于从输入向量中删除缺失值。</li></ul><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector. </span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Find Mean.</span><br>result.mean &lt;- mean(x)<br>print(result.mean)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8.22</span><br></code></pre></td></tr></table></figure></p><h2 id="应用-trim-选项"><a href="#应用-trim-选项" class="headerlink" title="应用 trim 选项"></a>应用 trim 选项</h2><p>当提供 <code>trim</code> 参数时，向量中的值被排序，然后从计算平均值中减去所需的观察值。</p><p>当 <code>trim = 0.3</code> 时，来自每端的 3 个值将从计算中减去以找到均值。</p><p>在这种情况下，排序的向量是 <code>(-21, -5, 2, 3, 4.2, 7, 8, 12, 18, 54)</code>，并且从用于计算平均值的向量中移除的值是左边的 <code>(-21, -5, 2)</code> 从和右边的 <code>(12, 18, 54)</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Find Mean.</span><br>result.mean &lt;- mean(x, trim = <span class="hljs-number">0.3</span>)<br>print(result.mean)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5.55</span><br></code></pre></td></tr></table></figure></p><h2 id="应用-NA-选项"><a href="#应用-NA-选项" class="headerlink" title="应用 NA 选项"></a>应用 NA 选项</h2><p>如果有缺失值，则平均函数返回 <code>NA</code>。</p><p>要从计算中删除缺少的值，请使用 <code>na.rm = TRUE</code>。这意味着去除 <code>NA</code> 值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector. </span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>, <span class="hljs-literal">NA</span>)<br><br><span class="hljs-comment"># Find mean.</span><br>result.mean &lt;- mean(x)<br>print(result.mean)<br><br><span class="hljs-comment"># Find mean dropping NA values.</span><br>result.mean &lt;- mean(x, na.rm = <span class="hljs-literal">TRUE</span>)<br>print(result.mean)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">NA</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8.22</span><br></code></pre></td></tr></table></figure></p><h1 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h1><p>数据系列中的最中间值称为中位数。在 R 语言中使用 <code>median()</code> 函数来计算此值。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>计算 R 语言中位数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">median(x, na.rm = <span class="hljs-literal">FALSE</span>)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是输入向量。</li><li><code>na.rm</code> 用于从输入向量中删除缺失值。</li></ul><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the vector.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Find the median.</span><br>median.result &lt;- median(x)<br>print(median.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5.6</span><br></code></pre></td></tr></table></figure></p><h1 id="众数"><a href="#众数" class="headerlink" title="众数"></a>众数</h1><p>众数是一组数据中出现次数最多的值，不同于平均值和中位数，众数可以同时包含数字和字符数据。R 没有标准的内置函数来计算众数。因此，我们将创建一个用户自定义函数来计算 R 语言中的数据集的众数。该函数将向量作为输入，并将众数值作为输出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the function.</span><br>getmode &lt;- <span class="hljs-keyword">function</span>(v) &#123;<br>   uniqv &lt;- unique(v)<br>   uniqv[which.max(tabulate(match(v, uniqv)))]<br>&#125;<br><br><span class="hljs-comment"># Create the vector with numbers.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Calculate the mode using the user function.</span><br>result &lt;- getmode(v)<br>print(result)<br><br><span class="hljs-comment"># Create the vector with characters.</span><br>charv &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;it&quot;</span>, <span class="hljs-string">&quot;the&quot;</span>, <span class="hljs-string">&quot;it&quot;</span>, <span class="hljs-string">&quot;it&quot;</span>)<br><br><span class="hljs-comment"># Calculate the mode using the user function.</span><br>result &lt;- getmode(charv)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;it&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>回归分析是一种非常广泛使用的统计工具，用于建立两个变量之间的关系模型。这些变量之一称为预测变量，其值通过实验收集。另一个变量称为响应变量，其值从预测变量派生。</p><p>在线性回归中，这两个变量通过方程相关，其中这两个变量的指数（幂）为 1，数学上，线性关系表示当绘制为曲线图时的直线。任何变量的指数不等于1的非线性关系将创建一条曲线。</p><p>线性回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">y = ax + b<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y</code> 是响应变量。</li><li><code>x</code> 是预测变量。</li><li><code>a，b</code> 被称为系数常数。</li></ul><p><strong>建立回归的步骤</strong></p><p>回归的简单例子是当人的身高已知时预测人的体重。为了做到这一点，我们需要有一个人的身高和体重之间的关系。</p><p>创建关系的步骤是：</p><ol><li>进行收集高度和相应重量的观测值的样本的实验。</li><li>使用 R 语言中的 <code>lm()</code> 函数创建关系模型。</li><li>从创建的模型中找到系数，并使用这些创建数学方程</li><li>获得关系模型的摘要以了解预测中的平均误差。也称为残差。</li><li>为了预测新人的体重，使用 R 中的 <code>predict()</code> 函数。</li></ol><p><strong>输入数据</strong></p><p>下面是代表观察的样本数据：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Values of height</span><br>151, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span><br><br><span class="hljs-comment"># Values of weight.</span><br>63, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure></p><h2 id="lm-函数"><a href="#lm-函数" class="headerlink" title="lm()函数"></a>lm()函数</h2><p>此函数创建预测变量和响应变量之间的关系模型。</p><p><strong>语法</strong></p><p>线性回归中 <code>lm()</code> 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">lm(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是表示 <code>x</code> 和 <code>y</code> 之间的关系的符号。</li><li><code>data</code> 是应用公式的向量。</li></ul><p><strong>创建关系模型并获取系数</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-comment"># Apply the lm() function.</span><br>relation &lt;- lm(y ~ x)<br><br>print(relation)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>lm(formula = y ~ x)<br><br>Coefficients:<br>(Intercept)            x<br>   -<span class="hljs-number">38.4551</span>       <span class="hljs-number">0.6746</span><br></code></pre></td></tr></table></figure></p><p><strong>获取相关的摘要</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-comment"># Apply the lm() function.</span><br>relation &lt;- lm(y ~ x)<br><br>print(summary(relation))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>lm(formula = y ~ x)<br><br>Residuals:<br>    Min      <span class="hljs-number">1</span>Q  Median      <span class="hljs-number">3</span>Q     Max <br>-<span class="hljs-number">6.3002</span> -<span class="hljs-number">1.6629</span>  <span class="hljs-number">0.0412</span>  <span class="hljs-number">1.8944</span>  <span class="hljs-number">3.9775</span> <br><br>Coefficients:<br>             Estimate Std. Error t value Pr(&gt;|t|)    <br>(Intercept) -<span class="hljs-number">38.45509</span>    <span class="hljs-number">8.04901</span>  -<span class="hljs-number">4.778</span>  <span class="hljs-number">0.00139</span> ** <br>x             <span class="hljs-number">0.67461</span>    <span class="hljs-number">0.05191</span>  <span class="hljs-number">12.997</span> <span class="hljs-number">1.16e-06</span> ***<br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>Residual standard error: <span class="hljs-number">3.253</span> on <span class="hljs-number">8</span> degrees of freedom<br>Multiple R-squared:  <span class="hljs-number">0.9548</span>,Adjusted R-squared:  <span class="hljs-number">0.9491</span> <br><span class="hljs-built_in">F</span>-statistic: <span class="hljs-number">168.9</span> on <span class="hljs-number">1</span> and <span class="hljs-number">8</span> DF,  p-value: <span class="hljs-number">1.164e-06</span><br></code></pre></td></tr></table></figure></p><h2 id="predict-函数"><a href="#predict-函数" class="headerlink" title="predict() 函数"></a>predict() 函数</h2><p><strong>语法</strong></p><p>线性回归中的 <code>predict()</code> 的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">predict(object, newdata)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>object</code> 是已使用 <code>lm()</code> 函数创建的公式。</li><li><code>newdata</code> 是包含预测变量的新值的向量。</li></ul><p><strong>预测新人的体重</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># The predictor vector.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br><br><span class="hljs-comment"># The resposne vector.</span><br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-comment"># Apply the lm() function.</span><br>relation &lt;- lm(y ~ x)<br><br><span class="hljs-comment"># Find weight of a person with height 170.</span><br>a &lt;- data.frame(x = <span class="hljs-number">170</span>)<br>result &lt;- predict(relation, a)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>       <span class="hljs-number">1</span> <br>76.22869 <br></code></pre></td></tr></table></figure></p><p><strong>以图形方式可视化回归</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the predictor and response variable.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br>relation &lt;- lm(y ~ x)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;linear_regression.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>plot(y, x, col = <span class="hljs-string">&quot;blue&quot;</span>, main = <span class="hljs-string">&quot;Height &amp; Weight Regression&quot;</span>, abline(lm(x ~ y)), cex = <span class="hljs-number">1.3</span>, pch = <span class="hljs-number">16</span>, xlab = <span class="hljs-string">&quot;Weight in Kg&quot;</span>, ylab = <span class="hljs-string">&quot;Height in cm&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/linear_regression.png" alt></p><h1 id="多元回归"><a href="#多元回归" class="headerlink" title="多元回归"></a>多元回归</h1><p>多元回归是线性回归到两个以上变量之间的关系的延伸。在简单线性关系中，我们有一个预测变量和一个响应变量，但在多元回归中，我们有多个预测变量和一个响应变量。</p><p>多元回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">y = a + b1x1 + b2x2 + ... + bnxn<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y</code> 是响应变量。</li><li><code>a, b1, b2, ..., bn</code> 是系数。</li><li><code>x1, x2, ..., xn</code> 是预测变量。</li></ul><p>我们使用 R 语言中的 <code>lm()</code> 函数创建回归模型。模型使用输入数据确定系数的值。接下来，我们可以使用这些系数来预测给定的一组预测变量的响应变量的值。</p><p><code>lm()</code> 函数函数创建预测变量和响应变量之间的关系模型。</p><p><strong>语法</strong></p><p><code>lm()</code> 函数在多元回归中的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">lm(y ~ x1 + x2 + x3 + ..., data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y ~ x1 + x2 + x3...</code> 是表示响应变量和预测变量之间的关系的符号。</li><li><code>data</code> 是应用公式的向量。</li></ul><p><strong>实例</strong></p><p><strong>输入数据</strong></p><p>考虑在R 语言环境中可用的数据集 <code>mtcars</code> 。它给出了每加仑里程 <code>mpg</code>，气缸排量 <code>disp</code>，马力 <code>hp</code>，汽车重量 <code>wt</code> 和一些其他参数的不同汽车模型之间的比较。</p><p>模型的目标是建立 <code>mpg</code> 作为响应变量与 <code>disp</code>，<code>hp</code> 和 <code>wt</code> 作为预测变量之间的关系。为此，我们从 <code>mtcars</code> 数据集中创建这些变量的子集。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;disp&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                   mpg disp  hp    wt<br>Mazda RX4         <span class="hljs-number">21.0</span>  <span class="hljs-number">160</span> <span class="hljs-number">110</span> <span class="hljs-number">2.620</span><br>Mazda RX4 Wag     <span class="hljs-number">21.0</span>  <span class="hljs-number">160</span> <span class="hljs-number">110</span> <span class="hljs-number">2.875</span><br>Datsun <span class="hljs-number">710</span>        <span class="hljs-number">22.8</span>  <span class="hljs-number">108</span>  <span class="hljs-number">93</span> <span class="hljs-number">2.320</span><br>Hornet <span class="hljs-number">4</span> Drive    <span class="hljs-number">21.4</span>  <span class="hljs-number">258</span> <span class="hljs-number">110</span> <span class="hljs-number">3.215</span><br>Hornet Sportabout <span class="hljs-number">18.7</span>  <span class="hljs-number">360</span> <span class="hljs-number">175</span> <span class="hljs-number">3.440</span><br>Valiant           <span class="hljs-number">18.1</span>  <span class="hljs-number">225</span> <span class="hljs-number">105</span> <span class="hljs-number">3.460</span><br></code></pre></td></tr></table></figure></p><p><strong>创建关系模型并获取系数</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;disp&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br><br><span class="hljs-comment"># Create the relationship model.</span><br>model &lt;- lm(mpg ~ disp + hp + wt, data = input)<br><br><span class="hljs-comment"># Show the model.</span><br>print(model)<br><br><span class="hljs-comment"># Get the Intercept and coefficients as vector elements.</span><br>cat(<span class="hljs-string">&quot;# # # # The Coefficient Values # # # #&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>a &lt;- coef(model)[<span class="hljs-number">1</span>]<br>print(a)<br><br>Xdisp &lt;- coef(model)[<span class="hljs-number">2</span>]<br>Xhp &lt;- coef(model)[<span class="hljs-number">3</span>]<br>Xwt &lt;- coef(model)[<span class="hljs-number">4</span>]<br><br>print(Xdisp)<br>print(Xhp)<br>print(Xwt)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>lm(formula = mpg ~ disp + hp + wt, data = input)<br><br>Coefficients:<br>(Intercept)         disp           hp           wt  <br>  <span class="hljs-number">37.105505</span>    -<span class="hljs-number">0.000937</span>    -<span class="hljs-number">0.031157</span>    -<span class="hljs-number">3.800891</span> <br><br><span class="hljs-comment"># # # # The Coefficient Values # # # #</span><br>(Intercept) <br>   <span class="hljs-number">37.10551</span> <br><br>         disp <br>-<span class="hljs-number">0.0009370091</span><br>         hp <br>-<span class="hljs-number">0.03115655</span> <br>       wt <br>-<span class="hljs-number">3.800891</span> <br></code></pre></td></tr></table></figure></p><p><strong>创建回归模型的方程</strong></p><p>基于上述截距和系数值，我们创建了数学方程。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">Y = a + Xdisp*x1 + Xhp*x2 + Xwt*x3<br>or<br>Y = <span class="hljs-number">37.105505</span> + (-<span class="hljs-number">0.000937</span>)*x1 + (-<span class="hljs-number">0.031157</span>)*x2 + (-<span class="hljs-number">3.800891</span>)*x3<br></code></pre></td></tr></table></figure></p><p><strong>应用方程预测新值</strong></p><p>当提供一组新的位移，马力和重量值时，我们可以使用上面创建的回归方程来预测里程数。对于 <code>disp = 221</code>，<code>hp = 102</code> 和 <code>wt = 2.91</code> 的汽车，预测里程为：</p><p><code>Y = 37.105505 + (-0.000937)*221 + (-0.031157)*102 + (-3.800891)*2.91 = 22.65982</code></p><p><strong>使用 <code>predict()</code> 函数预测</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">x = data.frame(disp = <span class="hljs-number">221</span>, hp = <span class="hljs-number">102</span>, wt = <span class="hljs-number">2.91</span>)<br>result = predict(model, x)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>       <span class="hljs-number">1</span> <br>22.65987<br></code></pre></td></tr></table></figure></p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归是回归模型，其中响应变量（因变量）具有诸如 <code>True/False</code> 或 <code>0/1</code> 的分类值。它实际上基于将其与预测变量相关的数学方程测量二元响应的概率作为响应变量的值。</p><p>逻辑回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">y = <span class="hljs-number">1</span>/(<span class="hljs-number">1</span> + e^-(a + b1x1 + b2x2 + b3x3 + ...))<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y</code> 是响应变量。</li><li><code>x</code> 是预测变量。</li><li><code>a</code> 和 <code>b</code> 是作为数字常数的系数。</li></ul><p>用于创建回归模型的函数是 <code>glm()</code> 函数。</p><p><strong>语法</strong></p><p>逻辑回归中 <code>glm()</code> 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">glm(formula, data, family)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是表示变量之间的关系的符号。</li><li><code>data</code> 是给出这些变量的值的数据集。</li><li><code>family</code> 是 R 语言对象来指定模型的细节。它的值是二项逻辑回归。</li></ul><p><strong>实例</strong></p><p>内置数据集 <code>mtcars</code> 描述具有各种发动机规格的、不同型号的汽车。在 <code>mtcars</code> 数据集中，传输模式（自动或手动）由 <code>am</code> 列描述，它是一个二进制值 <code>0</code> 或 <code>1</code>。我们可以在列 <code>am</code> 和其他 3 列（<code>hp</code>，<code>wt</code> 和 <code>cyl</code>）之间创建逻辑回归模型。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Select some columns form mtcars.</span><br>input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;cyl&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br><br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                  am   cyl  hp    wt<br>Mazda RX4          <span class="hljs-number">1</span>   <span class="hljs-number">6</span>    <span class="hljs-number">110</span>   <span class="hljs-number">2.620</span><br>Mazda RX4 Wag      <span class="hljs-number">1</span>   <span class="hljs-number">6</span>    <span class="hljs-number">110</span>   <span class="hljs-number">2.875</span><br>Datsun <span class="hljs-number">710</span>         <span class="hljs-number">1</span>   <span class="hljs-number">4</span>     <span class="hljs-number">93</span>   <span class="hljs-number">2.320</span><br>Hornet <span class="hljs-number">4</span> Drive     <span class="hljs-number">0</span>   <span class="hljs-number">6</span>    <span class="hljs-number">110</span>   <span class="hljs-number">3.215</span><br>Hornet Sportabout  <span class="hljs-number">0</span>   <span class="hljs-number">8</span>    <span class="hljs-number">175</span>   <span class="hljs-number">3.440</span><br>Valiant            <span class="hljs-number">0</span>   <span class="hljs-number">6</span>    <span class="hljs-number">105</span>   <span class="hljs-number">3.460</span><br></code></pre></td></tr></table></figure></p><p><strong>创建回归模型</strong></p><p>我们使用 <code>glm()</code> 函数创建回归模型，并得到其摘要进行分析。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;cyl&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br><br>am.data = glm(formula = am ~ cyl + hp + wt, data = input, family = binomial)<br><br>print(summary(am.data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>glm(formula = am ~ cyl + hp + wt, family = binomial, data = input)<br><br>Deviance Residuals: <br>     Min        <span class="hljs-number">1</span>Q    Median        <span class="hljs-number">3</span>Q       Max  <br>-<span class="hljs-number">2.17272</span>  -<span class="hljs-number">0.14907</span>  -<span class="hljs-number">0.01464</span>   <span class="hljs-number">0.14116</span>   <span class="hljs-number">1.27641</span>  <br><br>Coefficients:<br>            Estimate Std. Error z value Pr(&gt;|z|)  <br>(Intercept) <span class="hljs-number">19.70288</span>    <span class="hljs-number">8.11637</span>   <span class="hljs-number">2.428</span>   <span class="hljs-number">0.0152</span> *<br>cyl          <span class="hljs-number">0.48760</span>    <span class="hljs-number">1.07162</span>   <span class="hljs-number">0.455</span>   <span class="hljs-number">0.6491</span>  <br>hp           <span class="hljs-number">0.03259</span>    <span class="hljs-number">0.01886</span>   <span class="hljs-number">1.728</span>   <span class="hljs-number">0.0840</span> .<br>wt          -<span class="hljs-number">9.14947</span>    <span class="hljs-number">4.15332</span>  -<span class="hljs-number">2.203</span>   <span class="hljs-number">0.0276</span> *<br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>(Dispersion parameter <span class="hljs-keyword">for</span> binomial family taken to be <span class="hljs-number">1</span>)<br><br>    Null deviance: <span class="hljs-number">43.2297</span>  on <span class="hljs-number">31</span>  degrees of freedom<br>Residual deviance:  <span class="hljs-number">9.8415</span>  on <span class="hljs-number">28</span>  degrees of freedom<br>AIC: <span class="hljs-number">17.841</span><br><br>Number of Fisher Scoring iterations: <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></p><p><strong>结论</strong></p><p>在 <code>summary</code> 中，对于变量 <code>cyl</code> 和 <code>hp</code> ，最后一列中的 <code>P</code> 值大于 <code>0.05</code>，我们认为它们对变量 <code>am</code> 的值有贡献是无关紧要的。只有重量 <code>wt</code> 影响该回归模型中的 <code>am</code> 值。</p><h1 id="标准分布"><a href="#标准分布" class="headerlink" title="标准分布"></a>标准分布</h1><p>在来自独立源的数据的随机集合中，通常观察到数据的分布是正常的。这意味着，在绘制水平轴上的变量值和垂直轴上的值的计数的图形时，我们得到钟形曲线。曲线的中心表示数据集的平均值。在图中，<code>50%</code> 的值位于平均值的左侧，另外 <code>50%</code> 位于图表的右侧。这在统计学中被称为正态分布。</p><p>R 语言有四个内置函数来产生正态分布。它们描述如下：</p><p><strong>语法</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">dnorm(x, mean, sd)<br>pnorm(x, mean, sd)<br>qnorm(p, mean, sd)<br>rnorm(n, mean, sd)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是数字的向量。</li><li><code>P</code> 是概率的向量。</li><li><code>n</code> 是观察的数量（样本大小）。</li><li><code>mean</code> 是样本数据的平均值。它的默认值为 <code>0</code>。</li><li><code>sd</code> 是标准偏差。它的默认值为 <code>1</code>。</li></ul><h2 id="dnorm"><a href="#dnorm" class="headerlink" title="dnorm()"></a>dnorm()</h2><p>该函数给出给定平均值和标准偏差在每个点的概率分布的高度。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of numbers between -10 and 10 incrementing by 0.1.</span><br>x &lt;- seq(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, by = <span class="hljs-number">.1</span>)<br><br><span class="hljs-comment"># Choose the mean as 2.5 and standard deviation as 0.5.</span><br>y &lt;- dnorm(x, mean = <span class="hljs-number">2.5</span>, sd = <span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;dnorm.png&quot;</span>)<br><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/dnorm.png" alt></p><h2 id="pnorm"><a href="#pnorm" class="headerlink" title="pnorm()"></a>pnorm()</h2><p>该函数给出正态分布随机数的概率小于给定数的值。它也被称为“累积分布函数”。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of numbers between -10 and 10 incrementing by 0.2.</span><br>x &lt;- seq(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, by = <span class="hljs-number">.2</span>)<br> <br><span class="hljs-comment"># Choose the mean as 2.5 and standard deviation as 2. </span><br>y &lt;- pnorm(x, mean = <span class="hljs-number">2.5</span>, sd = <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pnorm.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph.</span><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/pnorm.png" alt></p><h2 id="qnorm"><a href="#qnorm" class="headerlink" title="qnorm()"></a>qnorm()</h2><p>该函数采用概率值，并给出累积值与概率值匹配的数字。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of probability values incrementing by 0.02.</span><br>x &lt;- seq(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, by = <span class="hljs-number">0.02</span>)<br><br><span class="hljs-comment"># Choose the mean as 2 and standard deviation as 3.</span><br>y &lt;- qnorm(x, mean = <span class="hljs-number">2</span>, sd = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;qnorm.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph.</span><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/qnorm.png" alt></p><h2 id="rnorm"><a href="#rnorm" class="headerlink" title="rnorm()"></a>rnorm()</h2><p>此函数用于生成分布正常的随机数。它将样本大小作为输入，并生成许多随机数。我们绘制一个直方图来显示生成的数字的分布。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sample of 50 numbers which are normally distributed.</span><br>y &lt;- rnorm(<span class="hljs-number">50</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;rnorm.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the histogram for this sample.</span><br>hist(y, main = <span class="hljs-string">&quot;Normal DIstribution&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/rnorm.png" alt></p><h1 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h1><p>二项分布模型处理在一系列实验中仅发现两个可能结果的事件的成功概率。例如，掷硬币总是给出正或反。在二项分布期间估计在 <code>10</code> 次重复抛掷硬币中精确找到 <code>3</code> 个正的概率。</p><p>R 语言有四个内置函数来生成二项分布。它们描述如下：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">dbinom(x, size, prob)<br>pbinom(x, size, prob)<br>qbinom(p, size, prob)<br>rbinom(n, size, prob)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是数字的向量。</li><li><code>P</code> 是概率向量。</li><li><code>n</code> 是观察的数量。</li><li><code>size</code> 是试验的数量。</li><li><code>prob</code> 是每个试验成功的概率。</li></ul><h2 id="dbinom"><a href="#dbinom" class="headerlink" title="dbinom()"></a>dbinom()</h2><p>该函数给出每个点的概率密度分布。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sample of 50 numbers which are incremented by 1.</span><br>x &lt;- seq(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>, by = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Create the binomial distribution.</span><br>y &lt;- dbinom(x, <span class="hljs-number">50</span>, <span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;dbinom.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph for this sample.</span><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/dbinom.png" alt></p><h2 id="pbinom"><a href="#pbinom" class="headerlink" title="pbinom()"></a>pbinom()</h2><p>此函数给出事件的累积概率。它是表示概率的单个值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Probability of getting 26 or less heads from a 51 tosses of a coin.</span><br>x &lt;- pbinom(<span class="hljs-number">26</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.5</span>)<br>print(x)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0.610116</span><br></code></pre></td></tr></table></figure></p><h2 id="qbinom"><a href="#qbinom" class="headerlink" title="qbinom()"></a>qbinom()</h2><p>该函数采用概率值，并给出累积值与概率值匹配的数字。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># How many heads will have a probability of 0.25 will come out when a coin is tossed 51 times.</span><br>x &lt;- qbinom(<span class="hljs-number">0.25</span>, <span class="hljs-number">51</span>, <span class="hljs-number">1</span>/<span class="hljs-number">2</span>)<br>print(x)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">23</span><br></code></pre></td></tr></table></figure></p><h2 id="rbinom"><a href="#rbinom" class="headerlink" title="rbinom()"></a>rbinom()</h2><p>该函数从给定样本产生给定概率的所需数量的随机值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Find 8 random values from a sample of 150 with probability of 0.4.</span><br>x &lt;- rbinom(<span class="hljs-number">8</span>, <span class="hljs-number">150</span>, <span class="hljs-number">.4</span>)<br>print(x)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">63</span> <span class="hljs-number">62</span> <span class="hljs-number">64</span> <span class="hljs-number">54</span> <span class="hljs-number">54</span> <span class="hljs-number">47</span> <span class="hljs-number">57</span> <span class="hljs-number">59</span><br></code></pre></td></tr></table></figure></p><h1 id="泊松回归"><a href="#泊松回归" class="headerlink" title="泊松回归"></a>泊松回归</h1><p>泊松回归（Poisson regression）是用来为计数资料和列联表建模的一种回归分析，其中响应变量是计数而不是分数的形式。</p><p>例如，在一个足球系列赛中出线或获胜的次数。此外，响应变量的值遵循泊松分布。</p><p>泊松回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">log</span>(y) = a + b1x1 + b2x2 + bnxn ...<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code>​ 是预测变量。</li><li><code>y</code> ​是响应变量。</li><li>​<code>a</code> ​和 ​<code>b</code> ​是数字系数。</li></ul><p>用于创建泊松回归模型的函数是​ <code>glm()​</code> 函数。</p><p><strong>语法</strong></p><p>在泊松回归中 ​<code>glm()</code>​ 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">glm(formula, data, family)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> ​是表示变量之间的关系的符号。</li><li><code>​data​</code> 是给出这些变量的值的数据集。</li><li><code>​family​</code> 是 R 语言对象来指定模型的细节。它的值是“泊松”的逻辑回归。</li></ul><p><strong>实例</strong></p><p>我们有内置的数据集 <code>​warpbreaks</code>，其描述了羊毛类型 <code>wool</code>（​A​ 或 ​B​）和张力 <code>tension</code>（低，中或高）对每个织机的经纱断裂数量 <code>breaks</code> 的影响。让我们考虑“断裂”作为响应变量，它是断裂次数的计数。羊毛“类型”和“张力”作为预测变量。</p><p><strong>输入数据</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- warpbreaks<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  breaks wool tension<br>1     <span class="hljs-number">26</span>    A       L<br>2     <span class="hljs-number">30</span>    A       L<br>3     <span class="hljs-number">54</span>    A       L<br>4     <span class="hljs-number">25</span>    A       L<br>5     <span class="hljs-number">70</span>    A       L<br>6     <span class="hljs-number">52</span>    A       L<br></code></pre></td></tr></table></figure></p><p><strong>创建回归模型</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs r">output &lt;-glm(formula = breaks ~ wool + tension, data = warpbreaks, family = poisson)<br>print(summary(output))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>glm(formula = breaks ~ wool + tension, family = poisson, data = warpbreaks)<br><br>Deviance Residuals: <br>    Min       <span class="hljs-number">1</span>Q   Median       <span class="hljs-number">3</span>Q      Max  <br>-<span class="hljs-number">3.6871</span>  -<span class="hljs-number">1.6503</span>  -<span class="hljs-number">0.4269</span>   <span class="hljs-number">1.1902</span>   <span class="hljs-number">4.2616</span>  <br><br>Coefficients:<br>            Estimate Std. Error z value Pr(&gt;|z|)    <br>(Intercept)  <span class="hljs-number">3.69196</span>    <span class="hljs-number">0.04541</span>  <span class="hljs-number">81.302</span>  &lt; <span class="hljs-number">2e-16</span> ***<br>woolB       -<span class="hljs-number">0.20599</span>    <span class="hljs-number">0.05157</span>  -<span class="hljs-number">3.994</span> <span class="hljs-number">6.49e-05</span> ***<br>tensionM    -<span class="hljs-number">0.32132</span>    <span class="hljs-number">0.06027</span>  -<span class="hljs-number">5.332</span> <span class="hljs-number">9.73e-08</span> ***<br>tensionH    -<span class="hljs-number">0.51849</span>    <span class="hljs-number">0.06396</span>  -<span class="hljs-number">8.107</span> <span class="hljs-number">5.21e-16</span> ***<br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>(Dispersion parameter <span class="hljs-keyword">for</span> poisson family taken to be <span class="hljs-number">1</span>)<br><br>    Null deviance: <span class="hljs-number">297.37</span>  on <span class="hljs-number">53</span>  degrees of freedom<br>Residual deviance: <span class="hljs-number">210.39</span>  on <span class="hljs-number">50</span>  degrees of freedom<br>AIC: <span class="hljs-number">493.06</span><br><br>Number of Fisher Scoring iterations: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></p><p>在 <code>summary</code> 中，我们查找最后一列中的 <code>​p</code> ​值小于​ <code>0.05</code>​，以考虑预测变量对响应变量的影响。如图所示，具有张力类型 <code>​M</code> ​和​ <code>H</code>​ 的羊毛类型 ​<code>B</code> ​对断裂计数有影响。</p><h1 id="协方差分析"><a href="#协方差分析" class="headerlink" title="协方差分析"></a>协方差分析</h1><p>我们使用回归分析创建模型，描述变量在预测变量对响应变量的影响。有时，如果我们有一个类别变量，如 <code>Yes/No</code> 或 <code>Male/Female</code> 等。简单的回归分析为分类变量的每个值提供多个结果。在这种情况下，我们可以通过将分类变量与预测变量一起使用并比较分类变量的每个级别的回归线来研究分类变量的效果。这样的分析被称为协方差分析，也称为 ANCOVA。</p><p><strong>实例</strong></p><p>考虑在 R 语言中内置的数据集 <code>mtcars</code> 。在其中我们观察到字段 <code>am</code> 表示传输的类型（自动或手动）。它是值为 <code>0/1</code> 的分类变量。汽车的每加仑英里数 <code>mpg</code> 也可以取决于马力 <code>hp</code> 的值。</p><p>我们研究 <code>am</code> 的值对 <code>mpg</code> 和 <code>hp</code> 之间回归的影响。它是通过使用 <code>aov()</code> 函数，然后使用 <code>anova()</code> 函数来比较多个回归来完成的。</p><p><strong>输入数据</strong></p><p>从数据集 <code>mtcars</code> 创建一个包含字段 <code>mpg</code>，<code>hp</code> 和 <code>am</code> 的数据框。这里我们取 <code>mpg</code> 作为响应变量，<code>hp</code> 作为预测变量，<code>am</code> 作为分类变量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                  am  mpg  hp<br>Mazda RX4          <span class="hljs-number">1</span> <span class="hljs-number">21.0</span> <span class="hljs-number">110</span><br>Mazda RX4 Wag      <span class="hljs-number">1</span> <span class="hljs-number">21.0</span> <span class="hljs-number">110</span><br>Datsun <span class="hljs-number">710</span>         <span class="hljs-number">1</span> <span class="hljs-number">22.8</span>  <span class="hljs-number">93</span><br>Hornet <span class="hljs-number">4</span> Drive     <span class="hljs-number">0</span> <span class="hljs-number">21.4</span> <span class="hljs-number">110</span><br>Hornet Sportabout  <span class="hljs-number">0</span> <span class="hljs-number">18.7</span> <span class="hljs-number">175</span><br>Valiant            <span class="hljs-number">0</span> <span class="hljs-number">18.1</span> <span class="hljs-number">105</span><br></code></pre></td></tr></table></figure></p><p><strong>协方差分析</strong></p><p>我们创建一个回归模型，以 <code>hp</code> 作为预测变量，<code>mpg</code> 作为响应变量，考虑 <code>am</code> 和 <code>hp</code> 之间的相互作用。</p><p><strong>模型与分类变量和预测变量之间的相互作用</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the dataset.</span><br>input &lt;- mtcars<br><br><span class="hljs-comment"># Create the regression model.</span><br>result &lt;- aov(mpg ~ hp * am, data = input)<br>print(summary(result))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>            Df Sum Sq Mean Sq <span class="hljs-built_in">F</span> value   Pr(&gt;<span class="hljs-built_in">F</span>)    <br>hp           <span class="hljs-number">1</span>  <span class="hljs-number">678.4</span>   <span class="hljs-number">678.4</span>  <span class="hljs-number">77.391</span> <span class="hljs-number">1.50e-09</span> ***<br>am           <span class="hljs-number">1</span>  <span class="hljs-number">202.2</span>   <span class="hljs-number">202.2</span>  <span class="hljs-number">23.072</span> <span class="hljs-number">4.75e-05</span> ***<br>hp:am        <span class="hljs-number">1</span>    <span class="hljs-number">0.0</span>     <span class="hljs-number">0.0</span>   <span class="hljs-number">0.001</span>    <span class="hljs-number">0.981</span>    <br>Residuals   <span class="hljs-number">28</span>  <span class="hljs-number">245.4</span>     <span class="hljs-number">8.8</span>                     <br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>这个结果表明，马力 <code>hp</code> 和传输类型 <code>am</code> 对每加仑的英里 <code>mpg</code> 有显着的影响，因为两种情况下的 <code>P</code> 值都小于 <code>0.05</code>。但是这两个变量之间的相互作用不显着，因为 <code>hp:am</code> 的 <code>P</code> 值大于 <code>0.05</code>。</p><p><strong>没有分类变量和预测变量之间相互作用的模型</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the dataset.</span><br>input &lt;- mtcars<br><br><span class="hljs-comment"># Create the regression model.</span><br>result &lt;- aov(mpg ~ hp + am, data = input)<br>print(summary(result))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>            Df Sum Sq Mean Sq <span class="hljs-built_in">F</span> value   Pr(&gt;<span class="hljs-built_in">F</span>)    <br>hp           <span class="hljs-number">1</span>  <span class="hljs-number">678.4</span>   <span class="hljs-number">678.4</span>   <span class="hljs-number">80.15</span> <span class="hljs-number">7.63e-10</span> ***<br>am           <span class="hljs-number">1</span>  <span class="hljs-number">202.2</span>   <span class="hljs-number">202.2</span>   <span class="hljs-number">23.89</span> <span class="hljs-number">3.46e-05</span> ***<br>Residuals   <span class="hljs-number">29</span>  <span class="hljs-number">245.4</span>     <span class="hljs-number">8.5</span>                     <br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>这个结果表明，马力 <code>hp</code> 和传输类型 <code>am</code> 对每加仑的英里 <code>mpg</code> 有显着的影响，因为两种情况下的 <code>P</code> 值都小于 <code>0.05</code>。</p><p><strong>比较两个模型</strong></p><p>现在我们可以比较两个模型来得出结论，变量的相互作用是否真正重要。为此，我们使用 <code>anova()</code> 函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the dataset.</span><br>input &lt;- mtcars<br><br><span class="hljs-comment"># Create the regression models.</span><br>result1 &lt;- aov(mpg ~ hp * am, data = input)<br>result2 &lt;- aov(mpg ~ hp + am, data = input)<br><br><span class="hljs-comment"># Compare the two models.</span><br>print(anova(result1, result2))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Analysis of Variance Table<br><br>Model <span class="hljs-number">1</span>: mpg ~ hp * am<br>Model <span class="hljs-number">2</span>: mpg ~ hp + am<br>  Res.Df    RSS Df  Sum of Sq     <span class="hljs-built_in">F</span> Pr(&gt;<span class="hljs-built_in">F</span>)<br>1     <span class="hljs-number">28</span> <span class="hljs-number">245.43</span>                           <br>2     <span class="hljs-number">29</span> <span class="hljs-number">245.44</span> -<span class="hljs-number">1</span> -<span class="hljs-number">0.0052515</span> <span class="hljs-number">6e-04</span> <span class="hljs-number">0.9806</span><br></code></pre></td></tr></table></figure></p><p>由于 <code>P</code> 值大于 <code>0.05</code>，我们得出结论，马力 <code>hp</code> 和传播类型 <code>am</code> 之间的相互作用不显着。因此，在汽车和手动变速器模式下，每加仑的里程将以类似的方式取决于汽车的马力。</p><h1 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h1><p>时间序列是将统一统计值按照时间发生的先后顺序来进行排列，时间序列分析的主要目的是根据已有数据对未来进行预测。</p><p>一个稳定的时间序列中常常包含两个部分，那么就是：有规律的时间序列 + 噪声。所以，在以下的方法中，主要的目的就是去过滤噪声值，让我们的时间序列更加的有分析意义。</p><p><strong>语法</strong></p><p>时间序列分析中 <code>ts()</code> 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">timeseries.object.name &lt;- ts(data, start, end, frequency)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>data</code> 是包含在时间序列中使用的值的向量或矩阵。</li><li><code>start</code> 以时间序列指定第一次观察的开始时间。</li><li><code>end</code> 指定时间序列中最后一次观测的结束时间。</li><li><code>frequency</code> 指定每单位时间的观测数。</li></ul><p>除了参数 <code>data</code>，所有其他参数是可选的。</p><p><strong>时间序列的预处理</strong></p><ol><li><p>平稳性检验</p><p> 拿到一个时间序列之后，我们首先要对其稳定性进行判断，只有非白噪声的稳定性时间序列才有分析的意义以及预测未来数据的价值。</p><p> 所谓平稳，是指统计值在一个常数上下波动并且波动范围是有界限的。如果有明显的趋势或者周期性，那么就是不稳定的。一般判断有三种方法：</p><ul><li>画出时间序列的趋势图，看趋势判断</li><li>画自相关图和偏相关图，平稳时间序列的自相关图和偏相关图，要么拖尾，要么截尾。</li><li><p>检验序列中是否存在单位根，如果存在单位根，就是非平稳时间序列。</p><p>在 R 语言中，<code>DF</code> 检测是一种检测稳定性的方法，如果得出的 <code>P</code> 值小于临界值，则认为是数列是稳定的。</p></li></ul></li><li><p>白噪声检验</p><p> 白噪声序列，又称为纯随机性序列，序列的各个值之间没有任何的相关关系，序列在进行无序的随机波动，可以终止对该序列的分析，因为从白噪声序列中是提取不到任何有价值的信息的。</p></li><li><p>平稳时间序列的参数特点</p><p> 均值和方差为常数，并且具有与时间无关的自协方差。</p></li></ol><p><strong>时间序列建模步骤</strong></p><ol><li><p>拿到被分析的时间序列数据集。</p></li><li><p>对数据绘图，观测其平稳性。若为非平稳时间序列要先进行 <code>d</code> 阶差分运算后化为平稳时间序列，此处的 <code>d</code> 即为 <code>ARIMA(p,d,q)</code> 模型中的 <code>d</code>；若为平稳序列，则用 <code>ARMA(p,q)</code> 模型。所以 <code>ARIMA(p,d,q)</code> 模型区别于 <code>ARMA(p,q)</code> 之处就在于前者的自回归部分的特征多项式含有 <code>d</code> 个单位根。</p></li><li><p>对得到的平稳时间序列分别求得其自相关系数 <code>ACF</code> 和偏自相关系数 <code>PACF</code>，通过对自相关图和偏自相关图的分析，得到最佳的阶层 <code>p</code> 和阶数 <code>q</code>。由以上得到的 <code>d</code>、<code>q</code>、<code>p</code>，得到 <code>ARIMA</code> 模型。</p></li><li><p>模型诊断。进行诊断分析，以证实所得模型确实与所观察到的数据特征相符。若不相符，重新回到第 3 步。</p></li></ol><p><strong>实例</strong></p><p>考虑从 2012 年 1 月开始的一个地方的年降雨量细节。我们创建一个 R 时间序列对象为期 12 个月并绘制它。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the data points in form of a R vector.</span><br>rainfall &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">799</span>, <span class="hljs-number">1174.8</span>, <span class="hljs-number">865.1</span>, <span class="hljs-number">1334.6</span>, <span class="hljs-number">635.4</span>, <span class="hljs-number">918.5</span>, <span class="hljs-number">685.5</span>, <span class="hljs-number">998.6</span>, <span class="hljs-number">784.2</span>, <span class="hljs-number">985</span>, <span class="hljs-number">882.8</span>, <span class="hljs-number">1071</span>)<br><br><span class="hljs-comment"># Convert it to a time series object.</span><br>rainfall.timeseries &lt;- ts(rainfall, start = <span class="hljs-built_in">c</span>(<span class="hljs-number">2012</span>, <span class="hljs-number">1</span>), frequency = <span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># Print the timeseries data.</span><br>print(rainfall.timeseries)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;rainfall.png&quot;</span>)<br><br><span class="hljs-comment"># Plot a graph of the time series.</span><br>plot(rainfall.timeseries)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>        Jan    Feb    Mar    Apr    May    Jun    Jul    Aug    Sep    Oct    Nov    Dec<br>2012  <span class="hljs-number">799.0</span> <span class="hljs-number">1174.8</span>  <span class="hljs-number">865.1</span> <span class="hljs-number">1334.6</span>  <span class="hljs-number">635.4</span>  <span class="hljs-number">918.5</span>  <span class="hljs-number">685.5</span>  <span class="hljs-number">998.6</span>  <span class="hljs-number">784.2</span>  <span class="hljs-number">985.0</span>  <span class="hljs-number">882.8</span> <span class="hljs-number">1071.0</span><br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/rainfall.png" alt></p><p><strong>不同的时间间隔</strong></p><p><code>ts()</code> 函数中的频率参数值决定了测量数据点的时间间隔。值为 12 表示时间序列为 12 个月。其他值及其含义如下：</p><ul><li><code>frequency = 12</code>：指定一年中每个月的数据点。</li><li><code>frequency = 4</code>：每年的每个季度的数据点。</li><li><code>frequency = 6</code>：每小时的 10 分钟的数据点。</li><li><code>frequency = 24 * 6</code>：将一天的每 10 分钟的数据点固定。</li></ul><p><strong>多时间序列</strong></p><p>我们可以通过将两个系列组合成一个矩阵，在一个图表中绘制多个时间序列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the data points in form of a R vector.</span><br>rainfall1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">799</span>, <span class="hljs-number">1174.8</span>, <span class="hljs-number">865.1</span>, <span class="hljs-number">1334.6</span>, <span class="hljs-number">635.4</span>, <span class="hljs-number">918.5</span>, <span class="hljs-number">685.5</span>, <span class="hljs-number">998.6</span>, <span class="hljs-number">784.2</span>, <span class="hljs-number">985</span>, <span class="hljs-number">882.8</span>, <span class="hljs-number">1071</span>)<br>rainfall2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">655</span>, <span class="hljs-number">1306.9</span>, <span class="hljs-number">1323.4</span>, <span class="hljs-number">1172.2</span>, <span class="hljs-number">562.2</span>, <span class="hljs-number">824</span>, <span class="hljs-number">822.4</span>, <span class="hljs-number">1265.5</span>, <span class="hljs-number">799.6</span>, <span class="hljs-number">1105.6</span>, <span class="hljs-number">1106.7</span>, <span class="hljs-number">1337.8</span>)<br><br><span class="hljs-comment"># Convert them to a matrix.</span><br>combined.rainfall &lt;- matrix(<span class="hljs-built_in">c</span>(rainfall1, rainfall2), nrow = <span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># Convert it to a time series object.</span><br>rainfall.timeseries &lt;- ts(combined.rainfall, start = <span class="hljs-built_in">c</span>(<span class="hljs-number">2012</span>, <span class="hljs-number">1</span>), frequency = <span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># Print the timeseries data.</span><br>print(rainfall.timeseries)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;rainfall_combined.png&quot;</span>)<br><br><span class="hljs-comment"># Plot a graph of the time series.</span><br>plot(rainfall.timeseries, main = <span class="hljs-string">&quot;Multiple Time Series&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>         Series <span class="hljs-number">1</span> Series <span class="hljs-number">2</span><br>Jan <span class="hljs-number">2012</span>    <span class="hljs-number">799.0</span>    <span class="hljs-number">655.0</span><br>Feb <span class="hljs-number">2012</span>   <span class="hljs-number">1174.8</span>   <span class="hljs-number">1306.9</span><br>Mar <span class="hljs-number">2012</span>    <span class="hljs-number">865.1</span>   <span class="hljs-number">1323.4</span><br>Apr <span class="hljs-number">2012</span>   <span class="hljs-number">1334.6</span>   <span class="hljs-number">1172.2</span><br>May <span class="hljs-number">2012</span>    <span class="hljs-number">635.4</span>    <span class="hljs-number">562.2</span><br>Jun <span class="hljs-number">2012</span>    <span class="hljs-number">918.5</span>    <span class="hljs-number">824.0</span><br>Jul <span class="hljs-number">2012</span>    <span class="hljs-number">685.5</span>    <span class="hljs-number">822.4</span><br>Aug <span class="hljs-number">2012</span>    <span class="hljs-number">998.6</span>   <span class="hljs-number">1265.5</span><br>Sep <span class="hljs-number">2012</span>    <span class="hljs-number">784.2</span>    <span class="hljs-number">799.6</span><br>Oct <span class="hljs-number">2012</span>    <span class="hljs-number">985.0</span>   <span class="hljs-number">1105.6</span><br>Nov <span class="hljs-number">2012</span>    <span class="hljs-number">882.8</span>   <span class="hljs-number">1106.7</span><br>Dec <span class="hljs-number">2012</span>   <span class="hljs-number">1071.0</span>   <span class="hljs-number">1337.8</span><br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/rainfall_combined.png" alt></p><h1 id="非线性最小二乘"><a href="#非线性最小二乘" class="headerlink" title="非线性最小二乘"></a>非线性最小二乘</h1><p>当模拟真实世界数据用于回归分析时，我们观察到，很少情况下，模型的方程是给出线性图的线性方程。大多数时候，真实世界数据模型的方程涉及更高程度的数学函数，如 <code>3</code> 的指数或 <code>sin</code> 函数。在这种情况下，模型的图给出了曲线而不是线。线性和非线性回归的目的是调整模型参数的值，以找到最接近您的数据的线或曲线。在找到这些值时，我们将能够以良好的精确度估计响应变量。</p><p>在最小二乘回归中，我们建立了一个回归模型，其中来自回归曲线的不同点的垂直距离的平方和被最小化。我们通常从定义的模型开始，并假设系数的一些值。然后我们应用 R 语言的 <code>nls()</code> 函数获得更准确的值以及置信区间。</p><p><strong>语法</strong></p><p>在 R 语言中创建非线性最小二乘测试的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">nls(formula, data, start)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是包括变量和参数的非线性模型公式。</li><li><code>data</code> 是用于计算公式中变量的数据框。</li><li><code>start</code> 是起始估计的命名列表或命名数字向量。</li></ul><p><strong>实例</strong></p><p>我们将考虑一个假设其系数的初始值的非线性模型。接下来，我们将看到这些假设值的置信区间是什么，以便我们可以判断这些值在模型中有多好。</p><p>所以让我们考虑以下的方程 <code>a = b1*x^2 + b2</code>。</p><p>让我们假设初始系数为 <code>b1 = 1</code> 和 <code>b2 = 3</code>，并将这些值拟合到 <code>nls()</code> 函数中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">1.6</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2.23</span>, <span class="hljs-number">3.71</span>, <span class="hljs-number">3.25</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">3.86</span>, <span class="hljs-number">1.19</span>, <span class="hljs-number">2.21</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5.19</span>, <span class="hljs-number">7.43</span>, <span class="hljs-number">6.94</span>, <span class="hljs-number">8.11</span>, <span class="hljs-number">18.75</span>, <span class="hljs-number">14.88</span>, <span class="hljs-number">16.06</span>, <span class="hljs-number">19.12</span>, <span class="hljs-number">3.21</span>, <span class="hljs-number">7.58</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;nls.png&quot;</span>)<br><br><span class="hljs-comment"># Plot these values.</span><br>plot(x, y)<br><br><br><span class="hljs-comment"># Take the assumed values and fit into the model.</span><br>model &lt;- nls(y ~ b1*x^<span class="hljs-number">2</span> + b2, start = <span class="hljs-built_in">list</span>(b1 = <span class="hljs-number">1</span>, b2 = <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># Plot the chart with new data by fitting it to a prediction from 100 data points.</span><br>new.data &lt;- data.frame(x = seq(<span class="hljs-built_in">min</span>(x), <span class="hljs-built_in">max</span>(x), len = <span class="hljs-number">100</span>))<br>lines(new.data$x, predict(model, newdata = new.data))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># Get the sum of the squared residuals.</span><br>print(<span class="hljs-built_in">sum</span>(resid(model)^<span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># Get the confidence intervals on the chosen values of the coefficients.</span><br>print(confint(model))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1.081935</span><br><br>Waiting <span class="hljs-keyword">for</span> profiling to be done...<br>       <span class="hljs-number">2.5</span>%    97.5%<br>b1 <span class="hljs-number">1.137708</span> <span class="hljs-number">1.253135</span><br>b2 <span class="hljs-number">1.497364</span> <span class="hljs-number">2.496484</span><br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/nls.png" alt></p><p>我们可以得出结论，<code>b1</code> 的值更接近 <code>1</code>，而 <code>b2</code> 的值更接近 <code>2</code> 而不是 <code>3</code>。</p><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>决策树是以树的形式表示选择及其结果的图。图中的节点表示事件或选择，并且图的边缘表示决策规则或条件。它主要用于使用R的机器学习和数据挖掘应用程序。</p><p>决策树的使用的例子是：预测电子邮件是垃圾邮件或非垃圾邮件，预测肿瘤癌变，或者基于这些因素预测贷款的信用风险。通常，使用观测数据（也称为训练数据）来创建模型。然后使用一组验证数据来验证和改进模型。R 具有用于创建和可视化决策树的包。对于新的预测变量集合，我们使用此模型来确定 R 包 <code>party</code> 用于创建决策树。</p><p><strong>安装 R 语言包</strong></p><p>在 R 语言控制台中使用以下命令安装软件包。您还必须安装相关软件包（如果有）。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;party&quot;</span>)<br></code></pre></td></tr></table></figure></p><p><code>party</code> 包具有用于创建和分析决策树的函数 <code>ctree()</code>。</p><p><strong>语法</strong></p><p>在 R 中创建决策树的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">ctree(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是描述预测变量和响应变量的公式。</li><li><code>data</code> 是所使用的数据集的名称。</li></ul><p><strong>输入数据</strong></p><p>我们将使用名为 <code>readingSkills</code> 的 R 内置数据集来创建决策树。它描述了某人的 <code>readingSkills</code> 的分数，如果我们知道变量 <code>年龄</code>， <code>shoesize</code>，<code>分数</code>，以及<code>该人是否为母语者</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other dependent packages.</span><br>library(party)<br><br><span class="hljs-comment"># Print some records from data set readingSkills.</span><br>print(head(readingSkills))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  nativeSpeaker age shoeSize    score<br>1           yes   <span class="hljs-number">5</span> <span class="hljs-number">24.83189</span> <span class="hljs-number">32.29385</span><br>2           yes   <span class="hljs-number">6</span> <span class="hljs-number">25.95238</span> <span class="hljs-number">36.63105</span><br>3            no  <span class="hljs-number">11</span> <span class="hljs-number">30.42170</span> <span class="hljs-number">49.60593</span><br>4           yes   <span class="hljs-number">7</span> <span class="hljs-number">28.66450</span> <span class="hljs-number">40.28456</span><br>5           yes  <span class="hljs-number">11</span> <span class="hljs-number">31.88207</span> <span class="hljs-number">55.46085</span><br>6           yes  <span class="hljs-number">10</span> <span class="hljs-number">30.07843</span> <span class="hljs-number">52.83124</span><br></code></pre></td></tr></table></figure></p><p><strong>实例</strong></p><p>我们将使用 <code>ctree()</code> 函数创建决策树并查看其图形。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other dependent packages.</span><br>library(party)<br><br><span class="hljs-comment"># Create the input data frame.</span><br>input.dat &lt;- readingSkills[<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">105</span>), ]<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;decision_tree.png&quot;</span>)<br><br><span class="hljs-comment"># Create the tree.</span><br>output.tree &lt;- ctree(nativeSpeaker ~ age + shoeSize + score, data = input.dat)<br><br><span class="hljs-comment"># Plot the tree.</span><br>plot(output.tree)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下图表：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/decision_tree.png" alt></p><p><strong>结论</strong></p><p>从上面显示的决策树，我们可以得出结论，其 <code>readingSkills</code> 分数低于 <code>38.3</code> 和年龄超过 <code>6</code> 的人不是一个母语者。</p><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><p>在随机森林方法中，创建大量的决策树。每个观察被馈入每个决策树。每个观察的最常见的结果被用作最终输出。新的观察结果被馈入所有的树并且对每个分类模型取多数投票。</p><p>对构建树时未使用的情况进行错误估计。这称为 <code>OOB（袋外）</code> 误差估计，其被提及为百分比。</p><p>R 语言包 <code>randomForest</code> 用于创建随机森林。</p><p><strong>安装 R 包</strong></p><p>在 R 语言控制台中使用以下命令安装软件包。您还必须安装相关软件包（如果有）。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;randomForest&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>包 <code>randomForest</code> 具有函数 <code>randomForest()</code>，用于创建和分析随机森林。</p><p><strong>语法</strong></p><p>在 R 语言中创建随机森林的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">randomForest(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是描述预测变量和响应变量的公式。</li><li><code>data</code> 是所使用的数据集的名称。</li></ul><p><strong>输入数据</strong></p><p>我们将使用名为 <code>readingSkills</code> 的 R 语言内置数据集来创建决策树。它描述了某人的 <code>readingSkills</code> 的分数，如果我们知道变量 <code>age</code>，<code>shoesize</code>，<code>score</code>，以及<code>该人是否是母语者</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other required packages.</span><br>library(party)<br><br><span class="hljs-comment"># Print some records from data set readingSkills.</span><br>print(head(readingSkills))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  nativeSpeaker age shoeSize    score<br>1           yes   <span class="hljs-number">5</span> <span class="hljs-number">24.83189</span> <span class="hljs-number">32.29385</span><br>2           yes   <span class="hljs-number">6</span> <span class="hljs-number">25.95238</span> <span class="hljs-number">36.63105</span><br>3            no  <span class="hljs-number">11</span> <span class="hljs-number">30.42170</span> <span class="hljs-number">49.60593</span><br>4           yes   <span class="hljs-number">7</span> <span class="hljs-number">28.66450</span> <span class="hljs-number">40.28456</span><br>5           yes  <span class="hljs-number">11</span> <span class="hljs-number">31.88207</span> <span class="hljs-number">55.46085</span><br>6           yes  <span class="hljs-number">10</span> <span class="hljs-number">30.07843</span> <span class="hljs-number">52.83124</span><br></code></pre></td></tr></table></figure></p><p><strong>实例</strong></p><p>我们将使用 <code>randomForest()</code> 函数来创建决策树并查看它的图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other required packages.</span><br>library(party)<br>library(randomForest)<br><br><span class="hljs-comment"># Create the forest.</span><br>output.forest &lt;- randomForest(nativeSpeaker ~ age + shoeSize + score, data = readingSkills)<br><br><span class="hljs-comment"># View the forest results.</span><br>print(output.forest)<br><br><span class="hljs-comment"># Importance of each predictor.</span><br>print(importance(fit, type = <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br> randomForest(formula = nativeSpeaker ~ age + shoeSize + score, data = readingSkills) <br>               Type of random forest: classification<br>                     Number of trees: <span class="hljs-number">500</span><br>No. of variables tried at each split: <span class="hljs-number">1</span><br><br>        OOB estimate of  error rate: <span class="hljs-number">1.5</span>%<br>Confusion matrix:<br>    no yes class.error<br>no  99   1        0.01<br>yes  2  98        0.02<br><br>         MeanDecreaseGini<br>age              13.95406<br>shoeSize         18.91006<br>score            56.73051<br></code></pre></td></tr></table></figure></p><p>结论从上面显示的随机森林，我们可以得出结论，鞋码 <code>shoeSize</code> 和成绩 <code>score</code> 是决定如果某人是母语者或不是母语的重要因素。此外，该模型只有 <code>1%</code> 的误差，这意味着我们可以预测精度为 <code>99%</code>。</p><h1 id="生存分析"><a href="#生存分析" class="headerlink" title="生存分析"></a>生存分析</h1><p>生存分析处理预测特定事件将要发生的时间。它也被称为故障时间分析或分析死亡时间。例如，预测患有癌症的人将存活的天数或预测机械系统将失败的时间。</p><p>命名为 <code>survival</code> 的 R 语言包用于进行生存分析。此包包含函数 <code>Surv()</code>，它将输入数据作为 R 语言公式，并在选择的变量中创建一个生存对象用于分析。然后我们使用函数 <code>survfit()</code> 创建一个分析图。</p><p><strong>安装软件包</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;survival&quot;</span>)<br></code></pre></td></tr></table></figure></p><p><strong>语法</strong></p><p>在 R 语言中创建生存分析的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">Surv(time, event)<br>survfit(formula)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>time</code> 是直到事件发生的跟踪时间。</li><li><code>event</code> 指示预期事件的发生的状态。</li><li><code>formula</code> 是预测变量之间的关系。</li></ul><p><strong>实例</strong></p><p>我们将考虑在上面安装的 <code>survival</code> 包中存在的名为 <code>pbc</code> 的数据集。它描述了关于受肝原发性胆汁性肝硬化 <code>PBC</code> 影响的人的生存数据点。在数据集中存在的许多列中，我们主要关注字段 <code>time</code> 和 <code>status</code>。时间表示在接受肝移植或患者死亡的患者的登记和事件的较早之间的天数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the library.</span><br>library(<span class="hljs-string">&quot;survival&quot;</span>)<br><br><span class="hljs-comment"># Print first few rows.</span><br>print(head(pbc))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id time status trt      age sex ascites hepato spiders edema bili chol albumin copper alk.phos    ast trig platelet protime stage<br>1  <span class="hljs-number">1</span>  <span class="hljs-number">400</span>      <span class="hljs-number">2</span>   <span class="hljs-number">1</span> <span class="hljs-number">58.76523</span>   f       <span class="hljs-number">1</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">1.0</span> <span class="hljs-number">14.5</span>  <span class="hljs-number">261</span>    <span class="hljs-number">2.60</span>    <span class="hljs-number">156</span>   <span class="hljs-number">1718.0</span> <span class="hljs-number">137.95</span>  <span class="hljs-number">172</span>      <span class="hljs-number">190</span>    <span class="hljs-number">12.2</span>     <span class="hljs-number">4</span><br>2  <span class="hljs-number">2</span> <span class="hljs-number">4500</span>      <span class="hljs-number">0</span>   <span class="hljs-number">1</span> <span class="hljs-number">56.44627</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">1.1</span>  <span class="hljs-number">302</span>    <span class="hljs-number">4.14</span>     <span class="hljs-number">54</span>   <span class="hljs-number">7394.8</span> <span class="hljs-number">113.52</span>   <span class="hljs-number">88</span>      <span class="hljs-number">221</span>    <span class="hljs-number">10.6</span>     <span class="hljs-number">3</span><br>3  <span class="hljs-number">3</span> <span class="hljs-number">1012</span>      <span class="hljs-number">2</span>   <span class="hljs-number">1</span> <span class="hljs-number">70.07255</span>   m       <span class="hljs-number">0</span>      <span class="hljs-number">0</span>       <span class="hljs-number">0</span>   <span class="hljs-number">0.5</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">176</span>    <span class="hljs-number">3.48</span>    <span class="hljs-number">210</span>    <span class="hljs-number">516.0</span>  <span class="hljs-number">96.10</span>   <span class="hljs-number">55</span>      <span class="hljs-number">151</span>    <span class="hljs-number">12.0</span>     <span class="hljs-number">4</span><br>4  <span class="hljs-number">4</span> <span class="hljs-number">1925</span>      <span class="hljs-number">2</span>   <span class="hljs-number">1</span> <span class="hljs-number">54.74059</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">0.5</span>  <span class="hljs-number">1.8</span>  <span class="hljs-number">244</span>    <span class="hljs-number">2.54</span>     <span class="hljs-number">64</span>   <span class="hljs-number">6121.8</span>  <span class="hljs-number">60.63</span>   <span class="hljs-number">92</span>      <span class="hljs-number">183</span>    <span class="hljs-number">10.3</span>     <span class="hljs-number">4</span><br>5  <span class="hljs-number">5</span> <span class="hljs-number">1504</span>      <span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">38.10541</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">3.4</span>  <span class="hljs-number">279</span>    <span class="hljs-number">3.53</span>    <span class="hljs-number">143</span>    <span class="hljs-number">671.0</span> <span class="hljs-number">113.15</span>   <span class="hljs-number">72</span>      <span class="hljs-number">136</span>    <span class="hljs-number">10.9</span>     <span class="hljs-number">3</span><br>6  <span class="hljs-number">6</span> <span class="hljs-number">2503</span>      <span class="hljs-number">2</span>   <span class="hljs-number">2</span> <span class="hljs-number">66.25873</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">0.8</span>  <span class="hljs-number">248</span>    <span class="hljs-number">3.98</span>     <span class="hljs-number">50</span>    <span class="hljs-number">944.0</span>  <span class="hljs-number">93.00</span>   <span class="hljs-number">63</span>       <span class="hljs-literal">NA</span>    <span class="hljs-number">11.0</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><p>从上述数据，我们正在考虑分析的时间和状态。</p><p><strong>应用 <code>Surv()</code> 和 <code>survfit()</code> 函数</strong></p><p>现在我们继续应用 <code>Surv()</code> 函数到上面的数据集，并创建一个将显示趋势图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the library.</span><br>library(<span class="hljs-string">&quot;survival&quot;</span>)<br><br><span class="hljs-comment"># Create the survival object. </span><br>survfit(Surv(pbc$time, pbc$status == <span class="hljs-number">2</span>) ~ <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;survival.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph. </span><br>plot(survfit(Surv(pbc$time, pbc$status == <span class="hljs-number">2</span>) ~ <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>Call: survfit(formula = Surv(pbc$time, pbc$status == <span class="hljs-number">2</span>) ~ <span class="hljs-number">1</span>)<br><br>      n  events  median <span class="hljs-number">0.95L</span>CL <span class="hljs-number">0.95</span>UCL <br>    <span class="hljs-number">418</span>     <span class="hljs-number">161</span>    <span class="hljs-number">3395</span>    <span class="hljs-number">3090</span>    <span class="hljs-number">3853</span> <br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/survival.png" alt></p><p>上图中的趋势有助于我们预测在特定天数结束时的生存概率。</p><h1 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a>卡方检验</h1><p>卡方检验是一种确定两个分类变量之间是否存在显着相关性的统计方法。这两个变量应该来自相同的人口，他们应该是类似：<code>是/否</code>，<code>男/女</code>，<code>红/绿</code> 等。</p><p>例如，我们可以建立一个观察人们的冰淇淋购买模式的数据集，并尝试将一个人的性别与他们喜欢的冰淇淋的味道相关联。如果发现相关性，我们可以通过了解访问的人的性别的数量来计划适当的味道库存。</p><p><strong>语法</strong></p><p>用于执行卡方检验的函数是 <code>chisq.test()</code>。</p><p>在 R 语言中创建卡方检验的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">chisq.test(data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>data</code> 是以包含观察中变量的计数值的表的形式的数据。</li></ul><p><strong>实例</strong></p><p>我们将在 <code>MASS</code> 包中获取 <code>Cars93</code> 数据，代表 1993 年不同型号汽车的销售额。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&quot;MASS&quot;</span>)<br>print(str(Cars93))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br><span class="hljs-string">&#x27;data.frame&#x27;</span>:<span class="hljs-number">93</span> obs. of  <span class="hljs-number">27</span> variables:<br> $ Manufacturer      : Factor w/ <span class="hljs-number">32</span> levels <span class="hljs-string">&quot;Acura&quot;</span>,<span class="hljs-string">&quot;Audi&quot;</span>,..: <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> ...<br> $ Model             : Factor w/ <span class="hljs-number">93</span> levels <span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;190E&quot;</span>,<span class="hljs-string">&quot;240&quot;</span>,..: <span class="hljs-number">49</span> <span class="hljs-number">56</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">24</span> <span class="hljs-number">54</span> <span class="hljs-number">74</span> <span class="hljs-number">73</span> <span class="hljs-number">35</span> ...<br> $ Type              : Factor w/ <span class="hljs-number">6</span> levels <span class="hljs-string">&quot;Compact&quot;</span>,<span class="hljs-string">&quot;Large&quot;</span>,..: <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> ...<br> $ Min.Price         : num  <span class="hljs-number">12.9</span> <span class="hljs-number">29.2</span> <span class="hljs-number">25.9</span> <span class="hljs-number">30.8</span> <span class="hljs-number">23.7</span> <span class="hljs-number">14.2</span> <span class="hljs-number">19.9</span> <span class="hljs-number">22.6</span> <span class="hljs-number">26.3</span> <span class="hljs-number">33</span> ...<br> $ Price             : num  <span class="hljs-number">15.9</span> <span class="hljs-number">33.9</span> <span class="hljs-number">29.1</span> <span class="hljs-number">37.7</span> <span class="hljs-number">30</span> <span class="hljs-number">15.7</span> <span class="hljs-number">20.8</span> <span class="hljs-number">23.7</span> <span class="hljs-number">26.3</span> <span class="hljs-number">34.7</span> ...<br> $ Max.Price         : num  <span class="hljs-number">18.8</span> <span class="hljs-number">38.7</span> <span class="hljs-number">32.3</span> <span class="hljs-number">44.6</span> <span class="hljs-number">36.2</span> <span class="hljs-number">17.3</span> <span class="hljs-number">21.7</span> <span class="hljs-number">24.9</span> <span class="hljs-number">26.3</span> <span class="hljs-number">36.3</span> ...<br> $ MPG.city          : int  <span class="hljs-number">25</span> <span class="hljs-number">18</span> <span class="hljs-number">20</span> <span class="hljs-number">19</span> <span class="hljs-number">22</span> <span class="hljs-number">22</span> <span class="hljs-number">19</span> <span class="hljs-number">16</span> <span class="hljs-number">19</span> <span class="hljs-number">16</span> ...<br> $ MPG.highway       : int  <span class="hljs-number">31</span> <span class="hljs-number">25</span> <span class="hljs-number">26</span> <span class="hljs-number">26</span> <span class="hljs-number">30</span> <span class="hljs-number">31</span> <span class="hljs-number">28</span> <span class="hljs-number">25</span> <span class="hljs-number">27</span> <span class="hljs-number">25</span> ...<br> $ AirBags           : Factor w/ <span class="hljs-number">3</span> levels <span class="hljs-string">&quot;Driver &amp; Passenger&quot;</span>,..: <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> ...<br> $ DriveTrain        : Factor w/ <span class="hljs-number">3</span> levels <span class="hljs-string">&quot;4WD&quot;</span>,<span class="hljs-string">&quot;Front&quot;</span>,..: <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> ...<br> $ Cylinders         : Factor w/ <span class="hljs-number">6</span> levels <span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,..: <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> ...<br> $ EngineSize        : num  <span class="hljs-number">1.8</span> <span class="hljs-number">3.2</span> <span class="hljs-number">2.8</span> <span class="hljs-number">2.8</span> <span class="hljs-number">3.5</span> <span class="hljs-number">2.2</span> <span class="hljs-number">3.8</span> <span class="hljs-number">5.7</span> <span class="hljs-number">3.8</span> <span class="hljs-number">4.9</span> ...<br> $ Horsepower        : int  <span class="hljs-number">140</span> <span class="hljs-number">200</span> <span class="hljs-number">172</span> <span class="hljs-number">172</span> <span class="hljs-number">208</span> <span class="hljs-number">110</span> <span class="hljs-number">170</span> <span class="hljs-number">180</span> <span class="hljs-number">170</span> <span class="hljs-number">200</span> ...<br> $ RPM               : int  <span class="hljs-number">6300</span> <span class="hljs-number">5500</span> <span class="hljs-number">5500</span> <span class="hljs-number">5500</span> <span class="hljs-number">5700</span> <span class="hljs-number">5200</span> <span class="hljs-number">4800</span> <span class="hljs-number">4000</span> <span class="hljs-number">4800</span> <span class="hljs-number">4100</span> ...<br> $ Rev.per.mile      : int  <span class="hljs-number">2890</span> <span class="hljs-number">2335</span> <span class="hljs-number">2280</span> <span class="hljs-number">2535</span> <span class="hljs-number">2545</span> <span class="hljs-number">2565</span> <span class="hljs-number">1570</span> <span class="hljs-number">1320</span> <span class="hljs-number">1690</span> <span class="hljs-number">1510</span> ...<br> $ Man.trans.avail   : Factor w/ <span class="hljs-number">2</span> levels <span class="hljs-string">&quot;No&quot;</span>,<span class="hljs-string">&quot;Yes&quot;</span>: <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> ...<br> $ Fuel.tank.capacity: num  <span class="hljs-number">13.2</span> <span class="hljs-number">18</span> <span class="hljs-number">16.9</span> <span class="hljs-number">21.1</span> <span class="hljs-number">21.1</span> <span class="hljs-number">16.4</span> <span class="hljs-number">18</span> <span class="hljs-number">23</span> <span class="hljs-number">18.8</span> <span class="hljs-number">18</span> ...<br> $ Passengers        : int  <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> ...<br> $ Length            : int  <span class="hljs-number">177</span> <span class="hljs-number">195</span> <span class="hljs-number">180</span> <span class="hljs-number">193</span> <span class="hljs-number">186</span> <span class="hljs-number">189</span> <span class="hljs-number">200</span> <span class="hljs-number">216</span> <span class="hljs-number">198</span> <span class="hljs-number">206</span> ...<br> $ Wheelbase         : int  <span class="hljs-number">102</span> <span class="hljs-number">115</span> <span class="hljs-number">102</span> <span class="hljs-number">106</span> <span class="hljs-number">109</span> <span class="hljs-number">105</span> <span class="hljs-number">111</span> <span class="hljs-number">116</span> <span class="hljs-number">108</span> <span class="hljs-number">114</span> ...<br> $ Width             : int  <span class="hljs-number">68</span> <span class="hljs-number">71</span> <span class="hljs-number">67</span> <span class="hljs-number">70</span> <span class="hljs-number">69</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">78</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> ...<br> $ Turn.circle       : int  <span class="hljs-number">37</span> <span class="hljs-number">38</span> <span class="hljs-number">37</span> <span class="hljs-number">37</span> <span class="hljs-number">39</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">45</span> <span class="hljs-number">41</span> <span class="hljs-number">43</span> ...<br> $ Rear.seat.room    : num  <span class="hljs-number">26.5</span> <span class="hljs-number">30</span> <span class="hljs-number">28</span> <span class="hljs-number">31</span> <span class="hljs-number">27</span> <span class="hljs-number">28</span> <span class="hljs-number">30.5</span> <span class="hljs-number">30.5</span> <span class="hljs-number">26.5</span> <span class="hljs-number">35</span> ...<br> $ Luggage.room      : int  <span class="hljs-number">11</span> <span class="hljs-number">15</span> <span class="hljs-number">14</span> <span class="hljs-number">17</span> <span class="hljs-number">13</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">21</span> <span class="hljs-number">14</span> <span class="hljs-number">18</span> ...<br> $ Weight            : int  <span class="hljs-number">2705</span> <span class="hljs-number">3560</span> <span class="hljs-number">3375</span> <span class="hljs-number">3405</span> <span class="hljs-number">3640</span> <span class="hljs-number">2880</span> <span class="hljs-number">3470</span> <span class="hljs-number">4105</span> <span class="hljs-number">3495</span> <span class="hljs-number">3620</span> ...<br> $ Origin            : Factor w/ <span class="hljs-number">2</span> levels <span class="hljs-string">&quot;USA&quot;</span>,<span class="hljs-string">&quot;non-USA&quot;</span>: <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> ...<br> $ Make              : Factor w/ <span class="hljs-number">93</span> levels <span class="hljs-string">&quot;Acura Integra&quot;</span>,..: <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> ...<br></code></pre></td></tr></table></figure></p><p>上述结果表明数据集有很多因素变量，可以被认为是分类变量。对于我们的模型，我们将考虑变量 <code>AirBags</code> 和 <code>Type</code>。在这里，我们的目标是找出所售的汽车类型和安全气囊类型之间的任何显着的相关性。如果观察到相关性，我们可以估计哪种类型的汽车可以更好地卖什么类型的气囊。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the library.</span><br>library(<span class="hljs-string">&quot;MASS&quot;</span>)<br><br><span class="hljs-comment"># Create a data frame from the main data set.</span><br>car.data &lt;- data.frame(Cars93$AirBags, Cars93$Type)<br><br><span class="hljs-comment"># Create a table with the needed variables.</span><br>car.data = table(Cars93$AirBags, Cars93$Type) <br>print(car.data)<br><br><span class="hljs-comment"># Perform the Chi-Square test.</span><br>print(chisq.test(car.data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                     Compact Large Midsize Small Sporty Van<br>  Driver &amp; Passenger       <span class="hljs-number">2</span>     <span class="hljs-number">4</span>       <span class="hljs-number">7</span>     <span class="hljs-number">0</span>      <span class="hljs-number">3</span>   <span class="hljs-number">0</span><br>  Driver only              <span class="hljs-number">9</span>     <span class="hljs-number">7</span>      <span class="hljs-number">11</span>     <span class="hljs-number">5</span>      <span class="hljs-number">8</span>   <span class="hljs-number">3</span><br>  None                     <span class="hljs-number">5</span>     <span class="hljs-number">0</span>       <span class="hljs-number">4</span>    <span class="hljs-number">16</span>      <span class="hljs-number">3</span>   <span class="hljs-number">6</span><br><br>Pearson`s Chi-squared test<br><br>data:  car.data<br>X-squared = 33.001, df = 10, p-value = 0.0002723<br><br>Warning message:<br>In chisq.test(car.data) : Chi-squared approximation may be incorrect<br></code></pre></td></tr></table></figure></p><p><strong>结论</strong>结果显示 <code>P</code> 值小于 <code>0.05</code>，这表明汽车类型和安全气囊类型之间具有相关性。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言数据接口</title>
      <link href="post/996a1090.html"/>
      <url>post/996a1090.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>R 语言处理的数据一般从外部导入，因此需要数据接口来读取各种格式化的数据。</p><p>在 R 语言中，我们可以从存储在 R 语言环境外的文件中读取数据。我们还可以将数据写入将被操作系统存储和访问的文件。R 语言可以读取和写入各种文件格式，如​ <code>CSV</code>​，​<code>Excel</code>​，<code>XML</code>，<code>JSON</code> ​等。</p><h1 id="CSV-文件"><a href="#CSV-文件" class="headerlink" title="CSV 文件"></a>CSV 文件</h1><p>本章节学习从​ <code>CSV</code> 文件读取数据，然后将数据写入 <code>CSV</code> ​文件。该文件应该存在于当前工作目录中，以便 R 语言可以读取它。当然我们也可以设置我们自己的目录并从那里读取文件。</p><h2 id="获取和设置工作目录"><a href="#获取和设置工作目录" class="headerlink" title="获取和设置工作目录"></a>获取和设置工作目录</h2><p>您可以使用 ​<code>getwd()</code>​ 函数检查R 语言工作区指向的目录。您还可以使用 <code>setwd()​</code> 函数设置新的工作目录。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get and print current working directory.</span><br>print(getwd())<br><br><span class="hljs-comment"># Set current working directory.</span><br>setwd(<span class="hljs-string">&quot;E:/data&quot;</span>)<br><br><span class="hljs-comment"># Get and print current working directory.</span><br>print(getwd())<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C:/Users/user/Documents&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;E:/data&quot;</span><br></code></pre></td></tr></table></figure></p><p>此结果取决于您的操作系统和您当前工作的目录。</p><h2 id="创建-CSV-文件"><a href="#创建-CSV-文件" class="headerlink" title="创建 CSV 文件"></a>创建 CSV 文件</h2><p><code>CSV</code> 文件是一个文本文件，其中列中的值由逗号分隔。</p><p>通过将以下数据复制到文本编辑器（如记事本）中来创建文件。使用 <code>.csv</code> 扩展名保存使用记事本中的保存为所有文件​（<code>*.*</code>）​选项，将文件保存为 <code>input.csv</code>。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">id,name,salary,start<span class="hljs-emphasis">_date,dept</span><br><span class="hljs-emphasis">1,Rick,623.3,2012-01-01,IT</span><br><span class="hljs-emphasis">2,Dan,515.2,2013-09-23,Operations</span><br><span class="hljs-emphasis">3,Michelle,611,2014-11-15,IT</span><br><span class="hljs-emphasis">4,Ryan,729,2014-05-11,HR</span><br><span class="hljs-emphasis"> ,Gary,843.25,2015-03-27,Finance</span><br><span class="hljs-emphasis">6,Nina,578,2013-05-21,IT</span><br><span class="hljs-emphasis">7,Simon,632.8,2013-07-30,Operations</span><br><span class="hljs-emphasis">8,Guru,722.5,2014-06-17,Finance</span><br></code></pre></td></tr></table></figure></p><h2 id="读取-CSV-文件"><a href="#读取-CSV-文件" class="headerlink" title="读取 CSV 文件"></a>读取 CSV 文件</h2><p>以下是​ <code>read.csv()</code> ​函数的一个简单示例，用于读取当前工作目录中可用的 <code>CSV</code> 文件。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br>print(data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date       dept<br>1  <span class="hljs-number">1</span>     Rick <span class="hljs-number">623.30</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan <span class="hljs-number">515.20</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina <span class="hljs-number">578.00</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon <span class="hljs-number">632.80</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><h2 id="分析-CSV-文件"><a href="#分析-CSV-文件" class="headerlink" title="分析 CSV 文件"></a>分析 CSV 文件</h2><p>默认情况下，<code>​read.csv()​</code> 函数将输出作为数据框。这可以容易地如下检查。此外，我们可以检查列和行的数量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>print(is.data.frame(data))<br>print(ncol(data))<br>print(nrow(data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></p><p>一旦我们读取数据框中的数据，我们可以应用所有适用于数据框的函数。</p><p><strong>获取最高工资</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br><span class="hljs-comment"># Get the max salary from data frame.</span><br>sal &lt;- <span class="hljs-built_in">max</span>(data$salary)<br>print(sal)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">843.25</span><br></code></pre></td></tr></table></figure></p><p><strong>获取具有最高工资的人的详细信息</strong></p><p>我们可以获取满足特定过滤条件的行，类似于 <code>​SQL WHERE</code> 子句。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br><span class="hljs-comment"># Get the person detail having max salary.</span><br>retval &lt;- subset(data, salary == <span class="hljs-built_in">max</span>(salary))<br>print(retval)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id name salary start_date    dept<br>5 <span class="hljs-literal">NA</span> Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br></code></pre></td></tr></table></figure></p><p><strong>获取所有的 IT 部门员工的信息</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>retval &lt;- subset( data, dept == <span class="hljs-string">&quot;IT&quot;</span>)<br>print(retval)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date dept<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>   IT<br>3  <span class="hljs-number">3</span> Michelle  <span class="hljs-number">611.0</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>   IT<br>6  <span class="hljs-number">6</span>     Nina  <span class="hljs-number">578.0</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>   IT<br></code></pre></td></tr></table></figure></p><p><strong>获取工资大于 600 的 IT 部门的人员</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>info &lt;- subset(data, salary &gt; <span class="hljs-number">600</span> &amp; dept == <span class="hljs-string">&quot;IT&quot;</span>)<br>print(info)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date dept<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>   IT<br>3  <span class="hljs-number">3</span> Michelle  <span class="hljs-number">611.0</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>   IT<br></code></pre></td></tr></table></figure></p><p><strong>获取 2014 年或之后加入的人</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br>print(retval)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date    dept<br>3  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>4  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>5 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>8  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><h2 id="写入-CSV-文件"><a href="#写入-CSV-文件" class="headerlink" title="写入 CSV 文件"></a>写入 CSV 文件</h2><p>R 语言可以创建​ <code>CSV</code> 文件形式的现有数据框。​<code>write.csv()</code> ​函数用于创建​ <code>CSV</code> 文件。此文件在工作目录中创建。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br><br><span class="hljs-comment"># Write filtered data into a new file.</span><br>write.csv(retval, <span class="hljs-string">&quot;output.csv&quot;</span>)<br>newdata &lt;- read.csv(<span class="hljs-string">&quot;output.csv&quot;</span>)<br>print(newdata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  X id     name salary start_date    dept<br>1 <span class="hljs-number">3</span>  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>2 <span class="hljs-number">4</span>  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>3 <span class="hljs-number">5</span> <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>4 <span class="hljs-number">8</span>  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><p>这里列 <code>X</code> 来自数据集 ​<code>newper</code>​。这可以在写入文件时使用附加参数 <code>row.names = FALSE</code> 删除。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br><br><span class="hljs-comment"># Write filtered data into a new file.</span><br>write.csv(retval, <span class="hljs-string">&quot;output.csv&quot;</span>, row.names = <span class="hljs-literal">FALSE</span>)<br>newdata &lt;- read.csv(<span class="hljs-string">&quot;output.csv&quot;</span>)<br>print(newdata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date    dept<br>1  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>2  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>3 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>4  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><h1 id="Excel-文件"><a href="#Excel-文件" class="headerlink" title="Excel 文件"></a>Excel 文件</h1><p>Microsoft Excel 是最广泛使用的电子表格程序，以 <code>.xls</code> 或 <code>.xlsx</code> 格式存储数据。R 语言可以直接从这些文件使用一些 <code>Excel</code> 特定的包获取数据，如<code>XLConnect</code>，<code>xlsx</code>，<code>gdata</code> 等。</p><p>下面我们将使用 <code>xlsx</code> 包。R 语言也可以使用这个包写入 <code>Excel</code> 文件。</p><h2 id="安装-xlsx-软件包"><a href="#安装-xlsx-软件包" class="headerlink" title="安装 xlsx 软件包"></a>安装 xlsx 软件包</h2><p>您可以在R控制台中使用以下命令来安装 <code>xlsx</code> 软件包。它可能会要求安装一些额外的软件包这个软件包依赖。按照具有所需软件包名称的同一命令安装其他软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;xlsx&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="验证并加载-xlsx-软件包"><a href="#验证并加载-xlsx-软件包" class="headerlink" title="验证并加载 xlsx 软件包"></a>验证并加载 xlsx 软件包</h2><p>使用以下命令验证并加载 <code>xlsx</code> 软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Verify the package is installed.</span><br><span class="hljs-built_in">any</span>(grepl(<span class="hljs-string">&quot;xlsx&quot;</span>, installed.packages()))<br><br><span class="hljs-comment"># Load the library into R workspace.</span><br>library(<span class="hljs-string">&quot;xlsx&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>Loading required package: rJava<br>Loading required package: methods<br>Loading required package: xlsxjars<br></code></pre></td></tr></table></figure></p><h2 id="创建-xlsx-文件"><a href="#创建-xlsx-文件" class="headerlink" title="创建 xlsx 文件"></a>创建 xlsx 文件</h2><p>打开 Microsoft Excel，将以下数据复制并粘贴到名为 <code>sheet1</code> 的工作表中。</p><div class="table-container"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">salary</th><th style="text-align:center">start_date</th><th style="text-align:center">dept</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Rick</td><td style="text-align:center">623.3</td><td style="text-align:center">2012-01-01</td><td style="text-align:center">IT</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Dan</td><td style="text-align:center">515.2</td><td style="text-align:center">2013-09-23</td><td style="text-align:center">Operations</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Michelle</td><td style="text-align:center">611</td><td style="text-align:center">2014-11-15</td><td style="text-align:center">IT</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Ryan</td><td style="text-align:center">729</td><td style="text-align:center">2014-05-11</td><td style="text-align:center">HR</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Gary</td><td style="text-align:center">843.25</td><td style="text-align:center">2015-03-27</td><td style="text-align:center">Finance</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">Nina</td><td style="text-align:center">578</td><td style="text-align:center">2013-05-21</td><td style="text-align:center">IT</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">Simon</td><td style="text-align:center">632.8</td><td style="text-align:center">2013-07-30</td><td style="text-align:center">Operations</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Guru</td><td style="text-align:center">722.5</td><td style="text-align:center">2014-06-17</td><td style="text-align:center">Finance</td></tr></tbody></table></div><p>还要将以下数据复制并粘贴到另一个工作表，并将此工作表重命名为 <code>city</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">city</th></tr></thead><tbody><tr><td style="text-align:center">Rick</td><td style="text-align:center">Seattle</td></tr><tr><td style="text-align:center">Dan</td><td style="text-align:center">Tampa</td></tr><tr><td style="text-align:center">Michelle</td><td style="text-align:center">Chicago</td></tr><tr><td style="text-align:center">Ryan</td><td style="text-align:center">Seattle</td></tr><tr><td style="text-align:center">Gary</td><td style="text-align:center">Houston</td></tr><tr><td style="text-align:center">Nina</td><td style="text-align:center">Boston</td></tr><tr><td style="text-align:center">Simon</td><td style="text-align:center">Mumbai</td></tr><tr><td style="text-align:center">Guru</td><td style="text-align:center">Dallas</td></tr></tbody></table></div><p>将 Excel 文件另存为 <code>input.xlsx</code>。应将其保存在 R 工作区的当前工作目录中。</p><h2 id="读取-Excel-文件"><a href="#读取-Excel-文件" class="headerlink" title="读取 Excel 文件"></a>读取 Excel 文件</h2><p>通过使用 <code>read.xlsx()</code> 函数读取 <code>input.xlsx</code>，以下脚本读取第一个工作表的数据。结果作为数据框存储在 R 语言环境中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the first worksheet in the file input.xlsx.</span><br>data &lt;- read.xlsx(<span class="hljs-string">&quot;input.xlsx&quot;</span>, sheetIndex = <span class="hljs-number">1</span>)<br>print(data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date       dept<br>1  <span class="hljs-number">1</span>     Rick <span class="hljs-number">623.30</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan <span class="hljs-number">515.20</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina <span class="hljs-number">578.00</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon <span class="hljs-number">632.80</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><p>我们可以通过设置 <code>sheetIndex</code> 参数读取指定的工作表。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the worksheet named by city in the file input.xlsx.</span><br>data &lt;- read.xlsx(<span class="hljs-string">&quot;input.xlsx&quot;</span>, sheetIndex = <span class="hljs-string">&quot;city&quot;</span>)<br>print(data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>      name    city<br>1     Rick Seattle<br>2      Dan   Tampa<br>3 Michelle Chicago<br>4     Ryan Seattle<br>5     Gary Houston<br>6     Nina  Boston<br>7    Simon  Mumbai<br>8     Guru  Dallas<br></code></pre></td></tr></table></figure></p><h2 id="写入-Excel-文件"><a href="#写入-Excel-文件" class="headerlink" title="写入 Excel 文件"></a>写入 Excel 文件</h2><p>R 语言中的 <code>write.xlsx()</code> 函数用于创建 <code>Excel</code> 文件，此文件在工作目录中创建。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the first worksheet in the file input.xlsx.</span><br>data &lt;- read.xlsx(<span class="hljs-string">&quot;input.xlsx&quot;</span>, sheetIndex = <span class="hljs-number">1</span>)<br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br><br><span class="hljs-comment"># Write the data into a new file.</span><br>write.xlsx(retval, file = <span class="hljs-string">&quot;output.xlsx&quot;</span>, row.names = <span class="hljs-literal">FALSE</span>, sheetName = <span class="hljs-string">&quot;salary&quot;</span>)<br>newdata &lt;- read.xlsx(<span class="hljs-string">&quot;output.xlsx&quot;</span>, sheetIndex = <span class="hljs-string">&quot;salary&quot;</span>)<br>print(newdata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date    dept<br>1  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>2  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>3 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>4  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><h1 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h1><p>二进制文件是包含仅以位和字节（<code>0</code> 和 <code>1</code>）的形式存储的信息的文件。它们不是人类可读的，因为它中的字节转换为包含许多其他不可打印字符的字符和符号。尝试使用任何文本编辑器读取二进制文件将显示如 <code>Ø</code> 和 <code>ð</code> 的字符。</p><p>二进制文件必须由特定程序读取才能使用。例如，Microsoft Word 程序的二进制文件只能通过 Word 程序读取到人类可读的形式。这表示，除了人类可读的文本之外，还有更多的信息，例如字符和页码等的格式化，它们也与字母数字字符一起存储。最后一个二进制文件是一个连续的字节序列。我们在文本文件中看到的换行符是连接第一行到下一行的字符。</p><p>有时，由其他程序生成的数据需要由 R 作为二进制文件处理。另外，R 语言是创建可以与其他程序共享的二进制文件所必需的。</p><p>R 语言有两个函数 <code>WriteBin()</code> 和 <code>readBin()</code> 来创建和读取二进制文件。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">writeBin(object, con)<br>readBin(con, what, n)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>con</code> 是读取或写入二进制文件的连接对象。</li><li><code>object</code> 是要写入的二进制文件。</li><li><code>what</code> 是像字符，整数等代表字节模式被读取。</li><li><code>n</code> 是从二进制文件读取的字节数。</li></ul><h2 id="写入二进制文件"><a href="#写入二进制文件" class="headerlink" title="写入二进制文件"></a>写入二进制文件</h2><p>我们考虑 R 语言内置数据 <code>mtcars</code>。首先，我们从它创建一个 <code>CSV</code> 文件，并将其转换为二进制文件，并将其存储为操作系统文件。接下来我们读取这个创建的二进制文件。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the &quot;mtcars&quot; data frame as a csv file and store only the columns &quot;cyl&quot;, &quot;am&quot; and &quot;gear&quot;.</span><br>write.table(mtcars, file = <span class="hljs-string">&quot;mtcars.csv&quot;</span>, row.names = <span class="hljs-literal">FALSE</span>, na = <span class="hljs-string">&quot;&quot;</span>, col.names = <span class="hljs-literal">TRUE</span>, sep = <span class="hljs-string">&quot;,&quot;</span>)<br><br><span class="hljs-comment"># Store 5 records from the csv file as a new data frame.</span><br>new.mtcars &lt;- read.table(<span class="hljs-string">&quot;mtcars.csv&quot;</span>, sep = <span class="hljs-string">&quot;,&quot;</span>, header = <span class="hljs-literal">TRUE</span>, nrows = <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Create a connection object to write the binary file using mode &quot;wb&quot;.</span><br>write.filename = file(<span class="hljs-string">&quot;binmtcars.dat&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br><br><span class="hljs-comment"># Write the column names of the data frame to the connection object.</span><br>writeBin(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;cyl&quot;</span>, <span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;gear&quot;</span>), write.filename)<br><br><span class="hljs-comment"># Write the records in each of the column to the file.</span><br>writeBin(<span class="hljs-built_in">c</span>(new.mtcars$cyl, new.mtcars$am, new.mtcars$gear), write.filename)<br><br><span class="hljs-comment"># Close the file for writing so that it can be read by other program.</span><br>close(write.filename)<br></code></pre></td></tr></table></figure></p><h2 id="读取二进制文件"><a href="#读取二进制文件" class="headerlink" title="读取二进制文件"></a>读取二进制文件</h2><p>上面创建的二进制文件将所有数据存储为连续字节。因此，我们将通过选择适当的列名称值和列值来读取它。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a connection object to read the file in binary mode using &quot;rb&quot;.</span><br>read.filename &lt;- file(<span class="hljs-string">&quot;binmtcars.dat&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br><br><span class="hljs-comment"># First read the column names. n = 3 as we have 3 columns.</span><br>column.names &lt;- readBin(read.filename, character(),  n = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Next read the column values. n = 18 as we have 3 column names and 15 values.</span><br>read.filename &lt;- file(<span class="hljs-string">&quot;binmtcars.dat&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>bindata &lt;- readBin(read.filename, integer(), n = <span class="hljs-number">18</span>)<br><br><span class="hljs-comment"># Print the data.</span><br>print(bindata)<br><br><span class="hljs-comment"># Read the values from 4th byte to 8th byte which represents &quot;cyl&quot;.</span><br>cyldata = bindata[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]<br>print(cyldata)<br><br><span class="hljs-comment"># Read the values form 9th byte to 13th byte which represents &quot;am&quot;.</span><br>amdata = bindata[<span class="hljs-number">9</span>:<span class="hljs-number">13</span>]<br>print(amdata)<br><br><span class="hljs-comment"># Read the values form 9th byte to 13th byte which represents &quot;gear&quot;.</span><br>geardata = bindata[<span class="hljs-number">14</span>:<span class="hljs-number">18</span>]<br>print(geardata)<br><br><span class="hljs-comment"># Combine all the read values to a dat frame.</span><br>finaldata = cbind(cyldata, amdata, geardata)<br>colnames(finaldata) = column.names<br>print(finaldata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果和图表 -</span><br><br>[<span class="hljs-number">1</span>]    <span class="hljs-number">7108963</span> <span class="hljs-number">1728081249</span>    <span class="hljs-number">7496037</span>          <span class="hljs-number">6</span>          <span class="hljs-number">6</span>          <span class="hljs-number">4</span><br>[<span class="hljs-number">7</span>]          <span class="hljs-number">6</span>          <span class="hljs-number">8</span>          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>          <span class="hljs-number">0</span><br>[<span class="hljs-number">13</span>]         <span class="hljs-number">0</span>          <span class="hljs-number">4</span>          <span class="hljs-number">4</span>          <span class="hljs-number">4</span>          <span class="hljs-number">3</span>          <span class="hljs-number">3</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br><br>     cyl am gear<br>[<span class="hljs-number">1</span>,]   <span class="hljs-number">6</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">6</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span><br>[<span class="hljs-number">3</span>,]   <span class="hljs-number">4</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span><br>[<span class="hljs-number">4</span>,]   <span class="hljs-number">6</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br>[<span class="hljs-number">5</span>,]   <span class="hljs-number">8</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><p>正如我们所看到的，我们通过读取 R 中的二进制文件得到原始数据。</p><h1 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h1><p><code>XML</code> 是一种文件格式，它使用标准 <code>ASCII</code> 文本共享万维网，内部网和其他地方的文件格式和数据。它代表可扩展标记语言 <code>XML</code>。类似于 <code>HTML</code>，它包含标记标签。但是与 <code>HTML</code> 中的标记标记描述页面的结构不同，在 <code>XML</code> 中，标记描述了包含在文件中的数据的含义。</p><p>您可以使用 <code>XML</code> 包读取 R 语言中的 <code>XML</code> 文件。此软件包可以使用以下命令安装。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;XML&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="创建-XML-文件"><a href="#创建-XML-文件" class="headerlink" title="创建 XML 文件"></a>创建 XML 文件</h2><p>通过将以下数据复制到文本编辑器（如记事本）中来创建文件。使用 <code>.xml</code> 扩展名保存使用记事本中的保存为所有文件​（<code>*.*</code>）​选项，将文件保存为 <code>input.xml</code>。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RECORDS</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Rick<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>623.3<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2012-01-01<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>IT<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Dan<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>515.2<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2013-09-23<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Operations<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Michelle<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>611<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2014-11-15<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>IT<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Ryan<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>729<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2014-05-11<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>HR<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Gary<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>843.25<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2015-03-27<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Finance<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>578<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2013-05-21<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>IT<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Simon<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>632.8<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2013-07-30<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Operations<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Guru<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>722.5<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2014-06-17<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Finance<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECORDS</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="读取-XML-文件"><a href="#读取-XML-文件" class="headerlink" title="读取 XML 文件"></a>读取 XML 文件</h2><p><code>XML</code> 文件由 R 语言使用函数 <code>xmlParse()</code> 读取。它作为列表存储在 R 语言中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br><br><span class="hljs-comment"># Also load the other required package.</span><br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Print the result.</span><br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>1<br>Rick<br>623.3<br>2012-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>IT<br><br>2<br>Dan<br>515.2<br>2013-<span class="hljs-number">09</span>-<span class="hljs-number">23</span><br>Operations<br><br>3<br>Michelle<br>611<br>2014-<span class="hljs-number">11</span>-<span class="hljs-number">15</span><br>IT<br><br>4<br>Ryan<br>729<br>2014-<span class="hljs-number">05</span>-<span class="hljs-number">11</span><br>HR<br><br>5<br>Gary<br>843.25<br>2015-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br>Finance<br><br>6<br>Nina<br>578<br>2013-<span class="hljs-number">05</span>-<span class="hljs-number">21</span><br>IT<br><br>7<br>Simon<br>632.8<br>2013-<span class="hljs-number">07</span>-<span class="hljs-number">30</span><br>Operations<br><br>8<br>Guru<br>722.5<br>2014-<span class="hljs-number">06</span>-<span class="hljs-number">17</span><br>Finance<br></code></pre></td></tr></table></figure></p><p><strong>获取 XML 文件中存在的节点数</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Exract the root node form the xml file.</span><br>rootnode &lt;- xmlRoot(result)<br><br><span class="hljs-comment"># Find number of nodes in the root.</span><br>rootsize &lt;- xmlSize(rootnode)<br><br><span class="hljs-comment"># Print the result.</span><br>print(rootsize)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></p><p><strong>第一个节点的详细信息</strong></p><p>让我们看看解析文件的第一条记录。它将给我们一个关于存在于顶层节点中的各种元素的想法。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Exract the root node form the xml file.</span><br>rootnode &lt;- xmlRoot(result)<br><br><span class="hljs-comment"># Print the result.</span><br>print(rootnode[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$EMPLOYEE<br>  <span class="hljs-number">1</span><br>  Rick<br>  <span class="hljs-number">623.3</span><br>  <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>  IT<br><br><span class="hljs-built_in">attr</span>(,<span class="hljs-string">&quot;class&quot;</span>)<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;XMLInternalNodeList&quot;</span> <span class="hljs-string">&quot;XMLNodeList&quot;</span><br></code></pre></td></tr></table></figure></p><p><strong>获取节点的不同元素</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Exract the root node form the xml file.</span><br>rootnode &lt;- xmlRoot(result)<br><br><span class="hljs-comment"># Get the first element of the first node.</span><br>print(rootnode[[<span class="hljs-number">1</span>]][[<span class="hljs-number">1</span>]])<br><br><span class="hljs-comment"># Get the fifth element of the first node.</span><br>print(rootnode[[<span class="hljs-number">1</span>]][[<span class="hljs-number">5</span>]])<br><br><span class="hljs-comment"># Get the second element of the third node.</span><br>print(rootnode[[<span class="hljs-number">3</span>]][[<span class="hljs-number">2</span>]])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>1<br>IT<br>Michelle<br></code></pre></td></tr></table></figure></p><h2 id="XML-到数据框"><a href="#XML-到数据框" class="headerlink" title="XML 到数据框"></a>XML 到数据框</h2><p>为了在大文件中有效地处理数据，我们将 <code>XML</code> 文件中的数据作为数据框读取。然后处理数据框以进行数据分析。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Convert the input xml file to a data frame.</span><br>xmldataframe &lt;- xmlToDataFrame(<span class="hljs-string">&quot;input.xml&quot;</span>)<br>print(xmldataframe)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  ID     NAME SALARY  STARTDATE       DEPT<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan  <span class="hljs-number">515.2</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle    <span class="hljs-number">611</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan    <span class="hljs-number">729</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5  <span class="hljs-number">5</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina    <span class="hljs-number">578</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon  <span class="hljs-number">632.8</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru  <span class="hljs-number">722.5</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><p>由于数据现在可以作为数据框，我们可以使用数据框相关函数来读取和操作文件。</p><h1 id="JSON-文件"><a href="#JSON-文件" class="headerlink" title="JSON 文件"></a>JSON 文件</h1><p><code>JSON</code> 文件以人类可读格式将数据存储为文本。<code>JSON</code> 代表 <code>JavaScript Object Notation</code>。R 可以使用 <code>rjson</code> 包读取 <code>JSON</code> 文件。</p><p>在 R 语言控制台中，您可以发出以下命令来安装 <code>rjson</code> 包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;rjson&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="创建-JSON-文件"><a href="#创建-JSON-文件" class="headerlink" title="创建 JSON 文件"></a>创建 JSON 文件</h2><p>通过将以下数据复制到文本编辑器（如记事本）中来创建文件。使用 <code>.json</code> 扩展名保存使用记事本中的保存为所有文件​（<code>*.*</code>）选项，将文件保存为 <code>input.json</code>。</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;ID&quot;</span>: [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>],<br><span class="hljs-attr">&quot;Name&quot;</span>: [<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>, <span class="hljs-string">&quot;Nina&quot;</span>, <span class="hljs-string">&quot;Simon&quot;</span>, <span class="hljs-string">&quot;Guru&quot;</span>],<br><span class="hljs-attr">&quot;Salary&quot;</span>: [<span class="hljs-string">&quot;623.3&quot;</span>, <span class="hljs-string">&quot;515.2&quot;</span>, <span class="hljs-string">&quot;611&quot;</span>, <span class="hljs-string">&quot;729&quot;</span>, <span class="hljs-string">&quot;843.25&quot;</span>, <span class="hljs-string">&quot;578&quot;</span>, <span class="hljs-string">&quot;632.8&quot;</span>, <span class="hljs-string">&quot;722.5&quot;</span>],<br><br><span class="hljs-attr">&quot;StartDate&quot;</span>: [<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>, <span class="hljs-string">&quot;2013-05-21&quot;</span>,<br><span class="hljs-string">&quot;2013-07-30&quot;</span>, <span class="hljs-string">&quot;2014-06-17&quot;</span><br>],<br><span class="hljs-attr">&quot;Dept&quot;</span>: [<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;HR&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="读取-JSON-文件"><a href="#读取-JSON-文件" class="headerlink" title="读取 JSON 文件"></a>读取 JSON 文件</h2><p><code>JSON</code> 文件由 R 使用来自 <code>fromJSON()</code> 的函数读取。它作为列表存储在 R 中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required to read JSON files.</span><br>library(<span class="hljs-string">&quot;rjson&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- fromJSON(file = <span class="hljs-string">&quot;input.json&quot;</span>)<br><br><span class="hljs-comment"># Print the result.</span><br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$ID<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-string">&quot;3&quot;</span> <span class="hljs-string">&quot;4&quot;</span> <span class="hljs-string">&quot;5&quot;</span> <span class="hljs-string">&quot;6&quot;</span> <span class="hljs-string">&quot;7&quot;</span> <span class="hljs-string">&quot;8&quot;</span><br><br>$Name<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Rick&quot;</span>     <span class="hljs-string">&quot;Dan&quot;</span>      <span class="hljs-string">&quot;Michelle&quot;</span> <span class="hljs-string">&quot;Ryan&quot;</span>     <span class="hljs-string">&quot;Gary&quot;</span>     <span class="hljs-string">&quot;Nina&quot;</span>     <span class="hljs-string">&quot;Simon&quot;</span>    <span class="hljs-string">&quot;Guru&quot;</span>    <br><br>$Salary<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;623.3&quot;</span>  <span class="hljs-string">&quot;515.2&quot;</span>  <span class="hljs-string">&quot;611&quot;</span>    <span class="hljs-string">&quot;729&quot;</span>    <span class="hljs-string">&quot;843.25&quot;</span> <span class="hljs-string">&quot;578&quot;</span>    <span class="hljs-string">&quot;632.8&quot;</span>  <span class="hljs-string">&quot;722.5&quot;</span> <br><br>$StartDate<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;2012-01-01&quot;</span> <span class="hljs-string">&quot;2013-09-23&quot;</span> <span class="hljs-string">&quot;2014-11-15&quot;</span> <span class="hljs-string">&quot;2014-05-11&quot;</span> <span class="hljs-string">&quot;2015-03-27&quot;</span> <span class="hljs-string">&quot;2013-05-21&quot;</span> <span class="hljs-string">&quot;2013-07-30&quot;</span> <span class="hljs-string">&quot;2014-06-17&quot;</span><br><br>$Dept<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;IT&quot;</span>         <span class="hljs-string">&quot;Operations&quot;</span> <span class="hljs-string">&quot;IT&quot;</span>         <span class="hljs-string">&quot;HR&quot;</span>         <span class="hljs-string">&quot;Finance&quot;</span>    <span class="hljs-string">&quot;IT&quot;</span>         <span class="hljs-string">&quot;Operations&quot;</span> <span class="hljs-string">&quot;Finance&quot;</span>   <br></code></pre></td></tr></table></figure></p><h2 id="将-JSON-转换为数据框"><a href="#将-JSON-转换为数据框" class="headerlink" title="将 JSON 转换为数据框"></a>将 JSON 转换为数据框</h2><p>我们可以使用 <code>as.data.frame()</code> 函数将上面提取的数据转换为 R 语言数据框以进行进一步分析。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required to read JSON files.</span><br>library(<span class="hljs-string">&quot;rjson&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- fromJSON(file = <span class="hljs-string">&quot;input.json&quot;</span>)<br><br><span class="hljs-comment"># Convert JSON file to a data frame.</span><br>json_data_frame &lt;- as.data.frame(result)<br><br>print(json_data_frame)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  ID     Name Salary  StartDate       Dept<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan  <span class="hljs-number">515.2</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle    <span class="hljs-number">611</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan    <span class="hljs-number">729</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5  <span class="hljs-number">5</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina    <span class="hljs-number">578</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon  <span class="hljs-number">632.8</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru  <span class="hljs-number">722.5</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><h1 id="Web-数据"><a href="#Web-数据" class="headerlink" title="Web 数据"></a>Web 数据</h1><p>许多网站提供数据供其用户使用。例如，世界卫生组织（WHO）以 <code>CSV</code>，<code>txt</code> 和 <code>XML</code> 文件的形式提供健康和医疗信息的报告。使用 R 语言程序，我们可以从这些网站以编程方式提取特定数据。R 语言中用于从网站中提取数据的一些包是 <code>RCurl</code>，<code>XML</code> 和 <code>stringr</code>，它们用于连接到 URL，识别文件所需的链接并将它们下载到本地环境。</p><p>安装 R 语言的包处理URL和链接到文件需要以下的包。如果它们在R 语言环境中不可用，您可以使用以下命令安装它们。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;RCurl&quot;</span>)<br>install.packages(<span class="hljs-string">&quot;XML&quot;</span>)<br>install.packages(<span class="hljs-string">&quot;stringr&quot;</span>)<br>install.packages(<span class="hljs-string">&quot;plyr&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="读取-Web-数据"><a href="#读取-Web-数据" class="headerlink" title="读取 Web 数据"></a>读取 Web 数据</h2><p>我们将访问 <code>URL</code> 天气数据，并使用 R 下载 2015 年的 <code>CSV</code> 文件。</p><p>我们将使用函数 <code>getHTMLLinks()</code> 来收集文件的 <code>URL</code>。然后我们将使用函数<code>downlaod.file()</code> 将文件保存到本地系统。由于我们将对多个文件一次又一次地应用相同的代码，因此我们将创建一个被多次调用的函数。文件名作为参数以 R 列表对象的形式传递到此函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required.</span><br>library(<span class="hljs-string">&quot;RCurl&quot;</span>)<br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;stringr&quot;</span>)<br>library(<span class="hljs-string">&quot;plyr&quot;</span>)<br><br><span class="hljs-comment"># Read the URL.</span><br>url &lt;- <span class="hljs-string">&quot;https://www.geos.ed.ac.uk/~weather/jcmb_ws/&quot;</span><br><br><span class="hljs-comment"># Gather the html links present in the webpage.</span><br>links &lt;- getHTMLLinks(url)<br><br><span class="hljs-comment"># Identify only the links which point to the JCMB 2015 files. </span><br>filenames &lt;- links[str_detect(links, <span class="hljs-string">&quot;JCMB_2015&quot;</span>)]<br><br><span class="hljs-comment"># Store the file names as a list.</span><br>filenames_list &lt;- as.list(filenames)<br><br><span class="hljs-comment"># Create a function to download the files by passing the URL and filename list.</span><br>downloadcsv &lt;- <span class="hljs-keyword">function</span> (mainurl, filename) &#123;<br>   filedetails &lt;- str_c(mainurl, filename)<br>   download.file(filedetails, filename)<br>&#125;<br><br><span class="hljs-comment"># Now apply the l_ply function and save the files into the current R working directory.</span><br>l_ply(filenames, downloadcsv, mainurl = <span class="hljs-string">&quot;https://www.geos.ed.ac.uk/~weather/jcmb_ws/&quot;</span>)<br></code></pre></td></tr></table></figure></p><p><strong>验证文件下载</strong></p><p>运行上述代码后，您可以在当前 R 语言工作目录中找到以下文件。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">JCMB<span class="hljs-emphasis">_2015.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Apr.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Aug.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Dec.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Feb.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Jan.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Jul.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Jun.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Mar.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_May.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Nov.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Oct.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Sep.csv</span><br></code></pre></td></tr></table></figure></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据是关系数据库系统以规范化格式存储。因此，要进行统计计算，我们将需要非常先进和复杂的 <code>SQL</code> 查询。但 R 语言可以轻松地连接到许多关系数据库，如 <code>MySQL</code>，<code>Oracle</code>，<code>SQL Server</code> 等，并从它们获取记录作为数据框。一旦数据在 R 语言环境中可用，它就变成正常的 R 语言数据集，并且可以使用所有强大的包和函数来操作或分析。</p><p>在本教程中，我们将使用 MySQL 作为连接到 R 语言的参考数据库。</p><p>R 语言有一个名为 <code>RMySQL</code> 的内置包，它提供与 MySQL 数据库之间的本地连接。您可以使用以下命令在 R 语言环境中安装此软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;RMySQL&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="连接到-MySQL"><a href="#连接到-MySQL" class="headerlink" title="连接到 MySQL"></a>连接到 MySQL</h2><p>一旦安装了包，我们在 R 中创建一个连接对象以连接到数据库。它使用用户名，密码，数据库名称和主机名作为输入。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a connection Object to MySQL database.</span><br><span class="hljs-comment"># We will connect to the sampel database named &quot;testdb&quot; that comes with MySQL installation.</span><br>library(<span class="hljs-string">&quot;RMySQL&quot;</span>)<br>conn = dbConnect(MySQL(), user = <span class="hljs-string">&#x27;root&#x27;</span>, password = <span class="hljs-string">&#x27;root&#x27;</span>, dbname = <span class="hljs-string">&#x27;testdb&#x27;</span>, host = <span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>)<br><br><span class="hljs-comment"># Set the encoding method to gbk</span><br>dbSendQuery(conn, <span class="hljs-string">&#x27;SET NAMES gbk&#x27;</span>)<br><br><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>    <span class="hljs-string">&quot;tbl&quot;</span>    <span class="hljs-string">&quot;tcount_tbl&quot;</span>    <span class="hljs-string">&quot;transaction_test&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="查询表数据"><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h2><p>我们可以使用函数 <code>dbSendQuery()</code> 查询 MySQL 中的数据库表。查询在 MySQL 中执行，并使用 R 语言 <code>fetch()</code> 函数返回结果集。最后，它被存储为 R 语言中的数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get all the rows.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl&quot;</span>)<br><br><span class="hljs-comment"># Store the result in a R data frame object. n = 6 is used to fetch first 6 rows.</span><br>data.frame = fetch(result, n = <span class="hljs-number">6</span>)<br>print(data.frame)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id       title author submission_date<br>1  <span class="hljs-number">1</span>    学习 PHP    PHP      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>2  <span class="hljs-number">2</span>  学习 MySQL  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>3  <span class="hljs-number">3</span>    学习 C++    C++      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>4  <span class="hljs-number">4</span> 学习 Python Python      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>5  <span class="hljs-number">5</span>  MySQL 教程  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>6  <span class="hljs-number">6</span>   JAVA 教程   JAVA      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><p><strong>带过滤条件的查询</strong></p><p>我们可以传递任何有效的 <code>SELECT</code> 查询来获取结果。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get all the rows with author equal to &#x27;MySQL&#x27;.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl WHERE author = &#x27;MySQL&#x27;&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id      title author submission_date<br>1  <span class="hljs-number">2</span> 学习 MySQL  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>2  <span class="hljs-number">5</span> MySQL 教程  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><h2 id="更新表数据"><a href="#更新表数据" class="headerlink" title="更新表数据"></a>更新表数据</h2><p>我们可以通过将更新查询传递给 <code>dbSendQuery()</code> 函数来更新 MySQL 表中的行。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get the rows with id equal to 1.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl WHERE id = 1&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># Update the record with id equal to 1.</span><br>dbSendQuery(conn, <span class="hljs-string">&quot;UPDATE tbl SET submission_date = &#x27;2000-01-12&#x27; WHERE id = 1&quot;</span>)<br><br><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get the rows with id equal to 1.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl WHERE id = 1&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 在执行上面的代码后，我们可以看到在 MySQL 环境中更新的表。</span><br><br>  id    title author submission_date<br>1  <span class="hljs-number">1</span> 学习 PHP    PHP      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br><br>  id    title author submission_date<br>1  <span class="hljs-number">1</span> 学习 PHP    PHP      <span class="hljs-number">2000</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><h2 id="向表插入数据"><a href="#向表插入数据" class="headerlink" title="向表插入数据"></a>向表插入数据</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Insert data to the &quot;tbl&quot; tables</span><br>dbSendQuery(conn,<br>   <span class="hljs-string">&quot;INSERT INTO tbl (title, author, submission_date) VALUES(&#x27;学习 R&#x27;, &#x27;R&#x27;, &#x27;2021-01-22&#x27;)&quot;</span><br>)<br><br><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get all the rows.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 在执行上面的代码后，我们可以看到插入到 MySQL 环境中的表中的行。</span><br><br>  id       title author submission_date<br>1  <span class="hljs-number">1</span>    学习 PHP    PHP      <span class="hljs-number">2000</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>2  <span class="hljs-number">2</span>  学习 MySQL  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>3  <span class="hljs-number">3</span>    学习 C++    C++      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>4  <span class="hljs-number">4</span> 学习 Python Python      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>5  <span class="hljs-number">5</span>  MySQL 教程  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>6  <span class="hljs-number">6</span>   JAVA 教程   JAVA      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>7  <span class="hljs-number">7</span>      学习 R      R      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>我们可以在 MySQL 中使用函数 <code>dbWriteTable()</code> 创建表。如果表已经存在，它将覆盖该表，并将数据框用作输入。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the connection object to the database where we want to create the table.</span><br>conn = dbConnect(MySQL(), user = <span class="hljs-string">&#x27;root&#x27;</span>, password = <span class="hljs-string">&#x27;root&#x27;</span>, dbname = <span class="hljs-string">&#x27;testdb&#x27;</span>, host = <span class="hljs-string">&#x27;localhost&#x27;</span>, port = <span class="hljs-string">&#x27;3306&#x27;</span>)<br><br><span class="hljs-comment"># Use the R data frame &quot;mtcars&quot; to create the table in MySQL.</span><br><span class="hljs-comment"># All the rows of mtcars are taken inot MySQL.</span><br>dbWriteTable(conn, <span class="hljs-string">&quot;mtcars&quot;</span>, mtcars[, ], overwrite = <span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># Query the &quot;mtcars&quot; tables to get the rows</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM mtcars&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 执行上面的代码后，我们可以看到在 MySQL 环境中创建的表。</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>    <span class="hljs-string">&quot;tbl&quot;</span>    <span class="hljs-string">&quot;tcount_tbl&quot;</span>    <span class="hljs-string">&quot;transaction_test&quot;</span><br><br>             row_names  mpg cyl  disp  hp drat    wt  qsec vs am gear carb<br>1            Mazda RX4 <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span> <span class="hljs-number">160.0</span> <span class="hljs-number">110</span> <span class="hljs-number">3.90</span> <span class="hljs-number">2.620</span> <span class="hljs-number">16.46</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>2        Mazda RX4 Wag <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span> <span class="hljs-number">160.0</span> <span class="hljs-number">110</span> <span class="hljs-number">3.90</span> <span class="hljs-number">2.875</span> <span class="hljs-number">17.02</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>3           Datsun <span class="hljs-number">710</span> <span class="hljs-number">22.8</span>   <span class="hljs-number">4</span> <span class="hljs-number">108.0</span>  <span class="hljs-number">93</span> <span class="hljs-number">3.85</span> <span class="hljs-number">2.320</span> <span class="hljs-number">18.61</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>4       Hornet <span class="hljs-number">4</span> Drive <span class="hljs-number">21.4</span>   <span class="hljs-number">6</span> <span class="hljs-number">258.0</span> <span class="hljs-number">110</span> <span class="hljs-number">3.08</span> <span class="hljs-number">3.215</span> <span class="hljs-number">19.44</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">1</span><br>5    Hornet Sportabout <span class="hljs-number">18.7</span>   <span class="hljs-number">8</span> <span class="hljs-number">360.0</span> <span class="hljs-number">175</span> <span class="hljs-number">3.15</span> <span class="hljs-number">3.440</span> <span class="hljs-number">17.02</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>6              Valiant <span class="hljs-number">18.1</span>   <span class="hljs-number">6</span> <span class="hljs-number">225.0</span> <span class="hljs-number">105</span> <span class="hljs-number">2.76</span> <span class="hljs-number">3.460</span> <span class="hljs-number">20.22</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">1</span><br>7           Duster <span class="hljs-number">360</span> <span class="hljs-number">14.3</span>   <span class="hljs-number">8</span> <span class="hljs-number">360.0</span> <span class="hljs-number">245</span> <span class="hljs-number">3.21</span> <span class="hljs-number">3.570</span> <span class="hljs-number">15.84</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>8            Merc <span class="hljs-number">240</span>D <span class="hljs-number">24.4</span>   <span class="hljs-number">4</span> <span class="hljs-number">146.7</span>  <span class="hljs-number">62</span> <span class="hljs-number">3.69</span> <span class="hljs-number">3.190</span> <span class="hljs-number">20.00</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br>9             Merc <span class="hljs-number">230</span> <span class="hljs-number">22.8</span>   <span class="hljs-number">4</span> <span class="hljs-number">140.8</span>  <span class="hljs-number">95</span> <span class="hljs-number">3.92</span> <span class="hljs-number">3.150</span> <span class="hljs-number">22.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br>10            Merc <span class="hljs-number">280</span> <span class="hljs-number">19.2</span>   <span class="hljs-number">6</span> <span class="hljs-number">167.6</span> <span class="hljs-number">123</span> <span class="hljs-number">3.92</span> <span class="hljs-number">3.440</span> <span class="hljs-number">18.30</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>11           Merc <span class="hljs-number">280</span>C <span class="hljs-number">17.8</span>   <span class="hljs-number">6</span> <span class="hljs-number">167.6</span> <span class="hljs-number">123</span> <span class="hljs-number">3.92</span> <span class="hljs-number">3.440</span> <span class="hljs-number">18.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>12          Merc <span class="hljs-number">450</span>SE <span class="hljs-number">16.4</span>   <span class="hljs-number">8</span> <span class="hljs-number">275.8</span> <span class="hljs-number">180</span> <span class="hljs-number">3.07</span> <span class="hljs-number">4.070</span> <span class="hljs-number">17.40</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">3</span><br>13          Merc <span class="hljs-number">450</span>SL <span class="hljs-number">17.3</span>   <span class="hljs-number">8</span> <span class="hljs-number">275.8</span> <span class="hljs-number">180</span> <span class="hljs-number">3.07</span> <span class="hljs-number">3.730</span> <span class="hljs-number">17.60</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">3</span><br>14         Merc <span class="hljs-number">450</span>SLC <span class="hljs-number">15.2</span>   <span class="hljs-number">8</span> <span class="hljs-number">275.8</span> <span class="hljs-number">180</span> <span class="hljs-number">3.07</span> <span class="hljs-number">3.780</span> <span class="hljs-number">18.00</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">3</span><br>15  Cadillac Fleetwood <span class="hljs-number">10.4</span>   <span class="hljs-number">8</span> <span class="hljs-number">472.0</span> <span class="hljs-number">205</span> <span class="hljs-number">2.93</span> <span class="hljs-number">5.250</span> <span class="hljs-number">17.98</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>16 Lincoln Continental <span class="hljs-number">10.4</span>   <span class="hljs-number">8</span> <span class="hljs-number">460.0</span> <span class="hljs-number">215</span> <span class="hljs-number">3.00</span> <span class="hljs-number">5.424</span> <span class="hljs-number">17.82</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>17   Chrysler Imperial <span class="hljs-number">14.7</span>   <span class="hljs-number">8</span> <span class="hljs-number">440.0</span> <span class="hljs-number">230</span> <span class="hljs-number">3.23</span> <span class="hljs-number">5.345</span> <span class="hljs-number">17.42</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>18            Fiat <span class="hljs-number">128</span> <span class="hljs-number">32.4</span>   <span class="hljs-number">4</span>  <span class="hljs-number">78.7</span>  <span class="hljs-number">66</span> <span class="hljs-number">4.08</span> <span class="hljs-number">2.200</span> <span class="hljs-number">19.47</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>19         Honda Civic <span class="hljs-number">30.4</span>   <span class="hljs-number">4</span>  <span class="hljs-number">75.7</span>  <span class="hljs-number">52</span> <span class="hljs-number">4.93</span> <span class="hljs-number">1.615</span> <span class="hljs-number">18.52</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br>20      Toyota Corolla <span class="hljs-number">33.9</span>   <span class="hljs-number">4</span>  <span class="hljs-number">71.1</span>  <span class="hljs-number">65</span> <span class="hljs-number">4.22</span> <span class="hljs-number">1.835</span> <span class="hljs-number">19.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>21       Toyota Corona <span class="hljs-number">21.5</span>   <span class="hljs-number">4</span> <span class="hljs-number">120.1</span>  <span class="hljs-number">97</span> <span class="hljs-number">3.70</span> <span class="hljs-number">2.465</span> <span class="hljs-number">20.01</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">1</span><br>22    Dodge Challenger <span class="hljs-number">15.5</span>   <span class="hljs-number">8</span> <span class="hljs-number">318.0</span> <span class="hljs-number">150</span> <span class="hljs-number">2.76</span> <span class="hljs-number">3.520</span> <span class="hljs-number">16.87</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>23         AMC Javelin <span class="hljs-number">15.2</span>   <span class="hljs-number">8</span> <span class="hljs-number">304.0</span> <span class="hljs-number">150</span> <span class="hljs-number">3.15</span> <span class="hljs-number">3.435</span> <span class="hljs-number">17.30</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>24          Camaro Z28 <span class="hljs-number">13.3</span>   <span class="hljs-number">8</span> <span class="hljs-number">350.0</span> <span class="hljs-number">245</span> <span class="hljs-number">3.73</span> <span class="hljs-number">3.840</span> <span class="hljs-number">15.41</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>25    Pontiac Firebird <span class="hljs-number">19.2</span>   <span class="hljs-number">8</span> <span class="hljs-number">400.0</span> <span class="hljs-number">175</span> <span class="hljs-number">3.08</span> <span class="hljs-number">3.845</span> <span class="hljs-number">17.05</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>26           Fiat X1-<span class="hljs-number">9</span> <span class="hljs-number">27.3</span>   <span class="hljs-number">4</span>  <span class="hljs-number">79.0</span>  <span class="hljs-number">66</span> <span class="hljs-number">4.08</span> <span class="hljs-number">1.935</span> <span class="hljs-number">18.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>27       Porsche <span class="hljs-number">914</span>-<span class="hljs-number">2</span> <span class="hljs-number">26.0</span>   <span class="hljs-number">4</span> <span class="hljs-number">120.3</span>  <span class="hljs-number">91</span> <span class="hljs-number">4.43</span> <span class="hljs-number">2.140</span> <span class="hljs-number">16.70</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">2</span><br>28        Lotus Europa <span class="hljs-number">30.4</span>   <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span> <span class="hljs-number">113</span> <span class="hljs-number">3.77</span> <span class="hljs-number">1.513</span> <span class="hljs-number">16.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">2</span><br>29      Ford Pantera L <span class="hljs-number">15.8</span>   <span class="hljs-number">8</span> <span class="hljs-number">351.0</span> <span class="hljs-number">264</span> <span class="hljs-number">4.22</span> <span class="hljs-number">3.170</span> <span class="hljs-number">14.50</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">4</span><br>30        Ferrari Dino <span class="hljs-number">19.7</span>   <span class="hljs-number">6</span> <span class="hljs-number">145.0</span> <span class="hljs-number">175</span> <span class="hljs-number">3.62</span> <span class="hljs-number">2.770</span> <span class="hljs-number">15.50</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span><br>31       Maserati Bora <span class="hljs-number">15.0</span>   <span class="hljs-number">8</span> <span class="hljs-number">301.0</span> <span class="hljs-number">335</span> <span class="hljs-number">3.54</span> <span class="hljs-number">3.570</span> <span class="hljs-number">14.60</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">8</span><br>32          Volvo <span class="hljs-number">142</span>E <span class="hljs-number">21.4</span>   <span class="hljs-number">4</span> <span class="hljs-number">121.0</span> <span class="hljs-number">109</span> <span class="hljs-number">4.11</span> <span class="hljs-number">2.780</span> <span class="hljs-number">18.60</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>我们可以删除 MySQL 数据库中的表，将 <code>DROP TABLE</code> 语句传递到 <code>dbSendQuery()</code> 中，就像我们使用它查询表中的数据一样。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># Delete the &quot;mtcars&quot; table.</span><br>dbSendQuery(conn, <span class="hljs-string">&#x27;DROP TABLE IF EXISTS mtcars&#x27;</span>)<br><br><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># 执行上面的代码后，我们可以看到表在MySQL环境中被删除。</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>     <span class="hljs-string">&quot;mtcars&quot;</span>           <span class="hljs-string">&quot;tbl&quot;</span>              <span class="hljs-string">&quot;tcount_tbl&quot;</span>       <span class="hljs-string">&quot;transaction_test&quot;</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>     <span class="hljs-string">&quot;tbl&quot;</span>              <span class="hljs-string">&quot;tcount_tbl&quot;</span>       <span class="hljs-string">&quot;transaction_test&quot;</span><br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言图表</title>
      <link href="post/b35ac98a.html"/>
      <url>post/b35ac98a.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>R 提供了非常丰富的绘图功能，可以通过命令：<code>demo(graphics)</code>（二维图表） 或者 <code>demo(persp)</code>（三维图表）来体验 R 绘图功能的强大。</p><p>图形工具是 R 环境的一个重要组成部分。R 提供了多种绘图相关的命令，分成三类：</p><ul><li><strong>高级绘图命令</strong>：在图形设备上产生一个新的图区，它可能包括坐标轴，标签，标题等等。</li><li><strong>低级绘图命令</strong>：在一个已经存在的图上加上更多的图形元素，如额外的点，线和标签。</li><li><strong>交互式图形命令</strong>：允许交互式地用鼠标在一个已经存在的图上添加图形信息或者提取图形信息。</li></ul><p>下面介绍 R 的常用图表。</p><h1 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h1><p>条形图表示矩形条中的数据，条的长度与变量的值成比例。R 语言使用函数 <code>barplot()</code> 创建条形图。R 语言可以在条形图中绘制垂直和水平条。在条形图中，每个条可以给予不同的颜色。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建条形图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">barplot(H, xlab, ylab, main, names.arg, col)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>H</code> 是包含在条形图中使用的数值的向量或矩阵。</li><li><code>xlab</code> 是 <code>x</code> 轴的标签。</li><li><code>ylab</code> 是 <code>y</code> 轴的标签。</li><li><code>main</code> 是条形图的标题。</li><li><code>names.arg</code> 是在每个条下出现的名称的向量。</li><li><code>col</code> 用于向图中的条形提供颜色。</li></ul><h2 id="创建条形图"><a href="#创建条形图" class="headerlink" title="创建条形图"></a>创建条形图</h2><p>使用输入向量和每个条的名称创建一个简单的条形图。</p><p>以下脚本将创建并保存当前 R 语言工作目录中的条形图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>H &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;barchart.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>barplot(H)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/barchart.png" alt></p><h2 id="条形图标签，标题和颜色"><a href="#条形图标签，标题和颜色" class="headerlink" title="条形图标签，标题和颜色"></a>条形图标签，标题和颜色</h2><p>可以通过添加更多参数来扩展条形图的功能。主要参数用于添加标题。<code>col</code> 参数用于向条形添加颜色。<code>name.args</code> 是具有与输入向量相同数量的值的向量，以描述每个条的含义。</p><p>以下脚本将在当前 R 语言工作目录中创建并保存条形图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>H &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br>M &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;Jul&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;barchart_months_revenue.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>barplot(H, names.arg = M, xlab = <span class="hljs-string">&quot;Month&quot;</span>, ylab = <span class="hljs-string">&quot;Revenue&quot;</span>, col = <span class="hljs-string">&quot;blue&quot;</span>, main = <span class="hljs-string">&quot;Revenue chart&quot;</span>, border = <span class="hljs-string">&quot;red&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/barchart_months_revenue.png" alt></p><h2 id="组合条形图和堆积条形图"><a href="#组合条形图和堆积条形图" class="headerlink" title="组合条形图和堆积条形图"></a>组合条形图和堆积条形图</h2><p>我们可以使用矩阵作为输入值，在每个条中创建条形图和堆叠组的条形图。</p><p>超过两个变量表示为用于创建组合条形图和堆叠条形图的矩阵。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the input vectors.</span><br>colors &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>)<br>months &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;Jul&quot;</span>)<br>regions &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>)<br><br><span class="hljs-comment"># Create the matrix of the values.</span><br>Values &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>), nrow = <span class="hljs-number">3</span>, ncol = <span class="hljs-number">5</span>, byrow = <span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;barchart_stacked.png&quot;</span>)<br><br><span class="hljs-comment"># Create the bar chart.</span><br>barplot(Values, main = <span class="hljs-string">&quot;total revenue&quot;</span>, names.arg = months, xlab = <span class="hljs-string">&quot;month&quot;</span>, ylab = <span class="hljs-string">&quot;revenue&quot;</span>, col = colors)<br><br><span class="hljs-comment"># Add the legend to the chart.</span><br>legend(<span class="hljs-string">&quot;topleft&quot;</span>, regions, cex = <span class="hljs-number">1.3</span>, fill = colors)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/barchart_stacked.png" alt></p><h1 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h1><p>箱线图是数据集中的数据分布良好的度量。它将数据集分成三个四分位数。此图表表示数据集中的最小值，最大值，中值，第一四分位数和第三四分位数。它还可用于通过绘制每个数据集的箱线图来比较数据集之间的数据分布。</p><p>R 语言中使用 <code>boxplot()</code> 函数来创建箱线图。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建箱线图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">boxplot(x, data, notch, varwidth, <span class="hljs-built_in">names</span>, main)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量或公式。</li><li><code>data</code> 是数据框。</li><li><code>notch</code> 是逻辑值。设置为 <code>TRUE</code> 以绘制凹口。</li><li><code>varwidth</code> 是一个逻辑值。设置为 <code>TRUE</code> 以绘制与样本大小成比例的框的宽度。</li><li><code>names</code> 是将打印在每个箱线图下的组标签。</li><li><code>main</code> 用于给图表标题。</li></ul><p>我们使用 R 语言环境中可用的数据集 <code>mtcars</code> 来创建基本箱线图。让我们看看 <code>mtcars</code> 中的列 <code>mpg</code> 和 <code>cyl</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;mpg&#x27;</span>, <span class="hljs-string">&#x27;cyl&#x27;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                   mpg  cyl<br>Mazda RX4         <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span><br>Mazda RX4 Wag     <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span><br>Datsun <span class="hljs-number">710</span>        <span class="hljs-number">22.8</span>   <span class="hljs-number">4</span><br>Hornet <span class="hljs-number">4</span> Drive    <span class="hljs-number">21.4</span>   <span class="hljs-number">6</span><br>Hornet Sportabout <span class="hljs-number">18.7</span>   <span class="hljs-number">8</span><br>Valiant           <span class="hljs-number">18.1</span>   <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></p><h2 id="创建箱线图"><a href="#创建箱线图" class="headerlink" title="创建箱线图"></a>创建箱线图</h2><p>以下脚本将为 <code>mpg</code>（英里 / 加仑）和 <code>cyl</code>（气缸数）之间的关系创建箱线图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;boxplot.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>boxplot(mpg ~ cyl, data = mtcars, xlab = <span class="hljs-string">&quot;Number of Cylinders&quot;</span>, ylab = <span class="hljs-string">&quot;Miles Per Gallon&quot;</span>, main = <span class="hljs-string">&quot;Mileage Data&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/boxplot.png" alt></p><h2 id="带槽的箱线图"><a href="#带槽的箱线图" class="headerlink" title="带槽的箱线图"></a>带槽的箱线图</h2><p>我们可以绘制带槽的箱线图，以了解不同数据组的中值如何相互匹配。以下脚本将为每个数据组创建一个带缺口的箱线图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;boxplot_with_notch.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>boxplot(mpg ~ cyl, data = mtcars, xlab = <span class="hljs-string">&quot;Number of Cylinders&quot;</span>, ylab = <span class="hljs-string">&quot;Miles Per Gallon&quot;</span>, main = <span class="hljs-string">&quot;Mileage Data&quot;</span>, notch = <span class="hljs-literal">TRUE</span>, varwidth = <span class="hljs-literal">TRUE</span>, col = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>), <span class="hljs-built_in">names</span> = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;High&quot;</span>, <span class="hljs-string">&quot;Medium&quot;</span>, <span class="hljs-string">&quot;Low&quot;</span>))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/boxplot_with_notch.png" alt></p><h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><p>直方图表示被存储到范围中的变量的值的频率。直方图类似于条形图，但不同之处在于将值分组为连续范围。直方图中的每个柱表示该范围中存在的值的数量的高度。</p><p>R 语言使用 <code>hist()</code> 函数创建直方图。此函数使用向量作为输入，并使用一些更多的参数来绘制直方图。</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>使用 R 语言创建直方图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">hist(v, main, xlab, xlim, ylim, breaks, col, border)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>v</code> 是包含直方图中使用的数值的向量。</li><li><code>main</code> 表示图表的标题。</li><li><code>col</code> 用于设置条的颜色。</li><li><code>border</code> 用于设置每个条的边框颜色。</li><li><code>xlab</code> 用于给出 <code>x</code> 轴的描述。</li><li><code>xlim</code> 用于指定 <code>x</code> 轴上的值的范围。</li><li><code>ylim</code> 用于指定 <code>y</code> 轴上的值的范围。</li><li><code>break</code> 用于提及每个条的宽度。</li></ul><h2 id="创建直方图"><a href="#创建直方图" class="headerlink" title="创建直方图"></a>创建直方图</h2><p>使用输入 <code>vector</code>，<code>label</code>，<code>col</code> 和边界参数创建一个简单的直方图。</p><p>下面给出的脚本将创建并保存当前R 语言工作目录中的直方图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">8</span>, <span class="hljs-number">36</span>, <span class="hljs-number">22</span>, <span class="hljs-number">12</span>, <span class="hljs-number">41</span>, <span class="hljs-number">31</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;histogram.png&quot;</span>)<br><br><span class="hljs-comment"># Create the histogram.</span><br>hist(v, xlab = <span class="hljs-string">&quot;Weight&quot;</span>, col = <span class="hljs-string">&quot;yellow&quot;</span>, border = <span class="hljs-string">&quot;blue&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/histogram.png" alt></p><h2 id="X-和-Y-值的范围"><a href="#X-和-Y-值的范围" class="headerlink" title="X 和 Y 值的范围"></a>X 和 Y 值的范围</h2><p>要指定 X 轴和 Y 轴允许的值的范围，我们可以使用 <code>xlim</code> 和 <code>ylim</code> 参数。</p><p>每个条的宽度可以通过使用间隔来确定。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">8</span>, <span class="hljs-number">36</span>, <span class="hljs-number">22</span>, <span class="hljs-number">12</span>, <span class="hljs-number">41</span>, <span class="hljs-number">31</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;histogram_lim_breaks.png&quot;</span>)<br><br><span class="hljs-comment"># Create the histogram.</span><br>hist(v, xlab = <span class="hljs-string">&quot;Weight&quot;</span>, col = <span class="hljs-string">&quot;green&quot;</span>, border = <span class="hljs-string">&quot;red&quot;</span>, xlim = <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>), ylim = <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>), breaks = <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/histogram_lim_breaks.png" alt></p><h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><p>折线图是通过在它们之间绘制线段来连接一系列点的图。这些点在它们的坐标（通常是 X 坐标）值之一中排序。折线图通常用于识别数据中的趋势。</p><p>R 语言中的 <code>plot()</code> 函数用于创建折线图。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建折线图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">plot(v, type, col, xlab, ylab)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>v</code> 是包含数值的向量。</li><li><code>type</code> 采用值 <code>p</code> 仅绘制点，<code>l</code> 仅绘制线和 <code>o</code> 绘制点和线。</li><li><code>xlab</code> 是x轴的标签。</li><li><code>ylab</code> 是y轴的标签。</li><li><code>main</code> 是图表的标题。</li><li><code>col</code> 用于给点和线的颜色。</li></ul><h2 id="创建折线图"><a href="#创建折线图" class="headerlink" title="创建折线图"></a>创建折线图</h2><p>使用输入向量和类型参数 <code>o</code> 创建简单的折线图。以下脚本将在当前 R 工作目录中创建并保存折线图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;line_chart.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart. </span><br>plot(v, type = <span class="hljs-string">&quot;o&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/line_chart.png" alt></p><h2 id="折线图标题，颜色和标签"><a href="#折线图标题，颜色和标签" class="headerlink" title="折线图标题，颜色和标签"></a>折线图标题，颜色和标签</h2><p>线图的特征可以通过使用附加参数来扩展。我们向点和线添加颜色，为图表添加标题，并向轴添加标签。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;line_chart_label_colored.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>plot(v, type = <span class="hljs-string">&quot;o&quot;</span>, col = <span class="hljs-string">&quot;red&quot;</span>, xlab = <span class="hljs-string">&quot;Month&quot;</span>, ylab = <span class="hljs-string">&quot;Rain fall&quot;</span>, main = <span class="hljs-string">&quot;Rain fall chart&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/line_chart_label_colored.png" alt></p><h2 id="多线型折线图"><a href="#多线型折线图" class="headerlink" title="多线型折线图"></a>多线型折线图</h2><p>通过使用 <code>lines()</code> 函数，可以在同一个图表上绘制多条线。</p><p>在绘制第一行之后，<code>lines()</code> 函数可以使用一个额外的向量作为输入来绘制图表中的第二行。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br>t &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;line_chart_2_lines.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>plot(v, type = <span class="hljs-string">&quot;o&quot;</span>, col = <span class="hljs-string">&quot;red&quot;</span>, xlab = <span class="hljs-string">&quot;Month&quot;</span>, ylab = <span class="hljs-string">&quot;Rain fall&quot;</span>, main = <span class="hljs-string">&quot;Rain fall chart&quot;</span>)<br><br>lines(t, type = <span class="hljs-string">&quot;o&quot;</span>, col = <span class="hljs-string">&quot;blue&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/line_chart_2_lines.png" alt></p><h1 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h1><p>散点图显示在笛卡尔平面中绘制的许多点。每个点表示两个变量的值。在水平轴上选择一个变量，在垂直轴上选择另一个变量。</p><p>R 语言使用 <code>plot()</code> 函数创建简单散点图。</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建散点图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">plot(x, y, main, xlab, ylab, xlim, ylim, axes)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是其值为水平坐标的数据集。</li><li><code>y</code> 是其值是垂直坐标的数据集。</li><li><code>main</code> 要是图形的图块。</li><li><code>xlab</code> 是水平轴上的标签。</li><li><code>ylab</code> 是垂直轴上的标签。</li><li><code>xlim</code> 是用于绘图的 <code>x</code> 的值的极限。</li><li><code>ylim</code> 是用于绘图的 <code>y</code> 的值的极限。</li><li><code>axes</code> 指示是否应在绘图上绘制两个轴。</li></ul><h2 id="创建散点图"><a href="#创建散点图" class="headerlink" title="创建散点图"></a>创建散点图</h2><p>我们使用 R 语言环境中可用的数据集 <code>mtcars</code> 来创建基本散点图。让我们使用 <code>mtcars</code> 中的 <code>wt</code> 和 <code>mpg</code> 列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;wt&#x27;</span>, <span class="hljs-string">&#x27;mpg&#x27;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                    wt      mpg<br>Mazda RX4           <span class="hljs-number">2.620</span>   <span class="hljs-number">21.0</span><br>Mazda RX4 Wag       <span class="hljs-number">2.875</span>   <span class="hljs-number">21.0</span><br>Datsun <span class="hljs-number">710</span>          <span class="hljs-number">2.320</span>   <span class="hljs-number">22.8</span><br>Hornet <span class="hljs-number">4</span> Drive      <span class="hljs-number">3.215</span>   <span class="hljs-number">21.4</span><br>Hornet Sportabout   <span class="hljs-number">3.440</span>   <span class="hljs-number">18.7</span><br>Valiant             <span class="hljs-number">3.460</span>   <span class="hljs-number">18.1</span><br></code></pre></td></tr></table></figure></p><p>以下脚本将为 <code>wt</code>（重量）和 <code>mpg</code>（英里/加仑）之间的关系创建一个散点图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the input values.</span><br>input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;wt&#x27;</span>, <span class="hljs-string">&#x27;mpg&#x27;</span>)]<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;scatterplot.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.</span><br>plot(x = input$wt, y = input$mpg, xlab = <span class="hljs-string">&quot;Weight&quot;</span>, ylab = <span class="hljs-string">&quot;Milage&quot;</span>, xlim = <span class="hljs-built_in">c</span>(<span class="hljs-number">2.5</span>, <span class="hljs-number">5</span>), ylim = <span class="hljs-built_in">c</span>(<span class="hljs-number">15</span>, <span class="hljs-number">30</span>), main = <span class="hljs-string">&quot;Weight vs Milage&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/scatterplot.png" alt></p><h2 id="散点图矩阵"><a href="#散点图矩阵" class="headerlink" title="散点图矩阵"></a>散点图矩阵</h2><p>当我们有两个以上的变量，我们想找到一个变量和其余变量之间的相关性，我们使用散点图矩阵。我们使用 <code>pairs()</code> 函数创建散点图的矩阵。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>在 R 中创建散点图矩阵的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">pairs(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 表示成对使用的一系列变量。</li><li><code>data</code> 表示将从其获取变量的数据集。</li></ul><h3 id="创建散点图矩阵"><a href="#创建散点图矩阵" class="headerlink" title="创建散点图矩阵"></a>创建散点图矩阵</h3><p>每个变量与每个剩余变量配对。为每对绘制散点图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;scatterplot_matrices.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the matrices between 4 variables giving 12 plots.</span><br><br><span class="hljs-comment"># One variable with 3 others and total 4 variables.</span><br><br>pairs(~wt + mpg + disp + cyl, data = mtcars, main = <span class="hljs-string">&quot;Scatterplot Matrix&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当执行上面的代码中，我们得到以下输出。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/scatterplot_matrices.png" alt></p><h1 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h1><p>R 编程语言有许多库来创建图表和图表。饼图是将值表示为具有不同颜色的圆的切片。切片被标记，并且对应于每个片的数字也在图表中表示。</p><p>在 R 语言中，饼图是使用 <code>pie()</code> 函数创建的，它使用正数作为向量输入。附加参数用于控制标签，颜色，标题等。</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><p>使用 R 语言创建饼图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">pie(x, labels, radius, main, col, clockwise)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是包含饼图中使用的数值的向量。</li><li><code>labels</code> 用于给出切片的描述。</li><li><code>radius</code> 表示饼图圆的半径（值 <code>-1</code> 和 <code>+1</code> 之间）。</li><li><code>main</code> 表示图表的标题。</li><li><code>col</code> 表示调色板。</li><li><code>clockwise</code> 是指示片段是顺时针还是逆时针绘制的逻辑值。</li></ul><h2 id="创建饼状图"><a href="#创建饼状图" class="headerlink" title="创建饼状图"></a>创建饼状图</h2><p>使用输入向量和标签创建一个非常简单的饼图。以下脚本将创建并保存当前 R 语言工作目录中的饼图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>labels &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pie.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>pie(x, labels)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/pie.png" alt></p><h2 id="饼图标题和颜色"><a href="#饼图标题和颜色" class="headerlink" title="饼图标题和颜色"></a>饼图标题和颜色</h2><p>我们可以通过向函数中添加更多参数来扩展图表的功能。我们将使用参数 <code>main</code> 向图表添加标题，另一个参数是 <code>col</code>，它将在绘制图表时使用彩虹色板。托盘的长度应与图表中的值的数量相同。因此，我们使用 <code>length(x)</code>。</p><p>以下脚本将创建并保存当前 R 语言工作目录中的饼图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>labels &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pie_title_colours.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart with title and rainbow color pallet.</span><br>pie(x, labels, main = <span class="hljs-string">&quot;City pie chart&quot;</span>, col = rainbow(<span class="hljs-built_in">length</span>(x)))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/pie_title_colours.png" alt></p><h2 id="切片百分比和图表图例"><a href="#切片百分比和图表图例" class="headerlink" title="切片百分比和图表图例"></a>切片百分比和图表图例</h2><p>我们可以通过创建其他图表变量来添加切片百分比和图表图例。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>labels &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br>piepercent&lt;- <span class="hljs-built_in">round</span>(<span class="hljs-number">100</span>*x/<span class="hljs-built_in">sum</span>(x), <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pie_percentage_legends.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>pie(x, labels = piepercent, main = <span class="hljs-string">&quot;City pie chart&quot;</span>, col = rainbow(<span class="hljs-built_in">length</span>(x))), legend(<span class="hljs-string">&quot;topright&quot;</span>, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>), cex = <span class="hljs-number">0.8</span>, fill = rainbow(<span class="hljs-built_in">length</span>(x)))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/pie_percentage_legends.png" alt></p><h2 id="3D饼图"><a href="#3D饼图" class="headerlink" title="3D饼图"></a>3D饼图</h2><p>可以使用其他软件包绘制具有 3 个维度的饼图。软件包 <code>plotrix</code> 有一个名为 <code>pie3D()</code> 的函数，用于此。</p><p>如果没有安装 <code>plotrix</code> 包可以使用 <code>install.packages(&quot;plotrix&quot;)</code> 语句安装。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the library.</span><br>library(plotrix)<br><br><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>lbl &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;3d_pie_chart.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>pie3D(x, labels = lbl, explode = <span class="hljs-number">0.1</span>, main = <span class="hljs-string">&quot;Pie Chart of Countries&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/3d_pie_chart.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言教程</title>
      <link href="post/de0e67e.html"/>
      <url>post/de0e67e.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="R-的简介"><a href="#R-的简介" class="headerlink" title="R 的简介"></a>R 的简介</h2><ul><li>R 语言是用于统计分析，图形表示和报告的编程语言和软件环境。R 语言由 Ross Ihaka 和 Robert Gentleman 在新西兰奥克兰大学创建，目前由 R 语言开发核心团队开发。</li><li>R 语言的核心是解释计算机语言，其允许分支和循环以及使用函数的模块化编程。R 语言允许与以 C，C ++，.Net，Python 或 FORTRAN 语言编写的过程集成以提高效率。</li><li>R 语言在 GNU 通用公共许可证下免费提供，并为各种操作系统（如 Linux，Windows 和 Mac）提供预编译的二进制版本。</li><li>R 是一个在 GNU 风格的副本左侧的自由软件，GNU 项目的官方部分叫做 GNU S.</li></ul><h2 id="R-的演变"><a href="#R-的演变" class="headerlink" title="R 的演变"></a>R 的演变</h2><p>R 语言最初是由新西兰奥克兰奥克兰大学统计系的 Ross Ihaka 和 Robert Gentleman 写的。R 语言于 1993 年首次亮相。</p><ul><li>一大群人通过发送代码和错误报告对 R 做出了贡献。</li><li>自 1997 年年中以来，已经有一个核心组（R 核心团队）可以修改 R 源代码归档。</li></ul><h2 id="R-的特点"><a href="#R-的特点" class="headerlink" title="R 的特点"></a>R 的特点</h2><p>如前所述，R 语言是用于统计分析，图形表示和报告的编程语言和软件环境。以下是 R 语言的重要特点：</p><ul><li>R 语言是一种开发良好，简单有效的编程语言，包括条件，循环，用户定义的递归函数以及输入和输出设施。</li><li>R 语言具有有效的数据处理和存储设施，</li><li>R 语言提供了一套用于数组，列表，向量和矩阵计算的运算符。</li><li>R 语言为数据分析提供了大型，一致和集成的工具集合。</li><li>R 语言提供直接在计算机上或在纸张上打印的图形设施用于数据分析和显示。</li></ul><p>R 语言是世界上最广泛使用的统计编程语言。它是数据科学家的第一选择，并由一个充满活力和有才华的贡献者社区支持。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>根据需要，您可以在 R 语言命令提示符处编程，也可以使用 R 语言脚本文件编写程序。</p><h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><p>如果你已经配置好 R 语言环境，那么你只需要按一下的命令便可轻易开启命令提示符</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ R<br></code></pre></td></tr></table></figure></p><p>这将启动 R 语言解释器，你会得到一个提示 <code>&gt;</code> 在那里你可以开始输入你的程序，具体如下。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; myString &lt;- <span class="hljs-string">&quot;Hello, World!&quot;</span><br>&gt; <span class="hljs-built_in">print</span>(myString)<br>[1] <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure></p><p>在这里，第一个语句先定义一个字符串变量 <code>myString</code>，并将 <code>Hello，World！</code> 赋值其中，第二句则使用 <code>print()</code> 语句将变量 <code>myString</code> 的内容进行打印。</p><h2 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h2><p>通常，您将通过在脚本文件中编写程序来执行编程，然后在命令提示符下使用 R 解释器（称为 <code>Rscript</code>）来执行这些脚本。所以让我们开始在一个命名为 <code>test.R</code> 的文本文件中编写下面的代码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># My first program in R Programming</span><br>myString &lt;- <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(myString)<br></code></pre></td></tr></table></figure></p><p>将上述代码保存在 <code>test.R</code> 文件中，并在 Linux 命令提示符下执行，如下所示。即使您使用的是 Windows 或其他系统，语法也将保持不变。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ Rscript test.R <br></code></pre></td></tr></table></figure></p><p>当我们运行上面的程序，它产生以下结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[1] <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释能帮助您解释 R 语言程序中的脚本，它们在实际执行程序时会被解释器忽略。单个注释使用 <code>#</code> 在语句的开头写入，如下所示</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># My first program in R Programming</span><br></code></pre></td></tr></table></figure></p><p>R 语言不支持多行注释，但你可以使用一个小技巧，如下</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(<span class="hljs-literal">FALSE</span>) &#123;<br>   <span class="hljs-string">&quot;This is a demo for multi-line comments and it should be put inside either a single</span><br><span class="hljs-string">      OR double quote&quot;</span><br>&#125;<br><br>myString &lt;- <span class="hljs-string">&quot;Hello, World!&quot;</span><br>print(myString)<br></code></pre></td></tr></table></figure></p><p>虽然上面的注释将由 R 解释器执行，但它们不会干扰您的实际程序。但是你必须为内容加上单引号或双引号。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>通常，在使用任何编程语言进行编程时，您需要使用各种变量来存储各种信息。变量只是保留值的存储位置。这意味着，当你创建一个变量，你必须在内存中保留一些空间来存储它们。</p><p>您可能想存储各种数据类型的信息，如字符，宽字符，整数，浮点，双浮点，布尔等。基于变量的数据类型，操作系统分配内存并决定什么可以存储在保留内存中。</p><p>与其他编程语言（如 C 中的 C 和 Java）相反，变量不会声明为某种数据类型。变量分配有 R 对象，R 对象的数据类型变为变量的数据类型。尽管有很多类型的 R 对象，但经常使用的是：</p><ul><li><a href="#Vectors-向量">Vectors 向量</a></li><li><a href="#Lists-列表">Lists 列表</a></li><li><a href="#Matrices-矩阵">Matrices 矩阵</a></li><li><a href="#Arrays-数组">Arrays 数组</a></li><li><a href="#Factors-因子">Factors 因子</a></li><li><a href="#Data-Frames-数据框">Data Frames 数据框</a></li></ul><p>这些对象中最简单的是向量对象，并且这些原子向量有六种数据类型，也称为六类向量。其他 R 对象建立在原子向量之上。</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">取值</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">Logical（逻辑型）</td><td style="text-align:center">TRUE, FALSE</td><td style="text-align:left"><code>v &lt;- TRUE</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;logical&quot;</code></td></tr><tr><td style="text-align:center">Numeric（数字）</td><td style="text-align:center">12.3，5，999</td><td style="text-align:left"><code>v &lt;- 23.5</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;numeric&quot;</code></td></tr><tr><td style="text-align:center">Integer（整型）</td><td style="text-align:center">2L，34L，0L</td><td style="text-align:left"><code>v &lt;- 2L</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;integer&quot;</code></td></tr><tr><td style="text-align:center">Complex（复合型）</td><td style="text-align:center">3 + 2i</td><td style="text-align:left"><code>v &lt;- 2+5i</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;complex&quot;</code></td></tr><tr><td style="text-align:center">Character（字符）</td><td style="text-align:center">&#39;a&#39; , &quot;good&quot;, &quot;TRUE&quot;, &#39;23.4&#39;</td><td style="text-align:left"><code>v &lt;- &quot;TRUE&quot;</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;character&quot;</code></td></tr><tr><td style="text-align:center">Raw（原型）</td><td style="text-align:center">&quot;Hello&quot; 被存储为 48 65 6c 6c 6f</td><td style="text-align:left"><code>v &lt;- charToRaw(&quot;Hello&quot;)</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;raw&quot;</code></td></tr></tbody></table></div><p>在 R 编程中，非常基本的数据类型是称为向量的 R 对象，其保存如上所示的不同类的元素。请注意，在 R 中，类的数量不仅限于上述六种类型。例如，我们可以使用许多原子向量并创建一个数组，其类将成为数组。</p><h2 id="Vectors-向量"><a href="#Vectors-向量" class="headerlink" title="Vectors 向量"></a>Vectors 向量</h2><p>当你想用多个元素创建向量时，你应该使用 <code>c()</code> 函数，这意味着将元素组合成一个向量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector.</span><br>apple &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>)<br>print(apple)<br><br><span class="hljs-comment"># Get the class of the vector.</span><br>print(<span class="hljs-built_in">class</span>(apple))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;red&quot;</span>    <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;character&quot;</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#向量">向量</a>章节。</p><h2 id="Lists-列表"><a href="#Lists-列表" class="headerlink" title="Lists 列表"></a>Lists 列表</h2><p>列表是一个 R 对象，它可以在其中包含许多不同类型的元素，如向量，函数甚至其中的另一个列表。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list.</span><br>list1 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>), <span class="hljs-number">21.3</span>, <span class="hljs-built_in">sin</span>)<br><br><span class="hljs-comment"># Print the list.</span><br>print(list1)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><br>[[<span class="hljs-number">2</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">21.3</span><br><br>[[<span class="hljs-number">3</span>]]<br><span class="hljs-keyword">function</span> (x)  .Primitive(<span class="hljs-string">&quot;sin&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#列表">列表</a>章节。</p><h2 id="Matrices-矩阵"><a href="#Matrices-矩阵" class="headerlink" title="Matrices 矩阵"></a>Matrices 矩阵</h2><p>矩阵是二维矩形数据集。它可以使用矩阵函数的向量输入创建。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a matrix.</span><br>M = matrix( <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>), nrow = <span class="hljs-number">2</span>, ncol = <span class="hljs-number">3</span>, byrow = <span class="hljs-literal">TRUE</span>)<br>print(M)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-string">&quot;b&quot;</span> <br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;c&quot;</span>  <span class="hljs-string">&quot;b&quot;</span>  <span class="hljs-string">&quot;a&quot;</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#矩阵">矩阵</a>章节。</p><h2 id="Arrays-数组"><a href="#Arrays-数组" class="headerlink" title="Arrays 数组"></a>Arrays 数组</h2><p>虽然矩阵被限制为二维，但阵列可以具有任何数量的维度。数组函数使用一个 <code>dim</code> 属性创建所需的维数。在下面的例子中，我们创建了一个包含两个元素的数组，每个元素为 <code>3x3</code> 个矩阵。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create an array.</span><br>a &lt;- array(<span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br>print(a)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , <span class="hljs-number">1</span><br><br>     [,<span class="hljs-number">1</span>]     [,<span class="hljs-number">2</span>]     [,<span class="hljs-number">3</span>]    <br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span> <br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">3</span>,] <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span> <br><br>, , <span class="hljs-number">2</span><br><br>     [,<span class="hljs-number">1</span>]     [,<span class="hljs-number">2</span>]     [,<span class="hljs-number">3</span>]    <br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span> <br>[<span class="hljs-number">3</span>,] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#数组">数组</a>章节。</p><h2 id="Factors-因子"><a href="#Factors-因子" class="headerlink" title="Factors 因子"></a>Factors 因子</h2><p>因子是使用向量创建的 R 对象。它将向量与向量中元素的不同值一起存储为标签。标签总是字符，不管它在输入向量中是数字还是字符或布尔等。它们在统计建模中非常有用。使用 <code>factor()</code> 函数创建因子。<code>nlevels</code> 函数给出级别计数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector.</span><br>apple_colors &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br><br><span class="hljs-comment"># Create a factor object.</span><br>factor_apple &lt;- factor(apple_colors)<br><br><span class="hljs-comment"># Print the factor.</span><br>print(factor_apple)<br>print(nlevels(factor_apple))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] green  green  yellow  red   red   red   green <br>Levels: green red yellow<br><span class="hljs-comment"># applying the nlevels function we can know the number of distinct values</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#因子">因子</a>章节。</p><h2 id="Data-Frames-数据框"><a href="#Data-Frames-数据框" class="headerlink" title="Data Frames 数据框"></a>Data Frames 数据框</h2><p>数据框是表格数据对象。与数据框中的矩阵不同，每列可以包含不同的数据模式。第一列可以是数字，而第二列可以是字符，第三列可以是逻辑的。它是等长度的向量的列表。使用 <code>data.frame()</code> 函数创建数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>BMI &lt;-  | data.frame(<br>   gender = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Female&quot;</span>),<br>   height = <span class="hljs-built_in">c</span>(<span class="hljs-number">152</span>, <span class="hljs-number">171.5</span>, <span class="hljs-number">165</span>),<br>   weight = <span class="hljs-built_in">c</span>(<span class="hljs-number">81</span>, <span class="hljs-number">93</span>, <span class="hljs-number">78</span>),<br>   Age = <span class="hljs-built_in">c</span>(<span class="hljs-number">42</span>, <span class="hljs-number">38</span>, <span class="hljs-number">26</span>)<br>)<br>print(BMI)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  gender height weight Age<br>1   Male  <span class="hljs-number">152.0</span>     <span class="hljs-number">81</span>  <span class="hljs-number">42</span><br>2   Male  <span class="hljs-number">171.5</span>     <span class="hljs-number">93</span>  <span class="hljs-number">38</span><br>3 Female  <span class="hljs-number">165.0</span>     <span class="hljs-number">78</span>  <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#数据框">数据框</a>章节。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量为我们提供了我们的程序可以操作的命名存储。R 语言中的变量可以存储原子向量，原子向量组或许多 <code>Robject</code> 的组合。有效的变量名称由字母，数字和点或下划线字符组成。变量名以字母或不以数字后跟的点开头。</p><div class="table-container"><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">合法性</th><th style="text-align:center">原因</th></tr></thead><tbody><tr><td style="text-align:center">var_name2.</td><td style="text-align:center">有效</td><td style="text-align:center">有字母，数字，点和下划线</td></tr><tr><td style="text-align:center">VAR_NAME％</td><td style="text-align:center">无效</td><td style="text-align:center">有字符&#39;％&#39;。只有点(.)和下划线允许的。</td></tr><tr><td style="text-align:center">2var_name</td><td style="text-align:center">无效</td><td style="text-align:center">以数字开头</td></tr><tr><td style="text-align:center">.var_name, var.name</td><td style="text-align:center">有效</td><td style="text-align:center">可以用一个点(.)，但启动点(.)，不应该后跟一个数字。</td></tr><tr><td style="text-align:center">.2var_name</td><td style="text-align:center">无效</td><td style="text-align:center">起始点后面是数字使其无效。</td></tr><tr><td style="text-align:center">_var_name</td><td style="text-align:center">无效</td><td style="text-align:center">开头_这是无效的</td></tr></tbody></table></div><p>可以使用向左，向右和等于运算符来为变量分配值。可以使用 <code>print()</code> 或 <code>cat()</code> 函数打印变量的值。<code>cat()</code> 函数将多个项目组合成连续打印输出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Assignment using equal operator.</span><br>var.1 = <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Assignment using leftward operator.</span><br>var.2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;learn&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>)<br><br><span class="hljs-comment"># Assignment using rightward operator.</span><br>c(TRUE, 1) -&gt; var.3<br><br>print(var.1)<br>cat (<span class="hljs-string">&quot;var.1 is &quot;</span>, var.1 , <span class="hljs-string">&quot;&quot;</span>)<br>cat (<span class="hljs-string">&quot;var.2 is &quot;</span>, var.2 , <span class="hljs-string">&quot;&quot;</span>)<br>cat (<span class="hljs-string">&quot;var.3 is &quot;</span>, var.3 , <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>var.1 is  <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <br>var.2 is  learn R <br>var.3 is  <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure></p><p>变量的数据类型在 R 语言中，变量本身没有声明任何数据类型，而是获取分配给它的 R 对象的数据类型。所以 R 称为动态类型语言，这意味着我们可以在程序中使用同一个变量时，一次又一次地更改变量的数据类型。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">var_x &lt;- <span class="hljs-string">&quot;Hello&quot;</span><br>cat(<span class="hljs-string">&quot;The class of var_x is &quot;</span>, <span class="hljs-built_in">class</span>(var_x), <span class="hljs-string">&quot;&quot;</span>)<br><br>var_x &lt;- 34.5<br>cat(<span class="hljs-string">&quot;  Now the class of var_x is &quot;</span>, <span class="hljs-built_in">class</span>(var_x), <span class="hljs-string">&quot;&quot;</span>)<br><br>var_x &lt;- 27L<br>cat(<span class="hljs-string">&quot;   Next the class of var_x becomes &quot;</span>, <span class="hljs-built_in">class</span>(var_x), <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>The <span class="hljs-built_in">class</span> of var_x is  character <br>   Now the <span class="hljs-built_in">class</span> of var_x is  numeric <br>      Next the <span class="hljs-built_in">class</span> of var_x becomes  integer<br></code></pre></td></tr></table></figure></p><h2 id="查找变量"><a href="#查找变量" class="headerlink" title="查找变量"></a>查找变量</h2><p>要知道工作空间中当前可用的所有变量，我们使用 <code>ls()</code> 函数。<code>ls()</code> 函数也可以使用模式来匹配变量名。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">print(ls())<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;my var&quot;</span>     <span class="hljs-string">&quot;my_new_var&quot;</span> <span class="hljs-string">&quot;my_var&quot;</span>     <span class="hljs-string">&quot;var.1&quot;</span>      <br>[<span class="hljs-number">5</span>] <span class="hljs-string">&quot;var.2&quot;</span>      <span class="hljs-string">&quot;var.3&quot;</span>      <span class="hljs-string">&quot;var.name&quot;</span>   <span class="hljs-string">&quot;var_name2.&quot;</span><br>[<span class="hljs-number">9</span>] <span class="hljs-string">&quot;var_x&quot;</span>      <span class="hljs-string">&quot;varname&quot;</span> <br></code></pre></td></tr></table></figure></p><p><strong>注意</strong> ：它是一个示例输出，取决于在您的环境中声明的变量。</p><p><code>ls()</code> 函数可以使用模式来匹配变量名。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># List the variables starting with the pattern &quot;var&quot;.</span><br>print(ls(pattern = <span class="hljs-string">&quot;var&quot;</span>))   <br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;my var&quot;</span>     <span class="hljs-string">&quot;my_new_var&quot;</span> <span class="hljs-string">&quot;my_var&quot;</span>     <span class="hljs-string">&quot;var.1&quot;</span>      <br>[<span class="hljs-number">5</span>] <span class="hljs-string">&quot;var.2&quot;</span>      <span class="hljs-string">&quot;var.3&quot;</span>      <span class="hljs-string">&quot;var.name&quot;</span>   <span class="hljs-string">&quot;var_name2.&quot;</span><br>[<span class="hljs-number">9</span>] <span class="hljs-string">&quot;var_x&quot;</span>      <span class="hljs-string">&quot;varname&quot;</span>    <br></code></pre></td></tr></table></figure></p><p>以点 <code>.</code> 开头的变量被隐藏，它们可以使用 <code>ls()</code> 函数的 <code>all.names = TRUE</code> 参数列出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">print(ls(all.name = <span class="hljs-literal">TRUE</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.cars&quot;</span>        <span class="hljs-string">&quot;.Random.seed&quot;</span> <span class="hljs-string">&quot;.var_name&quot;</span>    <span class="hljs-string">&quot;.varname&quot;</span>     <span class="hljs-string">&quot;.varname2&quot;</span>   <br>[<span class="hljs-number">6</span>] <span class="hljs-string">&quot;my var&quot;</span>       <span class="hljs-string">&quot;my_new_var&quot;</span>   <span class="hljs-string">&quot;my_var&quot;</span>       <span class="hljs-string">&quot;var.1&quot;</span>        <span class="hljs-string">&quot;var.2&quot;</span>        <br>[<span class="hljs-number">11</span>]<span class="hljs-string">&quot;var.3&quot;</span>        <span class="hljs-string">&quot;var.name&quot;</span>     <span class="hljs-string">&quot;var_name2.&quot;</span>   <span class="hljs-string">&quot;var_x&quot;</span>  <br></code></pre></td></tr></table></figure></p><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p>可以使用 <code>rm()</code> 函数删除变量。下面我们删除变量 <code>var.3</code>。打印时，抛出变量错误的值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">rm(var.3)<br>print(var.3)<br> <br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;var.3&quot;</span><br>Error <span class="hljs-keyword">in</span> print(var.3) : object <span class="hljs-string">&#x27;var.3&#x27;</span> not found<br></code></pre></td></tr></table></figure></p><p>所有的变量可以通过使用 <code>rm()</code> 和 <code>ls()</code> 函数一起删除。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">rm(<span class="hljs-built_in">list</span> = ls())<br>print(ls())<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>character(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符是一个符号，通知编译器执行特定的数学或逻辑操作。R 语言具有丰富的内置运算符，并提供以下类型的运算符。</p><h2 id="运算符的类型"><a href="#运算符的类型" class="headerlink" title="运算符的类型"></a>运算符的类型</h2><p>R 语言中拥有如下几种运算符类型：</p><ul><li><a href="#算术运算符">算术运算符</a></li><li><a href="#关系运算符">关系运算符</a></li><li><a href="#逻辑运算符">逻辑运算符</a></li><li><a href="#赋值运算符">赋值运算符</a></li><li><a href="#其他运算符">其他运算符</a></li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表显示了 R 语言支持的算术运算符。操作符对向量的每个元素起作用。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">两个向量相加</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v+t)</code> <br> 它产生以下结果： <br> <code>[1] 10.0  8.5  10.0</code></td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">两个向量相减</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v-t)</code> <br> 它产生以下结果： <br> <code>[1] -6.0  2.5  2.0</code></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">两个向量相乘</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v*t)</code> <br> 它产生以下结果： <br> <code>[1] 16.0 16.5 24.0</code></td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">将第一个向量与第二个向量相除</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v/t)</code> <br> 它产生以下结果： <br> <code>[1] 0.250000 1.833333 1.500000</code></td></tr><tr><td style="text-align:center">%%</td><td style="text-align:center">两个向量求余</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v%%t)</code> <br> 它产生以下结果： <br> <code>[1] 2.0 2.5 2.0</code></td></tr><tr><td style="text-align:center">%/%</td><td style="text-align:center">两个向量相除求商</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v%/%t)</code> <br> 它产生以下结果： <br> <code>[1] 0 1 1</code></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">将第二向量作为第一向量的指数</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v^t)</code> <br> 它产生以下结果： <br> <code>[1]  256.000  166.375 1296.000</code></td></tr></tbody></table></div><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表显示了 R 语言支持的关系运算符。将第一向量的每个元素与第二向量的相应元素进行比较。比较的结果是布尔值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&gt;</td><td style="text-align:center">检查第一向量的每个元素是否大于第二向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v&gt;t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE TRUE FALSE FALSE</code></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">检查第一个向量的每个元素是否小于第二个向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v &lt; t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE FALSE TRUE FALSE</code></td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">检查第一个向量的每个元素是否等于第二个向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v == t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE FALSE FALSE TRUE</code></td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">检查第一向量的每个元素是否小于或等于第二向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v&lt;=t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE FALSE TRUE TRUE</code></td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">检查第一向量的每个元素是否大于或等于第二向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v&gt;=t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE  TRUE FALSE  TRUE</code></td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">检查第一个向量的每个元素是否不等于第二个向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v!=t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE TRUE TRUE FALSE</code></td></tr></tbody></table></div><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表显示了 R 语言支持的逻辑运算符。它只适用于逻辑，数字或复杂类型的向量。所有大于 1 的数字被认为是逻辑值 <code>TRUE</code>。</p><p>将第一向量的每个元素与第二向量的相应元素进行比较。比较的结果是布尔值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">它被称为元素逻辑 AND 运算符。<br> 它将第一向量的每个元素与第二向量的相应元素组合， <br> 并且如果两个元素都为 TRUE，则给出输出 TRUE。</td><td style="text-align:left"><code>v &lt;- c(3, 1, TRUE, 2+3i)</code> <br> <code>t &lt;- c(4, 1, FALSE, 2+3i)</code> <br> <code>print(v&amp;t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE TRUE FALSE TRUE</code></td></tr><tr><td style="text-align:center">&amp;vert；</td><td style="text-align:center">它被称为元素逻辑或运算符。<br> 它将第一向量的每个元素与第二向量的相应元素组合， <br> 并且如果元素为真，则给出输出 TRUE。</td><td style="text-align:left"><code>v &lt;- c(3, 0, TRUE, 2+2i)</code> <br> <code>t &lt;- c(4, 0, FALSE, 2+3i)</code> <br> <code>print(v</code>&vert;<code>t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE FALSE TRUE TRUE</code></td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">它被称为逻辑非运算符。取得向量的每个元素，并给出相反的逻辑值。</td><td style="text-align:left"><code>v &lt;- c(3, 0, TRUE, 2+2i)</code> <br> <code>print(!v)</code> <br> 它产生以下结果： <br> <code>[1] FALSE TRUE FALSE FALSE</code></td></tr></tbody></table></div><p>逻辑运算符 <code>&amp;&amp;</code> 和 <code>||</code> 只考虑向量的第一个元素，给出单个元素的向量作为输出。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">称为逻辑 AND 运算符。取两个向量的第一个元素， <br> 并且只有两个都为TRUE时才给出TRUE。</td><td style="text-align:left"><code>v &lt;- c(3, 0, TRUE, 2+2i)</code> <br> <code>t &lt;- c(1, 3, TRUE, 2+3i)</code> <br> <code>print(v&amp;&amp;t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE</code></td></tr><tr><td style="text-align:center">&vert;&amp;vert；</td><td style="text-align:center">称为逻辑 OR 运算符。取两个向量的第一个元素， <br> 如果其中一个为 TRUE，则给出 TRUE。</td><td style="text-align:left"><code>v &lt;- c(0, 0, TRUE, 2+2i)</code> <br> <code>t &lt;- c(0, 3, TRUE, 2+3i)</code> <br> <code>print(v</code>&vert;&vert;<code>t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE</code></td></tr></tbody></table></div><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>这些运算符用于向向量赋值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&lt;− <br> = <br> &lt;&lt;− <br></td><td style="text-align:center">称为左分配</td><td style="text-align:left"><code>v1 &lt;- c(3, 1, TRUE, 2+3i)</code> <br> <code>v2 &lt;&lt;- c(3, 1, TRUE, 2+3i)</code> <br> <code>v3 = c(3, 1, TRUE, 2+3i)</code> <br> <code>print(v1)</code> <br> <code>print(v2)</code> <br> <code>print(v3)</code> <br> 它产生以下结果： <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code> <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code> <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code></td></tr><tr><td style="text-align:center">-&gt; <br> -&gt;&gt;</td><td style="text-align:center">称为右分配</td><td style="text-align:left"><code>c(3, 1, TRUE, 2+3i) -&gt; v1</code> <br> <code>c(3, 1, TRUE, 2+3i) -&gt;&gt; v2</code> <br> <code>print(v1)</code> <br> <code>print(v2)</code> <br> 它产生以下结果： <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code> <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code></td></tr></tbody></table></div><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p>这些运算符用于特定目的，而不是一般的数学或逻辑计算。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">:</td><td style="text-align:center">冒号运算符。它为向量按顺序创建一系列数字。</td><td style="text-align:left"><code>v &lt;- 2:8</code> <br> <code>print(v)</code> <br> 它产生以下结果： <br> <code>[1] 2 3 4 5 6 7 8</code></td></tr><tr><td style="text-align:center">%in%</td><td style="text-align:center">此运算符用于标识元素是否属于向量。</td><td style="text-align:left"><code>v1 &lt;- 8</code> <br> <code>v2 &lt;- 12</code> <br> <code>t &lt;- 1:10</code> <br> <code>print(v1 %in% t)</code> <br> <code>print(v2 %in% t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE</code> <br> <code>[1] FALSE</code></td></tr><tr><td style="text-align:center">%*%</td><td style="text-align:center">此运算符用于将矩阵与其转置相乘。</td><td style="text-align:left"><code>M = matrix(c(2, 6, 5, 1, 10, 4),</code> <br> <code>nrow = 2, ncol = 3, byrow = TRUE)</code> <br> <code>t = M %*% t(M)</code> <br> <code>print(t)</code> <br> 它产生以下结果： <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>[,1] [,2]</code> <br> <code>[1,]</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>65</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>82</code> <br> <code>[2,]</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>82</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>117</code></td></tr></tbody></table></div><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>R 语言的包是 R 函数，编译代码和样本数据的集合。它们存储在 R 语言环境中名为 <code>library</code> 的目录下。默认情况下，R 语言在安装期间安装一组软件包。随后添加更多包，当它们用于某些特定目的时。当我们启动 R 语言控制台时，默认情况下只有默认包可用。已经安装的其他软件包必须显式加载以供将要使用它们的 R 语言程序使用。</p><p>所有可用的 R 语言包都列在 <a href="https://cran.r-project.org/web/packages/available_packages_by_name.html">R 语言的包</a>。</p><p>下面是用于检查，验证和使用 R 包的命令列表。</p><h2 id="检查可用-R-语言的包"><a href="#检查可用-R-语言的包" class="headerlink" title="检查可用 R 语言的包"></a>检查可用 R 语言的包</h2><p>获取包含 R 包的库位置<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">.libPaths()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果。它可能会根据您的电脑的本地设置而有所不同。</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C:/Program Files/R/R-3.2.2/library&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="获取已安装的所有软件包列表"><a href="#获取已安装的所有软件包列表" class="headerlink" title="获取已安装的所有软件包列表"></a>获取已安装的所有软件包列表</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">library()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果。它可能会根据您的电脑的本地设置而有所不同。</span><br><br>Packages <span class="hljs-keyword">in</span> library ‘C:/Program Files/R/R-<span class="hljs-number">3.2</span>.2/library’:<br><br>base                    The R Base Package<br>boot                    Bootstrap Functions (Originally by Angelo Canty<br>                        <span class="hljs-keyword">for</span> S)<br><span class="hljs-built_in">class</span>                   Functions <span class="hljs-keyword">for</span> Classification<br>cluster                 <span class="hljs-string">&quot;Finding Groups in Data&quot;</span>: Cluster Analysis<br>                        Extended Rousseeuw et al.<br>codetools               Code Analysis Tools <span class="hljs-keyword">for</span> R<br>compiler                The R Compiler Package<br></code></pre></td></tr></table></figure></p><p>获取当前在 R 环境中加载的所有包</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">search()<br>当我们执行上述代码时，它产生了以下结果。它会根据你的个人电脑的本地设置而异。<br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.GlobalEnv&quot;</span>        <span class="hljs-string">&quot;package:stats&quot;</span>     <span class="hljs-string">&quot;package:graphics&quot;</span><br>[<span class="hljs-number">4</span>] <span class="hljs-string">&quot;package:grDevices&quot;</span> <span class="hljs-string">&quot;package:utils&quot;</span>     <span class="hljs-string">&quot;package:datasets&quot;</span><br>[<span class="hljs-number">7</span>] <span class="hljs-string">&quot;package:methods&quot;</span>   <span class="hljs-string">&quot;Autoloads&quot;</span>         <span class="hljs-string">&quot;package:base&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="安装一个新的软件包"><a href="#安装一个新的软件包" class="headerlink" title="安装一个新的软件包"></a>安装一个新的软件包</h2><p>有两种方法来添加新的 R 包。一个是直接从 CRAN 目录安装，另一个是将软件包下载到本地系统并手动安装它。</p><h3 id="直接从-CRAN-安装"><a href="#直接从-CRAN-安装" class="headerlink" title="直接从 CRAN 安装"></a>直接从 CRAN 安装</h3><p>以下命令直接从 CRAN 网页获取软件包，并将软件包安装在 R 环境中。可能会提示您选择最近的镜像。根据您的位置选择一个。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;Package Name&quot;</span>)<br><br><span class="hljs-comment"># Install the package named &quot;XML&quot;.</span><br>install.packages(<span class="hljs-string">&quot;XML&quot;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="手动安装包"><a href="#手动安装包" class="headerlink" title="手动安装包"></a>手动安装包</h3><p>转到链接 <a href="https://cran.r-project.org/web/packages/available_packages_by_name.html">R Packages</a> 下载所需的包。将包作为 .zip 文件保存在本地系统中的适当位置。</p><p>现在您可以运行以下命令在 R 环境中安装此软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(file_name_with_path, repos = <span class="hljs-literal">NULL</span>, type = <span class="hljs-string">&quot;source&quot;</span>)<br><br><span class="hljs-comment"># Install the package named &quot;XML&quot;</span><br>install.packages(<span class="hljs-string">&quot;E:/XML_3.98-1.3.zip&quot;</span>, repos = <span class="hljs-literal">NULL</span>, type = <span class="hljs-string">&quot;source&quot;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="装载包到库中"><a href="#装载包到库中" class="headerlink" title="装载包到库中"></a>装载包到库中</h3><p>在包可以在代码中使用之前，必须将其加载到当前 R 环境中。您还需要加载先前已安装但在当前环境中不可用的软件包。</p><p>使用以下命令加载包：<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&quot;package Name&quot;</span>, lib.loc = <span class="hljs-string">&quot;path to library&quot;</span>)<br><br><span class="hljs-comment"># Load the package named &quot;XML&quot;</span><br>install.packages(<span class="hljs-string">&quot;E:/XML_3.98-1.3.zip&quot;</span>, repos = <span class="hljs-literal">NULL</span>, type = <span class="hljs-string">&quot;source&quot;</span>)<br></code></pre></td></tr></table></figure></p><h1 id="决策"><a href="#决策" class="headerlink" title="决策"></a>决策</h1><p>决策结构要求程序员指定要由程序评估或测试的一个或多个条件，以及如果条件被确定为真则要执行的一个或多个语句，如果条件为假则执行其他语句。</p><p>R 提供以下类型的决策语句。</p><ul><li>if 语句</li><li>if ... else 语句</li><li>switch 语句</li></ul><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if 语句由一个布尔表达式后跟一个或多个语句组成。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>if</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(boolean_expression) &#123;<br>   <span class="hljs-comment"># statement(s) will execute if the boolean expression is true.</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果布尔表达式的计算结果为 <code>true</code>，那么 <code>if</code> 语句中的代码块将被执行。如果布尔表达式的计算结果为 <code>false</code>，那么第一组代码在if语句结束之后（在结束大括号之后）将被执行。</p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/if.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- 30L<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">is.integer</span>(x)) &#123;<br>   print(<span class="hljs-string">&quot;X is an Integer&quot;</span>)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;X is an Integer&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if...else 语句"></a>if...else 语句</h2><p><code>if</code> 语句后面可以是一个可选的 <code>else</code> 语句，当布尔表达式为 <code>false</code> 时执行。</p><p><strong>语法</strong></p><p>在 R 中创建 if ... else 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(boolean_expression) &#123;<br>   <span class="hljs-comment"># statement(s) will execute if the boolean expression is true.</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment"># statement(s) will execute if the boolean expression is false.</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果布尔表达式的计算结果为真，则将执行if代码块，否则将执行代码块。</p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/if_else.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;what&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;truth&quot;</span>)<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Truth&quot;</span> %in% x) &#123;<br>   print(<span class="hljs-string">&quot;Truth is found&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   print(<span class="hljs-string">&quot;Truth is not found&quot;</span>)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Truth is not found&quot;</span><br></code></pre></td></tr></table></figure></p><p>这里 <code>Truth</code> 和 <code>truth</code> 是两个不同的字符串。</p><p><strong>if ... else if ... else 语句</strong></p><p><code>if</code> 语句后面可以跟一个可选的 <code>else if ... else</code> 语句，这对于使用 <code>single if ... else if</code> 语句测试各种条件非常有用。</p><p>当使用 <code>if</code>，<code>else if</code>，<code>else</code> 语句有几点要记住：</p><ul><li>如果可以有零个或一个 <code>else</code>，它必须在任何其他 <code>if</code> 之后。</li><li>一个 <code>if</code> 可以有零个到许多个 <code>else if</code> 和它们必须在 <code>else</code> 之前。</li><li>一旦一个 <code>else</code> 如果成功，没有任何剩余的 <code>else if</code> 或 <code>else</code> 将被测试。</li></ul><p><strong>语法</strong></p><p>在 R 中创建 <code>if ... else if ... else</code>语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(boolean_expression <span class="hljs-number">1</span>) &#123;<br>   // Executes when the boolean <span class="hljs-built_in">expression</span> <span class="hljs-number">1</span> is true.<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( boolean_expression <span class="hljs-number">2</span>) &#123;<br>   // Executes when the boolean <span class="hljs-built_in">expression</span> <span class="hljs-number">2</span> is true.<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( boolean_expression <span class="hljs-number">3</span>) &#123;<br>   // Executes when the boolean <span class="hljs-built_in">expression</span> <span class="hljs-number">3</span> is true.<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   // executes when none of the above condition is true.<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;what&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;truth&quot;</span>)<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Truth&quot;</span> %in% x) &#123;<br>   print(<span class="hljs-string">&quot;Truth is found the first time&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;truth&quot;</span> %in% x) &#123;<br>   print(<span class="hljs-string">&quot;truth is found the second time&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   print(<span class="hljs-string">&quot;No truth found&quot;</span>)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;truth is found the second time&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="switch-​语句"><a href="#switch-​语句" class="headerlink" title="switch ​语句"></a>switch ​语句</h2><p><code>switch</code> ​语句允许根据值列表测试变量的相等性。每个值都称为大小写，并且针对每种情况检查打开的变量。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>​switch​</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span>(<span class="hljs-built_in">expression</span>, case1, case2, case3....)<br></code></pre></td></tr></table></figure></p><p>以下规则适用于 <code>​switch</code> ​语句：</p><ul><li>如果 <code>​expression​</code> 的值不是字符串，那么它被强制为整数。</li><li>在交换机中可以有任意数量的 <code>​case</code> ​语句。每个案例后面都跟要比较的值和冒号。</li><li>如果整数的值在 ​<code>1</code> ​和 ​<code>nargs() - 1</code>​（参数的最大数目）之间，则对 ​case ​条件的相应元素求值并返回结果。</li><li>如果表达式求值为字符串，那么该字符串与元素的名称匹配。</li><li>如果有多个匹配，则返回第一个匹配元素。</li><li>无默认参数可用。</li><li>在没有匹配的情况下，如果有一个未命名的元素...它的值被返回。（如果有多个这样的参数，则返回错误。）</li></ul><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/switch.jpg" alt></p><p><strong>实例 1</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">switch</span>(<br>   <span class="hljs-number">3</span>,<br>   <span class="hljs-string">&quot;first&quot;</span>,<br>   <span class="hljs-string">&quot;second&quot;</span>,<br>   <span class="hljs-string">&quot;third&quot;</span>,<br>   <span class="hljs-string">&quot;fourth&quot;</span><br>)<br>print(x)<br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;third&quot;</span><br></code></pre></td></tr></table></figure></p><p><strong>实例 2</strong></p><p><code>​runif()​</code> 函数用于生成从 ​<code>0</code> ​到 ​<code>1</code> ​区间范围内的服从正态分布的随机数：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*<span class="hljs-number">3</span>, sd(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), runif(<span class="hljs-number">3</span>))  <span class="hljs-comment">#返回（2*3, sd(1:5), runif(3)）list中的第一个成分 </span><br><span class="hljs-built_in">switch</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>*<span class="hljs-number">3</span>, sd(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), runif(<span class="hljs-number">3</span>))  <span class="hljs-comment">#返回第二个成分</span><br><span class="hljs-built_in">switch</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>*<span class="hljs-number">3</span>, sd(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), runif(<span class="hljs-number">3</span>))  <span class="hljs-comment">#返回第三个成分</span><br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">6</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1.581139</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0.31508117</span> <span class="hljs-number">0.04610938</span> <span class="hljs-number">0.19489747</span><br></code></pre></td></tr></table></figure></p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>可能有一种情况，当你需要执行一段代码几次。通常，顺序执行语句。首先执行函数中的第一个语句，然后执行第二个语句，依此类推。</p><p>编程语言提供允许更复杂的执行路径的各种控制结构。</p><p>循环语句允许我们多次执行一个语句或一组语句，以下是大多数编程语言中循环语句的一般形式</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/loop.jpg" alt></p><p><strong>循环控制语句</strong></p><p>循环控制语句从其正常序列改变执行。当执行离开作用域时，在该作用域中创建的所有自动对象都将被销毁。</p><p>R 语言支持以下控制语句。</p><ul><li>break</li><li>next</li></ul><h2 id="Repeat-语句"><a href="#Repeat-语句" class="headerlink" title="Repeat 语句"></a>Repeat 语句</h2><p><code>repeat</code> 循环重复执行相同的代码，直到满足停止条件。</p><p><strong>语法</strong></p><p>在R中创建Repeat循环的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">repeat</span> &#123; <br>   commands <br>   <span class="hljs-keyword">if</span>(condition) &#123;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/repeat.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;loop&quot;</span>)<br>cnt &lt;- 2<br><br><span class="hljs-keyword">repeat</span> &#123;<br>   print(v)<br>   cnt &lt;- cnt+<span class="hljs-number">1</span><br>   <br>   <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p><code>while</code> 循环一次又一次地执行相同的代码，直到满足停止条件。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>while</code> 循环的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">while</span> (test_expression) &#123;<br>   statement<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/while.jpg" alt></p><p><code>while</code> 循环的关键点是循环可能永远不会运行。当条件被测试并且结果为 <code>false</code> 时，循环体将被跳过，<code>while</code> 循环之后的第一条语句将被执行。</p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;while loop&quot;</span>)<br>cnt &lt;- 2<br><br><span class="hljs-keyword">while</span> (cnt &lt; <span class="hljs-number">7</span>) &#123;<br>   print(v)<br>   cnt = cnt + <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><p><code>for</code> 循环是一种重复控制结构，允许您有效地编写需要执行特定次数的循环。</p><p>R 的 <code>for</code> 循环是特别灵活的，因为它们不限于整数，或者输入中的偶数。我们可以传递字符向量，逻辑向量，列表或表达式。</p><p><strong>语法</strong></p><p>在 R 中创建一个 <code>for</code> 循环语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 条件) &#123;<br>   循环体<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/for.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">LETTERS</span>[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> ( i <span class="hljs-keyword">in</span> v) &#123;<br>   print(i)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果 </span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;A&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;B&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;D&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>R 语言中的 <code>break</code> 语句有以下两种用法：</p><p>当在循环中遇到 <code>break</code> 语句时，循环立即终止，并且程序控制在循环之后的下一语句处恢复。它可以用于终止 <code>switch</code> 语句中的情况。语法在 R 中创建 <code>break</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/break.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;loop&quot;</span>)<br>cnt &lt;- 2<br><br><span class="hljs-keyword">repeat</span> &#123;<br>   print(v)<br>   cnt &lt;- cnt + <span class="hljs-number">1</span><br><br>   <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br></code></pre></td></tr></table></figure></p><h2 id="next-语句"><a href="#next-语句" class="headerlink" title="next 语句"></a>next 语句</h2><p>R 语言存在 <code>next</code> 语句，当我们想跳过循环的当前迭代而不终止它时便可使用 <code>next</code>。遇到 <code>next</code> 时，R 解析器跳过本次迭代，并开始循环的下一次迭代。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>next</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/next.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">LETTERS</span>[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>]<br><span class="hljs-keyword">for</span> ( i <span class="hljs-keyword">in</span> v) &#123;<br>   <br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&quot;D&quot;</span>) &#123;<br>      <span class="hljs-keyword">next</span><br>   &#125;<br>   print(i)<br>&#125;<br><br><span class="hljs-comment">#当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;A&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;B&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;E&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;F&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h1><p>R 语言中的数据重塑是关于改变数据被组织成行和列的方式。</p><p>大多数时间 R 语言中的数据处理是通过将输入数据作为数据框来完成的。很容易从数据框的行和列中提取数据，但是在某些情况下，我们需要的数据框格式与我们接收数据框的格式不同。R 语言具有许多函数，可以在数据框中拆分，合并和将行更改为列，反之亦然。</p><h2 id="数据框中加入列和行"><a href="#数据框中加入列和行" class="headerlink" title="数据框中加入列和行"></a>数据框中加入列和行</h2><p>我们可以使用 <code>cbind()</code> 函数连接多个向量来创建数据框。此外，我们可以使用 <code>rbind()</code> 函数合并两个数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create vector objects.</span><br>city &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Tampa&quot;</span>, <span class="hljs-string">&quot;Seattle&quot;</span>, <span class="hljs-string">&quot;Hartford&quot;</span>, <span class="hljs-string">&quot;Denver&quot;</span>)<br>state &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;FL&quot;</span>, <span class="hljs-string">&quot;WA&quot;</span>, <span class="hljs-string">&quot;CT&quot;</span>, <span class="hljs-string">&quot;CO&quot;</span>)<br>zipcode &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">33602</span>, <span class="hljs-number">98104</span>, <span class="hljs-number">06161</span>, <span class="hljs-number">80294</span>)<br><br><span class="hljs-comment"># Combine above three vectors into one data frame.</span><br>addresses &lt;- cbind(city, state, zipcode)<br><br><span class="hljs-comment"># Print a header.</span><br>cat(<span class="hljs-string">&quot;# # # # The First data frame&quot;</span>)<br><br><span class="hljs-comment"># Print the data frame.</span><br>print(addresses)<br><br><span class="hljs-comment"># Create another data frame with similar columns</span><br>new.address &lt;- data.frame(<br>   city = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Lowry&quot;</span>, <span class="hljs-string">&quot;Charlotte&quot;</span>),<br>   state = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;CO&quot;</span>, <span class="hljs-string">&quot;FL&quot;</span>),<br>   zipcode = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;80230&quot;</span>, <span class="hljs-string">&quot;33949&quot;</span>),<br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Print a header.</span><br>cat(<span class="hljs-string">&quot;# # # The Second data frame&quot;</span>)<br><br><span class="hljs-comment"># Print the data frame.</span><br>print(new.address)<br><br><span class="hljs-comment"># Combine rows form both the data frames.</span><br>all.addresses &lt;- rbind(addresses, new.address)<br><br><span class="hljs-comment"># Print a header.</span><br>cat(<span class="hljs-string">&quot;# # # The combined data frame&quot;</span>)<br><br><span class="hljs-comment"># Print the result.</span><br>print(all.addresses)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br><span class="hljs-comment"># # # # The First data frame</span><br>     city       state zipcode<br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;Tampa&quot;</span>    <span class="hljs-string">&quot;FL&quot;</span>  <span class="hljs-string">&quot;33602&quot;</span><br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;Seattle&quot;</span>  <span class="hljs-string">&quot;WA&quot;</span>  <span class="hljs-string">&quot;98104&quot;</span><br>[<span class="hljs-number">3</span>,] <span class="hljs-string">&quot;Hartford&quot;</span> <span class="hljs-string">&quot;CT&quot;</span>  <span class="hljs-string">&quot;6161&quot;</span> <br>[<span class="hljs-number">4</span>,] <span class="hljs-string">&quot;Denver&quot;</span>   <span class="hljs-string">&quot;CO&quot;</span>  <span class="hljs-string">&quot;80294&quot;</span><br><br><span class="hljs-comment"># # # The Second data frame</span><br>       city state zipcode<br>1     Lowry    CO   <span class="hljs-number">80230</span><br>2 Charlotte    FL   <span class="hljs-number">33949</span><br><br><span class="hljs-comment"># # # The combined data frame</span><br>       city state zipcode<br>1     Tampa    FL   <span class="hljs-number">33602</span><br>2   Seattle    WA   <span class="hljs-number">98104</span><br>3  Hartford    CT    <span class="hljs-number">6161</span><br>4    Denver    CO   <span class="hljs-number">80294</span><br>5     Lowry    CO   <span class="hljs-number">80230</span><br>6 Charlotte    FL   <span class="hljs-number">33949</span><br></code></pre></td></tr></table></figure></p><h2 id="合并数据框"><a href="#合并数据框" class="headerlink" title="合并数据框"></a>合并数据框</h2><p>我们可以使用 <code>merge()</code> 函数合并两个数据框。数据框必须具有相同的列名称，在其上进行合并。</p><p>在下面的例子中，我们考虑使用 <code>library()</code> 函数加载 <code>MASS</code> 第三方包，使用 <code>MASS</code> 中有关 <code>Pima Indian Women</code> 的糖尿病的数据集。我们基于血压（bp）和体重指数（bmi）的值合并两个数据集。在选择这两列用于合并时，其中这两个变量的值在两个数据集中匹配的记录被组合在一起以形成单个数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r">library(MASS)<br>merged.Pima &lt;- merge(x = Pima.te, y = Pima.tr,<br>   by.x = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;bp&quot;</span>, <span class="hljs-string">&quot;bmi&quot;</span>),<br>   by.y = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;bp&quot;</span>, <span class="hljs-string">&quot;bmi&quot;</span>)<br>)<br>print(merged.Pima)<br>nrow(merged.Pima)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>   bp  bmi npreg.x glu.x skin.x ped.x age.x type.x npreg.y glu.y skin.y ped.y age.y type.y<br>1  <span class="hljs-number">60</span> <span class="hljs-number">33.8</span>       <span class="hljs-number">1</span>   <span class="hljs-number">117</span>     <span class="hljs-number">23</span> <span class="hljs-number">0.466</span>    <span class="hljs-number">27</span>     No       <span class="hljs-number">2</span>   <span class="hljs-number">125</span>     <span class="hljs-number">20</span> <span class="hljs-number">0.088</span>    <span class="hljs-number">31</span>     No<br>2  <span class="hljs-number">64</span> <span class="hljs-number">29.7</span>       <span class="hljs-number">2</span>    <span class="hljs-number">75</span>     <span class="hljs-number">24</span> <span class="hljs-number">0.370</span>    <span class="hljs-number">33</span>     No       <span class="hljs-number">2</span>   <span class="hljs-number">100</span>     <span class="hljs-number">23</span> <span class="hljs-number">0.368</span>    <span class="hljs-number">21</span>     No<br>3  <span class="hljs-number">64</span> <span class="hljs-number">31.2</span>       <span class="hljs-number">5</span>   <span class="hljs-number">189</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.583</span>    <span class="hljs-number">29</span>    Yes       <span class="hljs-number">3</span>   <span class="hljs-number">158</span>     <span class="hljs-number">13</span> <span class="hljs-number">0.295</span>    <span class="hljs-number">24</span>     No<br>4  <span class="hljs-number">64</span> <span class="hljs-number">33.2</span>       <span class="hljs-number">4</span>   <span class="hljs-number">117</span>     <span class="hljs-number">27</span> <span class="hljs-number">0.230</span>    <span class="hljs-number">24</span>     No       <span class="hljs-number">1</span>    <span class="hljs-number">96</span>     <span class="hljs-number">27</span> <span class="hljs-number">0.289</span>    <span class="hljs-number">21</span>     No<br>5  <span class="hljs-number">66</span> <span class="hljs-number">38.1</span>       <span class="hljs-number">3</span>   <span class="hljs-number">115</span>     <span class="hljs-number">39</span> <span class="hljs-number">0.150</span>    <span class="hljs-number">28</span>     No       <span class="hljs-number">1</span>   <span class="hljs-number">114</span>     <span class="hljs-number">36</span> <span class="hljs-number">0.289</span>    <span class="hljs-number">21</span>     No<br>6  <span class="hljs-number">68</span> <span class="hljs-number">38.5</span>       <span class="hljs-number">2</span>   <span class="hljs-number">100</span>     <span class="hljs-number">25</span> <span class="hljs-number">0.324</span>    <span class="hljs-number">26</span>     No       <span class="hljs-number">7</span>   <span class="hljs-number">129</span>     <span class="hljs-number">49</span> <span class="hljs-number">0.439</span>    <span class="hljs-number">43</span>    Yes<br>7  <span class="hljs-number">70</span> <span class="hljs-number">27.4</span>       <span class="hljs-number">1</span>   <span class="hljs-number">116</span>     <span class="hljs-number">28</span> <span class="hljs-number">0.204</span>    <span class="hljs-number">21</span>     No       <span class="hljs-number">0</span>   <span class="hljs-number">124</span>     <span class="hljs-number">20</span> <span class="hljs-number">0.254</span>    <span class="hljs-number">36</span>    Yes<br>8  <span class="hljs-number">70</span> <span class="hljs-number">33.1</span>       <span class="hljs-number">4</span>    <span class="hljs-number">91</span>     <span class="hljs-number">32</span> <span class="hljs-number">0.446</span>    <span class="hljs-number">22</span>     No       <span class="hljs-number">9</span>   <span class="hljs-number">123</span>     <span class="hljs-number">44</span> <span class="hljs-number">0.374</span>    <span class="hljs-number">40</span>     No<br>9  <span class="hljs-number">70</span> <span class="hljs-number">35.4</span>       <span class="hljs-number">9</span>   <span class="hljs-number">124</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.282</span>    <span class="hljs-number">34</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">134</span>     <span class="hljs-number">23</span> <span class="hljs-number">0.542</span>    <span class="hljs-number">29</span>    Yes<br>10 <span class="hljs-number">72</span> <span class="hljs-number">25.6</span>       <span class="hljs-number">1</span>   <span class="hljs-number">157</span>     <span class="hljs-number">21</span> <span class="hljs-number">0.123</span>    <span class="hljs-number">24</span>     No       <span class="hljs-number">4</span>    <span class="hljs-number">99</span>     <span class="hljs-number">17</span> <span class="hljs-number">0.294</span>    <span class="hljs-number">28</span>     No<br>11 <span class="hljs-number">72</span> <span class="hljs-number">37.7</span>       <span class="hljs-number">5</span>    <span class="hljs-number">95</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.370</span>    <span class="hljs-number">27</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">103</span>     <span class="hljs-number">32</span> <span class="hljs-number">0.324</span>    <span class="hljs-number">55</span>     No<br>12 <span class="hljs-number">74</span> <span class="hljs-number">25.9</span>       <span class="hljs-number">9</span>   <span class="hljs-number">134</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.460</span>    <span class="hljs-number">81</span>     No       <span class="hljs-number">8</span>   <span class="hljs-number">126</span>     <span class="hljs-number">38</span> <span class="hljs-number">0.162</span>    <span class="hljs-number">39</span>     No<br>13 <span class="hljs-number">74</span> <span class="hljs-number">25.9</span>       <span class="hljs-number">1</span>    <span class="hljs-number">95</span>     <span class="hljs-number">21</span> <span class="hljs-number">0.673</span>    <span class="hljs-number">36</span>     No       <span class="hljs-number">8</span>   <span class="hljs-number">126</span>     <span class="hljs-number">38</span> <span class="hljs-number">0.162</span>    <span class="hljs-number">39</span>     No<br>14 <span class="hljs-number">78</span> <span class="hljs-number">27.6</span>       <span class="hljs-number">5</span>    <span class="hljs-number">88</span>     <span class="hljs-number">30</span> <span class="hljs-number">0.258</span>    <span class="hljs-number">37</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">125</span>     <span class="hljs-number">31</span> <span class="hljs-number">0.565</span>    <span class="hljs-number">49</span>    Yes<br>15 <span class="hljs-number">78</span> <span class="hljs-number">27.6</span>      <span class="hljs-number">10</span>   <span class="hljs-number">122</span>     <span class="hljs-number">31</span> <span class="hljs-number">0.512</span>    <span class="hljs-number">45</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">125</span>     <span class="hljs-number">31</span> <span class="hljs-number">0.565</span>    <span class="hljs-number">49</span>    Yes<br>16 <span class="hljs-number">78</span> <span class="hljs-number">39.4</span>       <span class="hljs-number">2</span>   <span class="hljs-number">112</span>     <span class="hljs-number">50</span> <span class="hljs-number">0.175</span>    <span class="hljs-number">24</span>     No       <span class="hljs-number">4</span>   <span class="hljs-number">112</span>     <span class="hljs-number">40</span> <span class="hljs-number">0.236</span>    <span class="hljs-number">38</span>     No<br>17 <span class="hljs-number">88</span> <span class="hljs-number">34.5</span>       <span class="hljs-number">1</span>   <span class="hljs-number">117</span>     <span class="hljs-number">24</span> <span class="hljs-number">0.403</span>    <span class="hljs-number">40</span>    Yes       <span class="hljs-number">4</span>   <span class="hljs-number">127</span>     <span class="hljs-number">11</span> <span class="hljs-number">0.598</span>    <span class="hljs-number">28</span>     No<br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">17</span><br></code></pre></td></tr></table></figure></p><p>有时，电子表格数据的格式很紧凑，可以给出每个主题的协变量，然后是该主题的所有观测值。R 的建函数需要在单个列中进行观察。考虑以下来自重复 <code>MRI</code> 脑测量的数据样本：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">Status   Age    V1     V2     V3    V4<br>     P <span class="hljs-number">23646</span> <span class="hljs-number">45190</span>  <span class="hljs-number">50333</span>  <span class="hljs-number">55166</span> <span class="hljs-number">56271</span><br>    CC <span class="hljs-number">26174</span> <span class="hljs-number">35535</span>  <span class="hljs-number">38227</span>  <span class="hljs-number">37911</span> <span class="hljs-number">41184</span><br>    CC <span class="hljs-number">27723</span> <span class="hljs-number">25691</span>  <span class="hljs-number">25712</span>  <span class="hljs-number">26144</span> <span class="hljs-number">26398</span><br>    CC <span class="hljs-number">27193</span> <span class="hljs-number">30949</span>  <span class="hljs-number">29693</span>  <span class="hljs-number">29754</span> <span class="hljs-number">30772</span><br>    CC <span class="hljs-number">24370</span> <span class="hljs-number">50542</span>  <span class="hljs-number">51966</span>  <span class="hljs-number">54341</span> <span class="hljs-number">54273</span><br>    CC <span class="hljs-number">28359</span> <span class="hljs-number">58591</span>  <span class="hljs-number">58803</span>  <span class="hljs-number">59435</span> <span class="hljs-number">61292</span><br>    CC <span class="hljs-number">25136</span> <span class="hljs-number">45801</span>  <span class="hljs-number">45389</span>  <span class="hljs-number">47197</span> <span class="hljs-number">47126</span><br></code></pre></td></tr></table></figure></p><p>在每个主题上有两个协变量和多达四个测量值。数据从 Excel 导出为 <code>mr.csv</code> 文件。</p><p>我们可以使用堆栈来帮助操纵这些数据以给出单个响应。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">zz &lt;- read.csv(<span class="hljs-string">&quot;mr.csv&quot;</span>, strip.white = <span class="hljs-literal">TRUE</span>)<br>zzz &lt;- cbind(zz[gl(nrow(zz), <span class="hljs-number">1</span>, <span class="hljs-number">4</span>*nrow(zz)), <span class="hljs-number">1</span>:<span class="hljs-number">2</span>], stack(zz[, <span class="hljs-number">3</span>:<span class="hljs-number">6</span>]))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>      Status   Age values ind<br>X1         P <span class="hljs-number">23646</span>  <span class="hljs-number">45190</span>  V1<br>X2        CC <span class="hljs-number">26174</span>  <span class="hljs-number">35535</span>  V1<br>X3        CC <span class="hljs-number">27723</span>  <span class="hljs-number">25691</span>  V1<br>X4        CC <span class="hljs-number">27193</span>  <span class="hljs-number">30949</span>  V1<br>X5        CC <span class="hljs-number">24370</span>  <span class="hljs-number">50542</span>  V1<br>X6        CC <span class="hljs-number">28359</span>  <span class="hljs-number">58591</span>  V1<br>X7        CC <span class="hljs-number">25136</span>  <span class="hljs-number">45801</span>  V1<br>X11        P <span class="hljs-number">23646</span>  <span class="hljs-number">50333</span>  V2<br>...<br></code></pre></td></tr></table></figure></p><p>函数 <code>unstack</code> 的方向相反，可能对导出数据很有用。</p><p>另一种方法是使用函数重塑</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">reshape(zz, idvar=<span class="hljs-string">&quot;id&quot;</span>, timevar=<span class="hljs-string">&quot;var&quot;</span>, varying=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;V1&quot;</span>, <span class="hljs-string">&quot;V2&quot;</span>, <span class="hljs-string">&quot;V3&quot;</span>, <span class="hljs-string">&quot;V4&quot;</span>)), direction=<span class="hljs-string">&quot;long&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>    Status   Age var    V1 id<br>1.1      P <span class="hljs-number">23646</span>   <span class="hljs-number">1</span> <span class="hljs-number">45190</span>  <span class="hljs-number">1</span><br>2.1     CC <span class="hljs-number">26174</span>   <span class="hljs-number">1</span> <span class="hljs-number">35535</span>  <span class="hljs-number">2</span><br>3.1     CC <span class="hljs-number">27723</span>   <span class="hljs-number">1</span> <span class="hljs-number">25691</span>  <span class="hljs-number">3</span><br>4.1     CC <span class="hljs-number">27193</span>   <span class="hljs-number">1</span> <span class="hljs-number">30949</span>  <span class="hljs-number">4</span><br>5.1     CC <span class="hljs-number">24370</span>   <span class="hljs-number">1</span> <span class="hljs-number">50542</span>  <span class="hljs-number">5</span><br>6.1     CC <span class="hljs-number">28359</span>   <span class="hljs-number">1</span> <span class="hljs-number">58591</span>  <span class="hljs-number">6</span><br>7.1     CC <span class="hljs-number">25136</span>   <span class="hljs-number">1</span> <span class="hljs-number">45801</span>  <span class="hljs-number">7</span><br>1.2      P <span class="hljs-number">23646</span>   <span class="hljs-number">2</span> <span class="hljs-number">50333</span>  <span class="hljs-number">1</span><br>2.2     CC <span class="hljs-number">26174</span>   <span class="hljs-number">2</span> <span class="hljs-number">38227</span>  <span class="hljs-number">2</span><br>...<br></code></pre></td></tr></table></figure></p><p>重塑函数的语法比堆栈更复杂，但可以用于 <code>long</code> 表单中不止一列的数据。如果 <code>direction=&quot;width&quot;</code>，重塑还可以执行相反的转换。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是一组组合在一起以执行特定任务的语句。R 语言具有大量内置函数，用户可以创建自己的函数。</p><p>在 R 语言中，函数是一个对象，因此 R 语言解释器能够将控制传递给函数，以及函数完成动作所需的参数。</p><p>该函数依次执行其任务并将控制返回到解释器以及可以存储在其他对象中的任何结果。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>使用关键字函数创建 R 语言的函数。R 语言的函数定义的基本语法如下</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">function_name &lt;- <span class="hljs-keyword">function</span>(arg_1, arg_2, ...) &#123;<br>   Function body<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>函数的不同部分：</p><ul><li><strong>函数名称</strong>：这是函数的实际名称。它作为具有此名称的对象存储在 R 环境中。</li><li><strong>参数</strong>：参数是一个占位符。当函数被调用时，你传递一个值到参数。参数是可选的，也就是说，一个函数可能不包含参数。参数也可以有默认值。</li><li><strong>函数体</strong>：函数体包含定义函数的语句集合。</li><li><strong>返回值</strong>：函数的返回值是要评估的函数体中的最后一个表达式。</li></ul><p>R 语言有许多内置函数，可以在程序中直接调用而无需先定义它们。我们还可以创建和使用我们自己的函数，称为用户定义的函数。</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>内置函数的简单示例是 <code>seq()</code>，<code>mean()</code>，<code>max()</code>，<code>sum(x)</code> 和 <code>paste(...)</code> 等。它们由用户编写的程序直接调用。您可以参考最广泛使用的 R 函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of numbers from 32 to 44.</span><br>print(seq(<span class="hljs-number">32</span>, <span class="hljs-number">44</span>))<br><br><span class="hljs-comment"># Find mean of numbers from 25 to 82.</span><br>print(mean(<span class="hljs-number">25</span>:<span class="hljs-number">82</span>))<br><br><span class="hljs-comment"># Find sum of numbers frm 41 to 68.</span><br>print(<span class="hljs-built_in">sum</span>(<span class="hljs-number">41</span>:<span class="hljs-number">68</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">32</span> <span class="hljs-number">33</span> <span class="hljs-number">34</span> <span class="hljs-number">35</span> <span class="hljs-number">36</span> <span class="hljs-number">37</span> <span class="hljs-number">38</span> <span class="hljs-number">39</span> <span class="hljs-number">40</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">43</span> <span class="hljs-number">44</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">53.5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1526</span><br></code></pre></td></tr></table></figure></p><h2 id="用户定义的函数"><a href="#用户定义的函数" class="headerlink" title="用户定义的函数"></a>用户定义的函数</h2><p>我们可以在 R 语言中创建用户定义的函数。它们特定于用户想要的，一旦创建，它们就可以像内置函数一样使用。下面是一个创建和使用函数的例子。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function to print squares of numbers in sequence.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a) &#123;<br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:a) &#123;<br>      b &lt;- i^<span class="hljs-number">2</span><br>      print(b)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function to print squares of numbers in sequence.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a) &#123;<br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:a) &#123;<br>      b &lt;- i^<span class="hljs-number">2</span><br>      print(b)<br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># Call the function new.function supplying 6 as an argument.</span><br>new.function(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">4</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure></p><h2 id="调用没有参数的函数"><a href="#调用没有参数的函数" class="headerlink" title="调用没有参数的函数"></a>调用没有参数的函数</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function without an argument.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>() &#123;<br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:<span class="hljs-number">5</span>) &#123;<br>      print(i^<span class="hljs-number">2</span>)<br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># Call the function without supplying an argument.</span><br>new.function()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">4</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">16</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure></p><h2 id="使用参数值调用函数（按位置和名称）"><a href="#使用参数值调用函数（按位置和名称）" class="headerlink" title="使用参数值调用函数（按位置和名称）"></a>使用参数值调用函数（按位置和名称）</h2><p>函数调用的参数可以按照函数中定义的顺序提供，也可以以不同的顺序提供，但分配给参数的名称。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function with arguments.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a, b, <span class="hljs-built_in">c</span>) &#123;<br>   result &lt;- a * b + <span class="hljs-built_in">c</span><br>   print(result)<br>&#125;<br><br><span class="hljs-comment"># Call the function by position of arguments.</span><br>new.function(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>)<br><br><span class="hljs-comment"># Call the function by names of the arguments.</span><br>new.function(a = <span class="hljs-number">11</span>, b = <span class="hljs-number">5</span>, <span class="hljs-built_in">c</span> = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">26</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">58</span><br></code></pre></td></tr></table></figure></p><h2 id="使用默认参数调用函数"><a href="#使用默认参数调用函数" class="headerlink" title="使用默认参数调用函数"></a>使用默认参数调用函数</h2><p>我们可以在函数定义中定义参数的值，并调用函数而不提供任何参数以获取默认结果。但是我们也可以通过提供参数的新值来获得非默认结果来调用这样的函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function with arguments.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a = <span class="hljs-number">3</span>, b = <span class="hljs-number">6</span>) &#123;<br>   result &lt;- a * b<br>   print(result)<br>&#125;<br><br><span class="hljs-comment"># Call the function without giving any argument.</span><br>new.function()<br><br><span class="hljs-comment"># Call the function with giving new values of the argument.</span><br>new.function(<span class="hljs-number">9</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">18</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure></p><h2 id="函数的延迟计算"><a href="#函数的延迟计算" class="headerlink" title="函数的延迟计算"></a>函数的延迟计算</h2><p>对函数的参数进行延迟评估，这意味着它们只有在函数体需要时才进行评估。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function with arguments.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a, b) &#123;<br>   print(a^<span class="hljs-number">2</span>)<br>   print(a)<br>   print(b)<br>&#125;<br><br><span class="hljs-comment"># Evaluate the function without supplying one of the arguments.</span><br>new.function(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">36</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">6</span><br>Error <span class="hljs-keyword">in</span> print(b) : argument <span class="hljs-string">&quot;b&quot;</span> is <span class="hljs-built_in">missing</span>, with no default<br></code></pre></td></tr></table></figure></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>在 R 语言中的单引号或双引号对中写入的任何值都被视为字符串。R 语言存储的每个字符串都在双引号内，即使是使用单引号创建的依旧如此。</p><h2 id="字符串构造规则"><a href="#字符串构造规则" class="headerlink" title="字符串构造规则"></a>字符串构造规则</h2><p>在字符串的开头和结尾的引号应该是两个双引号或两个单引号。它们不能被混合。</p><ul><li>双引号可以插入以单引号开头和结尾的字符串中。</li><li>单引号可以插入以双引号开头和结尾的字符串中。</li><li>双引号不能插入以双引号开头和结尾的字符串中。</li><li>单引号不能插入以单引号开头和结尾的字符串中。</li></ul><p><strong>有效字符串的示例</strong></p><p>以下示例阐明了在 R 语言中创建字符串的规则。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">a &lt;- <span class="hljs-string">&#x27;Start and end with single quote&#x27;</span><br>print(a)<br><br>b &lt;- <span class="hljs-string">&quot;Start and end with double quotes&quot;</span><br>print(b)<br><br>c &lt;- <span class="hljs-string">&quot;single quote &#x27; in between double quotes&quot;</span><br>print(<span class="hljs-built_in">c</span>)<br><br>d &lt;- <span class="hljs-string">&#x27;Double quotes &quot; in between single quote&#x27;</span><br>print(d)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Start and end with single quote&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Start and end with double quotes&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;single quote &#x27; in between double quote&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Double quote &quot;</span> <span class="hljs-keyword">in</span> between single <span class="hljs-built_in">quote</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></p><p><strong>无效字符串的示例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">e &lt;- <span class="hljs-string">&#x27;Mixed quotes&quot;</span><br><span class="hljs-string">print(e)</span><br><span class="hljs-string"></span><br><span class="hljs-string">f &lt;- &#x27;</span>Single <span class="hljs-built_in">quote</span> <span class="hljs-string">&#x27; inside single quote&#x27;</span><br>print(f)<br><br>g &lt;- <span class="hljs-string">&quot;Double quotes &quot;</span> inside double quotes<span class="hljs-string">&quot;</span><br><span class="hljs-string">print(g)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 当我们运行脚本失败给下面的结果：</span><br><span class="hljs-string"></span><br><span class="hljs-string">...: unexpected INCOMPLETE_STRING</span><br><span class="hljs-string"></span><br><span class="hljs-string">.... unexpected symbol </span><br><span class="hljs-string">1: f &lt;- &#x27;Single quote &#x27; inside</span><br><span class="hljs-string"></span><br><span class="hljs-string">unexpected symbol</span><br><span class="hljs-string">1: g &lt;- &quot;</span>Double quotes <span class="hljs-string">&quot; inside</span><br></code></pre></td></tr></table></figure></p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><p>R 语言中的许多字符串使用 <code>paste()</code> 函数组合。它可以采取任何数量的参数组合在一起。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">paste(..., sep = <span class="hljs-string">&quot; &quot;</span>, collapse = <span class="hljs-literal">NULL</span>)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>...</code>表示要组合的任意数量的自变量。</li><li><code>sep</code> 表示参数之间的任何分隔符。它是可选的。</li><li><code>collapse</code> 用于消除两个字符串之间的空格。但不是一个字符串的两个字内的空间。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">a &lt;- <span class="hljs-string">&quot;Hello&quot;</span><br>b &lt;- <span class="hljs-string">&#x27;How&#x27;</span><br>c &lt;- <span class="hljs-string">&quot;are you? &quot;</span><br><br>print(paste(a, b, <span class="hljs-built_in">c</span>))<br>print(paste(a, b, <span class="hljs-built_in">c</span>, sep = <span class="hljs-string">&quot;-&quot;</span>))<br>print(paste(a, b, <span class="hljs-built_in">c</span>, sep = <span class="hljs-string">&quot;&quot;</span>, collapse = <span class="hljs-string">&quot;&quot;</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello How are you? &quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello-How-are you? &quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;HelloHoware you? &quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="格式化数字和字符串"><a href="#格式化数字和字符串" class="headerlink" title="格式化数字和字符串"></a>格式化数字和字符串</h3><p>可以使用 <code>format()</code> 函数将数字和字符串格式化为特定样式。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">format(x, digits, nsmall, scientific, width, justify = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;left&quot;</span>, <span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-string">&quot;centre&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>))<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量输入。</li><li><code>digits</code> 是显示的总位数。</li><li><code>nsmall</code> 是小数点右边的最小位数。</li><li><code>scientific</code> 设置为 <code>TRUE</code> 以科学记数法显示。</li><li><code>width</code> 指示通过在开始处填充空白来显示的最小宽度。</li><li><code>justify</code> 是字符串向左，右或中心的显示。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Total number of digits displayed. Last digit rounded off.</span><br>result &lt;- format(<span class="hljs-number">23.123456789</span>, digits = <span class="hljs-number">9</span>)<br>print(result)<br><br><span class="hljs-comment"># Display numbers in scientific notation.</span><br>result &lt;- format(<span class="hljs-built_in">c</span>(<span class="hljs-number">6</span>, <span class="hljs-number">13.14521</span>), scientific = <span class="hljs-literal">TRUE</span>)<br>print(result)<br><br><span class="hljs-comment"># The minimum number of digits to the right of the decimal point.</span><br>result &lt;- format(<span class="hljs-number">23.47</span>, nsmall = <span class="hljs-number">5</span>)<br>print(result)<br><br><span class="hljs-comment"># Format treats everything as a string.</span><br>result &lt;- format(<span class="hljs-number">6</span>)<br>print(result)<br><br><span class="hljs-comment"># Numbers are padded with blank in the beginning for width.</span><br>result &lt;- format(<span class="hljs-number">13.7</span>, width = <span class="hljs-number">6</span>)<br>print(result)<br><br><span class="hljs-comment"># Left justify strings.</span><br>result &lt;- format(<span class="hljs-string">&quot;Hello&quot;</span>, width = <span class="hljs-number">8</span>, justify = <span class="hljs-string">&quot;l&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Justfy string with center.</span><br>result &lt;- format(<span class="hljs-string">&quot;Hello&quot;</span>, width = <span class="hljs-number">8</span>, justify = <span class="hljs-string">&quot;c&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;23.1234568&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;6.000000e+00&quot;</span> <span class="hljs-string">&quot;1.314521e+01&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;23.47000&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;6&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;  13.7&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello   &quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot; Hello  &quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="计算字符串中的字符数"><a href="#计算字符串中的字符数" class="headerlink" title="计算字符串中的字符数"></a>计算字符串中的字符数</h3><p><code>nchar()</code> 函数可以计算字符串中包含空格的字符数。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">nchar(x)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量输入。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">result &lt;- nchar(<span class="hljs-string">&quot;Count the number of characters&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure></p><h3 id="更改大小写"><a href="#更改大小写" class="headerlink" title="更改大小写"></a>更改大小写</h3><p>使用 <code>toupper()</code> 和 <code>tolower()</code> 函数可以改变字符串的字符的大小写。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">toupper(x)<br>tolower(x)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量输入。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Changing to Upper case.</span><br>result &lt;- toupper(<span class="hljs-string">&quot;Changing To Upper&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Changing to lower case.</span><br>result &lt;- tolower(<span class="hljs-string">&quot;Changing To Lower&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;CHANGING TO UPPER&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;changing to lower&quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h3><p><code>substring()</code> 函数可以用于提取字符串的部分。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">substring(x, first, last)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是字符向量输入。</li><li><code>first</code> 是要提取的第一个字符的位置。</li><li><code>last</code> 是要提取的最后一个字符的位置。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Extract characters from 5th to 7th position.</span><br>result &lt;- substring(<span class="hljs-string">&quot;Extract&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;act&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p>向量是最基本的 R 语言数据对象，有六种类型的原子向量。它们是逻辑，整数，双精度，复杂，字符和原始。</p><h2 id="创建向量"><a href="#创建向量" class="headerlink" title="创建向量"></a>创建向量</h2><h3 id="单元素向量"><a href="#单元素向量" class="headerlink" title="单元素向量"></a>单元素向量</h3><p>即使在 R 语言中只写入一个值，它也将成为长度为 <code>1</code> 的向量，并且属于上述向量类型之一。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Atomic vector of type character.</span><br>print(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><span class="hljs-comment"># Atomic vector of type double.</span><br>print(<span class="hljs-number">12.5</span>)<br><br><span class="hljs-comment"># Atomic vector of type integer.</span><br>print(<span class="hljs-number">63L</span>)<br><br><span class="hljs-comment"># Atomic vector of type logical.</span><br>print(<span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># Atomic vector of type complex.</span><br>print(<span class="hljs-number">2</span>+<span class="hljs-number">3i</span>)<br><br><span class="hljs-comment"># Atomic vector of type raw.</span><br>print(charToRaw(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;abc&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">12.5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">63</span><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span>+<span class="hljs-number">3i</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">68</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span><span class="hljs-built_in">c</span> <span class="hljs-number">6</span><span class="hljs-built_in">c</span> <span class="hljs-number">6</span>f<br></code></pre></td></tr></table></figure></p><h3 id="多元素向量"><a href="#多元素向量" class="headerlink" title="多元素向量"></a>多元素向量</h3><p>对数值数据使用冒号运算符</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Creating a sequence from 5 to 13.</span><br>v &lt;- 5:<span class="hljs-number">13</span><br>print(v)<br><br><span class="hljs-comment"># Creating a sequence from 6.6 to 12.6.</span><br>v &lt;- 6.6:<span class="hljs-number">12.6</span><br>print(v)<br><br><span class="hljs-comment"># If the final element specified does not belong to the sequence then it is discarded.</span><br>v &lt;- 3.8:<span class="hljs-number">11.4</span><br>print(v)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">6.6</span>  <span class="hljs-number">7.6</span>  <span class="hljs-number">8.6</span>  <span class="hljs-number">9.6</span> <span class="hljs-number">10.6</span> <span class="hljs-number">11.6</span> <span class="hljs-number">12.6</span><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">3.8</span>  <span class="hljs-number">4.8</span>  <span class="hljs-number">5.8</span>  <span class="hljs-number">6.8</span>  <span class="hljs-number">7.8</span>  <span class="hljs-number">8.8</span>  <span class="hljs-number">9.8</span> <span class="hljs-number">10.8</span><br></code></pre></td></tr></table></figure></p><p><strong>使用 <code>sequence (Seq.)</code> 序列运算符</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create vector with elements from 5 to 9 incrementing by 0.4.</span><br>print(seq(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, by = <span class="hljs-number">0.4</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5.0</span> <span class="hljs-number">5.4</span> <span class="hljs-number">5.8</span> <span class="hljs-number">6.2</span> <span class="hljs-number">6.6</span> <span class="hljs-number">7.0</span> <span class="hljs-number">7.4</span> <span class="hljs-number">7.8</span> <span class="hljs-number">8.2</span> <span class="hljs-number">8.6</span> <span class="hljs-number">9.0</span><br></code></pre></td></tr></table></figure></p><p><strong>使用 <code>C()</code> 函数</strong></p><p>如果其中一个元素是字符，则非字符值被强制转换为字符类型。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># The logical and numeric values are converted to characters.</span><br>s &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">TRUE</span>)<br>print(s)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-string">&quot;red&quot;</span>  <span class="hljs-string">&quot;5&quot;</span>  <span class="hljs-string">&quot;TRUE&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="访问向量元素"><a href="#访问向量元素" class="headerlink" title="访问向量元素"></a>访问向量元素</h2><p>使用索引访问向量的元素。<code>[]</code> 括号用于建立索引。索引从位置 <code>1</code> 开始。在索引中给出负值会丢弃，<code>TRUE</code>，<code>FALSE</code> 或 <code>0</code> 和 <code>1</code> 的元素，也可用于索引。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Accessing vector elements using position.</span><br>t &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Sun&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>, <span class="hljs-string">&quot;Wed&quot;</span>, <span class="hljs-string">&quot;Thurs&quot;</span>, <span class="hljs-string">&quot;Fri&quot;</span>, <span class="hljs-string">&quot;Sat&quot;</span>)<br>u &lt;- t[<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>)]<br>print(u)<br><br><span class="hljs-comment"># Accessing vector elements using logical indexing.</span><br>v &lt;- t[<span class="hljs-built_in">c</span>(<span class="hljs-literal">TRUE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">TRUE</span>, <span class="hljs-literal">FALSE</span>)]<br>print(v)<br><br><span class="hljs-comment"># Accessing vector elements using negative indexing.</span><br>x &lt;- t[<span class="hljs-built_in">c</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">5</span>)]<br>print(x)<br><br><span class="hljs-comment"># Accessing vector elements using 0/1 indexing.</span><br>y &lt;- t[<span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)]<br>print(y)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Mon&quot;</span> <span class="hljs-string">&quot;Tue&quot;</span> <span class="hljs-string">&quot;Fri&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span> <span class="hljs-string">&quot;Fri&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span> <span class="hljs-string">&quot;Tue&quot;</span> <span class="hljs-string">&quot;Wed&quot;</span> <span class="hljs-string">&quot;Fri&quot;</span> <span class="hljs-string">&quot;Sat&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="向量操作"><a href="#向量操作" class="headerlink" title="向量操作"></a>向量操作</h2><h3 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h3><p>可以加，减，乘，除两个相同长度的向量，将结果作为向量输出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors.</span><br>v1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>)<br>v2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Vector addition.</span><br>add.result &lt;- v1 + v2<br>print(add.result)<br><br><span class="hljs-comment"># Vector substraction.</span><br>sub.result &lt;- v1 - v2<br>print(sub.result)<br><br><span class="hljs-comment"># Vector multiplication.</span><br>multi.result &lt;- v1 * v2<br>print(multi.result)<br><br><span class="hljs-comment"># Vector division.</span><br>divi.result &lt;- v1 / v2<br>print(divi.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">7</span> <span class="hljs-number">19</span>  <span class="hljs-number">4</span> <span class="hljs-number">13</span>  <span class="hljs-number">1</span> <span class="hljs-number">13</span><br>[<span class="hljs-number">1</span>] -<span class="hljs-number">1</span> -<span class="hljs-number">3</span>  <span class="hljs-number">4</span> -<span class="hljs-number">3</span> -<span class="hljs-number">1</span>  <span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">12</span> <span class="hljs-number">88</span>  <span class="hljs-number">0</span> <span class="hljs-number">40</span>  <span class="hljs-number">0</span> <span class="hljs-number">22</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0.7500000</span> <span class="hljs-number">0.7272727</span>       <span class="hljs-literal">Inf</span> <span class="hljs-number">0.6250000</span> <span class="hljs-number">0.0000000</span> <span class="hljs-number">5.5000000</span><br></code></pre></td></tr></table></figure></p><h3 id="向量元素回收"><a href="#向量元素回收" class="headerlink" title="向量元素回收"></a>向量元素回收</h3><p>如果我们对不等长的两个向量应用算术运算，则较短向量的元素被循环以完成操作。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">v1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>)<br>v2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>)<br><span class="hljs-comment"># V2 becomes c(4, 11, 4, 11, 4, 11)</span><br><br>add.result &lt;- v1 + v2<br>print(add.result)<br><br>sub.result &lt;- v1 - v2<br>print(sub.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">7</span> <span class="hljs-number">19</span>  <span class="hljs-number">8</span> <span class="hljs-number">16</span>  <span class="hljs-number">4</span> <span class="hljs-number">22</span><br>[<span class="hljs-number">1</span>] -<span class="hljs-number">1</span> -<span class="hljs-number">3</span>  <span class="hljs-number">0</span> -<span class="hljs-number">6</span> -<span class="hljs-number">4</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></p><h3 id="向量元素排序"><a href="#向量元素排序" class="headerlink" title="向量元素排序"></a>向量元素排序</h3><p>向量中的元素可以使用 <code>sort()</code> 函数排序。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">9</span>, <span class="hljs-number">304</span>)<br><br><span class="hljs-comment"># Sort the elements of the vector.</span><br>sort.result &lt;- sort(v)<br>print(sort.result)<br><br><span class="hljs-comment"># Sort the elements in the reverse order.</span><br>revsort.result &lt;- sort(v, decreasing = <span class="hljs-literal">TRUE</span>)<br>print(revsort.result)<br><br><span class="hljs-comment"># Sorting character vectors.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;violet&quot;</span>)<br>sort.result &lt;- sort(v)<br>print(sort.result)<br><br><span class="hljs-comment"># Sorting character vectors in reverse order.</span><br>revsort.result &lt;- sort(v, decreasing = <span class="hljs-literal">TRUE</span>)<br>print(revsort.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  -<span class="hljs-number">9</span>   <span class="hljs-number">0</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">8</span>  <span class="hljs-number">11</span> <span class="hljs-number">304</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">304</span>  <span class="hljs-number">11</span>   <span class="hljs-number">8</span>   <span class="hljs-number">5</span>   <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">0</span>  -<span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Blue&quot;</span>   <span class="hljs-string">&quot;Red&quot;</span>    <span class="hljs-string">&quot;violet&quot;</span> <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;violet&quot;</span> <span class="hljs-string">&quot;Red&quot;</span>    <span class="hljs-string">&quot;Blue&quot;</span> <br></code></pre></td></tr></table></figure></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表是 R 语言对象，它包含不同类型的元素，如数字，字符串，向量和其中的另一个列表。列表还可以包含矩阵或函数作为其元素。列表是使用 <code>list()</code> 函数创建的。</p><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><p>以下是创建包含字符串，数字，向量和逻辑值的列表的示例</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing strings, numbers, vectors and a logical values.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">32</span>, <span class="hljs-number">11</span>), <span class="hljs-literal">TRUE</span>, <span class="hljs-number">51.23</span>, <span class="hljs-number">119.1</span>)<br>print(list_data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Red&quot;</span><br><br>[[<span class="hljs-number">2</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Green&quot;</span><br><br>[[<span class="hljs-number">3</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">21</span> <span class="hljs-number">32</span> <span class="hljs-number">11</span><br><br>[[<span class="hljs-number">4</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>[[<span class="hljs-number">5</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">51.23</span><br><br>[[<span class="hljs-number">6</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">119.1</span><br></code></pre></td></tr></table></figure></p><h2 id="命名列表元素"><a href="#命名列表元素" class="headerlink" title="命名列表元素"></a>命名列表元素</h2><p>列表元素可以给出名称，并且可以使用这些名称访问它们。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing a vector, a matrix and a list.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>), matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">8</span>), nrow = <span class="hljs-number">2</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-number">12.3</span>))<br><br><span class="hljs-comment"># Give names to the elements in the list.</span><br><span class="hljs-built_in">names</span>(list_data) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;1st Quarter&quot;</span>, <span class="hljs-string">&quot;A_Matrix&quot;</span>, <span class="hljs-string">&quot;A Inner list&quot;</span>)<br><br><span class="hljs-comment"># Show the list.</span><br>print(list_data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$`<span class="hljs-number">1</span>st_Quarter`<br>[1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot;<br><br>$A_Matrix<br>     [,1] [,2] [,3]<br>[1,]    3    5   -2<br>[2,]    9    1    8<br><br>$A_Inner_list<br>$A_Inner_list[[1]]<br>[1] &quot;green&quot;<br><br>$A_Inner_list[[2]]<br>[1] 12.3<br></code></pre></td></tr></table></figure></p><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>列表的元素可以通过列表中元素的索引访问。在命名列表的情况下，它也可以使用名称来访问。</p><p>我们继续使用在上面的例子：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing a vector, a matrix and a list.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>), matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">8</span>), nrow = <span class="hljs-number">2</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-number">12.3</span>))<br><br><span class="hljs-comment"># Give names to the elements in the list.</span><br><span class="hljs-built_in">names</span>(list_data) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;1st Quarter&quot;</span>, <span class="hljs-string">&quot;A_Matrix&quot;</span>, <span class="hljs-string">&quot;A Inner list&quot;</span>)<br><br><span class="hljs-comment"># Access the first element of the list.</span><br>print(list_data[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># Access the thrid element. As it is also a list, all its elements will be printed.</span><br>print(list_data[<span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># Access the list element using the name of the element.</span><br>print(list_data$A_Matrix)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$`<span class="hljs-number">1</span>st_Quarter`<br>[1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot;<br><br>$A_Inner_list<br>$A_Inner_list[[1]]<br>[1] &quot;green&quot;<br><br>$A_Inner_list[[2]]<br>[1] 12.3<br><br>     [,1] [,2] [,3]<br>[1,]    3    5   -2<br>[2,]    9    1    8<br></code></pre></td></tr></table></figure></p><h2 id="操作列表元素"><a href="#操作列表元素" class="headerlink" title="操作列表元素"></a>操作列表元素</h2><p>我们可以添加，删除和更新列表元素，如下所示。我们只能在列表的末尾添加和删除元素。但我们可以更新任何元素。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing a vector, a matrix and a list.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>), matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">8</span>), nrow = <span class="hljs-number">2</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-number">12.3</span>))<br><br><span class="hljs-comment"># Give names to the elements in the list.</span><br><span class="hljs-built_in">names</span>(list_data) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;1st Quarter&quot;</span>, <span class="hljs-string">&quot;A_Matrix&quot;</span>, <span class="hljs-string">&quot;A Inner list&quot;</span>)<br><br><span class="hljs-comment"># Add element at the end of the list.</span><br>list_data[<span class="hljs-number">4</span>] &lt;- <span class="hljs-string">&quot;New element&quot;</span><br>print(list_data[<span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># Remove the last element.</span><br>list_data[<span class="hljs-number">4</span>] &lt;- <span class="hljs-literal">NULL</span><br><br><span class="hljs-comment"># Print the 4th Element.</span><br>print(list_data[<span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># Update the 3rd Element.</span><br>list_data[<span class="hljs-number">3</span>] &lt;- <span class="hljs-string">&quot;updated element&quot;</span><br>print(list_data[<span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;New element&quot;</span><br><br>$<br><span class="hljs-literal">NULL</span><br><br>$`A Inner list`<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;updated element&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="合并列表"><a href="#合并列表" class="headerlink" title="合并列表"></a>合并列表</h2><p>通过将所有列表放在一个 <code>list()</code> 函数中，您可以将许多列表合并到一个列表中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two lists.</span><br>list1 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>list2 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;Sun&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>)<br><br><span class="hljs-comment"># Merge the two lists.</span><br>merged.list &lt;- <span class="hljs-built_in">c</span>(list1, list2)<br><br><span class="hljs-comment"># Print the merged list.</span><br>print(merged.list)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br><br>[[<span class="hljs-number">2</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>[[<span class="hljs-number">3</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">3</span><br><br>[[<span class="hljs-number">4</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span><br><br>[[<span class="hljs-number">5</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Mon&quot;</span><br><br>[[<span class="hljs-number">6</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Tue&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="将列表转换为向量"><a href="#将列表转换为向量" class="headerlink" title="将列表转换为向量"></a>将列表转换为向量</h2><p>列表可以转换为向量，使得向量的元素可以用于进一步的操作。可以在将列表转换为向量之后应用对向量的所有算术运算。我们可以使用 <code>unlist()</code> 函数完成这个转换。它将列表作为输入并生成向量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create lists.</span><br>list1 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>)<br>print(list1)<br><br>list2 &lt;-<span class="hljs-built_in">list</span>(<span class="hljs-number">10</span>:<span class="hljs-number">14</span>)<br>print(list2)<br><br><span class="hljs-comment"># Convert the lists to vectors.</span><br>v1 &lt;- unlist(list1)<br>v2 &lt;- unlist(list2)<br><br>print(v1)<br>print(v2)<br><br><span class="hljs-comment"># Now add the vectors</span><br>result &lt;- v1 + v2<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure></p><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p>矩阵是其中元素以二维矩形布局布置的 R 对象。它们包含相同原子类型的元素。虽然我们可以创建一个只包含字符或只包含逻辑值的矩阵，但它们没有太多用处。我们使用包含数字元素的矩阵用于数学计算。</p><h2 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h2><p>R 语言中使用 <code>matrix()</code> 函数创建一个矩阵。</p><p><strong>语法</strong></p><p>在 R 语言中创建矩阵的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">matrix(data, nrow, ncol, byrow, <span class="hljs-built_in">dimnames</span>)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>data</code> 是成为矩阵的数据元素的输入向量。</li><li><code>nrow</code> 是要创建的行数。</li><li><code>ncol</code> 是要创建的列数。</li><li><code>byrow</code> 是一个逻辑线索。如果为 <code>TRUE</code>，则输入向量元素按行排列。</li><li><code>dimname</code> 是分配给行和列的名称。</li></ul><p><strong>实例</strong></p><p>创建一个以数字向量作为输入的矩阵</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Elements are arranged sequentially by row.</span><br>M &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">TRUE</span>)<br>print(M)<br><br><span class="hljs-comment"># Elements are arranged sequentially by column.</span><br>N &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">FALSE</span>)<br>print(N)<br><br><span class="hljs-comment"># Define the column and row names.</span><br>rownames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;row1&quot;</span>, <span class="hljs-string">&quot;row2&quot;</span>, <span class="hljs-string">&quot;row3&quot;</span>, <span class="hljs-string">&quot;row4&quot;</span>)<br>colnames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;col1&quot;</span>, <span class="hljs-string">&quot;col2&quot;</span>, <span class="hljs-string">&quot;col3&quot;</span>)<br><br>P &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">TRUE</span>, <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(rownames, colnames))<br>print(P)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span><br>[<span class="hljs-number">4</span>,]   <span class="hljs-number">12</span>   <span class="hljs-number">13</span>   <span class="hljs-number">14</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">11</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">4</span>    <span class="hljs-number">8</span>   <span class="hljs-number">12</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">5</span>    <span class="hljs-number">9</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">4</span>,]    <span class="hljs-number">6</span>   <span class="hljs-number">10</span>   <span class="hljs-number">14</span><br><br>     col1 col2 col3<br>row1    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span><br>row2    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span><br>row3    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span><br>row4   <span class="hljs-number">12</span>   <span class="hljs-number">13</span>   <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure></p><h2 id="访问矩阵的元素"><a href="#访问矩阵的元素" class="headerlink" title="访问矩阵的元素"></a>访问矩阵的元素</h2><p>可以通过使用元素的列和行索引来访问矩阵的元素。我们考虑上面的矩阵 <code>P</code> 找到下面的具体元素。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Define the column and row names.</span><br>rownames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;row1&quot;</span>, <span class="hljs-string">&quot;row2&quot;</span>, <span class="hljs-string">&quot;row3&quot;</span>, <span class="hljs-string">&quot;row4&quot;</span>)<br>colnames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;col1&quot;</span>, <span class="hljs-string">&quot;col2&quot;</span>, <span class="hljs-string">&quot;col3&quot;</span>)<br><br><span class="hljs-comment"># Create the matrix.</span><br>P &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">TRUE</span>, <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(rownames, colnames))<br><br><span class="hljs-comment"># Access the element at 3rd column and 1st row.</span><br>print(P[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># Access the element at 2nd column and 4th row.</span><br>print(P[<span class="hljs-number">4</span>, <span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># Access only the  2nd row.</span><br>print(P[<span class="hljs-number">2</span>, ])<br><br><span class="hljs-comment"># Access only the 3rd column.</span><br>print(P[, <span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">13</span><br>col1 col2 col3 <br>   <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span> <br>row1 row2 row3 row4 <br>   <span class="hljs-number">5</span>    <span class="hljs-number">8</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span> <br></code></pre></td></tr></table></figure></p><h2 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h2><p>使用 R 运算符对矩阵执行各种数学运算。操作的结果也是一个矩阵。</p><p>对于操作中涉及的矩阵，维度（行数和列数）应该相同。</p><h3 id="加法和减法"><a href="#加法和减法" class="headerlink" title="加法和减法"></a>加法和减法</h3><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two 2x3 matrices.</span><br>matrix1 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix1)<br><br>matrix2 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix2)<br><br><span class="hljs-comment"># Add the matrices.</span><br>result &lt;- matrix1 + matrix2<br>cat(<span class="hljs-string">&quot;Result of addition&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Subtract the matrices</span><br>result &lt;- matrix1 - matrix2<br>cat(<span class="hljs-string">&quot;Result of subtraction&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>   -<span class="hljs-number">1</span>    <span class="hljs-number">2</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>    <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">2</span>    <span class="hljs-number">9</span>    <span class="hljs-number">4</span><br><br>Result of addition<br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">8</span>   -<span class="hljs-number">1</span>    <span class="hljs-number">5</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">11</span>   <span class="hljs-number">13</span>   <span class="hljs-number">10</span><br><br>Result of subtraction<br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]   -<span class="hljs-number">2</span>   -<span class="hljs-number">1</span>   -<span class="hljs-number">1</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">7</span>   -<span class="hljs-number">5</span>    <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><h3 id="乘法和除法"><a href="#乘法和除法" class="headerlink" title="乘法和除法"></a>乘法和除法</h3><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two 2x3 matrices.</span><br>matrix1 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix1)<br><br>matrix2 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix2)<br><br><span class="hljs-comment"># Multiply the matrices.</span><br>result &lt;- matrix1 * matrix2<br>cat(<span class="hljs-string">&quot;Result of multiplication&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Divide the matrices</span><br>result &lt;- matrix1 / matrix2<br>cat(<span class="hljs-string">&quot;Result of division&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>   -<span class="hljs-number">1</span>    <span class="hljs-number">2</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>    <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">2</span>    <span class="hljs-number">9</span>    <span class="hljs-number">4</span><br>Result of multiplication <br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]   <span class="hljs-number">15</span>    <span class="hljs-number">0</span>    <span class="hljs-number">6</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">18</span>   <span class="hljs-number">36</span>   <span class="hljs-number">24</span><br>Result of division <br>     [,<span class="hljs-number">1</span>]      [,<span class="hljs-number">2</span>]      [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]  <span class="hljs-number">0.6</span>      -<span class="hljs-literal">Inf</span> <span class="hljs-number">0.6666667</span><br>[<span class="hljs-number">2</span>,]  <span class="hljs-number">4.5</span> <span class="hljs-number">0.4444444</span> <span class="hljs-number">1.5000000</span><br></code></pre></td></tr></table></figure></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是可以在两个以上维度中存储数据的 R 数据对象。</p><p>例如：如果我们创建一个维度 <code>(2，3，4)</code> 的数组，则它创建 <code>4</code> 个矩形矩阵，每个矩阵具有 <code>2</code> 行和 <code>3</code> 列。数组只能存储数据类型。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>使用 <code>array()</code> 函数创建数组。它使用向量作为输入，并使用 <code>dim</code> 参数中的值创建数组。</p><p><strong>实例</strong></p><p>以下示例创建一个由两个 <code>3x3</code> 矩阵组成的数组，每个矩阵具有 <code>3</code> 行和 <code>3</code> 列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>result &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , <span class="hljs-number">1</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>, , <span class="hljs-number">2</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h2 id="命名列和行"><a href="#命名列和行" class="headerlink" title="命名列和行"></a>命名列和行</h2><p>我们可以使用 <code>dimnames</code> 参数给数组中的行，列和矩阵命名。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br>column.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;COL1&quot;</span>, <span class="hljs-string">&quot;COL2&quot;</span>, <span class="hljs-string">&quot;COL3&quot;</span>)<br>row.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;ROW1&quot;</span>, <span class="hljs-string">&quot;ROW2&quot;</span>, <span class="hljs-string">&quot;ROW3&quot;</span>)<br>matrix.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Matrix1&quot;</span>, <span class="hljs-string">&quot;Matrix2&quot;</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>result &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>), <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(row.names, column.names, matrix.names))<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , Matrix1<br><br>     COL1 COL2 COL3<br>ROW1    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>ROW2    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>ROW3    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>, , Matrix2<br><br>     COL1 COL2 COL3<br>ROW1    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>ROW2    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>ROW3    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br>column.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;COL1&quot;</span>, <span class="hljs-string">&quot;COL2&quot;</span>, <span class="hljs-string">&quot;COL3&quot;</span>)<br>row.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;ROW1&quot;</span>, <span class="hljs-string">&quot;ROW2&quot;</span>, <span class="hljs-string">&quot;ROW3&quot;</span>)<br>matrix.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Matrix1&quot;</span>, <span class="hljs-string">&quot;Matrix2&quot;</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>result &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>), <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(row.names, column.names, matrix.names))<br><br><span class="hljs-comment"># Print the third row of the second matrix of the array.</span><br>print(result[<span class="hljs-number">3</span>, , <span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># Print the element in the 1st row and 3rd column of the 1st matrix.</span><br>print(result[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># Print the 2nd Matrix.</span><br>print(result[, , <span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>COL1 COL2 COL3 <br>   <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span> <br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">13</span><br><br>     COL1 COL2 COL3<br>ROW1    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>ROW2    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>ROW3    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h2 id="操作数组元素"><a href="#操作数组元素" class="headerlink" title="操作数组元素"></a>操作数组元素</h2><p>由于数组由多维构成矩阵，所以对数组元素的操作通过访问矩阵的元素来执行。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>array1 &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector3 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>vector4 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>)<br>array2 &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># create matrices from these arrays.</span><br>matrix1 &lt;- array1[, , <span class="hljs-number">2</span>]<br>matrix2 &lt;- array2[, , <span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># Add the matrices.</span><br>result &lt;- matrix1 + matrix2<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]   <span class="hljs-number">10</span>   <span class="hljs-number">20</span>   <span class="hljs-number">26</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">18</span>   <span class="hljs-number">22</span>   <span class="hljs-number">28</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">6</span>   <span class="hljs-number">24</span>   <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure></p><h2 id="跨数组元素的计算"><a href="#跨数组元素的计算" class="headerlink" title="跨数组元素的计算"></a>跨数组元素的计算</h2><p>我们可以使用 <code>apply()</code> 函数在数组中的元素上进行计算。</p><p><strong>语法</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">apply(x, margin, fun)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是一个数组。</li><li><code>margin</code> 是所使用的数据集的名称。</li><li><code>fun</code> 是要应用于数组元素的函数。</li></ul><p><strong>实例</strong></p><p>我们下面使用 <code>apply()</code> 函数计算所有矩阵中数组行中元素的总和。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>new.array &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br>print(new.array)<br><br><span class="hljs-comment"># Use apply to calculate the sum of the rows across all the matrices.</span><br>result &lt;- apply(new.array, <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , <span class="hljs-number">1</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>, , <span class="hljs-number">2</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">56</span> <span class="hljs-number">68</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure></p><h1 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h1><p>因子是用于对数据进行分类并将其存储为级别的数据对象。它们可以存储字符串和整数。它们在具有有限数量的唯一值的列中很有用。像 <code>男性</code>，<code>女性</code> 和 <code>True</code>，<code>False</code> 等。它们在统计建模的数据分析中很有用。</p><h2 id="创建因子"><a href="#创建因子" class="headerlink" title="创建因子"></a>创建因子</h2><p>使用 <code>factor()</code> 函数通过将向量作为输入创建因子。</p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector as input.</span><br>data &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>)<br><br>print(data)<br>print(is.factor(data))<br><br><span class="hljs-comment"># Apply the factor function.</span><br>factor_data &lt;- factor(data)<br><br>print(factor_data)<br>print(is.factor(factor_data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;East&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;East&quot;</span>  <span class="hljs-string">&quot;North&quot;</span> <span class="hljs-string">&quot;North&quot;</span> <span class="hljs-string">&quot;East&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;East&quot;</span> <span class="hljs-string">&quot;North&quot;</span><br> <br>[<span class="hljs-number">1</span>] <span class="hljs-literal">FALSE</span><br><br> [<span class="hljs-number">1</span>] East  West  East  North North East  West  West  West  East  North<br>Levels: East North West<br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure></p><h2 id="数据框的因子"><a href="#数据框的因子" class="headerlink" title="数据框的因子"></a>数据框的因子</h2><p>在创建具有文本数据列的任何数据框时，R 语言将文本列视为分类数据并在其上创建因子。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the vectors for data frame.</span><br>height &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">132</span>, <span class="hljs-number">151</span>, <span class="hljs-number">162</span>, <span class="hljs-number">139</span>, <span class="hljs-number">166</span>, <span class="hljs-number">147</span>, <span class="hljs-number">122</span>)<br>weight &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">66</span>, <span class="hljs-number">53</span>, <span class="hljs-number">67</span>, <span class="hljs-number">52</span>, <span class="hljs-number">40</span>)<br>gender &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>)<br><br><span class="hljs-comment"># Create the data frame.</span><br>input_data &lt;- data.frame(height, weight, gender)<br>print(input_data)<br><br><span class="hljs-comment"># Test if the gender column is a factor.</span><br>print(is.factor(input_data$gender))<br><br><span class="hljs-comment"># Print the gender column so see the levels.</span><br>print(input_data$gender)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  height weight gender<br>1    <span class="hljs-number">132</span>     <span class="hljs-number">48</span>   male<br>2    <span class="hljs-number">151</span>     <span class="hljs-number">49</span>   male<br>3    <span class="hljs-number">162</span>     <span class="hljs-number">66</span> female<br>4    <span class="hljs-number">139</span>     <span class="hljs-number">53</span> female<br>5    <span class="hljs-number">166</span>     <span class="hljs-number">67</span>   male<br>6    <span class="hljs-number">147</span>     <span class="hljs-number">52</span> female<br>7    <span class="hljs-number">122</span>     <span class="hljs-number">40</span>   male<br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>[<span class="hljs-number">1</span>] male   male   female female male   female male  <br>Levels: female male<br></code></pre></td></tr></table></figure></p><h2 id="更改级别顺序"><a href="#更改级别顺序" class="headerlink" title="更改级别顺序"></a>更改级别顺序</h2><p>可以通过使用新的等级次序再次应用因子函数来改变因子中的等级的顺序。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">data &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>)<br><span class="hljs-comment"># Create the factors</span><br>factor_data &lt;- factor(data)<br>print(factor_data)<br><br><span class="hljs-comment"># Apply the factor function with required order of the level.</span><br>new_order_data &lt;- factor(factor_data, levels = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>))<br>print(new_order_data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> [<span class="hljs-number">1</span>] East  West  East  North North East  West  West  West  East  North<br>Levels: East North West<br><br> [<span class="hljs-number">1</span>] East  West  East  North North East  West  West  West  East  North<br>Levels: East West North<br></code></pre></td></tr></table></figure></p><h2 id="生成因子级别"><a href="#生成因子级别" class="headerlink" title="生成因子级别"></a>生成因子级别</h2><p>我们可以使用 <code>gl()</code> 函数生成因子级别。它需要两个整数作为输入，指示每个级别有多少级别和多少次。</p><p><strong>语法</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">gl(n, k, labels)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>n</code> 是给出级数的整数。</li><li><code>k</code> 是给出复制数目的整数。</li><li><code>labels</code> 是所得因子水平的标签向量。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- gl(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, labels = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Tampa&quot;</span>, <span class="hljs-string">&quot;Seattle&quot;</span>, <span class="hljs-string">&quot;Boston&quot;</span>))<br>print(v)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> [<span class="hljs-number">1</span>] Tampa   Tampa   Tampa   Tampa   Seattle Seattle Seattle Seattle Boston  Boston  Boston  Boston <br>Levels: Tampa Seattle Boston<br></code></pre></td></tr></table></figure></p><h1 id="数据框"><a href="#数据框" class="headerlink" title="数据框"></a>数据框</h1><p>数据框是表或二维阵列状结构，其中每一列包含一个变量的值，并且每一行包含来自每一列的一组值。</p><p>以下是数据框的特性。</p><ul><li>列名称应为非空。</li><li>行名称应该是唯一的。</li><li>存储在数据框中的数据可以是数字，因子或字符类型。</li><li>每个列应包含相同数量的数据项。</li></ul><h2 id="创建数据框"><a href="#创建数据框" class="headerlink" title="创建数据框"></a>创建数据框</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Print the data frame.</span><br>print(emp.data) <br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> emp_id    emp_name     salary     start_date<br>1     <span class="hljs-number">1</span>     Rick        <span class="hljs-number">623.30</span>     <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>2     <span class="hljs-number">2</span>     Dan         <span class="hljs-number">515.20</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span><br>3     <span class="hljs-number">3</span>     Michelle    <span class="hljs-number">611.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span><br>4     <span class="hljs-number">4</span>     Ryan        <span class="hljs-number">729.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span><br>5     <span class="hljs-number">5</span>     Gary        <span class="hljs-number">843.25</span>     <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure></p><h2 id="获取数据框的结构"><a href="#获取数据框的结构" class="headerlink" title="获取数据框的结构"></a>获取数据框的结构</h2><p>通过使用 <code>str()</code> 函数可以看到数据框的结构。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Get the structure of the data frame.</span><br>str(emp.data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br><span class="hljs-string">&#x27;data.frame&#x27;</span>:<span class="hljs-number">5</span> obs. of  <span class="hljs-number">4</span> variables:<br> $ emp_id    : int  <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br> $ emp_name  : chr  <span class="hljs-string">&quot;Rick&quot;</span> <span class="hljs-string">&quot;Dan&quot;</span> <span class="hljs-string">&quot;Michelle&quot;</span> <span class="hljs-string">&quot;Ryan&quot;</span> ...<br> $ salary    : num  <span class="hljs-number">623</span> <span class="hljs-number">515</span> <span class="hljs-number">611</span> <span class="hljs-number">729</span> <span class="hljs-number">843</span><br> $ start_date: Date, format: <span class="hljs-string">&quot;2012-01-01&quot;</span> <span class="hljs-string">&quot;2013-09-23&quot;</span> <span class="hljs-string">&quot;2014-11-15&quot;</span> <span class="hljs-string">&quot;2014-05-11&quot;</span> ...<br></code></pre></td></tr></table></figure></p><h2 id="数据框中的数据摘要"><a href="#数据框中的数据摘要" class="headerlink" title="数据框中的数据摘要"></a>数据框中的数据摘要</h2><p>可以通过应用 <code>summary()</code> 函数获取数据的统计摘要和性质。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Print the summary.</span><br>print(summary(emp.data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     emp_id    emp_name             salary        start_date        <br> Min.   :<span class="hljs-number">1</span>   Length:<span class="hljs-number">5</span>           Min.   :<span class="hljs-number">515.2</span>   Min.   :<span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>  <br> <span class="hljs-number">1</span>st Qu.:<span class="hljs-number">2</span>   Class :character   <span class="hljs-number">1</span>st Qu.:<span class="hljs-number">611.0</span>   <span class="hljs-number">1</span>st Qu.:<span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span>  <br> Median :<span class="hljs-number">3</span>   Mode  :character   Median :<span class="hljs-number">623.3</span>   Median :<span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>  <br> Mean   :<span class="hljs-number">3</span>                      Mean   :<span class="hljs-number">664.4</span>   Mean   :<span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">14</span>  <br> <span class="hljs-number">3</span>rd Qu.:<span class="hljs-number">4</span>                      <span class="hljs-number">3</span>rd Qu.:<span class="hljs-number">729.0</span>   <span class="hljs-number">3</span>rd Qu.:<span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>  <br> Max.   :<span class="hljs-number">5</span>                      Max.   :<span class="hljs-number">843.2</span>   Max.   :<span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure></p><h2 id="从数据框提取数据"><a href="#从数据框提取数据" class="headerlink" title="从数据框提取数据"></a>从数据框提取数据</h2><p>使用列名称从数据框中提取特定列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Extract Specific columns.</span><br>result &lt;- data.frame(emp.data$emp_name, emp.data$salary)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp.data.emp_name emp.data.salary<br>1              Rick          <span class="hljs-number">623.30</span><br>2               Dan          <span class="hljs-number">515.20</span><br>3          Michelle          <span class="hljs-number">611.00</span><br>4              Ryan          <span class="hljs-number">729.00</span><br>5              Gary          <span class="hljs-number">843.25</span><br></code></pre></td></tr></table></figure></p><p>先提取前两行，然后提取所有列</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Extract first two rows.</span><br>result &lt;- emp.data[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, ]<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_id    emp_name   salary    start_date<br>1      <span class="hljs-number">1</span>     Rick      <span class="hljs-number">623.3</span>     <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>2      <span class="hljs-number">2</span>     Dan       <span class="hljs-number">515.2</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure></p><p>提取第 2 列和第 4 列，第 3 行和第 5 行</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Extract 3rd and 5th row with 2nd and 4th column.</span><br>result &lt;- emp.data[<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)]<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_name start_date<br>3 Michelle <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span><br>5     Gary <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure></p><h2 id="扩展数据框"><a href="#扩展数据框" class="headerlink" title="扩展数据框"></a>扩展数据框</h2><p>可以通过添加列和行来扩展数据框。</p><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><p>只需使用新的列名称添加列向量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Add the &quot;dept&quot; coulmn.</span><br>emp.data$dept &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;HR&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>)<br>v &lt;- emp.data<br>print(v)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_id   emp_name    salary    start_date       dept<br>1     <span class="hljs-number">1</span>    Rick        <span class="hljs-number">623.30</span>    <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>       IT<br>2     <span class="hljs-number">2</span>    Dan         <span class="hljs-number">515.20</span>    <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span>       Operations<br>3     <span class="hljs-number">3</span>    Michelle    <span class="hljs-number">611.00</span>    <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>       IT<br>4     <span class="hljs-number">4</span>    Ryan        <span class="hljs-number">729.00</span>    <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>       HR<br>5     <span class="hljs-number">5</span>    Gary        <span class="hljs-number">843.25</span>    <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>       Finance<br></code></pre></td></tr></table></figure></p><h3 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h3><p>要将更多行永久添加到现有数据框，我们需要引入与现有数据框相同结构的新行，并使用 <code>rbind()</code> 函数。</p><p>在下面的示例中，我们创建一个包含新行的数据框，并将其与现有数据框合并以创建最终数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the first data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   dept = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;HR&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>),<br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Create the second data frame</span><br>emp.newdata &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">6</span>:<span class="hljs-number">8</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rasmi&quot;</span>, <span class="hljs-string">&quot;Pranab&quot;</span>, <span class="hljs-string">&quot;Tusar&quot;</span>),<br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">578.0</span>, <span class="hljs-number">722.5</span>, <span class="hljs-number">632.8</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2013-05-21&quot;</span>, <span class="hljs-string">&quot;2013-07-30&quot;</span>, <span class="hljs-string">&quot;2014-06-17&quot;</span>)),<br>   dept = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;Fianance&quot;</span>),<br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Bind the two data frames.</span><br>emp.finaldata &lt;- rbind(emp.data, emp.newdata)<br>print(emp.finaldata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_id     emp_name    salary     start_date       dept<br>1      <span class="hljs-number">1</span>     Rick        <span class="hljs-number">623.30</span>     <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>       IT<br>2      <span class="hljs-number">2</span>     Dan         <span class="hljs-number">515.20</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span>       Operations<br>3      <span class="hljs-number">3</span>     Michelle    <span class="hljs-number">611.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>       IT<br>4      <span class="hljs-number">4</span>     Ryan        <span class="hljs-number">729.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>       HR<br>5      <span class="hljs-number">5</span>     Gary        <span class="hljs-number">843.25</span>     <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>       Finance<br>6      <span class="hljs-number">6</span>     Rasmi       <span class="hljs-number">578.00</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>       IT<br>7      <span class="hljs-number">7</span>     Pranab      <span class="hljs-number">722.50</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span>       Operations<br>8      <span class="hljs-number">8</span>     Tusar       <span class="hljs-number">632.80</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>       Fianance<br></code></pre></td></tr></table></figure></p><h1 id="自带数据集"><a href="#自带数据集" class="headerlink" title="自带数据集"></a>自带数据集</h1><p>使用以下命令可以查询 R 语言自带的数据集：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">data()<br></code></pre></td></tr></table></figure></p><h2 id="向量数据集"><a href="#向量数据集" class="headerlink" title="向量数据集"></a>向量数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">euro</td><td style="text-align:center">欧元汇率，长度为 11，每个元素都有命名</td></tr><tr><td style="text-align:center">landmasses</td><td style="text-align:center">48 个陆地的面积，每个都有命名</td></tr><tr><td style="text-align:center">precip</td><td style="text-align:center">长度为 70 的命名向量</td></tr><tr><td style="text-align:center">rivers</td><td style="text-align:center">北美 141 条河流长度</td></tr><tr><td style="text-align:center">state.abb</td><td style="text-align:center">美国 50 个州的双字母缩写</td></tr><tr><td style="text-align:center">state.area</td><td style="text-align:center">美国 50 个州的面积</td></tr><tr><td style="text-align:center">state.name</td><td style="text-align:center">美国 50 个州的全称</td></tr></tbody></table></div><h2 id="因子数据集"><a href="#因子数据集" class="headerlink" title="因子数据集"></a>因子数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">state.division</td><td style="text-align:center">美国 50 个州的分类，9 个类别</td></tr><tr><td style="text-align:center">state.region</td><td style="text-align:center">美国 50 个州的地理分类</td></tr></tbody></table></div><h2 id="矩阵、数组数据集"><a href="#矩阵、数组数据集" class="headerlink" title="矩阵、数组数据集"></a>矩阵、数组数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">euro.cross</td><td style="text-align:center">11 种货币的汇率矩阵</td></tr><tr><td style="text-align:center">freeny</td><td style="text-align:center">每个季度影响收入四个因素的记录</td></tr><tr><td style="text-align:center">state.x77</td><td style="text-align:center">美国 50 个州的八个指标</td></tr><tr><td style="text-align:center">USPersonalExpenditure</td><td style="text-align:center">5 个年份在 5 个消费方向的数据</td></tr><tr><td style="text-align:center">VADeaths</td><td style="text-align:center">1940 年弗吉尼亚州死亡率（每千人）</td></tr><tr><td style="text-align:center">volcano</td><td style="text-align:center">某火山区的地理信息（10 米 × 10 米的网格）</td></tr><tr><td style="text-align:center">WorldPhones</td><td style="text-align:center">8 个区域在 7 个年份的电话总数</td></tr><tr><td style="text-align:center">iris3</td><td style="text-align:center">3 种鸢尾花形态数据</td></tr><tr><td style="text-align:center">Titanic</td><td style="text-align:center">泰坦尼克乘员统计</td></tr><tr><td style="text-align:center">UCBAdmissions</td><td style="text-align:center">伯克利分校 1973 年院系、录取和性别的频数</td></tr><tr><td style="text-align:center">crimtab</td><td style="text-align:center">3000 个男性罪犯左手中指长度和身高关系</td></tr><tr><td style="text-align:center">HairEyeColor</td><td style="text-align:center">592 人头发颜色、眼睛颜色和性别的频数</td></tr><tr><td style="text-align:center">occupationalStatus</td><td style="text-align:center">英国男性父子职业联系</td></tr></tbody></table></div><h2 id="类矩阵数据集"><a href="#类矩阵数据集" class="headerlink" title="类矩阵数据集"></a>类矩阵数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">eurodist</td><td style="text-align:center">欧洲 12 个城市的距离矩阵，只有下三角部分</td></tr><tr><td style="text-align:center">Harman23.cor</td><td style="text-align:center">305 个女孩 8 个形态指标的相关系数矩阵</td></tr><tr><td style="text-align:center">Harman74.cor</td><td style="text-align:center">145 个儿童 24 个心理指标的相关系数矩阵</td></tr></tbody></table></div><h2 id="数据框数据集"><a href="#数据框数据集" class="headerlink" title="数据框数据集"></a>数据框数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">airquality</td><td style="text-align:center">纽约 1973 年 5-9 月每日空气质量</td></tr><tr><td style="text-align:center">anscombe</td><td style="text-align:center">四组 x-y 数据，虽有相似的统计量，但实际数据差别较大</td></tr><tr><td style="text-align:center">attenu</td><td style="text-align:center">多个观测站对加利福尼亚 23 次地震的观测数据</td></tr><tr><td style="text-align:center">attitude</td><td style="text-align:center">30 个部门在七个方面的调查结果，调查结果是同一部门 35 个职员赞成的百分比</td></tr><tr><td style="text-align:center">beaver1</td><td style="text-align:center">一只海狸每 10 分钟的体温数据，共 114 条数据</td></tr><tr><td style="text-align:center">beaver2</td><td style="text-align:center">另一只海狸每 10 分钟的体温数据，共 100 条数据</td></tr><tr><td style="text-align:center">BOD</td><td style="text-align:center">随水质的提高，生化反应对氧的需求（mg/l）随时间（天）的变化</td></tr><tr><td style="text-align:center">cars</td><td style="text-align:center">1920 年代汽车速度对刹车距离的影响</td></tr><tr><td style="text-align:center">chickwts</td><td style="text-align:center">不同饮食种类对小鸡生长速度的影响</td></tr><tr><td style="text-align:center">esoph</td><td style="text-align:center">法国的一个食管癌病例对照研究</td></tr><tr><td style="text-align:center">faithful</td><td style="text-align:center">一个间歇泉的爆发时间和持续时间</td></tr><tr><td style="text-align:center">Formaldehyde</td><td style="text-align:center">两种方法测定甲醛浓度时分光光度计的读数</td></tr><tr><td style="text-align:center">Freeny</td><td style="text-align:center">每季度收入和其他四因素的记录</td></tr><tr><td style="text-align:center">dating from</td><td style="text-align:center">配对的病例对照数据，用于条件 logistic 回归</td></tr><tr><td style="text-align:center">InsectSprays</td><td style="text-align:center">使用不同杀虫剂时昆虫数目</td></tr><tr><td style="text-align:center">iris</td><td style="text-align:center">3 种鸢尾花形态数据</td></tr><tr><td style="text-align:center">LifeCycleSavings</td><td style="text-align:center">50 个国家的存款率</td></tr><tr><td style="text-align:center">longley</td><td style="text-align:center">强共线性的宏观经济数据</td></tr><tr><td style="text-align:center">morley</td><td style="text-align:center">光速测量试验数据</td></tr><tr><td style="text-align:center">mtcars</td><td style="text-align:center">32 辆汽车在 11 个指标上的数据</td></tr><tr><td style="text-align:center">OrchardSprays</td><td style="text-align:center">使用拉丁方设计研究不同喷雾剂对蜜蜂的影响</td></tr><tr><td style="text-align:center">PlantGrowth</td><td style="text-align:center">三种处理方式对植物产量的影响</td></tr><tr><td style="text-align:center">pressure</td><td style="text-align:center">温度和气压</td></tr><tr><td style="text-align:center">Puromycin</td><td style="text-align:center">两种细胞中辅因子浓度对酶促反应的影响</td></tr><tr><td style="text-align:center">quakes</td><td style="text-align:center">1000 次地震观测数据（震级 4）</td></tr><tr><td style="text-align:center">randu</td><td style="text-align:center">使用 FORTRAN 中的 RANDU 三个一组生成随机数字，共 400 组。</td></tr><tr><td style="text-align:center">rock</td><td style="text-align:center">48 块石头的形态数据</td></tr><tr><td style="text-align:center">sleep</td><td style="text-align:center">两药物的催眠效果</td></tr><tr><td style="text-align:center">stackloss</td><td style="text-align:center">化工厂将氨转为硝酸的数据</td></tr><tr><td style="text-align:center">swiss</td><td style="text-align:center">瑞士生育率和社会经济指标</td></tr><tr><td style="text-align:center">ToothGrowth</td><td style="text-align:center">VC 剂量和摄入方式对豚鼠牙齿的影响</td></tr><tr><td style="text-align:center">trees</td><td style="text-align:center">树木形态指标</td></tr><tr><td style="text-align:center">USArrests</td><td style="text-align:center">美国 50 个州的四个犯罪率指标</td></tr><tr><td style="text-align:center">USJudgeRatings</td><td style="text-align:center">43 名律师的 12 个评价指标</td></tr><tr><td style="text-align:center">warpbreaks</td><td style="text-align:center">织布机异常数据</td></tr><tr><td style="text-align:center">women</td><td style="text-align:center">15 名女性的身高和体重</td></tr></tbody></table></div><h2 id="列表数据集"><a href="#列表数据集" class="headerlink" title="列表数据集"></a>列表数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">state.center</td><td style="text-align:center">美国 50 个州中心的经度和纬度</td></tr></tbody></table></div><h2 id="类数据框数据集"><a href="#类数据框数据集" class="headerlink" title="类数据框数据集"></a>类数据框数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">ChickWeight</td><td style="text-align:center">饮食对鸡生长的影响</td></tr><tr><td style="text-align:center">CO2</td><td style="text-align:center">耐寒植物 CO2 摄取的差异</td></tr><tr><td style="text-align:center">DNase</td><td style="text-align:center">若干次试验中，DNase 浓度和光密度的关系</td></tr><tr><td style="text-align:center">Indometh</td><td style="text-align:center">某药物的药物动力学数据</td></tr><tr><td style="text-align:center">Loblolly</td><td style="text-align:center">火炬松的高度、年龄和种源</td></tr><tr><td style="text-align:center">Orange</td><td style="text-align:center">桔子树生长数据</td></tr><tr><td style="text-align:center">Theoph</td><td style="text-align:center">茶碱药动学数据</td></tr></tbody></table></div><h2 id="时间序列数据集"><a href="#时间序列数据集" class="headerlink" title="时间序列数据集"></a>时间序列数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">airmiles</td><td style="text-align:center">美国 1937-1960 年客运里程营收（实际售出机位乘以飞行哩数）</td></tr><tr><td style="text-align:center">AirPassengers</td><td style="text-align:center">Box &amp; Jenkins 航空公司 1949-1960 年每月国际航线乘客数</td></tr><tr><td style="text-align:center">austres</td><td style="text-align:center">澳大利亚 1971-1994 每季度人口数（以千为单位）</td></tr><tr><td style="text-align:center">BJsales</td><td style="text-align:center">有关销售的一个时间序列</td></tr><tr><td style="text-align:center">BJsales.lead</td><td style="text-align:center">前一指标的先行指标（leading indicator）</td></tr><tr><td style="text-align:center">co2</td><td style="text-align:center">1959-1997 年每月大气 co2 浓度（ppm）</td></tr><tr><td style="text-align:center">discoveries</td><td style="text-align:center">1860-1959 年每年巨大发现或发明的个数</td></tr><tr><td style="text-align:center">ldeaths</td><td style="text-align:center">1974-1979 年英国每月支气管炎、肺气肿和哮喘的死亡率</td></tr><tr><td style="text-align:center">fdeaths</td><td style="text-align:center">前述死亡率的女性部分</td></tr><tr><td style="text-align:center">mdeaths</td><td style="text-align:center">前述死亡率的男性部分</td></tr><tr><td style="text-align:center">freeny.y</td><td style="text-align:center">每季度收入</td></tr><tr><td style="text-align:center">JohnsonJohnson</td><td style="text-align:center">1960-1980 年每季度 Johnson &amp; Johnson 股票的红利</td></tr><tr><td style="text-align:center">LakeHuron</td><td style="text-align:center">1875-1972 年某一湖泊水位的记录</td></tr><tr><td style="text-align:center">lh</td><td style="text-align:center">黄体生成素水平，10 分钟测量一次</td></tr><tr><td style="text-align:center">lynx</td><td style="text-align:center">1821-1934 年加拿大猞猁数据</td></tr><tr><td style="text-align:center">nhtemp</td><td style="text-align:center">1912-1971 年每年平均温度</td></tr><tr><td style="text-align:center">Nile</td><td style="text-align:center">1871-1970 尼罗河流量</td></tr><tr><td style="text-align:center">nottem</td><td style="text-align:center">1920-1939 每月大气温度</td></tr><tr><td style="text-align:center">presidents</td><td style="text-align:center">1945-1974 年每季度美国总统支持率</td></tr><tr><td style="text-align:center">UKDriverDeaths</td><td style="text-align:center">1969-1984 年每月英国司机死亡或严重伤害的数目</td></tr><tr><td style="text-align:center">sunspot.month</td><td style="text-align:center">1749-1997 每月太阳黑子数</td></tr><tr><td style="text-align:center">sunspot.year</td><td style="text-align:center">1700-1988 每年太阳黑子数</td></tr><tr><td style="text-align:center">sunspots</td><td style="text-align:center">1749-1983 每月太阳黑子数</td></tr><tr><td style="text-align:center">treering</td><td style="text-align:center">归一化的树木年轮数据</td></tr><tr><td style="text-align:center">UKgas</td><td style="text-align:center">1960-1986 每月英国天然气消耗</td></tr><tr><td style="text-align:center">USAccDeaths</td><td style="text-align:center">1973-1978 美国每月意外死亡人数</td></tr><tr><td style="text-align:center">uspop</td><td style="text-align:center">1790–1970 美国每十年一次的人口总数（百万为单位）</td></tr><tr><td style="text-align:center">WWWusage</td><td style="text-align:center">每分钟网络连接数</td></tr><tr><td style="text-align:center">Seatbelts</td><td style="text-align:center">多变量时间序列。和 UKDriverDeaths 时间段相同，反映更多因素。</td></tr><tr><td style="text-align:center">EuStockMarkets</td><td style="text-align:center">多变量时间序列。欧洲股市四个主要指标的每个工作日记录，共 1860 条记录。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 优化</title>
      <link href="post/d7961cf0.html"/>
      <url>post/d7961cf0.html</url>
      
        <content type="html"><![CDATA[<h1 id="优化三大方向"><a href="#优化三大方向" class="headerlink" title="优化三大方向"></a>优化三大方向</h1><ul><li>优化 MySQL 所在服务器内核（此优化一般由运维人员完成）。</li><li>对 MySQL 配置参数进行优化（my.cnf）此优化需要进行压力测试来进行参数调整。</li><li>对 SQL 语句以及表优化。</li></ul><h1 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h1><ol><li><p>MySQL 默认的最大连接数为 100，可以在 <code>mysql</code> 命令提示窗口使用以下命令查看</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW variables LIKE &#x27;max_connections&#x27;;<br></code></pre></td></tr></table></figure></p></li><li><p>查看当前访问 MySQL 的线程</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW processlist;<br></code></pre></td></tr></table></figure></p></li><li><p>设置最大连接数</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SET globle max_connections = 5000;<br></code></pre></td></tr></table></figure></p><p> 最大可设置 <code>16384</code>，超过没用</p></li></ol><ol><li><p>查看当前被使用的 connections</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW GLOBAL STATUS LIKE &#x27;max_user_connections&#x27;<br></code></pre></td></tr></table></figure></p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ul><li><a href="#使用查询缓存优化查询">使用查询缓存优化查询</a></li><li><a href="#使用-EXPLAIN-关键字检测查询">使用 EXPLAIN 关键字检测查询</a></li><li><a href="#只要一行数据时使用-LIMIT-1">只要一行数据时使用 LIMIT 1</a></li><li><a href="#为搜索字段建立索引">为搜索字段建立索引</a></li><li><a href="#在-JOIN-表的时候使用相当类型的列并将其索引">在 JOIN 表的时候使用相当类型的列并将其索引</a></li><li><a href="#切记不要使用-ORDER-BY-RAND">切记不要使用 ORDER BY RAND()</a></li><li><a href="#避免使用-SELECT">避免使用 SELECT *</a></li><li><a href="#永远为每张表设置一个-ID-主键">永远为每张表设置一个 ID 主键</a></li><li><a href="#可以使用-ENUM-则不用-VARCHAR">可以使用 ENUM 则不用 VARCHAR</a></li><li><a href="#尽可能的不要赋值为-NULL">尽可能的不要赋值为 NULL</a></li><li><a href="#固定长度的表会更快">固定长度的表会更快</a></li><li><a href="#垂直分割">垂直分割</a></li><li><a href="#拆分大的-DELETE-或-INSERT-语句">拆分大的 DELETE 或 INSERT 语句</a></li><li><a href="#越小的列会越快">越小的列会越快</a></li><li><a href="#选择正确的存储引擎">选择正确的存储引擎</a></li><li><a href="#小心永久链接">小心永久链接</a></li></ul></li></ol><h2 id="使用查询缓存优化查询"><a href="#使用查询缓存优化查询" class="headerlink" title="使用查询缓存优化查询"></a>使用查询缓存优化查询</h2><p>大多数的 MySQL 服务器都开启了查询缓存。这是提高性能最有效的方法之一，而且这是被 MySQL 引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放入一个缓存中，这样后续的相同查询就不用操作而直接访问缓存结果了。</p><p>这里最主要的问题是，对于我们程序员来说，这个事情是很容易被忽略的。因为我们某些查询语句会让 MySQL 不使用缓存，示例如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> signup_date &gt;= <span class="hljs-keyword">CURDATE</span>()<br><span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> signup_date &gt;= <span class="hljs-string">&#x27;2014-06-24&#x27;</span><br></code></pre></td></tr></table></figure></p><p>上面两条 SQL 语句的差别就是 <code>CURDATE()</code> ，MySQL 的查询缓存对这个函数不起作用。所以，像 <code>NOW()</code> 和 <code>RAND()</code> 或是其它的诸如此类的 SQL 函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替 MySQL 的函数，从而开启缓存。</p><h2 id="使用-EXPLAIN-关键字检测查询"><a href="#使用-EXPLAIN-关键字检测查询" class="headerlink" title="使用 EXPLAIN 关键字检测查询"></a>使用 EXPLAIN 关键字检测查询</h2><p>使用 <code>EXPLAIN</code> 关键字可以使我们知道 MySQL 是如何处理 SQL 语句的，这样可以帮助我们分析我们的查询语句或是表结构的性能瓶颈；<code>EXPLAIN</code> 的查询结果还会告诉我们索引主键是如何被利用的，数据表是如何被被搜索或排序的等等。语法格式是 <code>EXPLAIN + SELECT</code> 语句：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> &lt;字段名&gt; <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;<br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/mysql_optimization/explain_1.png" alt></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="/images/post/mysql_optimization/explain_2.png" alt></p><p>我们可以看到，前一个结果显示搜索了 <code>7883</code> 行，而后一个只是搜索了两个表的 <code>9</code> 和 <code>16</code> 行。查看 <code>rows</code> 列可以让我们找到潜在的性能问题。 </p><h2 id="只要一行数据时使用-LIMIT-1"><a href="#只要一行数据时使用-LIMIT-1" class="headerlink" title="只要一行数据时使用 LIMIT 1"></a>只要一行数据时使用 LIMIT 1</h2><p>加上 <code>LIMIT 1</code> 可以增加性能。MySQL 数据库引擎会在查找到一条数据后停止搜索，而不是继续往后查询下一条符合条件的数据记录。</p><h2 id="为搜索字段建立索引"><a href="#为搜索字段建立索引" class="headerlink" title="为搜索字段建立索引"></a>为搜索字段建立索引</h2><p>索引不一定就是给主键或者是唯一的字段，如果在表中，有某个字段经常用来做搜索，需要将其建立索引。</p><p><strong>索引的有关操作如下：</strong></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>在执行 <code>CREATE TABLE</code> 语句时可以创建索引，也可以单独用 <code>CREATE INDEX</code> 或 <code>ALTER TABLE</code> 来为表增加索引。</p><ol><li><p>ALTER TABLE</p><p> ALTER TABLE 用来创建普通索引、唯一索引、主键索引和全文索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> index_name (column_list);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> (column_list);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> (column_list);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> FULLTEXT (column_list);<br></code></pre></td></tr></table></figure></p><p> 其中 <code>table_name</code> 是要增加索引名的表名，<code>column_list</code> 指出对哪些列进行索引，多列时各列之间使用半角逗号隔开。索引名 <code>index_name</code> 是可选的，如果不指定索引名称，MySQL 将根据第一个索引列自动指定索引名称，另外，<code>ALTER TABLE</code> 允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p></li><li><p>CREATE INDEX</p><p> <code>CREATE INDEX</code> 可对表增加普通索引或唯一索引以及全文索引，但是不可以对表增加主键索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> table_name (column_list);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> index_name <span class="hljs-keyword">ON</span> table_name (column_list);<br><span class="hljs-keyword">CREATE</span> FULLTEXT index_name <span class="hljs-keyword">ON</span> table_name (column_list);<br></code></pre></td></tr></table></figure></p><p> <code>table_name</code>、<code>index_name</code> 和 <code>column_list</code> 具有与 <code>ALTER TABLE</code> 语句中相同的含义，索引名必须指定。另外，不能用 <code>CREATE INDEX</code> 语句创建 <code>PRIMARY KEY</code> 索引。</p></li></ol><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul><li>普通索引（INDEX）：适用于 name、email 等一般属性</li><li>唯一索引（UNIQUE）：与普通索引类似，不同的是唯一索引要求索引字段值在表中是唯一的，这一点和主键索引类似，但是不同的是，唯一索引允许有空值。唯一索引一般适用于身份证号码、用户账号等不允许有重复的属性字段上。</li><li>主键索引（PRIMARY KEY）：其实就是主键，一般在建表时就指定了，不需要额外添加。</li><li>全文检索（FULLTEXT）：只适用于 <code>VARCHAR</code> 和 <code>TEXT</code> 类型的字段。</li></ul><p><strong>注意</strong>：全文索引和普通索引是有很大区别的，如果建立的是普通索引，一般会使用like进行模糊查询，只会对查询内容前一部分有效，即只对前面不使用通配符的查询有效，如果前后都有通配符，普通索引将不会起作用。对于全文索引而言在查询时有自己独特的匹配方式，例如我们在对一篇文章的标题和内容进行全文索引时：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> article <span class="hljs-keyword">ADD</span> FULLTEXT (<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>); <br><span class="hljs-comment"># 在进行检索时就需要使用如下的语法进行检索：</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> article <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">MATCH</span>(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>) AGAINST (<span class="hljs-string">&#x27;查询字符串&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p><strong>在使用全文检索时的注意事项：</strong></p><p>MySQL 自带的全文索引只能用于数据库引擎为 <code>MYISAM</code> 的数据表，如果是其他数据引擎，则全文索引不会生效。此外，MySQL 自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。如果需要对包含中文在内的文本数据进行全文检索，我们需要采用 Sphinx/Coreseek 技术来处理中文。另外使用 MySQL 自带的全文索引时，如果查询字符串的长度过短将无法得到期望的搜索结果。MySQL 全文索引所能找到的词默认最小长度为 4 个字符。另外，如果查询的字符串包含停止词，那么该停止词将会被忽略。</p><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><p>组合索引又称多列索引，就是建立索引时指定多个字段属性。有点类似于字典目录，比如查询 <code>guo</code> 这个拼音的字时，首先查找 <code>g</code> 字母，然后在 <code>g</code> 的检索范围内查询第二个字母为 <code>u</code> 的列表，最后在 <code>u</code> 的范围内查找最后一个字母为 <code>o</code> 的字。比如组合索引 <code>(a,b,c)</code>，<code>abc</code> 都是排好序的，在任意一段 <code>a</code> 的下面 <code>b</code> 都是排好序的，任何一段 <code>b</code> 下面 <code>c</code> 都是排好序的。</p><p>组合索引的生效原则是：从前往后依次使用生效，如果中间某个索引没有使用，那么断点前面的索引部分起作用，断点后面的索引没有起作用。</p><p>造成断点的原因：</p><ul><li>前边的任意一个索引没有参与查询，后边的全部不生效。</li><li>前边的任意一个索引字段参与的是范围查询，后面的不会生效。</li><li>断点跟索引字字段在SQL语句中的位置前后无关，只与是否存在有关。</li></ul><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">(0) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">45</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">5</span> ...<br><span class="hljs-comment"># 这种三个索引顺序使用中间没有断点，全部发挥作用</span><br>(<span class="hljs-number">1</span>) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">5</span> ...<br><span class="hljs-comment"># 这种情况下 b 就是断点，a 发挥了效果，c 没有效果</span><br>(<span class="hljs-number">2</span>) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">4</span> ...<br><span class="hljs-comment"># 这种情况下 a 就是断点，在 a 后面的索引都没有发挥作用，这种写法联合索引没有发挥任何效果</span><br>(<span class="hljs-number">3</span>) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">45</span> <span class="hljs-keyword">AND</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">5</span> ...<br><span class="hljs-comment"># 这个跟第一个一样，全部发挥作用，abc 只要用上了就行，跟写的顺序无关</span><br></code></pre></td></tr></table></figure></p><p><code>(a,b,c)</code> 三个列上加了联合索引（是联合索引，不是在每个列上单独加索引）而是建立了 <code>a</code>, <code>(a,b)</code>, <code>(a,b,c)</code>三个索引，另外 <code>(a,b,c)</code> 多列索引和 <code>(a,c,b)</code> 是不一样的。</p><p>具体实例可以说明：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">(0) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">5</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">4</span>;<br><span class="hljs-comment"># abc三个索引都在where条件里面用到了，而且都发挥了作用</span><br>(1) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> c=<span class="hljs-number">4</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">6</span> <span class="hljs-keyword">AND</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-comment"># 这条语句为了说明 组合索引与在 SQL 中的位置先后无关，WHERE 里面的条件顺序在查询之前会被 MySQL 自动优化，效果跟上一句一样</span><br>(2) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">7</span>;<br><span class="hljs-comment"># a 用到索引，b 没有用，所以 c 是没有用到索引效果的</span><br>(3) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> b&gt;<span class="hljs-number">7</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">3</span>;<br><span class="hljs-comment"># a 用到了，b 也用到了，c 没有用到，这个地方 b 是范围值，也算断点，只不过自身用到了索引</span><br>(4) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">4</span>;<br><span class="hljs-comment"># 因为 a 索引没有使用，所以这里 bc 都没有用上索引效果</span><br>(5) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a&gt;<span class="hljs-number">4</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">7</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">9</span>;<br><span class="hljs-comment"># a 用到了 b 没有使用，c 没有使用</span><br>(6) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> b;<br><span class="hljs-comment"># a 用到了索引，b 在结果排序中也用到了索引的效果，前面说了，a 下面任意一段的 b 是排好序的</span><br>(7) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c;<br><span class="hljs-comment"># a 用到了索引，但是这个地方 c 没有发挥排序效果，因为中间断点了，使用 EXPLAIN 可以看到 filesort</span><br>(8) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> a;<br><span class="hljs-comment"># b 没有用到索引，排序中 a 也没有发挥索引效果</span><br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：在查询时，MySQL 只能使用一个索引，如果建立的是多个单列的普通索引，在查询时会根据查询的索引字段，从中选择一个限制最严格的单例索引进行查询。别的索引都不会生效。</p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> tblname;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">KEYS</span> <span class="hljs-keyword">FROM</span> tblname;<br></code></pre></td></tr></table></figure></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DORP INDEX IndexName ON tab_name；<br></code></pre></td></tr></table></figure></p><p><strong>注意：不能使用索引的情况</strong></p><p>对于普通索引而言在使用 <code>LIKE</code> 进行通配符模糊查询时，如果首尾之间都使用了通配符，索引时无效的。</p><p>假设查询内容的关键词为 <code>abc</code>：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_name <span class="hljs-keyword">WHERE</span> index_column <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;abc%&#x27;</span>; <span class="hljs-comment"># 索引是有效的</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_name <span class="hljs-keyword">WHERE</span> index_column <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%abc&#x27;</span>; <span class="hljs-comment"># 索引是无效的</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_name <span class="hljs-keyword">WHERE</span> index_column <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%abc%&#x27;</span>; <span class="hljs-comment"># 索引是无效的</span><br></code></pre></td></tr></table></figure></p><p>当检索的字段内容比较大而且检索内容前后部分都不确定的情况下，可以改为全文索引，并使用特定的检索方式。</p><h2 id="在-JOIN-表的时候使用相当类型的列并将其索引"><a href="#在-JOIN-表的时候使用相当类型的列并将其索引" class="headerlink" title="在 JOIN 表的时候使用相当类型的列并将其索引"></a>在 JOIN 表的时候使用相当类型的列并将其索引</h2><p>如果在程序中有很多 <code>JOIN</code> 查询，应该保证两个表中 <code>JOIN</code> 的字段时被建立过索引的。这样 MySQL 内部会启动优化 <code>JOIN</code> 的 SQL 语句的机制。</p><p><strong>注意</strong>：这些被用来 <code>JOIN</code> 的字段，应该是相同类型的。例如：如果要把 <code>DECIMAL</code> 字段和一个 <code>INT</code> 字段 <code>JOIN</code> 在一起，MySQL 就无法使用它们的索引。对于那些 <code>STRING</code> 类型，还需要有相同的字符集才行（两个表的字符集有可能不一样）。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> company_name<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> companies<br><span class="hljs-keyword">ON</span> (users.state = companies.state)<br><span class="hljs-keyword">WHERE</span> users.id = <span class="hljs-string">&quot;user_id&quot;</span><br></code></pre></td></tr></table></figure></p><p>两个 <code>state</code> 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。</p><h2 id="切记不要使用-ORDER-BY-RAND"><a href="#切记不要使用-ORDER-BY-RAND" class="headerlink" title="切记不要使用 ORDER BY RAND()"></a>切记不要使用 ORDER BY RAND()</h2><p>如果你真的想把返回的数据行打乱了，你有 N 种方法可以达到这个目的。这样使用只让你的数据库的性能呈指数级的下降。这里的问题是：MySQL 会不得不去执行 <code>RAND()</code> 函数（很耗 CPU 时间），而且这是为了每一行记录去记行，然后再对其排序。就算是你用了 <code>Limit 1</code> 也无济于事（因为要排序） </p><h2 id="避免使用-SELECT"><a href="#避免使用-SELECT" class="headerlink" title="避免使用 SELECT *"></a>避免使用 SELECT *</h2><p>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果我们的数据库服务器和 web 服务器是两台独立的服务器的话，这还会增加网络传输的负载。所以，我们应该养成一个需要什么就取什么的好的习惯。</p><p><code>Hibernate</code> 性能方面就会差，它不用 <code>*</code>，但它将整个表的所有字段全查出来 </p><p>优点：开发速度快</p><h2 id="永远为每张表设置一个-ID-主键"><a href="#永远为每张表设置一个-ID-主键" class="headerlink" title="永远为每张表设置一个 ID 主键"></a>永远为每张表设置一个 ID 主键</h2><p>我们应该为数据库里的每张表都设置一个 <code>ID</code> 做为其主键，而且最好的是一个 <code>INT</code> 型的（推荐使用 <code>UNSIGNED</code>），并设置上自动增加的 <code>AUTO_INCREMENT</code> 标志。就算是我们 <code>users</code> 表有一个主键叫 <code>email</code> 的字段，我们也别让它成为主键。使用 <code>VARCHAR</code> 类型来当主键会使用得性能下降。</p><p>另外，在我们的程序中，我们应该使用表的 <code>ID</code> 来构造我们的数据结构。而且，在 MySQL 数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区 ...。在这里，只有一个情况是例外，那就是“关联表”的“外键”，也就是说，这个表的主键，通过若干个别的表的主键构成。我们把这个情况叫做“外键”。比如：有一个“学生表”有学生的 <code>ID</code>，有一个“课程表”有课程 <code>ID</code>，那么，“成绩表”就是“关联表”了，其关联了学生表和课程表，在成绩表中，学生 <code>ID</code> 和课程 <code>ID</code> 叫“外键”其共同组成主键。 </p><h2 id="可以使用-ENUM-则不用-VARCHAR"><a href="#可以使用-ENUM-则不用-VARCHAR" class="headerlink" title="可以使用 ENUM 则不用 VARCHAR"></a>可以使用 ENUM 则不用 VARCHAR</h2><p><code>ENUM</code> 类型是非常快和紧凑的。在实际上，其保存的是 <code>TINYINT</code>，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。如果我们有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，我们知道这些字段的取值是有限而且固定的，那么，我们应该使用 <code>ENUM</code> 而不是 <code>VARCHAR</code>。</p><h2 id="尽可能的不要赋值为-NULL"><a href="#尽可能的不要赋值为-NULL" class="headerlink" title="尽可能的不要赋值为 NULL"></a>尽可能的不要赋值为 NULL</h2><p>如果不是特殊情况，尽可能的不要使用 <code>NULL</code>。在 MySQL 中对于 INT 类型而言，<code>EMPTY</code> 是 <code>0</code>，而 <code>NULL</code> 是空值。而在 Oracle 中 <code>NULL</code> 和 <code>EMPTY</code> 的字符串是一样的。<code>NULL</code> 也需要占用存储空间，并且会使我们的程序判断时更加复杂。现实情况是很复杂的，依然会有些情况下，我们需要使用 <code>NULL</code> 值。</p><p>下面摘自MySQL 的文档：</p><blockquote><p>NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.</p></blockquote><h2 id="固定长度的表会更快"><a href="#固定长度的表会更快" class="headerlink" title="固定长度的表会更快"></a>固定长度的表会更快</h2><p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 <code>static</code> 或 <code>fixed-length</code>。例如，表中没有如下类型的字段：<code>VARCHAR</code>，<code>TEXT</code>，<code>BLOB</code>。只要我们包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</p><p>固定长度的表会提高性能，因为 MySQL 搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论我们用不用，他都是要分配那么多的空间。另外在取出值的时候要使用 <code>trim</code> 去除空格。</p><h2 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h2><p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。</p><h2 id="拆分大的-DELETE-或-INSERT-语句"><a href="#拆分大的-DELETE-或-INSERT-语句" class="headerlink" title="拆分大的 DELETE 或 INSERT 语句"></a>拆分大的 DELETE 或 INSERT 语句</h2><p>如果我们需要在一个在线的网站上去执行一个大的 <code>DELETE</code> 或 <code>INSERT</code> 查询，我们需要非常小心，要避免我们的操作让我们的整个网站停止响应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。</p><p>Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。如果我们把我们的表锁上一段时间，比如 30 秒钟，那么对于一个有很高访问量的站点来说，这 30 秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让我们的 web 服务 Crash，还可能会让我们的整台服务器马上挂了。所以在使用时使用 <code>LIMIT</code> 控制数量操作记录的数量。</p><h2 id="越小的列会越快"><a href="#越小的列会越快" class="headerlink" title="越小的列会越快"></a>越小的列会越快</h2><p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把我们的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。</p><p>如果一个表只会有几列（比如说字典表，配置表），那么，我们就没有理由使用 <code>INT</code> 来做主键，使用 <code>MEDIUMINT</code>, <code>SMALLINT</code> 或是更小的 <code>TINYINT</code> 会更经济一些。如果我们不需要记录时间，使用 <code>DATE</code> 要比 <code>DATETIME</code> 好得多。</p><h2 id="选择正确的存储引擎"><a href="#选择正确的存储引擎" class="headerlink" title="选择正确的存储引擎"></a>选择正确的存储引擎</h2><p>在 MySQL 中有两个存储引擎 <code>MyISAM</code> 和 <code>InnoDB</code>,每个引擎都有利有弊。</p><p><code>MyISAM</code> 适合于一些需要大量查询的应用，但是对于大量写操作的支持不是很好。甚至一个 <code>UPDATE</code> 语句就会进行锁表操作，这时读取这张表的所有进程都无法进行操作直至写操作完成。另外 <code>MyISAM</code> 对于 <code>SELECT COUNT(*)</code> 这类的计算是超快无比的。<code>InnoDB</code> 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 <code>MyISAM</code> 还慢。它支持“行锁”，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p><p><code>MyISAM</code> 是 MySQL5.5 版本以前默认的存储引擎，基于传统的 <code>ISAM</code> 类型，支持 <code>B-Tree</code>，全文检索，但是不是事务安全的，而且不支持外键。不具有原子性。支持锁表。</p><p><code>InnoDB</code> 是事务型引擎，支持 <code>ACID</code> 事务（实现 4 种事务隔离机制）、回滚、崩溃恢复能力、行锁。以及提供与 Oracle 一致的不加锁的读取方式。<code>InnoDB</code> 存储表和索引在一个表空间中，表空间可以包含多个文件。</p><p><code>MyISAM</code> 和 <code>InnoDB</code> 比较，如下表格所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">MyISAM</th><th style="text-align:center">InnoDB</th></tr></thead><tbody><tr><td style="text-align:center">事务</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">数据行锁定</td><td style="text-align:center">不支持，只有表锁定</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">外键约束</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">表空间大小</td><td style="text-align:center">相对小</td><td style="text-align:center">相对大</td></tr><tr><td style="text-align:center">全文索引</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">关注点</td><td style="text-align:center">性能（SELECT）</td><td style="text-align:center">事务</td></tr></tbody></table></div><p><strong>注意：</strong></p><ul><li>对于 Linux 版本的 MySQL 配置文件在 <code>/etc/my.cnf</code> 中</li><li>在5.5之后默认的存储引擎是 <code>INNODB</code></li><li>可以单独进行修改也可以在创建表时设置<p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tab_name <span class="hljs-keyword">ENGINE</span> <span class="hljs-keyword">INNODB</span>;<br></code></pre></td></tr></table></figure></p><p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> tab_name(<br>  <br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br></code></pre></td></tr></table></figure></p><h2 id="小心永久链接"><a href="#小心永久链接" class="headerlink" title="小心永久链接"></a>小心永久链接</h2></li></ul><p>“永久链接”的目的是用来减少重新创建 MySQL 链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。而且，自从我们的 Apache开始重用它的子进程后——也就是说，下一次的 HTTP 请求会重用 Apache 的子进程，并重用相同的 MySQL 链接。 </p><p>而且，Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种“永久链接”的机制工作不好的原因。在我们决定要使用“永久链接”之前，我们需要好好地考虑一下我们的整个系统的架构。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐬MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 常用命令行</title>
      <link href="post/4bd4f98e.html"/>
      <url>post/4bd4f98e.html</url>
      
        <content type="html"><![CDATA[<h1 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -h主机地址 -u用户名 -p用户密码<br></code></pre></td></tr></table></figure></p><h2 id="连接到本机上的MySQL"><a href="#连接到本机上的MySQL" class="headerlink" title="连接到本机上的MySQL"></a>连接到本机上的MySQL</h2><p>首先打开 <code>DOS</code> 窗口，然后进入目录 <code>mysql\bin</code> ，再键入命令 <code>mysql -u root -p</code> 回车后提示你输密码。注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。</p><p>如果刚安装好 MySQL，超级用户 <code>root</code> 是没有密码的。直接回车即可进入到 MySQL 中了，MySQL 的提示符是： <code>mysql&gt;</code></p><h2 id="连接到远程主机上的MySQL"><a href="#连接到远程主机上的MySQL" class="headerlink" title="连接到远程主机上的MySQL"></a>连接到远程主机上的MySQL</h2><p>假设远程主机的 IP 为：<code>110.110.110.110</code>，用户名为 <code>root</code>，密码为 <code>abcd123</code>。则键入以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -h 110.110.110.110 -u root -p abcd123;<br></code></pre></td></tr></table></figure></p><p><strong>注</strong>：<code>u</code> 与 <code>root</code> 之间可以不用加空格，其它也一样。</p><h2 id="退出MySQL命令。"><a href="#退出MySQL命令。" class="headerlink" title="退出MySQL命令。"></a>退出MySQL命令。</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exit<br></code></pre></td></tr></table></figure></p><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqladmin -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure></p><ol><li><p>给 root 加个密码 ab12。</p><p> 首先在 <code>DOS</code> 下进入目录 <code>mysql\bin</code>。然后键入以下命令 <code>mysqladmin -u root -password ab12</code></p><p> <strong>注</strong>：因为开始时 <code>root</code> 没有密码，所以 <code>-p旧密码</code> 一项就可以省略了。</p></li></ol><ol><li><p>再将 root 的密码改为 def345。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqladmin -u root -p ab12 password def345<br></code></pre></td></tr></table></figure></p></li><li><p>增加新用户</p><p> <strong>注意</strong>：和上面不同，下面的因为是 MySQL 环境中的命令，所以后面都带一个分号作为命令结束符。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> 数据库.* <span class="hljs-keyword">TO</span> 用户名@登录主机 <span class="hljs-keyword">identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;密码&quot;</span><br></code></pre></td></tr></table></figure></p><ol><li>增加一个用户 <code>test1</code> 密码为 <code>abc</code>，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用 <code>root</code> 用户连入 MySQL，然后键入以下命令：</li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> test1@<span class="hljs-string">&quot;%&quot;</span> <span class="hljs-keyword">Identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>但增加的用户是十分危险的，你想如某个人知道 <code>test1</code> 的密码，那么他就可以在 internet 上的任何一台电脑上登录你的 MySQL 数据库并对你的数据可以为所欲为了，解决办法见 2。</p><ol><li>增加一个用户 <code>test2</code> 密码为 <code>abc</code>，让他只可以在 <code>localhost</code> 上登录，并可以对数据库 <code>mydb</code> 进行查询、插入、修改、删除的操作（localhost 指本地主机，即 MySQL 数据库所在的那台主机）。</li></ol><p>这样用户即使用知道 <code>test2</code> 的密码，他也无法从 internet 上直接访问数据库，只能通过MySQL 主机上的 web 页来访问了。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> mydb.* <span class="hljs-keyword">TO</span> test2@localhost test2@localhost <span class="hljs-keyword">identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>如果你不想 <code>test2</code> 有密码，可以再打一个命令将密码消掉。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> mydb.* <span class="hljs-keyword">TO</span> test2@localhost test2@localhost <span class="hljs-keyword">identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1></li></ol><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ol><li><p>建立一个数据库</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p></li><li><p>创建数据库并分配用户</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span>, <span class="hljs-keyword">CREATE</span>, <span class="hljs-keyword">DROP</span>, <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">ON</span> 数据库名.* <span class="hljs-keyword">TO</span> 数据库名@登录主机 <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;数据库名&#x27;</span>@<span class="hljs-string">&#x27;登录主机&#x27;</span> = <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure></p><p> 依次执行 3 个命令完成数据库创建。</p><p> <strong>注意</strong>：“密码”和“数据库”是用户自己需要设置的。</p></li></ol><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">DATABASES</span>;<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：为了不再显示的时候乱码，要修改数据库默认编码。以下以 <code>GBK</code> 编码页面为例进行说明：</p><ol><li><p>修改 MySQL 的配置文件。</p><p> <code>my.ini</code> 文件里面修改 <code>default-character-set=gbk</code>。</p></li><li><p>代码运行时修改。</p></li></ol><ul><li><p>Java代码：</p><p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk</span><br></code></pre></td></tr></table></figure></p></li><li><p>PHP代码：</p><p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&quot;Content-Type:text/html;charset=gb2312&quot;</span>);<br></code></pre></td></tr></table></figure></p></li><li><p>C语言代码：</p><p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">int mysql_set_character_set( MySQL * mysql, char * csname)；<br></code></pre></td></tr></table></figure></p><p>  该函数用于为当前连接设置默认的字符集。字符串 <code>csname</code> 指定了 1 个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与 <code>SET NAMES</code> 语句类似，但它还能设置 <code>charset</code> 的值，从而影响了由 <code>mysql_real_escape_string()</code> 设置的字符集。</p></li></ul><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p><ol><li><p>删除一个已经确定存在的数据库</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP DATABASE drop_database;<br>  Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure></p></li><li><p>删除一个不确定存在的数据库</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP DATABASE drop_database;<br>ERROR 1008 (HY000): Can&#x27;t <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-string">&#x27;drop_database&#x27;</span>; database doesn&#x27;t exist<br>//发生错误，不能删除&#x27;drop_database&#x27;数据库，该数据库不存在。<br><br>mysql&gt; DROP DATABASE IF EXISTS drop_database;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br>//产生一个警告说明此数据库不存在<br><br>mysql&gt; CREATE DATABASE drop_database;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; DROP DATABASE IF EXISTS drop_database;<br>Query OK, 0 rows affected (0.00 sec)<br>//IF EXISTS 判断数据库是否存在，不存在也不产生错误<br></code></pre></td></tr></table></figure></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2></li></ol><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; USE &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p><p>屏幕提示：<code>Database changed</code></p><p><code>USE</code> 语句可以通告 MySQL 把 <code>db_name</code> 数据库作为默认（当前）数据库使用，用于后续语句。</p><p>该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的 USE 语句：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; USE db1;<br>mysql&gt; SELECT COUNT(*) FROM mytable;   # SELECT COUNT(*) FROM db1.mytable<br>mysql&gt; USE db2;<br>mysql&gt; SELECT COUNT(*) FROM mytable;   # SELECT COUNT(*) FROM db2.mytable<br></code></pre></td></tr></table></figure></p><p>使用 <code>USE</code> 语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。</p><p>下面的例子可以从 <code>db1</code> 数据库访问作者表，并从 <code>db2</code> 数据库访问编辑表：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; USE db1;<br>mysql&gt; SELECT author_name, editor_name FROM author, db2.editor WHERE author.editor_id = db2.editor.editor_id;<br></code></pre></td></tr></table></figure></p><h2 id="当前选择的数据库"><a href="#当前选择的数据库" class="headerlink" title="当前选择的数据库"></a>当前选择的数据库</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT DATABASE();<br>+<span class="hljs-comment">------------+</span><br>| DATABASE() |<br>+<span class="hljs-comment">------------+</span><br>| db1        |<br>+<span class="hljs-comment">------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>MySQL 中 <code>SELECT</code> 命令类似于其他编程语言里的 <code>print</code> 或者 <code>write</code>，你可以用它来显示一个字符串、数字、数学表达式的结果等等。</p><ol><li><p>显示MySQL的版本</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT VERSION();<br>+<span class="hljs-comment">------------+</span><br>| VERSION()  |<br>+<span class="hljs-comment">------------+</span><br>| 5.6.45-log |<br>+<span class="hljs-comment">------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>显示当前时间</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NOW(); <br>+<span class="hljs-comment">---------------------+</span><br>| NOW()               |<br>+<span class="hljs-comment">---------------------+</span><br>+<span class="hljs-comment">---------------------+</span><br>| 2021-01-13 20:05:07 |<br>+<span class="hljs-comment">---------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>显示年月日</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT DAYOFMONTH(CURRENT_DATE);<br>+<span class="hljs-comment">--------------------------+</span><br>| DAYOFMONTH(CURRENT_DATE) |<br>+<span class="hljs-comment">--------------------------+</span><br>|                       13 |<br>+<span class="hljs-comment">--------------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(<span class="hljs-keyword">CURRENT_DATE</span>);<br>+<span class="hljs-comment">---------------------+</span><br>| MONTH(CURRENT_DATE) |<br>+<span class="hljs-comment">---------------------+</span><br>|                   1 |<br>+<span class="hljs-comment">---------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(<span class="hljs-keyword">CURRENT_DATE</span>);<br>+<span class="hljs-comment">--------------------+</span><br>| YEAR(CURRENT_DATE) |<br>+<span class="hljs-comment">--------------------+</span><br>|               2021 |<br>+<span class="hljs-comment">--------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>显示字符串</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT &quot;welcome to my blog!&quot;; <br>+<span class="hljs-comment">---------------------+</span><br>| welcome to my blog! |<br>+<span class="hljs-comment">---------------------+</span><br>| welcome to my blog! |<br>+<span class="hljs-comment">---------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>当计算器用</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ((<span class="hljs-number">4</span> * <span class="hljs-number">4</span>) / <span class="hljs-number">10</span> ) + <span class="hljs-number">25</span>; <br>+<span class="hljs-comment">----------------------+</span><br>| ((4 * 4) / 10 ) + 25 |<br>+<span class="hljs-comment">----------------------+</span><br>|              26.6000 |<br>+<span class="hljs-comment">----------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>串接字符串</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT</span>(f_name, <span class="hljs-string">&quot; &quot;</span>, l_name) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">Name</span> <br><span class="hljs-keyword">FROM</span> employee_data <br><span class="hljs-keyword">WHERE</span> title = <span class="hljs-string">&#x27;Marketing Executive&#x27;</span>; <br>+<span class="hljs-comment">---------------+</span><br>| Name          |<br>+<span class="hljs-comment">---------------+</span><br>| Monica Sehgal |<br>| Hal Simlai    |<br>| Joseph Irvine |<br>+<span class="hljs-comment">---------------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p> <strong>注意</strong>：这里用到 <code>CONCAT()</code> 函数，用来把字符串连接起来。另外，我们还用到 <code>AS</code> 给结果列 <code>CONCAT(f_name, &quot; &quot;, l_name)</code> 起了个假名。</p></li></ol><h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; (&lt;字段名<span class="hljs-number">1</span>&gt; &lt;类型<span class="hljs-number">1</span>&gt; , ... , &lt;字段名n&gt; &lt;类型n&gt;);<br></code></pre></td></tr></table></figure></p><p>以下为数据表的字段：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">数字类型</th><th style="text-align:center">数据宽度</th><th style="text-align:center">是否为空</th><th style="text-align:center">是否主键</th><th style="text-align:center">自动增加</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">否</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">AUTO_INCREMENT</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">char</td><td style="text-align:center">20</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sex</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">degree</td><td style="text-align:center">double</td><td style="text-align:center">16</td><td style="text-align:center">是</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>执行的 SQL 语句为：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE MyClass(<br>     &gt; id int(4) NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>     &gt; name char(20) NOT NULL,<br>     &gt; sex int(4) NOT NULL DEFAULT &#x27;0&#x27;,<br>     &gt; degree double(16, 2));<br></code></pre></td></tr></table></figure></p><h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt;;<br></code></pre></td></tr></table></figure></p><p>例如：删除表名为 MyClass 的表</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> MyClass;<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：</p><ul><li><code>DROP TABLE</code> 用于取消一个或多个表。但必须有表的 <code>DROP</code> 权限。所有的表数据和表定义会被取消，所以使用本语句要小心。</li><li>对于一个带分区的表，<code>DROP TABLE</code> 会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。<code>DROP TABLE</code> 还会取消与被取消的表有关联的分区定义（<code>.par</code>）文件。</li><li>对于不存在的表，使用 <code>IF EXISTS</code> 用于防止错误发生。当使用 <code>IF EXISTS</code> 时，对于每个不存在的表，会生成一个 <code>NOTE</code>。</li><li><code>RESTRICT</code> 和 <code>CASCADE</code> 可以使分区更容易。但目前，<code>RESTRICT</code> 和 <code>CASCADE</code> 不起作用。</li></ul><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> &lt;表名&gt; (&lt;字段名<span class="hljs-number">1</span>&gt;, ..., &lt;字段名n &gt;) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, ...,  值n );<br></code></pre></td></tr></table></figure></p><p>例如：往表 <code>MyClass</code> 中插入二条记录, 这二条记录表示：编号为 <code>1</code> 的名为 <code>Tom</code> 的成绩为 <code>96.45</code>, 编号为 <code>2</code> 的名为 <code>Joan</code> 的成绩为 <code>82.99</code>，编号为 <code>3</code> 的名为 <code>Wang</code> 的成绩为 <code>96.5</code>。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT INTO MyClass(id, name, degree) VALUES (1, &#x27;Tom&#x27;, 96.45),(2, &#x27;Joan&#x27;, 82.99), (3, &#x27;Wang&#x27;, 96.59);<br></code></pre></td></tr></table></figure></p><h2 id="查询表中的数据"><a href="#查询表中的数据" class="headerlink" title="查询表中的数据"></a>查询表中的数据</h2><ol><li><p>查询所有行命令：</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> &lt;字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...&gt; <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;;<br></code></pre></td></tr></table></figure></p><p> <code>SELECT</code> 一般配合 <code>WHERE</code> 使用，以查询更精确更复杂的数据。</p><p> 例如：查看表 <code>MyClass</code> 中 <code>degree</code> 大于 <code>90</code> 的数据。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM MyClass WHERE degree &gt; 90;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  1 | Tom  |   0 |  96.45 |<br>|  3 | Wang |   0 |  96.59 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>查询前几行数据 </p><p> 例如：查看表 <code>MyClass</code> 中前 <code>2</code> 行数据</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM MyClass ORDER BY id LIMIT 0, 2;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  1 | Tom  |   0 |  96.45 |<br>|  2 | Joan |   0 |  82.99 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h2></li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;<br></code></pre></td></tr></table></figure></p><p>例如：删除表 <code>MyClass</code> 中编号为 <code>1</code> 的记录</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM MyClass;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  1 | Tom  |   0 |  96.45 |<br>|  2 | Joan |   0 |  82.99 |<br>|  3 | Wang |   0 |  96.59 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> MyClass <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; SELECT * FROM MyClass;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  2 | Joan |   0 |  82.99 |<br>|  3 | Wang |   0 |  96.59 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="修改表中数据"><a href="#修改表中数据" class="headerlink" title="修改表中数据"></a>修改表中数据</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> &lt;表名&gt; <span class="hljs-keyword">SET</span> &lt;字段&gt; = &lt;新值&gt;, ... <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;<br></code></pre></td></tr></table></figure></p><p>例如：修改表 <code>MyClass</code> 中 <code>id</code> 为 <code>2</code> 的 <code>name</code> 为 <code>Mary</code>。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; UPDATE MyClass SET name = &#x27;Mary&#x27; WHERE id = 2;<br></code></pre></td></tr></table></figure></p><ol><li><p>单表的 UPDATE 语句：</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> [<span class="hljs-keyword">LOW_PRIORITY</span>] [<span class="hljs-keyword">IGNORE</span>] tbl_name <br><span class="hljs-keyword">SET</span> col_name1=expr1 [, col_name2=expr2 ...] <br>[<span class="hljs-keyword">WHERE</span> where_definition] <br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...] <br>[<span class="hljs-keyword">LIMIT</span> <span class="hljs-keyword">row_count</span>]<br></code></pre></td></tr></table></figure></p></li><li><p>多表的 UPDATE 语句：</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> [<span class="hljs-keyword">LOW_PRIORITY</span>] [<span class="hljs-keyword">IGNORE</span>] table_references <br><span class="hljs-keyword">SET</span> col_name1=expr1 [, col_name2=expr2 ...] <br>[<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：<code>UPDATE</code> 语法可以用新值更新原有表行中的各列。SET 子句指示要修改哪些列和要给予哪些值。<code>WHERE</code> 子句指定应更新哪些行。如果没有 <code>WHERE</code> 子句，则更新所有的行。如果指定了 <code>ORDER BY</code> 子句，则按照被指定的顺序对行进行更新。<code>LIMIT</code> 子句用于给定一个限值，限制可以被更新的行的数目。</p></li></ol><h2 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h2><ol><li><p>增加字段</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> &lt;字段&gt; &lt;类型&gt; &lt;其他&gt;; <br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE MyClass ADD passtest int(4) default &#x27;0&#x27;<br></code></pre></td></tr></table></figure></p></li><li><p>增加索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> &lt;索引名&gt;(&lt;字段名<span class="hljs-number">1</span>&gt;, &lt;字段名<span class="hljs-number">2</span>&gt;, ...)<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD INDEX emp_name(name);<br></code></pre></td></tr></table></figure></p></li><li><p>增加主关键字的索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> (&lt;字段名&gt;);<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD PRIMARY KEY (id);<br></code></pre></td></tr></table></figure></p></li><li><p>增加唯一索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> &lt;索引名&gt;(&lt;字段名&gt;);<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD UNIQUE emp_name2(cardnumber);<br></code></pre></td></tr></table></figure></p></li><li><p>增加全文索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> FULLTEXT &lt;索引名&gt;(&lt;字段名&gt;);<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD FULLTEXT emp_name3(name);<br></code></pre></td></tr></table></figure></p><p> <strong>注意</strong>：全文索引只能用于数据库引擎为 <code>MYISAM</code> 的数据表，只适用于 <code>VARCHAR</code> 和 <code>TEXT</code> 类型的字段，此外，MySQL 自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。</p></li><li><p>删除某个索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> &lt;索引名&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt;ALTER TABLE employee DROP INDEX emp_name;<br></code></pre></td></tr></table></figure></p></li><li><p>修改原字段名称及类型</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">CHANGE</span> &lt;旧字段名&gt; &lt;新字段名&gt; &lt;新字段类型&gt; &lt;其他&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <span class="hljs-keyword">CHANGE</span> <span class="hljs-keyword">name</span> full_name <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure></p></li><li><p>删除字段</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">DROP</span> &lt;字段名&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <span class="hljs-keyword">DROP</span> address;<br></code></pre></td></tr></table></figure></p></li><li><p>修改表名</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> &lt;原表名&gt; <span class="hljs-keyword">TO</span> &lt;新表名&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; RENAME TABLE MyClass TO YouClass;<br></code></pre></td></tr></table></figure></p><p> <strong>注意</strong>：</p><ul><li>当你执行 <code>RENAME</code> 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 <code>ALTER</code> 和 <code>DROP</code> 权限，以及对新表的 <code>CREATE</code> 和 <code>INSERT</code> 权限。</li><li>如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事务退回到最初状态。</li><li><code>RENAME TABLE</code> 在 MySQL 3.23.23 中被加入。</li></ul></li></ol><h1 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h1><p>命令在 <code>DOS</code> 的 <code>\mysql\bin</code> 目录下执行，导出文件默认是存在 <code>mysql\bin</code> 目录下。</p><h2 id="导出整个数据库"><a href="#导出整个数据库" class="headerlink" title="导出整个数据库"></a>导出整个数据库</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u 用户名 -p<span class="hljs-string">&#x27;密码&#x27;</span> 数据库名 &gt; 导出的文件名.sql<br><br>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名.sql<br>Enter password: ******<br><br>mysqldump -u root -p database_name &gt; outfile.sql<br>Enter password: ******<br></code></pre></td></tr></table></figure></p><h2 id="导出所有数据库"><a href="#导出所有数据库" class="headerlink" title="导出所有数据库"></a>导出所有数据库</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump  -uroot -p --all-databases &gt; outfile.sql<br>mysqldump  -uroot -p -A &gt; outfile.sql<br></code></pre></td></tr></table></figure></p><h2 id="导出一个数据库结构"><a href="#导出一个数据库结构" class="headerlink" title="导出一个数据库结构"></a>导出一个数据库结构</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -p -d –add-drop-table database_name &gt; outfile.sql<br></code></pre></td></tr></table></figure></p><p><code>-d</code> 没有数据, <code>–add-drop-table</code>在每个 <code>CREATE</code> 语句之前增加一个 <code>DROP TABLE</code></p><h2 id="带语言参数导出"><a href="#带语言参数导出" class="headerlink" title="带语言参数导出"></a>带语言参数导出</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile.sql<br></code></pre></td></tr></table></figure></p><h2 id="导出数据表"><a href="#导出数据表" class="headerlink" title="导出数据表"></a>导出数据表</h2><ol><li><p>导出数据表和表结构</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h 登录主机 -p<span class="hljs-string">&#x27;密码&#x27;</span> -P端口号 数据库名 表名 &gt; 文件名.sql<br></code></pre></td></tr></table></figure></p><p> 将特定数据库特定表中的数据和表格结构和数据全部返回。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -P3306 database_name table &gt; table.sql<br></code></pre></td></tr></table></figure></p></li><li><p>导出表结构却不导出表数据</p><p> 只返回特定数据库特定表格的表格结构，不返回数据，添加 <code>-d</code> 命令参数。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -P3306 -d database_name table &gt; table.sql<br></code></pre></td></tr></table></figure></p></li><li><p>导出表结构和满足 <code>WHERE</code> 条件的表数据</p><p> 只返回特定数据库中特定表的表格结构和满足特定条件的数据。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -P3306 database_name table -<span class="hljs-built_in">where</span>=<span class="hljs-string">&quot;time&gt;&#x27;2017-01-01&#x27;&quot;</span> &gt; table.sql<br></code></pre></td></tr></table></figure></p></li><li><p>导出数据却不导出表结构</p><p> 只返回特定数据库中特定表格的数据，不返回表格结构，添加 <code>-t</code> 命令参数。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -t -P3306 database_name table &gt; table.sql<br></code></pre></td></tr></table></figure></p><h2 id="导入-SQL-文件"><a href="#导入-SQL-文件" class="headerlink" title="导入 SQL 文件"></a>导入 SQL 文件</h2></li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">source database.sql;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐬MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程</title>
      <link href="post/7f59cefa.html"/>
      <url>post/7f59cefa.html</url>
      
        <content type="html"><![CDATA[<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul><li>数据库: 数据库是一些关联表的集合。</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列: 一列（数据元素）包含了相同类型的数据, 例如邮政编码的数据。</li><li>行：一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>MySQL 是一个关系型数据库管理系统（RDBMS），由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL 是开源的，所以你不需要支付额外的费用。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 使用标准的 SQL 数据语言形式。</li><li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为 8TB。</li><li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>您可以使用 MySQL 二进制方式进入到 <code>mysql</code> 命令提示符下来连接 MySQL 数据库。</p><p>以下是在命令提示窗口中连接 MySQL 服务器的简单实例：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@host]<span class="hljs-comment"># mysql -u root -p</span><br>Enter password:******<br></code></pre></td></tr></table></figure></p><p>在登录成功后会出现 <code>mysql&gt;</code> 命令提示窗口，你可以在上面执行任何 SQL 语句。</p><p>以上命令执行后，登录成功输出结果如下:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 2854760 to server version: 5.0.9<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the buffer.<br></code></pre></td></tr></table></figure></p><p>在以上实例中，我们使用了 <code>root</code> 用户登录到 MySQL 服务器，当然你也可以使用其他 MySQL 用户登录。</p><p>如果用户权限足够，任何用户都可以在 <code>mysql</code> 的命令提示窗口中进行 SQL 操作。</p><p>退出 <code>mysql&gt;</code> 命令提示窗口可以使用 <code>exit</code> 命令，如下所示：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; exit<br>Bye<br></code></pre></td></tr></table></figure></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>我们可以在登陆 MySQL 服务后，使用 <code>CREATE DATABASE</code> 命令创建数据库，语法如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> 数据库名;<br></code></pre></td></tr></table></figure></p><h2 id="使用-CREATE-DATABASE-命令"><a href="#使用-CREATE-DATABASE-命令" class="headerlink" title="使用 CREATE DATABASE 命令"></a>使用 CREATE DATABASE 命令</h2><p>以下命令简单的演示了创建数据库的过程，数据名为 <code>TestDB</code>:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@host]<span class="hljs-comment"># mysql -u root -p</span><br>Enter password:******  <span class="hljs-comment"># 登录后进入终端</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE DATABASE TestDB;<br></code></pre></td></tr></table></figure></p><h2 id="使用-mysqladmin-创建数据库"><a href="#使用-mysqladmin-创建数据库" class="headerlink" title="使用 mysqladmin 创建数据库"></a>使用 mysqladmin 创建数据库</h2><p>使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。</p><p>所以我们这边使用 <code>root</code> 用户登录，<code>root</code> 用户拥有最高权限，可以使用 <code>mysql mysqladmin</code> 命令来创建数据库。</p><p>以下命令简单的演示了创建数据库的过程，数据名为 TestDB:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@host]<span class="hljs-comment"># mysqladmin -u root -p CREATE TestDB</span><br>Enter password:******<br></code></pre></td></tr></table></figure></p><p>以上命令执行成功后会创建 MySQL 数据库 TestDB。</p><h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><p>使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库，所以我们这边使用 root 用户登录，root 用户拥有最高权限。</p><p>在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。</p><h2 id="使用-DROP-DATABASE-命令"><a href="#使用-DROP-DATABASE-命令" class="headerlink" title="使用 DROP DATABASE 命令"></a>使用 DROP DATABASE 命令</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p><p>例如删除名为 <code>TestDB</code> 的数据库：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP DATABASE TestDB;<br></code></pre></td></tr></table></figure></p><h2 id="使用-mysqladmin-删除数据库"><a href="#使用-mysqladmin-删除数据库" class="headerlink" title="使用 mysqladmin 删除数据库"></a>使用 mysqladmin 删除数据库</h2><p>你也可以使用 <code>mysqladmin</code> 命令在终端来执行删除命令。</p><p>以下实例删除数据库 TestDB：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root@host]<span class="hljs-comment"># mysqladmin -u root -p DROP TestDB</span><br>Enter password:******<br></code></pre></td></tr></table></figure></p><p>执行以上删除数据库命令后，会出现一个提示框，来确认是否真的删除数据库：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Dropping the database is potentially a very bad thing to <span class="hljs-keyword">do</span>.<br>Any data stored <span class="hljs-keyword">in</span> the database will be destroyed.<br><br>Do you really want to drop the <span class="hljs-string">&#x27;TestDB&#x27;</span> database [y/N] y<br>Database <span class="hljs-string">&quot;TestDB&quot;</span> dropped<br></code></pre></td></tr></table></figure></p><h1 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h1><p>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。</p><p>从命令提示窗口中选择MySQL数据库</p><p>在 <code>mysql&gt;</code> 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p><p>以下实例选取了数据库 <code>TestDB</code>:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root@host]<span class="hljs-comment"># mysql -u root -p</span><br>Enter password:******<br>mysql&gt; use TestDB;<br>Database changed<br>mysql&gt;<br></code></pre></td></tr></table></figure></p><p>执行以上命令后，你就已经成功选择了 TestDB 数据库，在后续的操作中都会在 TestDB 数据库中执行。</p><p>注意:所有的数据库名，表名，表字段都是区分大小写的。所以你在使用SQL命令时需要输入正确的名称。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型（<code>INTEGER</code>、<code>SMALLINT</code>、<code>DECIMAL</code> 和 <code>NUMERIC</code>），以及近似数值数据类型（<code>FLOAT</code>、<code>REAL</code> 和 <code>DOUBLE PRECISION</code>）。</p><p>关键字 <code>INT</code> 是 <code>INTEGER</code> 的同义词，关键字 <code>DEC</code> 是 <code>DECIMAL</code> 的同义词。</p><p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 <code>TINYINT</code>、<code>MEDIUMINT</code> 和 <code>BIGINT</code>。下面的表显示了需要的每个整数类型的存储和范围。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围（有符号）</th><th style="text-align:center">范围（无符号）</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1 byte</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 bytes</td><td style="text-align:center">(-32 768，32 767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 bytes</td><td style="text-align:center">(-8 388 608，8 388 607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或<br>INTEGER</td><td style="text-align:center">4 bytes</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8 bytes</td><td style="text-align:center">(-9 223 372 036 854 775 808，<br>9 223 372 036 854 775 807)</td><td style="text-align:center">(0，<br>18 446 744 073 709 551 615)</td><td style="text-align:center">极大整数值</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">4 bytes</td><td style="text-align:center">(-3.402 823 466 E+38，<br>-1.175 494 351 E-38)，<br>0，<br>(1.175 494 351 E-38，<br>3.402 823 466 351 E+38)</td><td style="text-align:center">0，<br>(1.175 494 351 E-38，<br>3.402 823 466 E+38)</td><td style="text-align:center">单精度浮点数值</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">8 bytes</td><td style="text-align:center">(-1.797 693 134 862 315 7 E+308，<br>-2.225 073 858 507 201 4 E-308)，<br>0，<br>(2.225 073 858 507 201 4 E-308，<br>1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">0，<br>(2.225 073 858 507 201 4 E-308，<br>1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">双精度浮点数值</td></tr><tr><td style="text-align:center">DECIMAL</td><td style="text-align:center">DECIMAL(M, D)，<br>如果 M&gt;D，<br>为 M+2 ，否则为 D+2</td><td style="text-align:center">依赖于 M 和 D 的值</td><td style="text-align:center">依赖于 M 和 D 的值</td><td style="text-align:center">小数值</td></tr></tbody></table></div><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为 <code>DATETIME</code>、<code>DATE</code>、<code>TIMESTAMP</code>、<code>TIME</code> 和 <code>YEAR</code>。</p><p>每个时间类型有一个有效值范围和一个“零”值，当指定不合法的 MySQL 不能表示的值时使用“零”值。</p><p><code>TIMESTAMP</code> 类型有专有的自动更新特性，将在后面描述。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3 bytes</td><td style="text-align:center">1000-01-01 /<br> 9999-12-31</td><td style="text-align:center">YYYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3 bytes</td><td style="text-align:center">&#39;-838:59:59&#39; /<br>&#39;838:59:59&#39;</td><td style="text-align:center">HH:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1 bytes</td><td style="text-align:center">1901 / 2155</td><td style="text-align:center">YYYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8 bytes</td><td style="text-align:center">1000-01-01 00:00:00 /<br>9999-12-31 23:59:59</td><td style="text-align:center">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4 bytes</td><td style="text-align:center">1970-01-01 00:00:00 /<br>结束时间是第 2147483647 秒，<br>北京时间 2038-1-19 11:14:07，<br>格林尼治时间 2038-1-19 03:14:07</td><td style="text-align:center">YYYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table></div><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指 <code>CHAR</code>、<code>VARCHAR</code>、<code>BINARY</code>、<code>VARBINARY</code>、<code>BLOB</code>、<code>TEXT</code>、<code>ENUM</code> 和 <code>SET</code>。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">0-65535 bytes</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">短文本字符串</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">中等长度文本数据</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">极大文本数据</td></tr></tbody></table></div><p><strong>注意：</strong></p><ul><li><p><code>char(n)</code> 和 <code>varchar(n)</code> 中括号中 <code>n</code> 代表字符的个数，并不代表字节个数，比如 <code>CHAR(30)</code> 就可以存储 30 个字符。</p></li><li><p><code>CHAR</code> 和 <code>VARCHAR</code> 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p></li><li><p><code>BINARY</code> 和 <code>VARBINARY</code> 类似于 <code>CHAR</code> 和 <code>VARCHAR</code>，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p></li><li><p><code>BLOB</code> 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 <code>BLOB</code> 类型：<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>。它们区别在于可容纳存储范围不同。</p></li><li><p>有 4 种 <code>TEXT</code> 类型：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和 <code>LONGTEXT</code>。对应的这 4 种 <code>BLOB</code> 类型，可存储的最大长度不同，可根据实际情况选择。</p></li></ul><h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><h2 id="CREATE-TABLE-命令"><a href="#CREATE-TABLE-命令" class="headerlink" title="CREATE TABLE 命令"></a>CREATE TABLE 命令</h2><p>以下为创建 MySQL 数据表的 SQL 通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name (column_name column_type);<br></code></pre></td></tr></table></figure></p><p>以下例子中我们将在 <code>TestDB</code> 数据库中创建数据表 <code>tbl</code>：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`tbl`</span>(<br>   <span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">UNSIGNED</span> AUTO_INCREMENT,<br>   <span class="hljs-string">`title`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   <span class="hljs-string">`author`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   <span class="hljs-string">`submission_date`</span> <span class="hljs-built_in">DATE</span>,<br>   PRIMARY <span class="hljs-keyword">KEY</span> ( <span class="hljs-string">`id`</span> )<br>)<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br></code></pre></td></tr></table></figure></p><p><strong>实例解析：</strong></p><ul><li>如果你不想字段为 <code>NULL</code> 可以设置字段的属性为 <code>NOT NULL</code>， 在操作数据库时如果输入该字段的数据为 <code>NULL</code>，就会报错。</li><li><code>AUTO_INCREMENT</code> 定义列为自增的属性，一般用于主键，数值会自动加 1。</li><li><code>PRIMARY KEY</code> 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li><code>ENGINE</code> 设置存储引擎，<code>CHARSET</code> 设置编码。</li></ul><h2 id="在命令提示窗口中创建表"><a href="#在命令提示窗口中创建表" class="headerlink" title="在命令提示窗口中创建表"></a>在命令提示窗口中创建表</h2><p>通过 <code>mysql&gt;</code> 命令窗口可以很简单的创建MySQL数据表。你可以使用 SQL 语句 <code>CREATE TABLE</code> 来创建数据表。</p><p>以下为创建数据表 tbl 实例:</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE tbl(<br>    -&gt; id INT NOT NULL AUTO_INCREMENT,<br>    -&gt; title VARCHAR(100) NOT NULL,<br>    -&gt; author VARCHAR(40) NOT NULL,<br>    -&gt; submission_date DATE,<br>    -&gt; PRIMARY KEY ( id )<br>    -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;<br>Query OK, 0 rows affected (0.16 sec)<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：MySQL 命令终止符为分号 <code>;</code> 。</p><h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><p>MySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p><h2 id="DROP-TABLE-命令"><a href="#DROP-TABLE-命令" class="headerlink" title="DROP TABLE 命令"></a>DROP TABLE 命令</h2><p>以下为删除MySQL数据表的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> table_name ;<br></code></pre></td></tr></table></figure></p><h2 id="在命令提示窗口中删除数据表"><a href="#在命令提示窗口中删除数据表" class="headerlink" title="在命令提示窗口中删除数据表"></a>在命令提示窗口中删除数据表</h2><p>在 <code>mysql&gt;</code> 命令提示窗口中删除数据表 SQL 语句为 DROP TABLE ：</p><p>以下实例删除了数据表 <code>tbl</code>:</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP TABLE tbl<br>Query OK, 0 rows affected (0.8 sec)<br></code></pre></td></tr></table></figure></p><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>MySQL 表中使用 <code>INSERT INTO</code> 语句来插入数据。</p><p>INSERT INTO 命令</p><p>以下为向 MySQL 数据表插入数据通用的 <code>INSERT INTO</code> 的 SQL 语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name ( field1, field2,...fieldN )<br>                       <span class="hljs-keyword">VALUES</span><br>                       ( value1, value2,...valueN );<br></code></pre></td></tr></table></figure></p><p>如果数据是字符型，必须使用单引号或者双引号，如：<code>&quot;value&quot;</code>。</p><h2 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h2><p>以下我们将使用 <code>INSERT INTO</code> 语句向 MySQL 数据表 <code>tbl</code> 插入数据</p><p>以下实例中我们将向 <code>tbl</code> 表插入三条数据:</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT INTO tbl <br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 PHP&quot;, &quot;PHP&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO tbl<br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 MySQL&quot;, &quot;MySQL&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO tbl<br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 JAVA&quot;, &quot;JAVA&quot;, &#x27;2021-01-01&#x27;);<br>Query OK, 1 rows affected (0.00 sec)<br>mysql&gt; INSERT INTO tbl<br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 Python&quot;, &quot;Python&quot;, &#x27;2021-01-01&#x27;);<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：使用箭头标记 <code>-&gt;</code> 不是 SQL 语句的一部分，它仅仅表示一个新行，如果一条SQL语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号 <code>;</code>。</p><p>在以上实例中，我们并没有提供 <code>id</code> 的数据，因为该字段我们在创建表的时候已经设置它为 <code>AUTO_INCREMENT</code>(自动增加) 属性。 所以，该字段会自动递增而不需要我们去设置。实例中 <code>NOW()</code> 是一个 MySQL 函数，该函数返回日期和时间。</p><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="SELECT-命令"><a href="#SELECT-命令" class="headerlink" title="SELECT 命令"></a>SELECT 命令</h2><p>MySQL 数据库使用 <code>SELECT</code> 语句来查询数据。</p><p>以下为在 MySQL 数据库中查询数据通用的 SELECT 语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, column_name<br><span class="hljs-keyword">FROM</span> table_name<br>[<span class="hljs-keyword">WHERE</span> Clause]<br>[<span class="hljs-keyword">LIMIT</span> N][ <span class="hljs-keyword">OFFSET</span> M]<br></code></pre></td></tr></table></figure></p><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号 <code>,</code> 分割，并使用 <code>WHERE</code> 语句来设定查询条件。</li><li><code>SELECT</code> 命令可以读取一条或者多条记录。</li><li>你可以使用星号 <code>*</code> 来代替其他字段，<code>SELECT</code> 语句会返回表的所有字段数据。</li><li>你可以使用 <code>WHERE</code> 语句来包含任何条件。</li><li>你可以使用 <code>LIMIT</code> 属性来设定返回的记录数。</li><li>你可以通过 <code>OFFSET</code> 指定 <code>SELECT</code> 语句开始查询的数据偏移量。默认情况下偏移量为 0。</li></ul><h2 id="在命令提示窗口中获取数据"><a href="#在命令提示窗口中获取数据" class="headerlink" title="在命令提示窗口中获取数据"></a>在命令提示窗口中获取数据</h2><p>以下实例我们将通过 <code>SELECT</code> 命令来获取数据表 <code>tbl</code> 的数据：</p><p>读取数据表：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl;<br></code></pre></td></tr></table></figure></p><p>输出结果：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>|  3 | 学习 JAVA   | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h1><h2 id="WHERE-子句语法"><a href="#WHERE-子句语法" class="headerlink" title="WHERE 子句语法"></a>WHERE 子句语法</h2><p>我们知道从 MySQL 表中使用 <code>SELECT</code> 语句来读取数据。</p><p>如需有条件地从表中选取数据，可将 <code>WHERE</code> 子句添加到 <code>SELECT</code> 语句中。</p><p>语法</p><p>以下是 <code>SELECT</code> 语句使用 <code>WHERE</code> 子句从数据表中读取数据的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <span class="hljs-keyword">FROM</span> table_name1, table_name2...<br>[<span class="hljs-keyword">WHERE</span> condition1 [<span class="hljs-keyword">AND</span> [<span class="hljs-keyword">OR</span>]] condition2.....<br></code></pre></td></tr></table></figure></p><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用 <code>WHERE</code> 语句来设定查询条件。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li><code>WHERE</code> 子句也可以运用于 SQL 的 <code>DELETE</code> 或者 <code>UPDATE</code> 命令。</li><li><code>WHERE</code> 子句类似于程序语言中的 <code>if</code> 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下为操作符列表，可用于 <code>WHERE</code> 子句中。</p><p>下表中实例假定 A 为 10, B 为 20</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等号，检测两个值是否相等，<br>如果相等返回true</td><td style="text-align:center">(A = B) 返回false。</td></tr><tr><td style="text-align:center">&lt;&gt;, !=</td><td style="text-align:center">不等于，检测两个值是否相等，<br>如果不相等返回true</td><td style="text-align:center">(A != B) 返回 true。</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号，检测左边的值是否大于右边的值, <br>如果左边的值大于右边的值返回true</td><td style="text-align:center">(A &gt; B) 返回false。</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号，检测左边的值是否小于右边的值, <br>如果左边的值小于右边的值返回true</td><td style="text-align:center">(A &lt; B) 返回 true。</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于号，检测左边的值是否大于或等于右边的值, <br>如果左边的值大于或等于右边的值返回true</td><td style="text-align:center">(A &gt;= B) 返回false。</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于号，检测左边的值是否小于或等于右边的值, <br>如果左边的值小于或等于右边的值返回true</td><td style="text-align:center">(A &lt;= B) 返回 true。</td></tr></tbody></table></div><p>如果我们想在 MySQL 数据表中读取指定的数据，<code>WHERE</code> 子句是非常有用的。</p><p>使用主键来作为 <code>WHERE</code> 子句的条件查询是非常快速的。</p><p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p><h2 id="BINARY-关键字"><a href="#BINARY-关键字" class="headerlink" title="BINARY 关键字"></a>BINARY 关键字</h2><p>MySQL 的 <code>WHERE</code> 子句的字符串比较是不区分大小写的。 你可以使用 <code>BINARY</code> 关键字来设定 <code>WHERE</code> 子句的字符串比较是区分大小写的。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl WHERE BINARY author=&#x27;mysql&#x27;;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">BINARY</span> author=<span class="hljs-string">&#x27;MySQL&#x27;</span>;<br>+<span class="hljs-comment">----+------------+--------+-----------------+</span><br>| id | title      | author | submission_date |<br>+<span class="hljs-comment">----+------------+--------+-----------------+</span><br>|  2 | 学习 MySQL | MySQL  | 2021-01-12      |<br>+<span class="hljs-comment">----+------------+--------+-----------------+</span><br></code></pre></td></tr></table></figure></p><p>实例中使用了 <code>BINARY</code> 关键字，是区分大小写的，所以 <code>author=&#39;mysql&#39;</code> 的查询条件是没有数据的。</p><h1 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE 更新"></a>UPDATE 更新</h1><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 <code>UPDATE</code> 命令来操作。</p><p>以下是 <code>UPDATE</code> 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table_name <span class="hljs-keyword">SET</span> field1=<span class="hljs-keyword">new</span>-value1, field2=<span class="hljs-keyword">new</span>-value2<br>[<span class="hljs-keyword">WHERE</span> Clause]<br></code></pre></td></tr></table></figure></p><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li><li>当你需要更新数据表中指定行的数据时 <code>WHERE</code> 子句是非常有用的。</li></ul><p>在命令提示窗口中更新数据</p><p>以下我们将在 <code>UPDATE</code> 命令使用 <code>WHERE</code> 子句来更新 <code>tbl</code> 表中指定的数据：</p><p>以下实例将更新数据表中 <code>id</code> 为 <code>3</code> 的 <code>title</code> 字段值：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; UPDATE tbl SET title=&#x27;学习 C++&#x27; WHERE id = 3;<br>Query OK, 1 rows affected (0.01 sec)<br> <br>mysql&gt; SELECT * FROM tbl WHERE id = 3;<br>+<span class="hljs-comment">----+----------+--------+-----------------+</span><br>| id | title    | author | submission_date |<br>+<span class="hljs-comment">----+----------+--------+-----------------+</span><br>|  3 | 学习 C++ | JAVA   | 2021-01-01      |<br>+<span class="hljs-comment">----+----------+--------+-----------------+</span><br></code></pre></td></tr></table></figure></p><p>从结果上看，<code>id</code> 为 <code>3</code> 的 <code>title</code> 已被修改。</p><h1 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h1><h2 id="DELETE-FROM-命令"><a href="#DELETE-FROM-命令" class="headerlink" title="DELETE FROM 命令"></a>DELETE FROM 命令</h2><p>你可以使用 SQL 的 <code>DELETE FROM</code> 命令来删除 MySQL 数据表中的记录。</p><p>以下是 SQL DELETE 语句从 MySQL 数据表中删除数据的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> Clause]<br></code></pre></td></tr></table></figure></p><ul><li>如果没有指定 <code>WHERE</code> 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p>当你想删除数据表中指定的记录时 <code>WHERE</code> 子句是非常有用的。</p><h2 id="在命令提示窗口中删除数据"><a href="#在命令提示窗口中删除数据" class="headerlink" title="在命令提示窗口中删除数据"></a>在命令提示窗口中删除数据</h2><p>这里我们将在 <code>DELETE</code> 命令中使用 <code>WHERE</code> 子句来删除 MySQL 数据表 tbl 所选的数据。</p><p>以下实例将删除 tbl 表中 id 为3 的记录：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DELETE FROM tbl WHERE id=3;<br>Query OK, 1 row affected (0.23 sec)<br></code></pre></td></tr></table></figure></p><h2 id="多表连接删除"><a href="#多表连接删除" class="headerlink" title="多表连接删除"></a>多表连接删除</h2><p>在 MySQL 中可以同时删除两个表以上的数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> orders, items <span class="hljs-keyword">FROM</span> orders, items <br><span class="hljs-keyword">WHERE</span> orders.userid = items.userid <br><span class="hljs-keyword">AND</span> orders.orderid = items.orderid <br></code></pre></td></tr></table></figure></p><h1 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h1><p>我们知道在 MySQL 中使用 <code>SELECT</code> 命令来读取数据， 同时我们可以在 <code>SELECT</code> 语句中使用 <code>WHERE</code> 子句来获取指定的记录。</p><p><code>WHERE</code> 子句中可以使用等号 <code>=</code> 来设定获取数据的条件，如 <code>author = &#39;MySQL&#39;</code>。</p><p>但是有时候我们需要获取 <code>author</code> 字段含有 <code>P</code> 字符的所有记录，这时我们就需要在 <code>WHERE</code> 子句中使用 <code>LIKE</code> 子句。</p><p><code>LIKE</code> 子句中使用百分号 <code>%</code> 字符来表示任意字符，类似于 <code>UNIX</code> 或正则表达式中的星号 <code>*</code>。</p><p>如果没有使用百分号 <code>%</code>, <code>LIKE</code> 子句与等号 = 的效果是一样的。</p><h2 id="LIKE-子句语法"><a href="#LIKE-子句语法" class="headerlink" title="LIKE 子句语法"></a>LIKE 子句语法</h2><p>以下是 SELECT 语句使用 <code>LIKE</code> 子句从数据表中读取数据的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> field1 <span class="hljs-keyword">LIKE</span> condition1 [<span class="hljs-keyword">AND</span> [<span class="hljs-keyword">OR</span>]] filed2 = <span class="hljs-string">&#x27;somevalue&#x27;</span><br></code></pre></td></tr></table></figure></p><ul><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以在 <code>WHERE</code> 子句中使用 <code>LIKE</code> 子句。</li><li>你可以使用 <code>LIKE</code> 子句代替等号 <code>=</code>。</li><li><code>LIKE</code> 通常与 <code>%</code> 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li>你可以在 <code>DELETE</code> 或 <code>UPDATE</code> 命令中使用 <code>WHERE...LIKE</code> 子句来指定条件。</li></ul><h2 id="在命令提示符中使用-LIKE-子句"><a href="#在命令提示符中使用-LIKE-子句" class="headerlink" title="在命令提示符中使用 LIKE 子句"></a>在命令提示符中使用 LIKE 子句</h2><p>以下我们将在 <code>SELECT</code> 命令中使用 <code>WHERE...LIKE</code> 子句来从 MySQL 数据表 <code>tbl</code> 中读取数据。</p><p>以下是我们将 <code>tbl</code> 表中获取 <code>author</code> 字段中以 P 为开头的所有记录：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl  WHERE author LIKE &#x27;P%&#x27;;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h1><p>下面为大家介绍 MySQL <code>UNION</code> 操作符的语法和实例。</p><p>MySQL <code>UNION</code> 操作符用于连接两个以上的 <code>SELECT</code> 语句的结果组合到一个结果集合中。多个 <code>SELECT</code> 语句会删除重复的数据。</p><h2 id="UNION-操作符语法"><a href="#UNION-操作符语法" class="headerlink" title="UNION 操作符语法"></a>UNION 操作符语法</h2><p>MySQL <code>UNION</code> 操作符语法格式：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> expression1, expression2, ... expression_n<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">tables</span><br>[<span class="hljs-keyword">WHERE</span> conditions]<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span>]<br><span class="hljs-keyword">SELECT</span> expression1, expression2, ... expression_n<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">tables</span><br>[<span class="hljs-keyword">WHERE</span> conditions];<br></code></pre></td></tr></table></figure></p><p>参数</p><ul><li><strong>expression1, expression2, ... expression_n</strong>: 要检索的列。</li><li><strong>tables</strong>: 要检索的数据表。</li><li><strong>WHERE conditions</strong>: 可选，检索条件。</li><li><strong>DISTINCT</strong>: 可选，删除结果集中重复的数据。默认情况下 <code>UNION</code> 操作符已经删除了重复数据，所以 <code>DISTINCT</code> 修饰符对结果没啥影响。</li><li><strong>ALL</strong>: 可选，返回所有结果集，包含重复数据。</li></ul><p>演示数据库</p><p>下面是选自 <code>Websites</code> 表的数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM Websites;<br>+<span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br>| id | name         | url                       | alexa | country |<br>+<span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br>| 1  | Google       | https://www.google.cm/    | 1     | USA     |<br>| 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      |<br>| 3  | 微博          | https://weibo.com/         | 20    | CN      |<br>| 4  | Facebook     | https://www.facebook.com/ | 3     | USA     |<br>| 5  | stackoverflow | https://stackoverflow.com/ |   0 | IND     |<br>+<span class="hljs-comment">----+---------------+---------------------------+-------+---------+</span><br></code></pre></td></tr></table></figure></p><p>下面是 <code>apps</code> 表的数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM apps;<br>+<span class="hljs-comment">----+------------+-------------------------+---------+</span><br>| id | app_name   | url                     | country |<br>+<span class="hljs-comment">----+------------+-------------------------+---------+</span><br>|  1 | QQ APP     | https://im.qq.com/       | CN      |<br>|  2 | 微博 APP | https://weibo.com/       | CN      |<br>|  3 | 淘宝 APP | https://www.taobao.com/ | CN      |<br>+<span class="hljs-comment">----+------------+-------------------------+---------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="在命令提示符中使用-UNION-操作符"><a href="#在命令提示符中使用-UNION-操作符" class="headerlink" title="在命令提示符中使用 UNION 操作符"></a>在命令提示符中使用 UNION 操作符</h2><p>下面的 SQL 语句从 <code>Websites</code> 和 <code>apps</code> 表中选取所有不同的 <code>country</code>（只有不同的值），执行 SQL 输出结果如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT country FROM Websites<br>    -&gt; UNION<br>    -&gt; SELECT country FROM apps<br>    -&gt; ORDER BY country;<br>+<span class="hljs-comment">---------+</span><br>| country |<br>+<span class="hljs-comment">---------+</span><br>|  CN     |<br>|  IND    |<br>|  USA    |<br>+<span class="hljs-comment">---------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p><strong>注释</strong>：<code>UNION</code> 不能用于列出两个表中所有的 <code>country</code>。如果一些网站和 APP 来自同一个国家，每个国家只会列出一次。<code>UNION</code> 只会选取不同的值。请使用 <code>UNION ALL</code> 来选取重复的值。</p><h2 id="在命令提示符中使用-UNION-ALL-操作符"><a href="#在命令提示符中使用-UNION-ALL-操作符" class="headerlink" title="在命令提示符中使用 UNION ALL 操作符"></a>在命令提示符中使用 UNION ALL 操作符</h2><p>下面的 SQL 语句使用 <code>UNION ALL</code> 从 <code>Websites</code> 和 <code>apps</code> 表中选取所有的 <code>country</code>（有重复的值）：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT country FROM Websites<br>    -&gt; UNION ALL<br>    -&gt; SELECT country FROM apps<br>    -&gt; ORDER BY country;<br>+<span class="hljs-comment">---------+</span><br>| country |<br>+<span class="hljs-comment">---------+</span><br>|  CN     |<br>|  CN     |<br>|  CN     |<br>|  CN     |<br>|  IND    |<br>|  USA    |<br>|  USA    |<br>|  USA    |<br>+<span class="hljs-comment">---------+</span><br>8 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><p><strong>带有 <code>WHERE</code> 的 <code>UNION ALL</code></strong></p><p>下面的 SQL 语句使用 <code>UNION ALL</code> 从 <code>Websites</code> 和 <code>apps</code> 表中选取所有的中国(CN)的数据（有重复的值）：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT country, name FROM Websites<br>    -&gt; WHERE country=&#x27;CN&#x27;<br>    -&gt; UNION ALL<br>    -&gt; SELECT country, app_name FROM apps<br>    -&gt; WHERE country=&#x27;CN&#x27;<br>    -&gt; ORDER BY country;<br>+<span class="hljs-comment">---------+------------+</span><br>| country | name       |<br>+<span class="hljs-comment">---------+------------+</span><br>| CN      | 淘宝       |<br>| CN      | QQ APP     |<br>| CN      | 微博 APP   |<br>| CN      | 微博       |<br>| CN      | 淘宝 APP   |<br>+<span class="hljs-comment">---------+------------+</span><br>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.03</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="排序语句"><a href="#排序语句" class="headerlink" title="排序语句"></a>排序语句</h1><p>我们知道从 MySQL 表中使用 <code>SELECT</code> 语句来读取数据。</p><p>如果我们需要对读取的数据进行排序，我们就可以使用 MySQL 的 <code>ORDER BY</code> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p><h2 id="ORDER-BY-子句语法"><a href="#ORDER-BY-子句语法" class="headerlink" title="ORDER BY 子句语法"></a>ORDER BY 子句语法</h2><p>以下是 <code>SELECT</code> 语句使用 <code>ORDER BY</code> 子句将查询数据排序后再返回数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <span class="hljs-keyword">FROM</span> table_name1, table_name2...<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> field1 [<span class="hljs-keyword">ASC</span> [<span class="hljs-keyword">DESC</span>][默认 <span class="hljs-keyword">ASC</span>]], [field2...] [<span class="hljs-keyword">ASC</span> [<span class="hljs-keyword">DESC</span>][默认 <span class="hljs-keyword">ASC</span>]]<br></code></pre></td></tr></table></figure></p><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 <code>ASC</code> 或 <code>DESC</code> 关键字来设置查询结果是按升序或降序排列。默认情况下，它是按升序排列。</li><li>你可以添加 <code>WHERE...LIKE</code> 子句来设置条件。</li></ul><h2 id="在命令提示符中使用-ORDER-BY-子句"><a href="#在命令提示符中使用-ORDER-BY-子句" class="headerlink" title="在命令提示符中使用 ORDER BY 子句"></a>在命令提示符中使用 ORDER BY 子句</h2><p>以下将在 <code>SELECT</code> 语句中使用 <code>ORDER BY</code> 子句来读取 MySQL 数据表 <code>tbl</code> 中的数据：</p><p>尝试以下实例，结果将按升序及降序排列。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl ORDER BY submission_date ASC;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  3 | 学习 C++    | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> submission_date <span class="hljs-keyword">DESC</span>;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>|  3 | 学习 C++    | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="分组语句"><a href="#分组语句" class="headerlink" title="分组语句"></a>分组语句</h1><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><h2 id="GROUP-BY-子句语法"><a href="#GROUP-BY-子句语法" class="headerlink" title="GROUP BY 子句语法"></a>GROUP BY 子句语法</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, <span class="hljs-keyword">function</span>(column_name)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br><br></code></pre></td></tr></table></figure></p><p>本章节实例使用到了以下表结构及数据，使用前我们可以先将以下数据导入数据库中。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`employee_tbl`</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`employee_tbl`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`name`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">`date`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`singin`</span> <span class="hljs-built_in">tinyint</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;登录次数&#x27;</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`employee_tbl`</span> <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;2016-04-22 15:25:33&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>), <br>(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;2016-04-20 15:25:47&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>), <br>(<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小丽&#x27;</span>, <span class="hljs-string">&#x27;2016-04-19 15:26:02&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>), <br>(<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;2016-04-07 15:26:14&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>), <br>(<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;2016-04-11 15:26:40&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>), <br>(<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;2016-04-04 15:26:54&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p>导入成功后，执行以下 SQL 语句：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM employee_tbl;<br>+<span class="hljs-comment">----+------+---------------------+--------+</span><br>| id | name | date                | singin |<br>+<span class="hljs-comment">----+------+---------------------+--------+</span><br>|  1 | 小明 | 2016-04-22 15:25:33 |      1 |<br>|  2 | 小王 | 2016-04-20 15:25:47 |      3 |<br>|  3 | 小丽 | 2016-04-19 15:26:02 |      2 |<br>|  4 | 小王 | 2016-04-07 15:26:14 |      4 |<br>|  5 | 小明 | 2016-04-11 15:26:40 |      4 |<br>|  6 | 小明 | 2016-04-04 15:26:54 |      2 |<br>+<span class="hljs-comment">----+------+---------------------+--------+</span><br>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>接下来我们使用 <code>GROUP BY</code> 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name, COUNT(*) FROM employee_tbl GROUP BY name;<br>+<span class="hljs-comment">------+----------+</span><br>| name | COUNT(*) |<br>+<span class="hljs-comment">------+----------+</span><br>| 小丽 |        1 |<br>| 小明 |        3 |<br>| 小王 |        2 |<br>+<span class="hljs-comment">------+----------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="使用-WITH-ROLLUP"><a href="#使用-WITH-ROLLUP" class="headerlink" title="使用 WITH ROLLUP"></a>使用 WITH ROLLUP</h2><p><code>WITH ROLLUP</code> 可以实现在分组统计数据基础上再进行相同的统计（SUM, AVG, COUNT…）。</p><p>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name, SUM(singin) AS singin_count FROM employee_tbl GROUP BY name WITH ROLLUP;<br>+<span class="hljs-comment">------+--------------+</span><br>| name | singin_count |<br>+<span class="hljs-comment">------+--------------+</span><br>| 小丽 |            2 |<br>| 小明 |            7 |<br>| 小王 |            7 |<br>| NULL |           16 |<br>+<span class="hljs-comment">------+--------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>其中记录 <code>NULL</code> 表示所有人的登录次数。</p><p>我们可以使用 <code>COALESCE</code> 来设置一个可以取代 <code>NUll</code> 的名称</p><p> <strong> COALESCE 语法：</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COALESCE</span>(a, b, c) <span class="hljs-keyword">FROM</span> ...;<br></code></pre></td></tr></table></figure></p><p>参数说明：如果 <code>a == NULL</code>，则选择 <code>b</code>；如果<code>b == NULL</code>，则选择 <code>c</code>；如果 <code>a != NULL</code>，则选择<code>a</code>；如果 <code>a</code> <code>b</code> <code>c</code> 都为 <code>NULL</code> ，则返回为 <code>NULL</code>（没意义）。</p><p>以下实例中如果名字为空我们使用总数代替：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT COALESCE(name, &#x27;总数&#x27;), SUM(singin) AS singin_count FROM employee_tbl GROUP BY name WITH ROLLUP;<br>+<span class="hljs-comment">------------------------+--------------+</span><br>| COALESCE(name, &#x27;总数&#x27;) | singin_count |<br>+<span class="hljs-comment">------------------------+--------------+</span><br>| 小丽                   |            2 |<br>| 小明                   |            7 |<br>| 小王                   |            7 |<br>| 总数                   |           16 |<br>+<span class="hljs-comment">------------------------+--------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h1><p>在前几章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。</p><p>本章节将向大家介绍如何使用 MySQL 的 <code>JOIN</code> 在两个或多个表中查询数据。</p><p>你可以在 <code>SELECT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句中使用 MySQL 的 <code>JOIN</code> 来联合多表查询。</p><p>JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li><li><strong>LEFT JOIN（左连接）</strong>：获取左表所有记录，即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）</strong>： 与 <code>LEFT JOIN</code> 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><p>我们在 <code>testDB</code> 数据库中有两张表 <code>tcount_tbl</code> 和 <code>tbl</code>。两张数据表数据如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tcount_tbl;<br>+<span class="hljs-comment">--------+-------+</span><br>| author | count |<br>+<span class="hljs-comment">--------+-------+</span><br>| JAVA   |    10 |<br>| MySQL  |    20 |<br>| C++    |    30 |<br>+<span class="hljs-comment">--------+-------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br> <br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>|  3 | 学习 C++    | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>|  5 | MySQL 教程  | MySQL  | 2021-01-12      |<br>|  6 | JAVA 教程   | JAVA   | 2021-01-12      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>接下来我们就使用 <code>MySQL</code> 的<code>INNER JOIN</code> (也可以省略 <code>INNER</code> 使用 <code>JOIN</code>，效果一样)来连接以上两张表来读取 <code>tbl</code> 表中所有 <code>author</code> 字段在 <code>tcount_tbl</code> 表对应的 <code>count</code> 字段值：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt;  SELECT a.id, a.author, b.count FROM tbl a INNER JOIN tcount_tbl b ON a.author = b.author;<br>+<span class="hljs-comment">----+--------+-------+</span><br>| id | author | count |<br>+<span class="hljs-comment">----+--------+-------+</span><br>|  2 | MySQL  |    20 |<br>|  3 | JAVA   |    10 |<br>|  5 | MySQL  |    20 |<br>|  6 | JAVA   |    10 |<br>+<span class="hljs-comment">----+--------+-------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>以上 SQL 语句等价于以下 <code>WHERE</code> 子句：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT a.id, a.author, b.count FROM tbl a, tcount_tbl b WHERE a.author = b.author;<br>+<span class="hljs-comment">----+--------+-------+</span><br>| id | author | count |<br>+<span class="hljs-comment">----+--------+-------+</span><br>|  2 | MySQL  |    20 |<br>|  3 | JAVA   |    10 |<br>|  5 | MySQL  |    20 |<br>|  6 | JAVA   |    10 |<br>+<span class="hljs-comment">----+--------+-------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><p>MySQL <code>LEFT JOIN</code> 与 <code>JOIN</code> 有所不同。 <code>LEFT JOIN</code> 会读取左边数据表的全部数据，即便右边表无对应数据。</p><p>尝试以下实例，以 <code>tbl</code> 为左表，<code>tcount_tbl</code> 为右表，理解 <code>LEFT JOIN</code> 的应用：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT a.id, a.author, b.count FROM tbl a LEFT JOIN tcount_tbl b ON a.author = b.author;<br>+<span class="hljs-comment">----+--------+-------+</span><br>| id | author | count |<br>+<span class="hljs-comment">----+--------+-------+</span><br>|  3 | JAVA   |    10 |<br>|  6 | JAVA   |    10 |<br>|  2 | MySQL  |    20 |<br>|  5 | MySQL  |    20 |<br>|  1 | PHP    |  NULL |<br>|  4 | Python |  NULL |<br>+<span class="hljs-comment">----+--------+-------+</span><br>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>以上实例中使用了 <code>LEFT JOIN</code>，该语句会读取左边的数据表 <code>tbl</code> 的所有选取的字段数据，即便在右侧表 <code>tcount_tbl</code> 中 没有对应的 <code>author</code> 字段值。</p><h2 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h2><p>MySQL <code>RIGHT JOIN</code> 会读取右边数据表的全部数据，即便左边边表无对应数据。</p><p>尝试以下实例，以 <code>tbl</code> 为左表，<code>tcount_tbl</code> 为右表，理解 <code>RIGHT JOIN</code> 的应用：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT a.id, a.author, b.count FROM tbl a RIGHT JOIN tcount_tbl b ON a.author = b.author;<br>+<span class="hljs-comment">------+--------+-------+</span><br>| id   | author | count |<br>+<span class="hljs-comment">------+--------+-------+</span><br>|    2 | MySQL  |    20 |<br>|    3 | JAVA   |    10 |<br>|    5 | MySQL  |    20 |<br>|    6 | JAVA   |    10 |<br>| NULL | NULL   |    30 |<br>+<span class="hljs-comment">------+--------+-------+</span><br>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>以上实例中使用了 <code>RIGHT JOIN</code>，该语句会读取右边的数据表 <code>tcount_tbl</code> 的所有选取的字段数据，即便在左侧表 <code>tbl</code> 中没有对应的 <code>author</code> 字段值。</p><h1 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h1><p>我们已经知道 MySQL 使用 <code>SELECT</code> 命令及 <code>WHERE</code> 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p><h2 id="NULL-值运算符"><a href="#NULL-值运算符" class="headerlink" title="NULL 值运算符"></a>NULL 值运算符</h2><p>为了处理这种情况，MySQL 提供了三大运算符:</p><ul><li><strong>IS NULL</strong>: 当列的值是 <code>NULL</code>，此运算符返回 <code>true</code>。</li><li><strong>IS NOT NULL</strong>: 当列的值不为 <code>NULL</code>, 运算符返回 <code>true</code>。</li><li><strong>&lt;=&gt;</strong>: 比较操作符（不同于 <code>=</code> 运算符），当比较的的两个值相等或者都为 <code>NULL</code> 时返回 <code>true</code>。</li></ul><p>关于 <code>NULL</code> 的条件比较运算是比较特殊的。你不能使用 <code>= NULL</code> 或 <code>!= NULL</code> 在列中查找 <code>NULL</code> 值 。</p><p>在 MySQL 中，<code>NULL</code> 值与任何其它值的比较（即使是 <code>NULL</code>）永远返回 <code>NULL</code>，即 <code>NULL = NULL</code> 返回 <code>NULL</code>。</p><p>MySQL 中处理 <code>NULL</code> 使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 运算符。</p><p><strong>注意：</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *, columnName1 + <span class="hljs-keyword">IFNULL</span>(columnName2, <span class="hljs-number">0</span>) <span class="hljs-keyword">FROM</span> tableName;<br></code></pre></td></tr></table></figure></p><p><code>columnName1</code>，<code>columnName2</code> 为 <code>int</code> 型，当 <code>columnName2</code> 中，有值为 <code>NULL</code> 时，<code>columnName1 + columnName2 = NULL</code>，<code>IFNULL(columnName2, 0)</code> 把 <code>columnName2</code> 中 <code>NULL</code> 值转为 <code>0</code>。</p><h2 id="在命令提示符中使用-NULL-值"><a href="#在命令提示符中使用-NULL-值" class="headerlink" title="在命令提示符中使用 NULL 值"></a>在命令提示符中使用 NULL 值</h2><p>以下实例中假设数据库 <code>TestDB</code> 中的表 <code>tbl</code> 含有两列 <code>author</code> 和 <code>count</code>, <code>count</code> 中设置插入 <code>NULL</code> 值。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl;<br>+<span class="hljs-comment">---------------+--------------+</span><br>| author | count |<br>+<span class="hljs-comment">---------------+--------------+</span><br>| TestDB        | NULL         |<br>| Google        | NULL         |<br>| FK            | 20           |<br>| Baidu         | 20           |<br>+<span class="hljs-comment">---------------+--------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><p>以下实例中你可以看到 <code>=</code> 和 <code>!=</code> 运算符是不起作用的：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl WHERE count = NULL;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">count</span> != <span class="hljs-literal">NULL</span>;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><p>查找数据表中 <code>tbl</code> 列是否为 <code>NULL</code>，必须使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code>，如下实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl WHERE count IS NULL;<br>+<span class="hljs-comment">--------+-------+</span><br>| author | count |<br>+<span class="hljs-comment">--------+-------+</span><br>| TestDB | NULL  |<br>| Google | NULL  |<br>+<span class="hljs-comment">---- ---+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">count</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br>+<span class="hljs-comment">--------+-------+</span><br>| author | count |<br>+<span class="hljs-comment">--------+-------+</span><br>| FK     | 20    |<br>| Baidu  | 20    |<br>+<span class="hljs-comment">--------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>在前面的章节我们已经了解到 MySQL 可以通过 <code>LIKE</code> 子句来进行模糊匹配。</p><p>MySQL 同样也支持其他正则表达式的匹配， MySQL 中使用 <code>REGEXP</code> 操作符来进行正则表达式匹配。</p><p>下表中的正则模式可应用于 <code>REGEXP</code> 操作符中。</p><div class="table-container"><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串的开始位置。<br>如果设置了 RegExp 对象的 Multiline 属性，<code>^</code> 也匹配 <code>\n</code> 或 <code>\r</code> 之后的位置。</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串的结束位置。<br>如果设置了 RegExp 对象的 Multiline 属性，<code>$</code> 也匹配 <code>\n</code> 或 <code>\r</code> 之前的位置。</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除 <code>\n</code> 之外的任何单个字符。<br>要匹配包括 <code>\n</code> 在内的任何字符，请使用像 <code>[.\n]</code> 的模式。</td></tr><tr><td style="text-align:center">[...]</td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。<br>例如，<code>[abc]</code> 可以匹配 <code>plain</code> 中的 <code>a</code>。</td></tr><tr><td style="text-align:center"><html>[^...]</html></td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。<br>例如，<code>[\^abc]</code> 可以匹配 <code>plain</code> 中的<code>p</code>。</td></tr><tr><td style="text-align:center">p1&vert;p2&vert;p3</td><td style="text-align:center">匹配 p1 或 p2 或 p3。<br>例如，<code>z</code>&vert;<code>food</code> 能匹配 <code>z</code> 或 <code>food</code>。<code>(z</code>&vert;<code>f)ood</code> 则匹配 <code>zood</code> 或 <code>food</code>。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的子表达式零次或多次。<br>例如，<code>zo*</code> 能匹配 <code>z</code> 以及 <code>zoo</code>。<code>*</code> 等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的子表达式一次或多次。<br>例如，<code>zo+</code> 能匹配 <code>zo</code> 以及 <code>zoo</code>，但不能匹配 <code>z</code>。<code>+</code> 等价于 <code>&#123;1,&#125;</code>。</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center"><code>n</code> 是一个非负整数。匹配确定的 <code>n</code> 次。<br>例如，<code>o&#123;2&#125;</code> 不能匹配 <code>Bob</code> 中的 <code>o</code>，但是能匹配 <code>food</code> 中的两个 <code>o</code>。</td></tr><tr><td style="text-align:center">{n, m}</td><td style="text-align:center"><code>m</code> 和 <code>n</code> 均为非负整数，其中 <code>n &lt;= m</code>。<br>最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次。</td></tr></tbody></table></div><p>了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的 SQL 语句。以下我们将列出几个小实例（表名：<code>person_tbl</code>）来加深我们的理解：</p><p>查找 <code>name</code> 字段中以 <code>st</code> 为开头的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^st&#x27;;<br></code></pre></td></tr></table></figure></p><p>查找 <code>name</code> 字段中以 <code>ok</code> 为结尾的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;ok$&#x27;;<br></code></pre></td></tr></table></figure></p><p>查找 <code>name</code> 字段中包含 <code>mar</code> 字符串的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;mar&#x27;;<br></code></pre></td></tr></table></figure></p><p>查找 <code>name</code> 字段中以元音字符开头或以 <code>ok</code> 字符串结尾的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^[aeiou]|ok$&#x27;;<br></code></pre></td></tr></table></figure></p><h1 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h1><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到 <code>ALTER</code> 命令。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| i     | int(11) | YES  |     | NULL    |       |<br>| c     | char(1) | YES  |     | NULL    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="删除，添加或修改表字段"><a href="#删除，添加或修改表字段" class="headerlink" title="删除，添加或修改表字段"></a>删除，添加或修改表字段</h2><p>如下命令使用了 <code>ALTER</code> 命令及 <code>DROP</code> 子句来删除以上创建表的 <code>i</code> 字段：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl  DROP i;<br></code></pre></td></tr></table></figure></p><p>如果数据表中只剩余一个字段则无法使用 <code>DROP</code> 来删除字段。</p><p>MySQL 中使用 <code>ADD</code> 子句来向数据表中添加列，如下实例在表 <code>testalter_tbl</code> 中添加 <code>i</code> 字段，并定义数据类型:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;<br></code></pre></td></tr></table></figure></p><p>执行以上命令后，<code>i</code> 字段会自动添加到数据表字段的末尾。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| c     | char(1) | YES  |     | NULL    |       |<br>| i     | int(11) | YES  |     | NULL    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>如果你需要指定新增字段的位置，可以使用 MySQL 提供的关键字 <code>FIRST</code> (设定位第一列)， <code>AFTER</code> 字段名（设定位于某个字段之后）。</p><p>尝试以下 <code>ALTER TABLE</code> 语句, 在执行成功后，使用 <code>SHOW COLUMNS</code> 查看表结构的变化：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">DROP</span> i;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ADD</span> i <span class="hljs-built_in">INT</span> <span class="hljs-keyword">FIRST</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">DROP</span> i;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ADD</span> i <span class="hljs-built_in">INT</span> <span class="hljs-keyword">AFTER</span> c;<br></code></pre></td></tr></table></figure></p><p><code>FIRST</code> 和 <code>AFTER</code> 关键字可用于 <code>ADD</code> 与 <code>MODIFY</code> 子句，所以如果你想重置数据表字段的位置就需要先使用 <code>DROP</code> 删除字段然后使用 <code>ADD</code> 来添加字段并设置位置。</p><h2 id="修改字段类型及名称"><a href="#修改字段类型及名称" class="headerlink" title="修改字段类型及名称"></a>修改字段类型及名称</h2><p>如果需要修改字段类型及名称, 你可以在 <code>ALTER</code> 命令中使用 <code>MODIFY</code> 或 <code>CHANGE</code> 子句 。</p><p>例如，把字段 <code>c</code> 的类型从 <code>CHAR(1)</code> 改为 <code>CHAR(10)</code>，可以执行以下命令:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10);<br></code></pre></td></tr></table></figure></p><p>使用 <code>CHANGE</code> 子句, 语法有很大的不同。 在 <code>CHANGE</code> 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;<br>mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT;<br></code></pre></td></tr></table></figure></p><h2 id="ALTER-TABLE-对-NULL-值和默认值的影响"><a href="#ALTER-TABLE-对-NULL-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 NULL 值和默认值的影响"></a>ALTER TABLE 对 NULL 值和默认值的影响</h2><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p><p>以下实例，指定字段 <code>j</code> 为 <code>NOT NULL</code> 且默认值为 <code>100</code> 。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl <br>    -&gt; MODIFY j BIGINT NOT NULL DEFAULT 100;<br></code></pre></td></tr></table></figure></p><p>如果你不设置默认值，MySQL会自动设置该字段默认为 <code>NULL</code>。</p><h2 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h2><p>你可以使用 <code>ALTER</code> 来修改字段的默认值，尝试以下实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;<br>mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| c     | char(1) | YES  |     | NULL    |       |<br>| i     | int(11) | YES  |     | 1000    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>你也可以使用 <code>ALTER</code> 命令及 <code>DROP</code> 子句来删除字段的默认值，如下实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;<br>mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| c     | char(1) | YES  |     | NULL    |       |<br>| i     | int(11) | YES  |     | NULL    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>Changing a <span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>:<br></code></pre></td></tr></table></figure></p><p>修改数据表类型，可以使用 <code>ALTER</code> 命令及 <code>TYPE</code> 子句来完成。尝试以下实例，我们将表 <code>testalter_tbl</code> 的类型修改为 <code>MYISAM</code> ：</p><p>注意：查看数据表类型可以使用 <code>SHOW TABLE STATUS</code> 语句，并使用 <code>\G</code> 格式化输出。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ENGINE = MYISAM;<br>mysql&gt; SHOW TABLE STATUS LIKE &#x27;testalter_tbl&#x27; \G<br>*************************** 1. row ****************<br>           Name: testalter_tbl<br>           Type: MyISAM<br>     Row_format: Fixed<br>           Rows: 0<br> Avg_row_length: 0<br>    Data_length: 0<br>Max_data_length: 25769803775<br>   Index_length: 1024<br>      Data_free: 0<br> Auto_increment: NULL<br>    Create_time: 2007-06-03 08:04:36<br>    Update_time: 2007-06-03 08:04:36<br>     Check_time: NULL<br> Create_options:<br>        <span class="hljs-keyword">Comment</span>:<br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>如果需要修改数据表的名称，可以在 <code>ALTER TABLE</code> 语句中使用 <code>RENAME</code> 子句来实现。</p><p>尝试以下实例将数据表 <code>testalter_tbl</code> 重命名为 <code>alter_tbl</code>：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;<br></code></pre></td></tr></table></figure></p><p><code>ALTER</code> 命令还可以用来创建及删除 MySQL 数据表的索引，该功能我们会在接下来的章节中介绍。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务。</p><ul><li>在 MySQL 中只有使用了 <code>Innodb</code> 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 <code>INSERT</code>，<code>UPDATE</code>, <code>DELETE</code> 语句。</li></ul><p>一般来说，事务是必须满足 4 个条件（<code>ACID</code>）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。</p><ul><li>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 <code>COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令 <code>BEGIN</code> 或 <code>START TRANSACTION</code>，或者执行命令 <code>SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。</p><p>事务控制语句：</p><ul><li><code>BEGIN</code> 或 <code>START TRANSACTION</code> 显式地开启一个事务；</li><li><code>COMMIT</code> 也可以使用 <code>COMMIT WORK</code>，不过二者是等价的。<code>COMMIT</code> 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li><li><code>ROLLBACK</code> 也可以使用 <code>ROLLBACK WORK</code>，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li><li><code>SAVEPOINT identifier</code>，<code>SAVEPOINT</code> 允许在事务中创建一个保存点，一个事务中可以有多个 <code>SAVEPOINT</code>；</li><li><code>RELEASE SAVEPOINT identifier</code> 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li><li><code>ROLLBACK TO identifier</code> 把事务回滚到标记点；</li><li><code>SET TRANSACTION</code> 用来设置事务的隔离级别。<code>InnoDB</code> 存储引擎提供事务的隔离级别有<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code> 和 <code>SERIALIZABLE</code>。</li></ul><p>MYSQL 事务处理主要有两种方法：</p><ol><li><p>用 <code>BEGIN</code>，<code>ROLLBACK</code>，<code>COMMIT</code> 来实现</p><ul><li><code>BEGIN</code>：开始一个事务</li><li><code>ROLLBACK</code>：事务回滚</li><li><code>COMMIT</code>：事务确认</li></ul></li><li><p>直接用 <code>SET</code> 来改变 MySQL 的自动提交模式:</p><ul><li><code>SET AUTOCOMMIT=0</code>：禁止自动提交</li><li><code>SET AUTOCOMMIT=1</code>：开启自动提交</li></ul></li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE transaction_test( id int(5)) engine=innodb;  # 创建数据表<br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; SELECT * FROM transaction_test;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">BEGIN</span>;  <span class="hljs-comment"># 开始事务</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO transaction_test VALUE(5);<br>Query OK, 1 rows affected (0.01 sec)<br><br>mysql&gt; INSERT INTO transaction_test VALUE(6);<br>Query OK, 1 rows affected (0.00 sec)<br><br>mysql&gt; COMMIT;  # 提交事务<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT * FROM transaction_test;<br>+<span class="hljs-comment">------+</span><br>| id   |<br>+<span class="hljs-comment">------+</span><br>| 5    |<br>| 6    |<br>+<span class="hljs-comment">------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">BEGIN</span>;  <span class="hljs-comment"># 开始事务</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO transaction_test VALUE(7);<br>Query OK, 1 rows affected (0.00 sec)<br><br>mysql&gt; rollback;  # 回滚<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; SELECT * FROM transaction_test;  # 因为回滚所以数据没有插入<br>+<span class="hljs-comment">------+</span><br>| id   |<br>+<span class="hljs-comment">------+</span><br>| 5    |<br>| 6    |<br>+<span class="hljs-comment">------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高 MySQL 的检索速度。</p><p>打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。</p><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 <code>WHERE</code> 子句的条件)。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code>。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。</p><p>建立索引会占用磁盘空间的索引文件。</p><h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> indexName <span class="hljs-keyword">ON</span> table_name (column_name);<br></code></pre></td></tr></table></figure></p><p>如果是 <code>CHAR</code>，<code>VARCHAR</code> 类型，<code>length</code> 可以小于字段实际长度；如果是 <code>BLOB</code> 和 <code>TEXT</code> 类型，必须指定 <code>length</code>。</p><h3 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">table</span> tableName <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> indexName(columnName);<br></code></pre></td></tr></table></figure></p><h3 id="创建表的时候直接指定"><a href="#创建表的时候直接指定" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable(  <br><span class="hljs-keyword">ID</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-keyword">INDEX</span> [indexName] (username(<span class="hljs-keyword">length</span>))<br>);<br></code></pre></td></tr></table></figure></p><h3 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> [indexName] <span class="hljs-keyword">ON</span> mytable;<br></code></pre></td></tr></table></figure></p><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> indexName <span class="hljs-keyword">ON</span> mytable(username(<span class="hljs-keyword">length</span>));<br></code></pre></td></tr></table></figure></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">table</span> mytable <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> [indexName] (username(<span class="hljs-keyword">length</span>));<br></code></pre></td></tr></table></figure></p><h3 id="创建表的时候直接指定-1"><a href="#创建表的时候直接指定-1" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable(<br><span class="hljs-keyword">ID</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> [indexName] (username(<span class="hljs-keyword">length</span>))<br>);<br></code></pre></td></tr></table></figure></p><h2 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h2><p>有四种方式来添加数据表的索引：</p><ul><li><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list)</code>：该语句添加一个主键，这意味着索引值必须是唯一的，且不能为 <code>NULL</code>。</li><li><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list)</code>：这条语句创建索引的值必须是唯一的（除了 <code>NULL</code> 外，<code>NULL</code> 可能会出现多次）。</li><li><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list)</code>：添加普通索引，索引值可出现多次。</li><li><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list)</code>：该语句指定了索引为 <code>FULLTEXT</code>，用于全文索引。</li></ul><p>以下实例为在表中添加索引。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c);<br></code></pre></td></tr></table></figure></p><p>你还可以在 <code>ALTER</code> 命令中使用 <code>DROP</code> 子句来删除索引。尝试以下实例删除索引:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c;<br></code></pre></td></tr></table></figure></p><h2 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h2><p>主键作用于列上（可以一个列或多个列联合主键），添加主键索引时，你需要确保该主键默认不为空（<code>NOT NULL</code>）。实例如下：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;<br>mysql&gt; ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);<br></code></pre></td></tr></table></figure></p><p>你也可以使用 <code>ALTER</code> 命令删除主键：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure></p><p>删除主键时只需指定 <code>PRIMARY KEY</code>，但在删除索引时，你必须知道索引名。</p><h2 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h2><p>你可以使用 <code>SHOW INDEX</code> 命令来列出表中的相关的索引信息。可以通过添加 <code>\G</code> 来格式化输出信息。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW INDEX FROM table_name; \G<br></code></pre></td></tr></table></figure></p><h1 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h1><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，MySQL 会自动删除表并释放所有空间。</p><p>临时表在 MySQL 3.23 版本中添加，如果你的 MySQL 版本低于 3.23 版本就无法使用 MySQL 的临时表。不过现在一般很少有再使用这么低版本的 MySQL 数据库服务了。</p><p>MySQL 临时表只在当前连接可见，如果你使用 PHP 脚本来创建 MySQL 临时表，那每当 PHP 脚本执行完成后，该临时表也会自动销毁。</p><p>如果你使用了其他 MySQL 客户端程序连接 MySQL 数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p><h2 id="创建-MySQL-临时表"><a href="#创建-MySQL-临时表" class="headerlink" title="创建 MySQL 临时表"></a>创建 MySQL 临时表</h2><p>以下展示了使用 <code>TEMPORARY</code> 关键字创建 MySQL 临时表的简单实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (<br>    -&gt; product_name VARCHAR(50) NOT NULL,<br>    -&gt; total_sales DECIMAL(12, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; avg_unit_price DECIMAL(7, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; total_units_sold INT UNSIGNED NOT NULL DEFAULT 0<br>);<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO SalesSummary<br>    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)<br>    -&gt; VALUES<br>    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);<br><br>mysql&gt; SELECT * FROM SalesSummary;<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| product_name | total_sales | avg_unit_price | total_units_sold |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| cucumber     |      100.25 |          90.00 |                2 |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>用查询直接创建临时表：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TEMPORARY</span> <span class="hljs-keyword">TABLE</span> 临时表名 <span class="hljs-keyword">AS</span><br>(<br>    <span class="hljs-keyword">SELECT</span> *  <span class="hljs-keyword">FROM</span> 旧的表名<br>);<br></code></pre></td></tr></table></figure></p><p>当你使用 <code>SHOW TABLES</code> 命令显示数据表列表时，你将无法看到 <code>SalesSummary</code> 表。</p><p>如果你退出当前 MySQL 会话，再使用 <code>SELECT</code> 命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p><h2 id="删除-MySQL-临时表"><a href="#删除-MySQL-临时表" class="headerlink" title="删除 MySQL 临时表"></a>删除 MySQL 临时表</h2><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前 MySQL 会话使用 <code>DROP TABLE</code> 命令来手动删除临时表。</p><p>以下是手动删除临时表的实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (<br>    -&gt; product_name VARCHAR(50) NOT NULL,<br>    -&gt; total_sales DECIMAL(12, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; avg_unit_price DECIMAL(7, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; total_units_sold INT UNSIGNED NOT NULL DEFAULT 0,<br>);<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO SalesSummary<br>    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)<br>    -&gt; VALUES<br>    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);<br><br>mysql&gt; SELECT * FROM SalesSummary;<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| product_name | total_sales | avg_unit_price | total_units_sold |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| cucumber     |      100.25 |          90.00 |                2 |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> SalesSummary;<br>mysql&gt;  SELECT * FROM SalesSummary;<br>ERROR 1146: Table &#x27;TestDB.SalesSummary&#x27; doesn&#x27;t exist<br></code></pre></td></tr></table></figure></p><h1 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h1><p>如果我们需要完全的复制 MySQL 的数据表，包括表的结构，索引，默认值等。如果仅仅使用<code>CREATE TABLE ... SELECT</code> 命令，是无法实现的。</p><p>完整的复制 MySQL 数据表的步骤如下：</p><ol><li>使用 <code>SHOW CREATE TABLE</code> 命令获取创建数据表（<code>CREATE TABLE</code>）语句，该语句包含了原数据表的结构，索引等。</li><li>复制以下命令显示的SQL语句，修改数据表名，并执行 SQL 语句，通过以上命令将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 <code>INSERT INTO ... SELECT</code> 语句来实现。</li></ol><p>尝试以下实例来复制表 <code>tbl</code>。</p><ol><li><p>获取数据表的完整结构。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW CREATE TABLE tbl \G;<br>*************************** 1. row ***************************<br>      Table: tbl<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">Table</span>: <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`tbl`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> auto_increment,<br>  <span class="hljs-string">`title`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">`author`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">`submission_date`</span> <span class="hljs-built_in">date</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span>  (<span class="hljs-string">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`AUTHOR_INDEX`</span> (<span class="hljs-string">`author`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-keyword">ERROR</span>:<br><span class="hljs-keyword">No</span> <span class="hljs-keyword">query</span> specified<br></code></pre></td></tr></table></figure></p></li><li><p>修改SQL语句的数据表名，并执行SQL语句。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE `clone_tbl` (<br>  -&gt; `id` int(11) NOT NULL auto_increment,<br>  -&gt; `title` varchar(100) NOT NULL default &#x27;&#x27;,<br>  -&gt; `author` varchar(40) NOT NULL default &#x27;&#x27;,<br>  -&gt; `submission_date` date default NULL,<br>  -&gt; PRIMARY KEY  (`id`),<br>  -&gt; UNIQUE KEY `AUTHOR_INDEX` (`author`)<br>  -&gt; ) ENGINE=InnoDB;<br>Query OK, 0 rows affected (1.80 sec)<br></code></pre></td></tr></table></figure></p></li><li><p>执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。 如果你想拷贝数据表的数据你可以使用 INSERT INTO... SELECT 语句来实现。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT INTO clone_tbl (id,<br>    -&gt;                        title,<br>    -&gt;                        author,<br>    -&gt;                        submission_date)<br>    -&gt; SELECT id,title, author, submission_date<br>    -&gt; FROM tbl;<br>Query OK, 3 rows affected (0.07 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure></p><p>执行以上步骤后，你将完整的复制表，包括表结构及表数据。</p></li></ol><p><strong>另一种完整复制表的方法:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> targetTable <span class="hljs-keyword">LIKE</span> sourceTable;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> targetTable <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> sourceTable;<br></code></pre></td></tr></table></figure></p><p><strong>可以拷贝一个表中其中的一些字段:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>);<br></code></pre></td></tr></table></figure></p><p><strong>可以将新建的表的字段改名:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, username <span class="hljs-keyword">AS</span> uname, <span class="hljs-keyword">password</span> <span class="hljs-keyword">AS</span> pass <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>);<br></code></pre></td></tr></table></figure></p><p><strong>可以拷贝一部分数据:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">LEFT</span>(username, <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;s&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p><strong>可以在创建表的同时定义表中的字段信息:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin (<span class="hljs-keyword">id</span> <span class="hljs-built_in">INTEGER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>) <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>);<br></code></pre></td></tr></table></figure></p><h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><ul><li>查询结果信息：<code>SELECT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句影响的记录数。</li><li>数据库和数据表的信息：包含了数据库及数据表的结构信息。</li><li>MySQL 服务器信息：包含了数据库服务器的当前状态，版本号等。</li></ul><p>在 MySQL 的命令提示符中，我们可以很容易的获取以上服务器信息。</p><h2 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h2><p>以下命令语句可以在 MySQL 的命令提示符使用，也可以在脚本中使用。</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">SELECT VERSION( )</td><td style="text-align:center">服务器版本信息</td></tr><tr><td style="text-align:center">SELECT DATABASE( )</td><td style="text-align:center">当前数据库名（或者返回空）</td></tr><tr><td style="text-align:center">SELECT USER( )</td><td style="text-align:center">当前用户名</td></tr><tr><td style="text-align:center">SHOW STATUS</td><td style="text-align:center">服务器状态</td></tr><tr><td style="text-align:center">SHOW VARIABLES</td><td style="text-align:center">服务器配置变量</td></tr></tbody></table></div><h1 id="序列使用"><a href="#序列使用" class="headerlink" title="序列使用"></a>序列使用</h1><p>MySQL 序列是一组整数：<code>1, 2, 3, ...</code>，由于一张数据表只能有一个字段自增主键，如果你想实现其他字段也实现自动增加，就可以使用 MySQL 序列来实现。</p><h2 id="使用-AUTO-INCREMENT"><a href="#使用-AUTO-INCREMENT" class="headerlink" title="使用 AUTO_INCREMENT"></a>使用 AUTO_INCREMENT</h2><p>MySQL 中最简单使用序列的方法就是使用 <code>AUTO_INCREMENT</code> 来定义列。</p><p>以下实例中创建了数据表 <code>insect</code>，<code>insect</code> 表中 <code>id</code> 无需指定值可实现自动增长。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE insect<br>    -&gt; (<br>    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,<br>    -&gt; PRIMARY KEY (id),<br>    -&gt; name VARCHAR(30) NOT NULL, # type of insect<br>    -&gt; date DATE NOT NULL, # date collected<br>    -&gt; origin VARCHAR(30) NOT NULL # where collected<br>);<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; INSERT INTO insect (id, name, date, origin) VALUES<br>    -&gt; (NULL, &#x27;housefly&#x27;, &#x27;2001-09-10&#x27;, &#x27;kitchen&#x27;),<br>    -&gt; (NULL, &#x27;millipede&#x27;, &#x27;2001-09-10&#x27;, &#x27;driveway&#x27;),<br>    -&gt; (NULL, &#x27;grasshopper&#x27;, &#x27;2001-09-10&#x27;, &#x27;front yard&#x27;);<br>Query OK, 3 rows affected (0.02 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br><br>mysql&gt; SELECT * FROM insect ORDER BY id;<br>+<span class="hljs-comment">----+-------------+------------+------------+</span><br>| id | name        | date       | origin     |<br>+<span class="hljs-comment">----+-------------+------------+------------+</span><br>|  1 | housefly    | 2001-09-10 | kitchen    |<br>|  2 | millipede   | 2001-09-10 | driveway   |<br>|  3 | grasshopper | 2001-09-10 | front yard |<br>+<span class="hljs-comment">----+-------------+------------+------------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h2><p>在 MySQL 的客户端中你可以使用 SQL 中的 <code>LAST_INSERT_ID( )</code> 函数来获取最后的插入表中的自增列的值。</p><h2 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h2><p>如果你删除了数据表中的多条记录，并希望对剩下数据的 <code>AUTO_INCREMENT</code> 列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。操作如下所示：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE insect DROP id;<br>mysql&gt; ALTER TABLE insect<br>    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,<br>    -&gt; ADD PRIMARY KEY (id);<br></code></pre></td></tr></table></figure></p><h2 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h2><p>一般情况下序列的开始值为 1，但如果你需要指定一个开始值 100，那我们可以通过以下语句来实现：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE insect<br>    -&gt; (<br>    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,<br>    -&gt; PRIMARY KEY (id),<br>    -&gt; name VARCHAR(30) NOT NULL,<br>    -&gt; date DATE NOT NULL,<br>    -&gt; origin VARCHAR(30) NOT NULL<br>)engine=innodb auto_increment=100 charset=utf8;<br></code></pre></td></tr></table></figure></p><p>或者你也可以在表创建成功后，通过以下语句来实现：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;<br></code></pre></td></tr></table></figure></p><h1 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h1><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p><p>本章节我们将为大家介绍如何防止数据表出现重复数据及如何删除数据表中的重复数据。</p><h2 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h2><p>你可以在 MySQL 数据表中设置指定的字段为 <code>PRIMARY KEY</code>（主键） 或者 <code>UNIQUE</code>（唯一） 索引来保证数据的唯一性。</p><p>让我们尝试一个实例：下表中无索引及主键，所以该表允许出现多条重复记录。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person_tbl<br>(<br>    first_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>),<br>    last_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>),<br>    sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">10</span>)<br>);<br></code></pre></td></tr></table></figure></p><p>如果你想设置表中字段 <code>first_name</code>，<code>last_name</code> 数据不能重复，你可以设置双主键模式来设置数据的唯一性，如果你设置了双主键，那么那个键的默认值不能为 <code>NULL</code>，可设置为 <code>NOT NULL</code>。如下所示：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person_tbl<br>(<br>   first_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   last_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">10</span>),<br>   PRIMARY <span class="hljs-keyword">KEY</span> (last_name, first_name)<br>);<br></code></pre></td></tr></table></figure></p><p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功，并抛出错误。</p><p><code>INSERT IGNORE INTO</code> 与 <code>INSERT INTO</code> 的区别就是 <code>INSERT IGNORE INTO</code> 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p><p>以下实例使用了 <code>INSERT IGNORE INTO</code>，执行后不会出错，也不会向数据表中插入重复数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT IGNORE INTO person_tbl (last_name, first_name)<br>    -&gt; VALUES( &#x27;Jay&#x27;, &#x27;Thomas&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br>mysql&gt; INSERT IGNORE INTO person_tbl (last_name, first_name)<br>    -&gt; VALUES( &#x27;Jay&#x27;, &#x27;Thomas&#x27;);<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure></p><p><code>INSERT IGNORE INTO</code> 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。而 <code>REPLACE INTO</code> 如果存在 <code>PRIMARY</code> 或 <code>UNIQUE</code> 相同的记录，则先删除掉。再插入新记录。</p><p>另一种设置数据的唯一性方法是添加一个 <code>UNIQUE</code> 索引，如下所示：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person_tbl<br>(<br>   first_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   last_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">10</span>),<br>   <span class="hljs-keyword">UNIQUE</span> (last_name, first_name)<br>);<br></code></pre></td></tr></table></figure></p><h2 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h2><p>以下我们将统计表中 <code>first_name</code> 和 <code>last_name</code> 的重复记录数：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name<br>    -&gt; FROM person_tbl<br>    -&gt; GROUP BY last_name, first_name<br>    -&gt; HAVING repetitions &gt; 1;<br></code></pre></td></tr></table></figure></p><p>以上查询语句将返回 <code>person_tbl</code> 表中重复的记录数。一般情况下，查询重复的值，请执行以下操作：</p><ul><li>确定哪一列包含的值可能会重复。</li><li>在列选择列表使用 <code>COUNT(*)</code> 列出的那些列。</li><li>在 <code>GROUP BY</code> 子句中列出的列。</li><li><code>HAVING</code> 子句设置重复数大于1。</li></ul><h2 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h2><p>如果你需要读取不重复的数据可以在 <code>SELECT</code> 语句中使用 <code>DISTINCT</code> 关键字来过滤重复数据。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT DISTINCT last_name, first_name<br>    -&gt; FROM person_tbl;<br></code></pre></td></tr></table></figure></p><p>你也可以使用 <code>GROUP BY</code> 来读取数据表中不重复的数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT last_name, first_name<br>    -&gt; FROM person_tbl<br>    -&gt; GROUP BY (last_name, first_name);<br></code></pre></td></tr></table></figure></p><h2 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h2><p>如果你想删除数据表中的重复数据，你可以使用以下的 SQL 语句：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE tmp<br>    -&gt; SELECT last_name, first_name, sex<br>    -&gt; FROM person_tbl<br>    -&gt; GROUP BY (last_name, first_name, sex);<br>mysql&gt; DROP TABLE person_tbl;<br>mysql&gt; ALTER TABLE tmp RENAME TO person_tbl;<br></code></pre></td></tr></table></figure></p><p>当然你也可以在数据表中添加 <code>INDEX</code>（索引） 和 <code>PRIMARY KEY</code>（主键）这种简单的方法来删除表中的重复记录。方法如下：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER IGNORE TABLE person_tbl<br>    -&gt; ADD PRIMARY KEY (last_name, first_name);<br></code></pre></td></tr></table></figure></p><h1 id="及-SQL-注入"><a href="#及-SQL-注入" class="headerlink" title="及 SQL 注入"></a>及 SQL 注入</h1><p>如果您通过网页获取用户输入的数据并将其插入一个 MySQL 数据库，那么就有可能发生 SQL 注入安全的问题。</p><p>本章节将为大家介绍如何防止 SQL 注入，并通过脚本来过滤 SQL 中注入的字符。</p><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p><p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p><p>以下实例中，输入的用户名必须为字母、数字及下划线的组合，且用户名长度为 8 到 20 个字符之间：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/^\w&#123;8, 20&#125;$/&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$matches</span>))<br>&#123;<br>   <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM users </span><br><span class="hljs-string">                          WHERE username=<span class="hljs-variable">$matches</span>[0]&quot;</span>);<br>&#125;<br> <span class="hljs-keyword">else</span> <br>&#123;<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;username 输入异常&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>让我们看下在没有过滤特殊字符时，出现的 SQL 情况：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 设定 $name 中插入了我们不需要的SQL语句</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;Qadir&#x27;; DELETE FROM users;&quot;</span>;<br>mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM users WHERE name=&#x27;<span class="hljs-subst">&#123;$name&#125;</span>&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure></p><p>以上的注入语句中，我们没有对 <code>$name</code> 的变量进行过滤，<code>$name</code> 中插入了我们不需要的 SQL 语句，将删除 <code>users</code> 表中的所有数据。</p><p>在 PHP 中的 <code>mysqli_query()</code> 是不允许执行多个 SQL 语句的，但是在 <code>SQLite</code> 和 <code>PostgreSQL</code> 是可以同时执行多条 SQL 语句的，所以我们对这些用户的数据需要进行严格的验证。</p><p><strong>防止SQL注入，我们需要注意以下几个要点：</strong></p><ol><li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双&quot;-&quot;进行转换等。</li><li>永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>SQL 注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用 SQL 注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN 等。采用 MDCSOFT-IPS 可以有效的防御 SQL 注入，XSS 攻击等。</li></ol><h2 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h2><p>在脚本语言，如 Perl 和 PHP 你可以对用户输入的数据进行转义从而来防止 SQL 注入。</p><p>PHP 的 MySQL 扩展提供了 <code>mysqli_real_escape_string()</code> 函数来转义特殊的输入字符。</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (get_magic_quotes_gpc()) <br>&#123;<br>  <span class="hljs-variable">$name</span> = stripslashes(<span class="hljs-variable">$name</span>);<br>&#125;<br><span class="hljs-variable">$name</span> = mysqli_real_escape_string(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$name</span>);<br> mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM users WHERE name=&#x27;<span class="hljs-subst">&#123;$name&#125;</span>&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure></p><h2 id="LIKE-语句中的注入"><a href="#LIKE-语句中的注入" class="headerlink" title="LIKE 语句中的注入"></a>LIKE 语句中的注入</h2><p><code>LIKE</code> 查询时，如果用户输入的值有 <code>_</code> 和 <code>%</code>，则会出现这种情况：用户本来只是想查询 <code>abcd_</code>，查询结果中却有 <code>abcd_</code>、<code>abcde</code>、<code>abcdf</code> 等等；用户要查询 <code>30%</code>（注：百分之三十）时也会出现问题。</p><p>在PHP脚本中我们可以使用 <code>addcslashes()</code> 函数来处理以上情况，如下实例：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sub</span> = addcslashes(mysqli_real_escape_string(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;%something_&quot;</span>), <span class="hljs-string">&quot;%_&quot;</span>);<br><span class="hljs-comment">// $sub == \%something\_</span><br> mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM messages WHERE subject LIKE &#x27;<span class="hljs-subst">&#123;$sub&#125;</span>%&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure></p><p><code>addcslashes()</code> 函数在指定的字符前添加反斜杠。</p><p>语法格式:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">addcslashes(<span class="hljs-keyword">string</span>, characters)<br></code></pre></td></tr></table></figure></p><h1 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h1><p>MySQL 中你可以使用 <code>SELECT...INTO OUTFILE</code> 语句来简单的导出数据到文本文件上。</p><h2 id="使用-SELECT-INTO-OUTFILE-语句导出数据"><a href="#使用-SELECT-INTO-OUTFILE-语句导出数据" class="headerlink" title="使用 SELECT ... INTO OUTFILE 语句导出数据"></a>使用 SELECT ... INTO OUTFILE 语句导出数据</h2><p>以下实例中我们将数据表 <code>tbl</code> 数据导出到 <code>/tmp/TestDB.txt</code> 文件中:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl <br>    -&gt; INTO OUTFILE &#x27;/tmp/TestDB.txt&#x27;;<br></code></pre></td></tr></table></figure></p><p>你可以通过命令选项来设置数据输出的指定格式，以下实例为导出 <code>CSV</code> 格式：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM passwd INTO OUTFILE &#x27;/tmp/TestDB.txt&#x27;<br>    -&gt; FIELDS TERMINATED BY &#x27;,&#x27; ENCLOSED BY &#x27;&quot;&#x27;<br>    -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;<br></code></pre></td></tr></table></figure></p><p>在下面的例子中，生成一个文件，各值用逗号隔开。这种格式可以被许多程序使用。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a, b, a+b <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">OUTFILE</span> <span class="hljs-string">&#x27;/tmp/result.text&#x27;</span><br><span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-keyword">OPTIONALLY</span> <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span><br><span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\n&#x27;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span>;<br></code></pre></td></tr></table></figure></p><p><strong><code>SELECT ... INTO OUTFILE</code> 语句有以下属性:</strong></p><ul><li><code>LOAD DATA INFILE</code> 是 <code>SELECT ... INTO OUTFILE</code> 的逆操作，<code>SELECT</code> 句法。为了将一个数据库的数据写入一个文件，使用 <code>SELECT ... INTO OUTFILE</code>；为了将文件读回数据库，使用 <code>LOAD DATA INFILE</code>。</li><li><code>SELECT...INTO OUTFILE &#39;file_name&#39;</code> 形式的 <code>SELECT</code> 可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有 <code>FILE</code> 权限，才能使用此语法。</li><li>输出不能是一个已存在的文件。防止文件数据被篡改。</li><li>你需要有一个登陆服务器的账号来检索文件。否则 <code>SELECT ... INTO OUTFILE</code> 不会起任何作用。</li><li>在 <code>UNIX</code> 中，该文件被创建后是可读的，权限由 MySQL 服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除。</li></ul><h2 id="导出表作为原始数据"><a href="#导出表作为原始数据" class="headerlink" title="导出表作为原始数据"></a>导出表作为原始数据</h2><p><code>mysqldump</code> 是 MySQL 用于转存储数据库的实用程序。它主要产生一个 SQL 脚本，其中包含从头重新创建数据库所必需的命令 <code>CREATE TABLE INSERT</code> 等。</p><p>使用 <code>mysqldump</code> 导出数据需要使用 <code>--tab</code> 选项来指定导出文件指定的目录，该目标必须是可写的。</p><p>以下实例将数据表 <code>tbl</code> 导出到 <code>/tmp</code> 目录中：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p --no-create-info --tab=/tmp TestDB tbl<br>password ******<br></code></pre></td></tr></table></figure></p><h2 id="导出-SQL-格式的数据"><a href="#导出-SQL-格式的数据" class="headerlink" title="导出 SQL 格式的数据"></a>导出 SQL 格式的数据</h2><p>导出 SQL 格式的数据到指定文件，如下所示：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p TestDB tbl &gt; dump.txt<br>password ******<br></code></pre></td></tr></table></figure></p><p>以上命令创建的文件内容如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL dump 8.23</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Host: localhost    Database: TestDB</span><br><span class="hljs-comment">---------------------------------------------------------</span><br><span class="hljs-comment">-- Server version       3.23.58</span><br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Table structure for table `tbl`</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tbl (<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> auto_increment,<br>  title <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  author <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  submission_date <span class="hljs-built_in">date</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span>  (<span class="hljs-keyword">id</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> AUTHOR_INDEX (author)<br>) <span class="hljs-keyword">TYPE</span>=MyISAM;<br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Dumping data for table `tbl`</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <br>       <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Learn PHP&#x27;</span>,<span class="hljs-string">&#x27;John Poul&#x27;</span>,<span class="hljs-string">&#x27;2007-05-24&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <br>       <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Learn MySQL&#x27;</span>,<span class="hljs-string">&#x27;Abdul S&#x27;</span>,<span class="hljs-string">&#x27;2007-05-24&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <br>       <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;JAVA Tutorial&#x27;</span>,<span class="hljs-string">&#x27;Sanjay&#x27;</span>,<span class="hljs-string">&#x27;2007-05-06&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p>如果你需要导出整个数据库的数据，可以使用以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p TestDB &gt; database_dump.txt<br>password ******<br></code></pre></td></tr></table></figure></p><p>如果需要备份所有数据库，可以使用以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p --all-databases &gt; database_dump.txt<br>password ******<br></code></pre></td></tr></table></figure></p><p><code>--all-databases</code> 选项在 MySQL 3.23.12 及以后版本加入。</p><p>该方法可用于实现数据库的备份策略。</p><h2 id="将数据表及数据库拷贝至其他主机"><a href="#将数据表及数据库拷贝至其他主机" class="headerlink" title="将数据表及数据库拷贝至其他主机"></a>将数据表及数据库拷贝至其他主机</h2><p>如果你需要将数据拷贝至其他的 MySQL 服务器上, 你可以在 <code>mysqldump</code> 命令中指定数据库名及数据表。</p><p>在源主机上执行以下命令，将数据备份至 <code>dump.txt</code> 文件中:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p database_name table_name &gt; dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p>如果完整备份数据库，则无需使用特定的表名称。</p><p>如果你需要将备份的数据库导入到 MySQL 服务器中，可以使用以下命令，使用以下命令你需要确认数据库已经创建：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysql -u root -p database_name &lt; dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p>你也可以使用以下命令将导出的数据直接导入到远程的服务器上，但请确保两台服务器是相通的，是可以相互访问的：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p database_name \<br>       | mysql -h other-host.com database_name<br></code></pre></td></tr></table></figure></p><p>以上命令中使用了管道来将导出的数据导入到指定的远程主机上。</p><h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><h2 id="mysql-命令导入"><a href="#mysql-命令导入" class="headerlink" title="mysql 命令导入"></a>mysql 命令导入</h2><p>使用 <code>mysql</code> 命令导入语法格式为：</p><p><code>mysql -u用户名 -p密码 &lt; 要导入的数据库数据(TestDB.sql)</code></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysql -uroot -p123456 &lt; TestDB.sql<br></code></pre></td></tr></table></figure></p><p>以上命令将将备份的整个数据库 <code>TestDB.sql</code> 导入。</p><h2 id="source-命令导入"><a href="#source-命令导入" class="headerlink" title="source 命令导入"></a>source 命令导入</h2><p><code>source</code> 命令导入数据库需要先登录到数库终端：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE DATABASE abc;      # 创建数据库<br>mysql&gt; USE abc;                  # 使用已创建的数据库 <br>mysql&gt; SET names utf8;           # 设置编码<br>mysql&gt; source /home/abc/abc.sql  # 导入备份数据库<br></code></pre></td></tr></table></figure></p><h2 id="使用-LOAD-DATA-导入数据"><a href="#使用-LOAD-DATA-导入数据" class="headerlink" title="使用 LOAD DATA 导入数据"></a>使用 LOAD DATA 导入数据</h2><p>MySQL 中提供了<code>LOAD DATA INFILE</code> 语句来插入数据。 以下实例中将从当前目录中读取文件 <code>dump.txt</code>，将该文件中的数据插入到当前数据库的 <code>mytbl</code> 表中。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl;<br></code></pre></td></tr></table></figure></p><p>如果指定 <code>LOCAL</code> 关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p><p>你能明确地在 <code>LOAD DATA</code> 语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。</p><p>两个命令的 <code>FIELDS</code> 和 <code>LINES</code> 子句的语法是一样的。两个子句都是可选的，但是如果两个同时被指定，<code>FIELDS</code> 子句必须出现在 <code>LINES</code> 子句之前。</p><p>如果用户指定一个 <code>FIELDS</code> 子句，它的子句（<code>TERMINATED BY</code>、<code>[OPTIONALLY] ENCLOSED BY</code> 和 <code>ESCAPED BY</code>）也是可选的，不过，用户必须至少指定它们中的一个。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl<br>    -&gt; FIELDS TERMINATED BY &#x27;:&#x27;<br>    -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;<br></code></pre></td></tr></table></figure></p><p><code>LOAD DATA</code> 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。</p><p>如，在数据文件中的列顺序是 <code>a, b, c</code>，但在插入表的列顺序为 <code>b, c, a</code>，则数据导入语法如下：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; <br>    -&gt; INTO TABLE mytbl (b, c, a);<br></code></pre></td></tr></table></figure></p><h2 id="使用-mysqlimport-导入数据"><a href="#使用-mysqlimport-导入数据" class="headerlink" title="使用 mysqlimport 导入数据"></a>使用 mysqlimport 导入数据</h2><p><code>mysqlimport</code> 客户端提供了 <code>LOAD DATA INFILEQL</code> 语句的一个命令行接口。<code>mysqlimport</code> 的大多数选项直接对应 <code>LOAD DATA INFILE</code> 子句。</p><p>从文件 <code>dump.txt</code> 中将数据导入到 <code>mytbl</code> 数据表中, 可以使用以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqlimport -u root -p --<span class="hljs-built_in">local</span> mytbl dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p><code>mysqlimport</code> 命令可以指定选项来设置指定格式,命令语句格式如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqlimport -u root -p --<span class="hljs-built_in">local</span> --fields-terminated-by=<span class="hljs-string">&quot;:&quot;</span> \<br>   --lines-terminated-by=<span class="hljs-string">&quot;\r\n&quot;</span>  mytbl dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p><code>mysqlimport</code> 语句中使用 <code>--columns</code> 选项来设置列的顺序：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqlimport -u root -p --<span class="hljs-built_in">local</span> --columns=b,c,a \<br>    mytbl dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p><strong>mysqlimport 的常用选项介绍</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">-d or --delete</td><td style="text-align:center">新数据导入数据表中之前删除数据数据表中的所有信息</td></tr><tr><td style="text-align:center">-f or --force</td><td style="text-align:center">不管是否遇到错误，mysqlimport 将强制继续插入数据</td></tr><tr><td style="text-align:center">-i or --ignore</td><td style="text-align:center">mysqlimport 跳过或者忽略那些有相同唯一关键字的行，<br>导入文件中的数据将被忽略。</td></tr><tr><td style="text-align:center">-l or -lock-tables</td><td style="text-align:center">数据被插入之前锁住表，这样就防止了在更新数据库时，<br>用户的查询和更新受到影响。</td></tr><tr><td style="text-align:center">-r or -replace</td><td style="text-align:center">这个选项与 -i 选项的作用相反；<br>此选项将替代表中有相同唯一关键字的记录。</td></tr><tr><td style="text-align:center">--fields -enclosed -by=char</td><td style="text-align:center">指定文本文件中数据的记录时以什么括起的，<br>很多情况下数据以双引号括起。<br>默认的情况下数据是没有被字符括起的。</td></tr><tr><td style="text-align:center">--fields -terminated -by=char</td><td style="text-align:center">指定各个数据的值之间的分隔符，在句号分隔的文件中，分隔符是句号。<br>可以用此选项指定数据之间的分隔符。默认的分隔符是跳格符（Tab）</td></tr><tr><td style="text-align:center">--lines -terminated -by=str</td><td style="text-align:center">此选项指定文本文件中行与行之间数据的分隔字符串或者字符。<br>默认的情况下 mysqlimport 以 newline 为行分隔符。<br>您可以选择用一个字符串来替代一个单个的字符： 一个新行或者一个回车。</td></tr></tbody></table></div><p><code>mysqlimport</code> 命令常用的选项还有 <code>-v</code> 显示版本（version），<code>-p</code> 提示输入密码（password）等。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">ASCII(s)</td><td style="text-align:center">返回字符串 s 的第一个字符的 ASCII 码。</td><td style="text-align:center">返回 CustomerName 字段第一个字母的 ASCII 码： <br> <code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td></tr><tr><td style="text-align:center">CHAR_LENGTH(s)</td><td style="text-align:center">返回字符串 s 的字符数</td><td style="text-align:center">返回字符串 GOOGLE 的字符数： <br> <code>SELECT CHAR_LENGTH(&quot;GOOGLE&quot;) AS LengthOfString;</code></td></tr><tr><td style="text-align:center">CHARACTER_LENGTH(s)</td><td style="text-align:center">返回字符串 s 的字符数</td><td style="text-align:center">返回字符串 GOOGLE 的字符数： <br> <code>SELECT CHARACTER_LENGTH(&quot;GOOGLE&quot;) AS LengthOfString;</code></td></tr><tr><td style="text-align:center">CONCAT(s1, s2 ... sn)</td><td style="text-align:center">字符串 s1, s2 等多个字符串合并为一个字符串</td><td style="text-align:center">合并多个字符串： <br> <code>SELECT CONCAT(&quot;SQL &quot;, &quot;Baidu &quot;, &quot;Google &quot;, &quot;Facebook&quot;) AS ConcatenatedString;</code></td></tr><tr><td style="text-align:center">CONCAT_WS(x, s1, s2 ... sn)</td><td style="text-align:center">同 CONCAT(s1, s2, ...) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td><td style="text-align:center">合并多个字符串，并添加分隔符s： <br> <code>SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString;</code></td></tr><tr><td style="text-align:center">FIELD(s, s1, s2 ...)</td><td style="text-align:center">返回第一个字符串 s 在字符串列表(s1, s2 ...)中的位置</td><td style="text-align:center">返回字符串 c 在列表值中的位置： <br> <code>SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);  -- 3</code></td></tr><tr><td style="text-align:center">FIND_IN_SET(s1, s2)</td><td style="text-align:center">返回在字符串s2中与s1匹配的字符串的位置</td><td style="text-align:center">返回字符串 c 在指定字符串中的位置： <br> <code>SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;);  -- 5</code></td></tr><tr><td style="text-align:center">FORMAT(x, n)</td><td style="text-align:center">函数可以将数字 x 进行格式化 &quot;#,###.##&quot;, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td><td style="text-align:center">格式化数字 &quot;#,###.##&quot; 形式： <br> <code>SELECT FORMAT(250500.5634, 2);  -- 250,500.56</code></td></tr><tr><td style="text-align:center">INSERT(s1, x, len, s2)</td><td style="text-align:center">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td><td style="text-align:center">从字符串第一个位置开始的 6 个字符替换为 baidu： <br> <code>SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;baidu&quot;);  -- baidu.com</code></td></tr><tr><td style="text-align:center">LOCATE(s1, s)</td><td style="text-align:center">从字符串 s 中获取 s1 的开始位置</td><td style="text-align:center">获取 b 在字符串 abc 中的位置： <br> <code>SELECT LOCATE(&#39;st&#39;, &#39;myteststring&#39;);  -- 5</code> <br> 返回字符串 abc 中 b 的位置： <br> <code>SELECT LOCATE(&#39;b&#39;, &#39;abc&#39;);  -- 2</code></td></tr><tr><td style="text-align:center">LCASE(s)</td><td style="text-align:center">将字符串 s 的所有字母变成小写字母</td><td style="text-align:center">字符串 GOOGLE 转换为小写： <br> <code>SELECT LCASE(&#39;GOOGLE&#39;);  -- google</code></td></tr><tr><td style="text-align:center">LEFT(s, n)</td><td style="text-align:center">返回字符串 s 的前 n 个字符</td><td style="text-align:center">返回字符串 GOOGLE 中的前两个字符： <br> <code>SELECT LEFT(&#39;GOOGLE&#39;, 2);  -- GO</code></td></tr><tr><td style="text-align:center">LOWER(s)</td><td style="text-align:center">将字符串 s 的所有字母变成小写字母：</td><td style="text-align:center">字符串 GOOGLE 转换为小写： <br> <code>SELECT LOWER(&#39;GOOGLE&#39;);  -- google</code></td></tr><tr><td style="text-align:center">LPAD(s1, len, s2)</td><td style="text-align:center">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td><td style="text-align:center">将字符串 xx 填充到 abc 字符串的开始处： <br> <code>SELECT LPAD(&#39;abc&#39;, 5,&#39;xx&#39;);  -- xxabc</code></td></tr><tr><td style="text-align:center">LTRIM(s)</td><td style="text-align:center">去掉字符串 s 开始处的空格</td><td style="text-align:center">去掉字符串 GOOGLE 开始处的空格： <br> <code>SELECT LTRIM(&quot;    GOOGLE&quot;) AS LeftTrimmedString;-- GOOGLE</code></td></tr><tr><td style="text-align:center">MID(s, n, len)</td><td style="text-align:center">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s, n, len)</td><td style="text-align:center">从字符串 GOOGLE 中的第 2 个位置截取 3个 字符： <br> <code>SELECT MID(&quot;GOOGLE&quot;, 2, 3) AS ExtractString;  -- OOG</code></td></tr><tr><td style="text-align:center">POSITION(s1 IN s)</td><td style="text-align:center">从字符串 s 中获取 s1 的开始位置</td><td style="text-align:center">返回字符串 abc 中 b 的位置： <br> <code>SELECT POSITION(&#39;b&#39; in &#39;abc&#39;);  -- 2</code></td></tr><tr><td style="text-align:center">REPEAT(s, n)</td><td style="text-align:center">将字符串 s 重复 n 次</td><td style="text-align:center">将字符串 GOOGLE 重复三次： <br> <code>SELECT REPEAT(&#39;GOOGLE&#39;, 3);  -- GOOGLEGOOGLEGOOGLE</code></td></tr><tr><td style="text-align:center">REPLACE(s, s1, s2)</td><td style="text-align:center">将字符串 s2 替代字符串 s 中的字符串 s1</td><td style="text-align:center">将字符串 abc 中的字符 a 替换为字符 x： <br> <code>SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;x&#39;);  -- xbc</code></td></tr><tr><td style="text-align:center">REVERSE(s)</td><td style="text-align:center">将字符串s的顺序反过来</td><td style="text-align:center">将字符串 abc 的顺序反过来： <br> <code>SELECT REVERSE(&#39;abc&#39;);  -- cba</code></td></tr><tr><td style="text-align:center">RIGHT(s, n)</td><td style="text-align:center">返回字符串 s 的后 n 个字符</td><td style="text-align:center">返回字符串 GOOGLE 的后两个字符： <br> <code>SELECT RIGHT(&#39;GOOGLE&#39;, 2);  -- LE</code></td></tr><tr><td style="text-align:center">RPAD(s1, len, s2)</td><td style="text-align:center">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td><td style="text-align:center">将字符串 xx 填充到 abc 字符串的结尾处： <br> <code>SELECT RPAD(&#39;abc&#39;, 5,&#39;xx&#39;);  -- abcxx</code></td></tr><tr><td style="text-align:center">RTRIM(s)</td><td style="text-align:center">去掉字符串 s 结尾处的空格</td><td style="text-align:center">去掉字符串 GOOGLE 的末尾空格： <br> <code>SELECT RTRIM(&quot;GOOGLE     &quot;) AS RightTrimmedString;  -- GOOGLE</code></td></tr><tr><td style="text-align:center">SPACE(n)</td><td style="text-align:center">返回 n 个空格</td><td style="text-align:center">返回 10 个空格： <br> <code>SELECT SPACE(10);</code></td></tr><tr><td style="text-align:center">STRCMP(s1, s2)</td><td style="text-align:center">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td><td style="text-align:center">比较字符串： <br> <code>SELECT STRCMP(&quot;GOOGLE&quot;, &quot;GOOGLE&quot;);  -- 0</code></td></tr><tr><td style="text-align:center">SUBSTR(s, start, length)</td><td style="text-align:center">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td style="text-align:center">从字符串 GOOGLE 中的第 2 个位置截取 3 个 字符： <br> <code>SELECT SUBSTR(&quot;GOOGLE&quot;, 2, 3) AS ExtractString;  -- OOG</code></td></tr><tr><td style="text-align:center">SUBSTRING(s, start, length)</td><td style="text-align:center">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td style="text-align:center">从字符串 GOOGLE 中的第 2 个位置截取 3 个字符： <br> <code>SELECT SUBSTRING(&quot;GOOGLE&quot;, 2, 3) AS ExtractString;  -- OOG</code></td></tr><tr><td style="text-align:center">SUBSTRING_INDEX(s, delimiter, number)</td><td style="text-align:center">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 <br> 如果 number 是正数，返回第 number 个字符左边的字符串。 <br> 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td><td style="text-align:center"><code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;, &#39;*&#39;, 1);  -- a</code> <br> <code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;, &#39;*&#39;, -1);  -- b</code> <br> <code>SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;a*b*c*d*e&#39;, &#39;*&#39;, 3), &#39;*&#39;, -1);  -- c</code></td></tr><tr><td style="text-align:center">TRIM(s)</td><td style="text-align:center">去掉字符串 s 开始和结尾处的空格</td><td style="text-align:center">去掉字符串 GOOGLE 的首尾空格： <br> <code>SELECT TRIM(&#39;    GOOGLE    &#39;) AS TrimmedString;</code></td></tr><tr><td style="text-align:center">UCASE(s)</td><td style="text-align:center">将字符串转换为大写</td><td style="text-align:center">将字符串 google 转换为大写： <br> <code>SELECT UCASE(&quot;google&quot;);  -- GOOGLE</code></td></tr><tr><td style="text-align:center">UPPER(s)</td><td style="text-align:center">将字符串转换为大写</td><td style="text-align:center">将字符串 google 转换为大写： <br> <code>SELECT UPPER(&quot;google&quot;);  -- GOOGLE</code></td></tr></tbody></table></div><h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">ABS(x)</td><td style="text-align:center">返回 x 的绝对值</td><td style="text-align:center"><code>SELECT ABS(-1);  -- 返回1</code></td></tr><tr><td style="text-align:center">ACOS(x)</td><td style="text-align:center">求 x 的反余弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT ACOS(0.25);</code></td></tr><tr><td style="text-align:center">ASIN(x)</td><td style="text-align:center">求反正弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT ASIN(0.25);</code></td></tr><tr><td style="text-align:center">ATAN(x)</td><td style="text-align:center">求反正切值（参数是弧度）</td><td style="text-align:center"><code>SELECT ATAN(2.5);</code></td></tr><tr><td style="text-align:center">ATAN2(n, m)</td><td style="text-align:center">求反正切值（参数是弧度）</td><td style="text-align:center"><code>SELECT ATAN2(-0.8, 2);</code></td></tr><tr><td style="text-align:center">AVG(expression)</td><td style="text-align:center">返回一个表达式的平均值，expression 是一个字段</td><td style="text-align:center">返回 Products 表中 Price 字段的平均值： <br> <code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td></tr><tr><td style="text-align:center">CEIL(x)</td><td style="text-align:center">返回大于或等于 x 的最小整数</td><td style="text-align:center"><code>SELECT CEIL(1.5);  -- 返回2</code></td></tr><tr><td style="text-align:center">CEILING(x)</td><td style="text-align:center">返回大于或等于 x 的最小整数</td><td style="text-align:center"><code>SELECT CEILING(1.5);  -- 返回2</code></td></tr><tr><td style="text-align:center">COS(x)</td><td style="text-align:center">求余弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT COS(2);</code></td></tr><tr><td style="text-align:center">COT(x)</td><td style="text-align:center">求余切值（参数是弧度）</td><td style="text-align:center"><code>SELECT COT(6);</code></td></tr><tr><td style="text-align:center">COUNT(expression)</td><td style="text-align:center">返回查询的记录总数，expression 参数是一个字段或者 * 号</td><td style="text-align:center">返回 Products 表中 products 字段总共有多少条记录： <br> <code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td></tr><tr><td style="text-align:center">DEGREES(x)</td><td style="text-align:center">将弧度转换为角度</td><td style="text-align:center"><code>SELECT DEGREES(3.1415926535898);  -- 180</code></td></tr><tr><td style="text-align:center">n DIV m</td><td style="text-align:center">整除，n 为被除数，m 为除数</td><td style="text-align:center">计算 10 除于 5： <br> <code>SELECT 10 DIV 5;  -- 2</code></td></tr><tr><td style="text-align:center">EXP(x)</td><td style="text-align:center">返回 e 的 x 次方</td><td style="text-align:center">计算 e 的三次方： <br> <code>SELECT EXP(3);  -- 20.085536923188</code></td></tr><tr><td style="text-align:center">FLOOR(x)</td><td style="text-align:center">返回小于或等于 x 的最大整数</td><td style="text-align:center">小于或等于 1.5 的整数： <br> <code>SELECT FLOOR(1.5);  -- 返回1</code></td></tr><tr><td style="text-align:center">GREATEST(expr1, expr2, expr3, ...)</td><td style="text-align:center">返回列表中的最大值</td><td style="text-align:center">返回以下数字列表中的最大值： <br> <code>SELECT GREATEST(3, 12, 34, 8, 25);  -- 34</code> <br> 返回以下字符串列表中的最大值： <br> <code>SELECT GREATEST(&quot;Google&quot;, &quot;Baidu&quot;, &quot;Apple&quot;);  -- Google</code></td></tr><tr><td style="text-align:center">LEAST(expr1, expr2, expr3, ...)</td><td style="text-align:center">返回列表中的最小值</td><td style="text-align:center">返回以下数字列表中的最小值： <br> <code>SELECT LEAST(3, 12, 34, 8, 25);  -- 3</code> <br> 返回以下字符串列表中的最小值： <br> <code>SELECT LEAST(&quot;Google&quot;, &quot;Baidu&quot;, &quot;Apple&quot;);  -- Apple</code></td></tr><tr><td style="text-align:center">LN(x)</td><td style="text-align:center">返回数字 x 的自然对数，以 e 为底。</td><td style="text-align:center">返回 2 的自然对数： <br> <code>SELECT LN(2);  -- 0.6931471805599453</code></td></tr><tr><td style="text-align:center">LOG(x) 或 LOG(base, x)</td><td style="text-align:center">返回自然对数（以 e 为底的对数）， <br> 如果带有 base 参数，则 base 为指定带底数。</td><td style="text-align:center"><code>SELECT LOG(20.085536923188);  -- 3</code> <br> <code>SELECT LOG(2, 4);  -- 2</code></td></tr><tr><td style="text-align:center">LOG10(x)</td><td style="text-align:center">返回以 10 为底的对数</td><td style="text-align:center"><code>SELECT LOG10(100);  -- 2</code></td></tr><tr><td style="text-align:center">LOG2(x)</td><td style="text-align:center">返回以 2 为底的对数</td><td style="text-align:center">返回以 2 为底 6 的对数： <br> <code>SELECT LOG2(6);  -- 2.584962500721156</code></td></tr><tr><td style="text-align:center">MAX(expression)</td><td style="text-align:center">返回字段 expression 中的最大值</td><td style="text-align:center">返回数据表 Products 中字段 Price 的最大值： <br> <code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td></tr><tr><td style="text-align:center">MIN(expression)</td><td style="text-align:center">返回字段 expression 中的最小值</td><td style="text-align:center">返回数据表 Products 中字段 Price 的最小值： <br> <code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td></tr><tr><td style="text-align:center">MOD(x,y)</td><td style="text-align:center">返回 x 除以 y 以后的余数</td><td style="text-align:center">5 除于 2 的余数： <br> <code>SELECT MOD(5, 2);  -- 1</code></td></tr><tr><td style="text-align:center">PI()</td><td style="text-align:center">返回圆周率(3.141593）</td><td style="text-align:center"><code>SELECT PI();  --3.141593</code></td></tr><tr><td style="text-align:center">POW(x,y)</td><td style="text-align:center">返回 x 的 y 次方</td><td style="text-align:center">2 的 3 次方： <br> <code>SELECT POW(2, 3);  -- 8</code></td></tr><tr><td style="text-align:center">POWER(x,y)</td><td style="text-align:center">返回 x 的 y 次方</td><td style="text-align:center">2 的 3 次方： <br> <code>SELECT POWER(2, 3);  -- 8</code></td></tr><tr><td style="text-align:center">RADIANS(x)</td><td style="text-align:center">将角度转换为弧度</td><td style="text-align:center">180 度转换为弧度： <br> <code>SELECT RADIANS(180);  -- 3.1415926535898</code></td></tr><tr><td style="text-align:center">RAND()</td><td style="text-align:center">返回 0 到 1 的随机数</td><td style="text-align:center"><code>SELECT RAND();  --0.93099315644334</code></td></tr><tr><td style="text-align:center">ROUND(x)</td><td style="text-align:center">返回离 x 最近的整数,四舍五入</td><td style="text-align:center"><code>SELECT ROUND(1.23456);  --1</code></td></tr><tr><td style="text-align:center">SIGN(x)</td><td style="text-align:center">返回 x 的符号，x 是负数、0、 正数分别返回 -1、0 和 1</td><td style="text-align:center"><code>SELECT SIGN(-10);  -- (-1)</code></td></tr><tr><td style="text-align:center">SIN(x)</td><td style="text-align:center">求正弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT SIN(RADIANS(30));  -- 0.5</code></td></tr><tr><td style="text-align:center">SQRT(x)</td><td style="text-align:center">返回x的平方根</td><td style="text-align:center">25 的平方根： <br> <code>SELECT SQRT(25);  -- 5</code></td></tr><tr><td style="text-align:center">SUM(expression)</td><td style="text-align:center">返回指定字段的总和</td><td style="text-align:center">计算 OrderDetails 表中字段 Quantity 的总和： <br> <code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td></tr><tr><td style="text-align:center">TAN(x)</td><td style="text-align:center">求正切值（参数是弧度）</td><td style="text-align:center"><code>SELECT TAN(1.75);  -- (-5.52037992250933)</code></td></tr><tr><td style="text-align:center">TRUNCATE(x, y)</td><td style="text-align:center">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td><td style="text-align:center"><code>SELECT TRUNCATE(1.23456, 3);  -- 1.234</code></td></tr></tbody></table></div><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">ADDDATE(d, n)</td><td style="text-align:center">计算起始日期 d 加上 n 天的日期</td><td style="text-align:center"><code>SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY);  --2017-06-25</code></td></tr><tr><td style="text-align:center">ADDTIME(t, n)</td><td style="text-align:center">n 是一个时间表达式，时间 t 加上时间表达式 n</td><td style="text-align:center">加 5 秒： <br> <code>SELECT ADDTIME(&#39;2011-11-11 11:11:11&#39;, 5);  --2011-11-11 11:11:16</code> <br> 添加 2 小时, 10 分钟, 5 秒： <br> <code>SELECT ADDTIME(&quot;2020-06-15 09:34:21&quot;, &quot;2:10:5&quot;);  -- 2020-06-15 11:44:26</code></td></tr><tr><td style="text-align:center">CURDATE()</td><td style="text-align:center">返回当前日期</td><td style="text-align:center"><code>SELECT CURDATE();  -- 2018-09-19</code></td></tr><tr><td style="text-align:center">CURRENT_DATE()</td><td style="text-align:center">返回当前日期</td><td style="text-align:center"><code>SELECT CURRENT_DATE();  -- 2018-09-19</code></td></tr><tr><td style="text-align:center">CURRENT_TIME</td><td style="text-align:center">返回当前时间</td><td style="text-align:center"><code>SELECT CURRENT_TIME();  -- 19:59:02</code></td></tr><tr><td style="text-align:center">CURRENT_TIMESTAMP()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT CURRENT_TIMESTAMP();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">CURTIME()</td><td style="text-align:center">返回当前时间</td><td style="text-align:center"><code>SELECT CURTIME();  -- 19:59:02</code></td></tr><tr><td style="text-align:center">DATE()</td><td style="text-align:center">从日期或日期时间表达式中提取日期值</td><td style="text-align:center"><code>SELECT DATE(&quot;2017-06-15&quot;);  -- 2017-06-15</code></td></tr><tr><td style="text-align:center">DATEDIFF(d1, d2)</td><td style="text-align:center">计算日期 d1 和 d2 之间相隔的天数</td><td style="text-align:center"><code>SELECT DATEDIFF(&#39;2001-01-01&#39;, &#39;2001-02-02&#39;);  -- (-32)</code></td></tr><tr><td style="text-align:center">DATE_ADD(d，INTERVAL expr type)</td><td style="text-align:center">计算起始日期 d 加上一个时间段后的日期</td><td style="text-align:center"><code>SELECT ADDDATE(&#39;2011-11-11 11:11:11&#39;, 1);  -- 2011-11-12 11:11:11（默认是天）</code> <br> <code>SELECT ADDDATE(&#39;2011-11-11 11:11:11&#39;, INTERVAL 5 MINUTE);  -- 2011-11-11 11:16:11 （TYPE的取值与上面那个列出来的函数类似）</code></td></tr><tr><td style="text-align:center">DATE_FORMAT(d, f)</td><td style="text-align:center">按表达式 f 的要求显示日期 d</td><td style="text-align:center"><code>SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;);  -- 2011-11-11 11:11:11 AM</code></td></tr><tr><td style="text-align:center">DATE_SUB(date, INTERVAL expr type)</td><td style="text-align:center">函数从日期减去指定的时间间隔。</td><td style="text-align:center">Orders 表中 OrderDate 字段减去 2 天： <br> <code>SELECT OrderId, DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders;</code></td></tr><tr><td style="text-align:center">DAY(d)</td><td style="text-align:center">返回日期值 d 的日期部分</td><td style="text-align:center"><code>SELECT DAY(&quot;2017-06-15&quot;);  -- 15</code></td></tr><tr><td style="text-align:center">DAYNAME(d)</td><td style="text-align:center">返回日期 d 是星期几，如 Monday, Tuesday</td><td style="text-align:center"><code>SELECT DAYNAME(&#39;2011-11-11 11:11:11&#39;);  --Friday</code></td></tr><tr><td style="text-align:center">DAYOFMONTH(d)</td><td style="text-align:center">计算日期 d 是本月的第几天</td><td style="text-align:center"><code>SELECT DAYOFMONTH(&#39;2011-11-11 11:11:11&#39;);  --11</code></td></tr><tr><td style="text-align:center">DAYOFWEEK(d)</td><td style="text-align:center">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td><td style="text-align:center"><code>SELECT DAYOFWEEK(&#39;2011-11-11 11:11:11&#39;);  --6</code></td></tr><tr><td style="text-align:center">DAYOFYEAR(d)</td><td style="text-align:center">计算日期 d 是本年的第几天</td><td style="text-align:center"><code>SELECT DAYOFYEAR(&#39;2011-11-11 11:11:11&#39;);  --315</code></td></tr><tr><td style="text-align:center">EXTRACT(type FROM d)</td><td style="text-align:center">从日期 d 中获取指定的值，type 指定返回的值。 <br> type可取值为： <br> MICROSECOND <br> SECOND <br> MINUTE <br> HOUR <br> DAY <br> WEEK <br> MONTH <br> QUARTER <br> YEAR <br> SECOND_MICROSECOND <br> MINUTE_MICROSECOND <br> MINUTE_SECOND <br> HOUR_MICROSECOND <br> HOUR_SECOND <br> HOUR_MINUTE <br> DAY_MICROSECOND <br> DAY_SECOND <br> DAY_MINUTE <br> DAY_HOUR <br> YEAR_MONTH</td><td style="text-align:center"><code>SELECT EXTRACT(MINUTE FROM &#39;2011-11-11 11:11:11&#39;);  -- 11</code></td></tr><tr><td style="text-align:center">FROM_DAYS(n)</td><td style="text-align:center">计算从 0000 年 1 月 1 日开始 n 天后的日期</td><td style="text-align:center"><code>SELECT FROM_DAYS(1111);  -- 0003-01-16</code></td></tr><tr><td style="text-align:center">HOUR(t)</td><td style="text-align:center">返回 t 中的小时值</td><td style="text-align:center"><code>SELECT HOUR(&#39;1:2:3&#39;);  -- 1</code></td></tr><tr><td style="text-align:center">LAST_DAY(d)</td><td style="text-align:center">返回给给定日期的那一月份的最后一天</td><td style="text-align:center"><code>SELECT LAST_DAY(&quot;2017-06-20&quot;);  -- 2017-06-30</code></td></tr><tr><td style="text-align:center">LOCALTIME()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT LOCALTIME();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">LOCALTIMESTAMP()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT LOCALTIMESTAMP();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">MAKEDATE(year, day-of-year)</td><td style="text-align:center">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td><td style="text-align:center"><code>SELECT MAKEDATE(2017, 3);  -- 2017-01-03</code></td></tr><tr><td style="text-align:center">MAKETIME(hour, minute, second)</td><td style="text-align:center">组合时间，参数分别为小时、分钟、秒</td><td style="text-align:center"><code>SELECT MAKETIME(11, 35, 4);  -- 11:35:04</code></td></tr><tr><td style="text-align:center">MICROSECOND(date)</td><td style="text-align:center">返回日期参数所对应的微秒数</td><td style="text-align:center"><code>SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;);  -- 23</code></td></tr><tr><td style="text-align:center">MINUTE(t)</td><td style="text-align:center">返回 t 中的分钟值</td><td style="text-align:center"><code>SELECT MINUTE(&#39;1:2:3&#39;);  -- 2</code></td></tr><tr><td style="text-align:center">MONTHNAME(d)</td><td style="text-align:center">返回日期当中的月份名称，如 November</td><td style="text-align:center"><code>SELECT MONTHNAME(&#39;2011-11-11 11:11:11&#39;);  -- November</code></td></tr><tr><td style="text-align:center">MONTH(d)</td><td style="text-align:center">返回日期d中的月份值，1 到 12</td><td style="text-align:center"><code>SELECT MONTH(&#39;2011-11-11 11:11:11&#39;);  --11</code></td></tr><tr><td style="text-align:center">NOW()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT NOW();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">PERIOD_ADD(period, number)</td><td style="text-align:center">为 年-月 组合日期添加一个时段</td><td style="text-align:center"><code>SELECT PERIOD_ADD(201703, 5);  -- 201708</code></td></tr><tr><td style="text-align:center">PERIOD_DIFF(period1, period2)</td><td style="text-align:center">返回两个时段之间的月份差值</td><td style="text-align:center"><code>SELECT PERIOD_DIFF(201710, 201703);  -- 7</code></td></tr><tr><td style="text-align:center">QUARTER(d)</td><td style="text-align:center">返回日期d是第几季节，返回 1 到 4</td><td style="text-align:center"><code>SELECT QUARTER(&#39;2011-11-11 11:11:11&#39;);  -- 4</code></td></tr><tr><td style="text-align:center">SECOND(t)</td><td style="text-align:center">返回 t 中的秒钟值</td><td style="text-align:center"><code>SELECT SECOND(&#39;1:2:3&#39;);  -- 3</code></td></tr><tr><td style="text-align:center">SEC_TO_TIME(s)</td><td style="text-align:center">将以秒为单位的时间 s 转换为时分秒的格式</td><td style="text-align:center"><code>SELECT SEC_TO_TIME(4320);  -- 01:12:00</code></td></tr><tr><td style="text-align:center">STR_TO_DATE(string, format_mask)</td><td style="text-align:center">将字符串转变为日期</td><td style="text-align:center"><code>SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;);  -- 2017-08-10</code></td></tr><tr><td style="text-align:center">SUBDATE(d, n)</td><td style="text-align:center">日期 d 减去 n 天后的日期</td><td style="text-align:center"><code>SELECT SUBDATE(&#39;2011-11-11 11:11:11&#39;, 1);  --2011-11-10 11:11:11 (默认是天)</code></td></tr><tr><td style="text-align:center">SUBTIME(t, n)</td><td style="text-align:center">时间 t 减去 n 秒的时间</td><td style="text-align:center"><code>SELECT SUBTIME(&#39;2011-11-11 11:11:11&#39;, 5);  --2011-11-11 11:11:06 (秒)</code></td></tr><tr><td style="text-align:center">SYSDATE()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT SYSDATE();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">TIME(expression)</td><td style="text-align:center">提取传入表达式的时间部分</td><td style="text-align:center"><code>SELECT TIME(&quot;19:30:10&quot;);  -- 19:30:10</code></td></tr><tr><td style="text-align:center">TIME_FORMAT(t, f)</td><td style="text-align:center">按表达式 f 的要求显示时间 t</td><td style="text-align:center"><code>SELECT TIME_FORMAT(&#39;11:11:11&#39;, &#39;%r&#39;);  -- 11:11:11 AM</code></td></tr><tr><td style="text-align:center">TIME_TO_SEC(t)</td><td style="text-align:center">将时间 t 转换为秒</td><td style="text-align:center"><code>SELECT TIME_TO_SEC(&#39;1:12:00&#39;);  -- 4320</code></td></tr><tr><td style="text-align:center">TIMEDIFF(time1, time2)</td><td style="text-align:center">计算时间差值</td><td style="text-align:center"><code>SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;);  -- 00:00:01</code></td></tr><tr><td style="text-align:center">TIMESTAMP(expression, interval)</td><td style="text-align:center">单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td><td style="text-align:center"><code>SELECT TIMESTAMP(&quot;2017-07-23&quot;, &quot;13:10:11&quot;);  -- 2017-07-23 13:10:11</code></td></tr><tr><td style="text-align:center">TO_DAYS(d)</td><td style="text-align:center">计算日期 d 距离 0000 年 1 月 1 日的天数</td><td style="text-align:center"><code>SELECT TO_DAYS(&#39;0001-01-01 01:01:01&#39;);  -- 366</code></td></tr><tr><td style="text-align:center">WEEK(d)</td><td style="text-align:center">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td style="text-align:center"><code>SELECT WEEK(&#39;2011-11-11 11:11:11&#39;);  -- 45</code></td></tr><tr><td style="text-align:center">WEEKDAY(d)</td><td style="text-align:center">日期 d 是星期几，0 表示星期一，1 表示星期二</td><td style="text-align:center"><code>SELECT WEEKDAY(&quot;2017-06-15&quot;);  -- 3</code></td></tr><tr><td style="text-align:center">WEEKOFYEAR(d)</td><td style="text-align:center">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td style="text-align:center"><code>SELECT WEEKOFYEAR(&#39;2011-11-11 11:11:11&#39;);  -- 45</code></td></tr><tr><td style="text-align:center">YEAR(d)</td><td style="text-align:center">返回年份</td><td style="text-align:center"><code>SELECT YEAR(&quot;2017-06-15&quot;);  -- 2017</code></td></tr><tr><td style="text-align:center">YEARWEEK(date, mode)</td><td style="text-align:center">返回年份及第几周（0 到 53），mode 中 0 表示周天，1表示周一，以此类推</td><td style="text-align:center"><code>SELECT YEARWEEK(&quot;2017-06-15&quot;);  -- 201724</code></td></tr></tbody></table></div><h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">BIN(x)</td><td style="text-align:center">返回 x 的二进制编码</td><td style="text-align:center">15 的 2 进制编码： <br> <code>SELECT BIN(15);  -- 1111</code></td></tr><tr><td style="text-align:center">BINARY(s)</td><td style="text-align:center">将字符串 s 转换为二进制字符串</td><td style="text-align:center"><code>SELECT BINARY &quot;GOOGLE&quot;;  -- GOOGLE</code></td></tr><tr><td style="text-align:center">CASE expression <br> WHEN condition1 THEN result1 <br> WHEN condition2 THEN result2 <br> ... <br> WHEN conditionN THEN resultN <br> ELSE result</td><td style="text-align:center">END &vert; CASE 表示函数开始，END 表示函数结束。 <br> 如果 condition1 成立，则返回 result1,  <br> 如果 condition2 成立，则返回 result2， <br> 当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td><td style="text-align:center"><code>SELECT CASE</code> <br> <code>WHEN 1 &gt; 0</code> <br> <code>THEN &#39;1 &gt; 0&#39;</code> <br> <code>WHEN 2 &gt; 0</code> <br> <code>THEN &#39;2 &gt; 0&#39;</code> <br> <code>ELSE &#39;3 &gt; 0&#39;</code> <br> <code>END</code> <br> <code>-- 1 &gt; 0</code></td></tr><tr><td style="text-align:center">CAST(x AS type)</td><td style="text-align:center">转换数据类型</td><td style="text-align:center">字符串日期转换为日期： <br> <code>SELECT CAST(&quot;2017-08-29&quot; AS DATE);  -- 2017-08-29</code></td></tr><tr><td style="text-align:center">COALESCE(expr1, expr2, ...., expr_n)</td><td style="text-align:center">返回参数中的第一个非空表达式（从左向右）</td><td style="text-align:center"><code>SELECT COALESCE(NULL, NULL, NULL, &#39;baidu.com&#39;, NULL, &#39;google.com&#39;);  -- baidu.com</code></td></tr><tr><td style="text-align:center">CONNECTION_ID()</td><td style="text-align:center">返回唯一的连接 ID</td><td style="text-align:center"><code>SELECT CONNECTION_ID();  -- 4292835</code></td></tr><tr><td style="text-align:center">CONV(x, f1, f2)</td><td style="text-align:center">返回 f1 进制数变成 f2 进制数</td><td style="text-align:center"><code>SELECT CONV(15, 10, 2);  -- 1111</code></td></tr><tr><td style="text-align:center">CONVERT(s USING cs)</td><td style="text-align:center">函数将字符串 s 的字符集变成 cs</td><td style="text-align:center"><code>SELECT CHARSET(&#39;ABC&#39;)  --utf-8</code> <br> <code>SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk))  --gbk</code></td></tr><tr><td style="text-align:center">CURRENT_USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT CURRENT_USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">DATABASE()</td><td style="text-align:center">返回当前数据库名</td><td style="text-align:center"><code>SELECT DATABASE();  -- testdb</code></td></tr><tr><td style="text-align:center">IF(expr, v1, v2)</td><td style="text-align:center">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td><td style="text-align:center"><code>SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)  --正确</code></td></tr><tr><td style="text-align:center">IFNULL(v1, v2)</td><td style="text-align:center">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td style="text-align:center"><code>SELECT IFNULL(NULL, &#39;Hello Word&#39;)  --Hello Word</code></td></tr><tr><td style="text-align:center">ISNULL(expression)</td><td style="text-align:center">判断表达式是否为 NULL</td><td style="text-align:center"><code>SELECT ISNULL(NULL);  --1</code></td></tr><tr><td style="text-align:center">LAST_INSERT_ID()</td><td style="text-align:center">返回最近生成的 AUTO_INCREMENT 值</td><td style="text-align:center"><code>SELECT LAST_INSERT_ID();  --6</code></td></tr><tr><td style="text-align:center">NULLIF(expr1, expr2)</td><td style="text-align:center">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td><td style="text-align:center"><code>SELECT NULLIF(25, 25);  --</code></td></tr><tr><td style="text-align:center">SESSION_USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT SESSION_USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">SYSTEM_USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT SYSTEM_USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">VERSION()</td><td style="text-align:center">返回数据库的版本号</td><td style="text-align:center"><code>SELECT VERSION()  -- 5.6.34</code></td></tr></tbody></table></div><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>本章节我们主要介绍 MySQL 的运算符及运算符的优先级。 MySQL 主要有以下几种运算符：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>MySQL 支持的算术运算符包括:</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加法</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减法</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘法</td></tr><tr><td style="text-align:center">/ 或 DIV</td><td style="text-align:center">除法</td></tr><tr><td style="text-align:center">% 或 MOD</td><td style="text-align:center">取余</td></tr></tbody></table></div><p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p><ol><li><p>加</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 1+2;<br>+<span class="hljs-comment">-----+</span><br>| 1+2 |<br>+<span class="hljs-comment">-----+</span><br>|   3 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>减</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 1-2;<br>+<span class="hljs-comment">-----+</span><br>| 1-2 |<br>+<span class="hljs-comment">-----+</span><br>|  -1 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>乘</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2*3;<br>+<span class="hljs-comment">-----+</span><br>| 2*3 |<br>+<span class="hljs-comment">-----+</span><br>|   6 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>除</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2/3;<br>+<span class="hljs-comment">--------+</span><br>| 2/3    |<br>+<span class="hljs-comment">--------+</span><br>| 0.6667 |<br>+<span class="hljs-comment">--------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>商</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 10 DIV 4;<br>+<span class="hljs-comment">----------+</span><br>| 10 DIV 4 |<br>+<span class="hljs-comment">----------+</span><br>|        2 |<br>+<span class="hljs-comment">----------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>取余</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 10 MOD 4;<br>+<span class="hljs-comment">----------+</span><br>| 10 MOD 4 |<br>+<span class="hljs-comment">----------+</span><br>|        2 |<br>+<span class="hljs-comment">----------+</span><br></code></pre></td></tr></table></figure></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2></li></ol><p><code>SELECT</code> 语句中的条件语句经常要使用比较运算符。通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 <code>1</code>，为假则返回 <code>0</code>，比较结果不确定则返回 <code>NULL</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">描述</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&gt;, !=</td><td style="text-align:center">不等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">在两值之间</td><td style="text-align:center">&gt;=min &amp;&amp; &lt;=max</td></tr><tr><td style="text-align:center">NOT BETWEEN</td><td style="text-align:center">不在两值之间</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IN</td><td style="text-align:center">在集合中</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">NOT IN</td><td style="text-align:center">不在集合中</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">严格比较两个 NULL 值是否相等</td><td style="text-align:center">两个操作码均为 NULL 时，其所得值为1； <br> 而当一个操作码为 NULL 时，其所得值为0</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">模糊匹配</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">REGEXP 或 RLIKE</td><td style="text-align:center">正则式匹配</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IS NULL</td><td style="text-align:center">为空</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IS NOT NULL</td><td style="text-align:center">不为空</td></tr></tbody></table></div><ol><li><p>等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2=3;<br>+<span class="hljs-comment">-----+</span><br>| 2=3 |<br>+<span class="hljs-comment">-----+</span><br>|   0 |<br>+<span class="hljs-comment">-----+</span><br>mysql&gt; SELECT NULL = NULL;<br>+<span class="hljs-comment">-------------+</span><br>| NULL = NULL |<br>+<span class="hljs-comment">-------------+</span><br>|        NULL |<br>+<span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>不等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;&gt;3;<br>+<span class="hljs-comment">------+</span><br>| 2&lt;&gt;3 |<br>+<span class="hljs-comment">------+</span><br>|    1 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>安全等于</p><p> 与 <code>=</code> 的区别在于当两个操作码均为 <code>NULL</code> 时，其所得值为 <code>1</code> 而不为 <code>NULL</code>，而当一个操作码为 <code>NULL</code> 时，其所得值为 <code>0</code> 而不为 <code>NULL</code>。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;=&gt;3;<br>+<span class="hljs-comment">-------+</span><br>| 2&lt;=&gt;3 |<br>+<span class="hljs-comment">-------+</span><br>|     0 |<br>+<span class="hljs-comment">-------+</span><br>mysql&gt; SELECT NULL=NULL;<br>+<span class="hljs-comment">-----------+</span><br>| NULL=NULL |<br>+<span class="hljs-comment">-----------+</span><br>|      NULL |<br>+<span class="hljs-comment">-----------+</span><br>mysql&gt; SELECT NULL&lt;=&gt;NULL;<br>+<span class="hljs-comment">-------------+</span><br>| NULL&lt;=&gt;NULL |<br>+<span class="hljs-comment">-------------+</span><br>|           1 |<br>+<span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>小于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;3;<br>+<span class="hljs-comment">-----+</span><br>| 2&lt;3 |<br>+<span class="hljs-comment">-----+</span><br>|   1 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>小于等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;=3;<br>+<span class="hljs-comment">------+</span><br>| 2&lt;=3 |<br>+<span class="hljs-comment">------+</span><br>|    1 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>大于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&gt;3;<br>+<span class="hljs-comment">-----+</span><br>| 2&gt;3 |<br>+<span class="hljs-comment">-----+</span><br>|   0 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>大于等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&gt;=3;<br>+<span class="hljs-comment">------+</span><br>| 2&gt;=3 |<br>+<span class="hljs-comment">------+</span><br>|    0 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>BETWEEN</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 5 BETWEEN 1 AND 10;<br>+<span class="hljs-comment">--------------------+</span><br>| 5 BETWEEN 1 AND 10 |<br>+<span class="hljs-comment">--------------------+</span><br>|                  1 |<br>+<span class="hljs-comment">--------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>IN</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 5 IN (1, 2, 3, 4, 5);<br>+<span class="hljs-comment">------------------+</span><br>| 5 IN (1, 2, 3, 4, 5) |<br>+<span class="hljs-comment">----------------------+</span><br>|                    1 |<br>+<span class="hljs-comment">----------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>NOT IN</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 5 NOT IN (1, 2, 3, 4, 5);<br>+<span class="hljs-comment">--------------------------+</span><br>| 5 NOT IN (1, 2, 3, 4, 5) |<br>+<span class="hljs-comment">--------------------------+</span><br>|                        0 |<br>+<span class="hljs-comment">--------------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>IS NULL</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NULL IS NULL;<br>+<span class="hljs-comment">--------------+</span><br>| NULL IS NULL |<br>+<span class="hljs-comment">--------------+</span><br>|            1 |<br>+<span class="hljs-comment">--------------+</span><br>mysql&gt; SELECT &#x27;a&#x27; IS NULL;<br>+<span class="hljs-comment">-------------+</span><br>| &#x27;a&#x27; IS NULL |<br>+<span class="hljs-comment">-------------+</span><br>|           0 |<br>+<span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>IS NOT NULL</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NULL IS NOT NULL;<br>+<span class="hljs-comment">------------------+</span><br>| NULL IS NOT NULL |<br>+<span class="hljs-comment">------------------+</span><br>|                0 |<br>+<span class="hljs-comment">------------------+</span><br>mysql&gt; SELECT &#x27;a&#x27; IS NOT NULL;<br>+<span class="hljs-comment">-----------------+</span><br>| &#x27;a&#x27; IS NOT NULL |<br>+<span class="hljs-comment">-----------------+</span><br>|               1 |<br>+<span class="hljs-comment">-----------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>LIKE</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT &#x27;12345&#x27; LIKE &#x27;12%&#x27;;<br>+<span class="hljs-comment">--------------------+</span><br>| &#x27;12345&#x27; LIKE &#x27;12%&#x27; |<br>+<span class="hljs-comment">--------------------+</span><br>|                  1 |<br>+<span class="hljs-comment">--------------------+</span><br>mysql&gt; SELECT &#x27;12345&#x27; LIKE &#x27;12_&#x27;;<br>+<span class="hljs-comment">--------------------+</span><br>| &#x27;12345&#x27; LIKE &#x27;12_&#x27; |<br>+<span class="hljs-comment">--------------------+</span><br>|                  0 |<br>+<span class="hljs-comment">--------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>REGEXP</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT &#x27;beijing&#x27; REGEXP &#x27;jing&#x27;;<br>+<span class="hljs-comment">-------------------------+</span><br>| &#x27;beijing&#x27; REGEXP &#x27;jing&#x27; |<br>+<span class="hljs-comment">-------------------------+</span><br>|                       1 |<br>+<span class="hljs-comment">-------------------------+</span><br>mysql&gt; SELECT &#x27;beijing&#x27; REGEXP &#x27;xi&#x27;;<br>+<span class="hljs-comment">-----------------------+</span><br>| &#x27;beijing&#x27; REGEXP &#x27;xi&#x27; |<br>+<span class="hljs-comment">-----------------------+</span><br>|                     0 |<br>+<span class="hljs-comment">-----------------------+</span><br></code></pre></td></tr></table></figure></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2></li></ol><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 <code>1</code>。如果表达式是假，结果返回 <code>0</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符号</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">NOT 或 !</td><td style="text-align:center">逻辑非</td></tr><tr><td style="text-align:center">AND</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:center">逻辑或</td></tr><tr><td style="text-align:center">XOR</td><td style="text-align:center">逻辑异或</td></tr></tbody></table></div><ol><li><p>与</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2 AND 0;<br>+<span class="hljs-comment">---------+</span><br>| 2 AND 0 |<br>+<span class="hljs-comment">---------+</span><br>|       0 |<br>+<span class="hljs-comment">---------+</span><br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT 2 AND 1;<br>+<span class="hljs-comment">---------+</span><br>+<span class="hljs-comment">---------+</span><br>| 2 AND 1 |<br>+<span class="hljs-comment">---------+</span><br>|       1 |<br>+<span class="hljs-comment">---------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2 OR 0;<br>+<span class="hljs-comment">--------+</span><br>| 2 OR 0 |<br>+<span class="hljs-comment">--------+</span><br>|      1 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT 2 OR 1;<br>+<span class="hljs-comment">--------+</span><br>| 2 OR 1 |<br>+<span class="hljs-comment">--------+</span><br>|      1 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT 0 OR 0;<br>+<span class="hljs-comment">--------+</span><br>| 0 OR 0 |<br>+<span class="hljs-comment">--------+</span><br>|      0 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT 1 || 0;<br>+<span class="hljs-comment">--------+</span><br>| 1 || 0 |<br>+<span class="hljs-comment">--------+</span><br>|      1 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT NULL OR 1;<br>+<span class="hljs-comment">-----------+</span><br>| NULL OR 1 |<br>+<span class="hljs-comment">-----------+</span><br>|         1 |<br>+<span class="hljs-comment">-----------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>非</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NOT 1;<br>+<span class="hljs-comment">-------+</span><br>| NOT 1 |<br>+<span class="hljs-comment">-------+</span><br>|     0 |<br>+<span class="hljs-comment">-------+</span><br>mysql&gt; SELECT !0;<br>+<span class="hljs-comment">----+</span><br>| !0 |<br>+<span class="hljs-comment">----+</span><br>|  1 |<br>+<span class="hljs-comment">----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>异或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 1 XOR 1;<br>+<span class="hljs-comment">---------+</span><br>| 1 XOR 1 |<br>+<span class="hljs-comment">---------+</span><br>|       0 |<br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT 0 XOR 0;<br>+<span class="hljs-comment">---------+</span><br>| 0 XOR 0 |<br>+<span class="hljs-comment">---------+</span><br>|       0 |<br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT 1 XOR 0;<br>+<span class="hljs-comment">---------+</span><br>| 1 XOR 0 |<br>+<span class="hljs-comment">---------+</span><br>|       1 |<br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT NULL XOR 1;<br>+<span class="hljs-comment">------------+</span><br>| NULL XOR 1 |<br>+<span class="hljs-comment">------------+</span><br>|       NULL |<br>+<span class="hljs-comment">------------+</span><br>mysql&gt; SELECT 1 ^ 0;<br>+<span class="hljs-comment">-------+</span><br>| 1 ^ 0 |<br>+<span class="hljs-comment">-------+</span><br>|     1 |<br>+<span class="hljs-comment">-------+</span><br></code></pre></td></tr></table></figure></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2></li></ol><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符号</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center">&vert;</td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">取反</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td></tr></tbody></table></div><ol><li><p>按位与</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3&amp;5;<br>+<span class="hljs-comment">-----+</span><br>| 3&amp;5 |<br>+<span class="hljs-comment">-----+</span><br>|   1 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3|5;<br>+<span class="hljs-comment">-----+</span><br>| 3|5 |<br>+<span class="hljs-comment">-----+</span><br>|   7 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位异或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3^5;<br>+<span class="hljs-comment">-----+</span><br>| 3^5 |<br>+<span class="hljs-comment">-----+</span><br>|   6 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位取反</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT ~18446744073709551612;<br>+<span class="hljs-comment">-----------------------+</span><br>| ~18446744073709551612 |<br>+<span class="hljs-comment">-----------------------+</span><br>|                     3 |<br>+<span class="hljs-comment">-----------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位右移</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3&gt;&gt;1;<br>+<span class="hljs-comment">------+</span><br>| 3&gt;&gt;1 |<br>+<span class="hljs-comment">------+</span><br>|    1 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位左移</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3&lt;&lt;1;<br>+<span class="hljs-comment">------+</span><br>| 3&lt;&lt;1 |<br>+<span class="hljs-comment">------+</span><br>|    6 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2></li></ol><p>最低优先级为： <code>:=</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">优先级顺序</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">:=</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">&vert;&vert;, OR, XOR</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">&amp;&amp;, AND</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">NOT</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">BETWEEN, CASE, WHEN, THEN, ELSE</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">=, &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">&vert;</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">&amp;</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">&lt;&lt;, &gt;&gt;</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">-, +</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">*, /, DIV, %, MOD</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">^</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">- (一元减号), ~ (一元比特反转)</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">!</td></tr></tbody></table></div><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="关键字汇总"><a href="#关键字汇总" class="headerlink" title="关键字汇总"></a>关键字汇总</h2><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">关键字</th><th style="text-align:center">关键字</th></tr></thead><tbody><tr><td style="text-align:center">ADD</td><td style="text-align:center">ALL</td><td style="text-align:center">ALTER</td></tr><tr><td style="text-align:center">ANALYZE</td><td style="text-align:center">AND</td><td style="text-align:center">AS</td></tr><tr><td style="text-align:center">ASC</td><td style="text-align:center">ASENSITIVE</td><td style="text-align:center">BEFORE</td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">BIGINT</td><td style="text-align:center">BINARY</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">BOTH</td><td style="text-align:center">BY</td></tr><tr><td style="text-align:center">CALL</td><td style="text-align:center">CASCADE</td><td style="text-align:center">CASE</td></tr><tr><td style="text-align:center">CHANGE</td><td style="text-align:center">CHAR</td><td style="text-align:center">CHARACTER</td></tr><tr><td style="text-align:center">CHECK</td><td style="text-align:center">COLLATE</td><td style="text-align:center">COLUMN</td></tr><tr><td style="text-align:center">CONDITION</td><td style="text-align:center">CONNECTION</td><td style="text-align:center">CONSTRAINT</td></tr><tr><td style="text-align:center">CONTINUE</td><td style="text-align:center">CONVERT</td><td style="text-align:center">CREATE</td></tr><tr><td style="text-align:center">CROSS</td><td style="text-align:center">CURRENT_DATE</td><td style="text-align:center">CURRENT_TIME</td></tr><tr><td style="text-align:center">CURRENT_TIMESTAMP</td><td style="text-align:center">CURRENT_USER</td><td style="text-align:center">CURSOR</td></tr><tr><td style="text-align:center">DATABASE</td><td style="text-align:center">DATABASES</td><td style="text-align:center">DAY_HOUR</td></tr><tr><td style="text-align:center">DAY_MICROSECOND</td><td style="text-align:center">DAY_MINUTE</td><td style="text-align:center">DAY_SECOND</td></tr><tr><td style="text-align:center">DEC</td><td style="text-align:center">DECIMAL</td><td style="text-align:center">DECLARE</td></tr><tr><td style="text-align:center">DEFAULT</td><td style="text-align:center">DELAYED</td><td style="text-align:center">DELETE</td></tr><tr><td style="text-align:center">DESC</td><td style="text-align:center">DESCRIBE</td><td style="text-align:center">DETERMINISTIC</td></tr><tr><td style="text-align:center">DISTINCT</td><td style="text-align:center">DISTINCTROW</td><td style="text-align:center">DIV</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">DROP</td><td style="text-align:center">DUAL</td></tr><tr><td style="text-align:center">EACH</td><td style="text-align:center">ELSE</td><td style="text-align:center">ELSEIF</td></tr><tr><td style="text-align:center">ENCLOSED</td><td style="text-align:center">ESCAPED</td><td style="text-align:center">EXISTS</td></tr><tr><td style="text-align:center">EXIT</td><td style="text-align:center">EXPLAIN</td><td style="text-align:center">FALSE</td></tr><tr><td style="text-align:center">FETCH</td><td style="text-align:center">FLOAT</td><td style="text-align:center">FLOAT4</td></tr><tr><td style="text-align:center">FLOAT8</td><td style="text-align:center">FOR</td><td style="text-align:center">FORCE</td></tr><tr><td style="text-align:center">FOREIGN</td><td style="text-align:center">FROM</td><td style="text-align:center">FULLTEXT</td></tr><tr><td style="text-align:center">GOTO</td><td style="text-align:center">GRANT</td><td style="text-align:center">GROUP</td></tr><tr><td style="text-align:center">HAVING</td><td style="text-align:center">HIGH_PRIORITY</td><td style="text-align:center">HOUR_MICROSECOND</td></tr><tr><td style="text-align:center">HOUR_MINUTE</td><td style="text-align:center">HOUR_SECOND</td><td style="text-align:center">IF</td></tr><tr><td style="text-align:center">IGNORE</td><td style="text-align:center">IN</td><td style="text-align:center">INDEX</td></tr><tr><td style="text-align:center">INFILE</td><td style="text-align:center">INNER</td><td style="text-align:center">INOUT</td></tr><tr><td style="text-align:center">INSENSITIVE</td><td style="text-align:center">INSERT</td><td style="text-align:center">INT</td></tr><tr><td style="text-align:center">INT1</td><td style="text-align:center">INT2</td><td style="text-align:center">INT3</td></tr><tr><td style="text-align:center">INT4</td><td style="text-align:center">INT8</td><td style="text-align:center">INTEGER</td></tr><tr><td style="text-align:center">INTERVAL</td><td style="text-align:center">INTO</td><td style="text-align:center">IS</td></tr><tr><td style="text-align:center">ITERATE</td><td style="text-align:center">JOIN</td><td style="text-align:center">KEY</td></tr><tr><td style="text-align:center">KEYS</td><td style="text-align:center">KILL</td><td style="text-align:center">LABEL</td></tr><tr><td style="text-align:center">LEADING</td><td style="text-align:center">LEAVE</td><td style="text-align:center">LEFT</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">LIMIT</td><td style="text-align:center">LINEAR</td></tr><tr><td style="text-align:center">LINES</td><td style="text-align:center">LOAD</td><td style="text-align:center">LOCALTIME</td></tr><tr><td style="text-align:center">LOCALTIMESTAMP</td><td style="text-align:center">LOCK</td><td style="text-align:center">LONG</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">LONGTEXT</td><td style="text-align:center">LOOP</td></tr><tr><td style="text-align:center">LOW_PRIORITY</td><td style="text-align:center">MATCH</td><td style="text-align:center">MEDIUMBLOB</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">MIDDLEINT</td></tr><tr><td style="text-align:center">MINUTE_MICROSECOND</td><td style="text-align:center">MINUTE_SECOND</td><td style="text-align:center">MOD</td></tr><tr><td style="text-align:center">MODIFIES</td><td style="text-align:center">NATURAL</td><td style="text-align:center">NOT</td></tr><tr><td style="text-align:center">NO_WRITE_TO_BINLOG</td><td style="text-align:center">NULL</td><td style="text-align:center">NUMERIC</td></tr><tr><td style="text-align:center">ON</td><td style="text-align:center">OPTIMIZE</td><td style="text-align:center">OPTION</td></tr><tr><td style="text-align:center">OPTIONALLY</td><td style="text-align:center">OR ORDER</td></tr><tr><td style="text-align:center">OUT</td><td style="text-align:center">OUTER</td><td style="text-align:center">OUTFILE</td></tr><tr><td style="text-align:center">PRECISION</td><td style="text-align:center">PRIMARY</td><td style="text-align:center">PROCEDURE</td></tr><tr><td style="text-align:center">PURGE</td><td style="text-align:center">RAID0</td><td style="text-align:center">RANGE</td></tr><tr><td style="text-align:center">READ</td><td style="text-align:center">READS</td><td style="text-align:center">REAL</td></tr><tr><td style="text-align:center">REFERENCES</td><td style="text-align:center">REGEXP</td><td style="text-align:center">RELEASE</td></tr><tr><td style="text-align:center">RENAME</td><td style="text-align:center">REPEAT</td><td style="text-align:center">REPLACE</td></tr><tr><td style="text-align:center">REQUIRE</td><td style="text-align:center">RESTRICT</td><td style="text-align:center">RETURN</td></tr><tr><td style="text-align:center">REVOKE</td><td style="text-align:center">RIGHT</td><td style="text-align:center">RLIKE</td></tr><tr><td style="text-align:center">SCHEMA</td><td style="text-align:center">SCHEMAS</td><td style="text-align:center">SECOND_MICROSECOND</td></tr><tr><td style="text-align:center">SELECT</td><td style="text-align:center">SENSITIVE</td><td style="text-align:center">SEPARATOR</td></tr><tr><td style="text-align:center">SET</td><td style="text-align:center">SHOW</td><td style="text-align:center">SMALLINT</td></tr><tr><td style="text-align:center">SPATIAL</td><td style="text-align:center">SPECIFIC</td><td style="text-align:center">SQL</td></tr><tr><td style="text-align:center">SQLEXCEPTION</td><td style="text-align:center">SQLSTATE</td><td style="text-align:center">SQLWARNING</td></tr><tr><td style="text-align:center">SQL_BIG_RESULT</td><td style="text-align:center">SQL_CALC_FOUND_ROWS</td><td style="text-align:center">SQL_SMALL_RESULT</td></tr><tr><td style="text-align:center">SSL</td><td style="text-align:center">STARTING</td><td style="text-align:center">STRAIGHT_JOIN</td></tr><tr><td style="text-align:center">TABLE</td><td style="text-align:center">TERMINATED</td><td style="text-align:center">THEN</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">TINYINT</td><td style="text-align:center">TINYTEXT</td></tr><tr><td style="text-align:center">TO</td><td style="text-align:center">TRAILING</td><td style="text-align:center">TRIGGER</td></tr><tr><td style="text-align:center">TRUE</td><td style="text-align:center">UNDO</td><td style="text-align:center">UNION</td></tr><tr><td style="text-align:center">UNIQUE</td><td style="text-align:center">UNLOCK</td><td style="text-align:center">UNSIGNED</td></tr><tr><td style="text-align:center">UPDATE</td><td style="text-align:center">USAGE</td><td style="text-align:center">USE</td></tr><tr><td style="text-align:center">USING</td><td style="text-align:center">UTC_DATE</td><td style="text-align:center">UTC_TIME</td></tr><tr><td style="text-align:center">UTC_TIMESTAMP</td><td style="text-align:center">VALUES</td><td style="text-align:center">VARBINARY</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">VARCHARACTER</td><td style="text-align:center">VARYING</td></tr><tr><td style="text-align:center">WHEN</td><td style="text-align:center">WHERE</td><td style="text-align:center">WHILE</td></tr><tr><td style="text-align:center">WITH</td><td style="text-align:center">WRITE</td><td style="text-align:center">X509</td></tr><tr><td style="text-align:center">XOR</td><td style="text-align:center">YEAR_MONTH</td><td style="text-align:center">ZEROFILL</td></tr></tbody></table></div><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>在 SQL 语句中每个关键字都会按照顺序往下执行，而每一步操作，会生成一个虚拟表，最后的虚拟表就是最终结果。</p><p>基本 SQL 语句如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">(8)<span class="hljs-keyword">SELECT</span> (<span class="hljs-number">9</span>)<span class="hljs-keyword">DISTINCT</span> &lt;select_list&gt;<br>(<span class="hljs-number">1</span>)<span class="hljs-keyword">FROM</span> &lt;left_table&gt;<br>(<span class="hljs-number">3</span>) &lt;join_type&gt; <span class="hljs-keyword">JOIN</span> &lt;right_table&gt;<br>(<span class="hljs-number">2</span>)       <span class="hljs-keyword">ON</span> &lt;join_condition&gt;<br>(<span class="hljs-number">4</span>)<span class="hljs-keyword">WHERE</span> &lt;where_condition&gt;<br>(<span class="hljs-number">5</span>)<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &lt;group_by_list&gt;<br>(<span class="hljs-number">6</span>)<span class="hljs-keyword">WITH</span>&#123;<span class="hljs-keyword">CUBE</span>|<span class="hljs-keyword">ROLLUP</span>&#125;<br>(<span class="hljs-number">7</span>)<span class="hljs-keyword">HAVING</span> &lt;having_condition&gt;<br>(<span class="hljs-number">10</span>)<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &lt;order_by_list&gt;<br>(<span class="hljs-number">11</span>)<span class="hljs-keyword">LIMIT</span> &lt;limit_number&gt;<br></code></pre></td></tr></table></figure></p><p>执行顺序：</p><ol><li>FROM ： 对 <code>FROM</code> 左边的表和右边的表计算笛卡尔积，产生虚表 <code>VT1</code>；</li><li>ON ： 对虚拟表 <code>VT1</code> 进行 <code>ON</code> 筛选，只有那些符合条件的行才会被记录在虚拟表 <code>VT2</code> 中；</li><li>JOIN ：如果是 <code>OUT JOIN</code>，那么将保留表中（如左表或者右表）未匹配的行作为外部行添加到虚拟表 <code>VT2</code> 中，从而产生虚拟表 <code>VT3</code>；</li><li>WHERE ：对虚拟表 <code>VT3</code> 进行 <code>WHERE</code> 条件过滤，只有符合的记录才会被放入到虚拟表 VT4；</li><li>GROUP BY ：根据 <code>GROUP BY</code> 子句中的列，对虚拟表 <code>VT4</code> 进行分组操作，产生虚拟表 <code>VT5</code>；</li><li>CUBE | ROLLUP ：对虚拟表 <code>VT5</code> 进行 <code>CUBE</code> 或者 <code>ROLLUP</code> 操作，产生虚拟表 <code>VT6</code>；</li><li>HAVING ：对虚拟表 <code>VT6</code> 进行 <code>HAVING</code> 条件过滤，只有符合的记录才会被插入到虚拟表 <code>VT7</code> 中；</li><li>SELECT ：执行 <code>SELECT</code> 操作，选择指定的列，插入到虚拟表 <code>VT8</code> 中；</li><li>DISTINCT ：对虚拟表 <code>VT8</code> 中的记录进行去重，产生虚拟表 <code>VT9</code>；</li><li>ORDER BY ：将虚拟表 <code>VT9</code> 中的记录按照进行排序操作，产生虚拟表 <code>VT10</code>；</li><li>LIMIT ：取出指定行的记录，产生虚拟表 <code>VT11</code>，并将结果返回。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐬MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据精选清单</title>
      <link href="post/fc3d946f.html"/>
      <url>post/fc3d946f.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>精选的大数据工具、框架、资源和其他清单。</p><blockquote><p>本文翻译自：<a href="https://github.com/onurakpolat/awesome-bigdata">Awesome Big Data</a><br>灵感来自：<a href="https://github.com/ziadoz/awesome-php">awesome-php</a> &amp; <a href="https://github.com/vinta/awesome-python">awesome-python</a> &amp; <a href="https://github.com/Sdogruyol/awesome-ruby">awesome-ruby</a> &amp; <a href="http://hadoopecosystemtable.github.io/">hadoopecosystemtable</a> &amp; <a href="http://usefulstuff.io/big-data/">big-data</a></p></blockquote><h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><ul><li><a href="https://www.mysql.com/">MySQL</a> - 世界上最流行的开源数据库。</li><li><a href="https://www.postgresql.org/">PostgreSQL</a> - 世界上最先进的开源数据库。</li><li><a href="http://www.oracle.com/us/corporate/features/database-12c/index.html">Oracle Database</a> - 对象关系数据库管理系统。</li><li><a href="http://www.teradata.com/products-and-services/teradata-database/">Teradata</a> - 高性能 MPP 数据仓库平台。</li></ul><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ul><li><a href="https://github.com/facebook/bistro">Bistro</a> - 用于批处理和流分析的通用数据处理引擎。它基于一种新的数据模型，该模型通过函数来表示数据，并通过列操作来处理数据，而不仅仅使用 MapReduce 或 SQL 等传统方法来设置操作。</li><li><a href="https://www.ibm.com/analytics/us/en/technology/stream-computing/">IBM Streams</a> - 分布式处理和实时分析平台。可以和大数据生态系统中的许多流行技术（Kafka、HDFS、Spark 等）集成。</li><li><a href="http://hadoop.apache.org/">Apache Hadoop</a> - 分布式处理框架。集成了 MapReduce（并行处理）、YARN（作业调度）和 HDFS（分布式文件系统）。</li><li><a href="https://github.com/caskdata/tigon">Tigon</a> - 高吞吐的实时流处理框架。</li><li><a href="http://pachyderm.io/">Pachyderm</a> - Pachyderm 是一个基于 Docker 和 Kubernetes 的数据存储平台，可以用在重复的数据处理和分析场景。</li><li><a href="https://github.com/polyaxon/polyaxon">Polyaxon</a> - 一个可复制、可扩展的机器学习和深度学习平台。</li></ul><h1 id="分布式编程"><a href="#分布式编程" class="headerlink" title="分布式编程"></a>分布式编程</h1><ul><li><a href="https://github.com/addthis/hydra">AddThis Hydra</a> - 分布式数据处理和存储系统，最初由 AddThis 开发。</li><li><a href="http://databricks.github.io/simr/">AMPLab SIMR</a> - 在 Hadoop MapReduce v1 上运行 Spark。</li><li><a href="https://apex.apache.org/">Apache APEX</a> - 用于大数据流和批处理的统一企业平台。</li><li><a href="https://beam.apache.org/">Apache Beam</a> - 用于定义和执行数据处理工作流的统一模型和一组特定于语言的 sdk。</li><li><a href="http://crunch.apache.org/">Apache Crunch</a> - 一个简单的 Java API，用于处理 Join 和数据聚合之类的任务，这些任务在普通 MapReduce 上实现起来很繁琐。</li><li><a href="http://incubator.apache.org/projects/datafu.html">Apache DataFu</a> - 由 LinkedIn 为 Hadoop 和 Pig 开发的用户定义函数的集合。</li><li><a href="http://flink.apache.org/">Apache Flink</a> - 分布式处理引擎框架，用于在无界和有界数据流上进行有状态计算。</li><li><a href="http://gearpump.apache.org/">Apache Gearpump</a> - 基于 Akka 的实时大数据流引擎。</li><li><a href="http://gora.apache.org/">Apache Gora</a> - 内存数据模型和持久性框架。</li><li><a href="http://hama.apache.org/">Apache Hama</a> - BSP（Bulk Synchronous Parallel）计算框架。</li><li><a href="https://wiki.apache.org/hadoop/MapReduce/">Apache MapReduce</a> - 在集群上使用并行分布式算法处理大型数据集的编程模型。</li><li><a href="https://pig.apache.org/">Apache Pig</a> - 用于表达 Hadoop 数据分析程序的高级语言。</li><li><a href="http://reef.apache.org/">Apache REEF</a> - 用来简化和统一低层大数据系统的保留性评估执行框架。</li><li><a href="http://incubator.apache.org/projects/s4.html">Apache S4</a> - 一个常规用途的、分布式的、可伸缩的、容错的、可插入式的平台，主要用于处理连续的数据流。</li><li><a href="http://spark.apache.org/">Apache Spark</a> - 快速、通用的大规模数据处理引擎。</li><li><a href="https://spark.apache.org/docs/latest/streaming-programming-guide.html">Apache Spark Streaming</a> - 实时流处理引擎，属于 Spark 的一部分。</li><li><a href="http://storm.apache.org">Apache Storm</a> - Twitter 开发的，可在 YARN 上进行流处理的框架。</li><li><a href="http://samza.apache.org/">Apache Samza</a> - 基于 Kafka 和 YARN 的流处理的框架。</li><li><a href="http://tez.apache.org/">Apache Tez</a> - 基于 YARN 的，可执行复杂 DAG（有向无环图）任务的应用程序框架。</li><li><a href="https://incubator.apache.org/projects/twill.html">Apache Twill</a> - YARN 上的抽象，减少了开发分布式应用程序的复杂性。</li><li><a href="http://bigflow.cloud/en/index.html">Baidu Bigflow</a> - 一个允许编写分布式计算程序的接口，它提供了许多简单、灵活、强大的 API 来轻松处理任何规模的数据。</li><li><a href="http://cascalog.org/">Cascalog</a> - 数据处理和查询库。</li><li><a href="http://vldbarc.org/pvldb/vldb2010/pvldb_vol3/I08.pdf">Cheetah</a> - MapReduce 之上的高性能，用户自定义数据仓库。</li><li><a href="http://www.cascading.org/">Concurrent Cascading</a> - Hadoop 上的数据管理 / 分析框架。</li><li><a href="https://github.com/damballa/parkour">Damballa Parkour</a> - 为 Clojure 开发的 MapReduce 库。</li><li><a href="https://github.com/datasalt/pangool">Datasalt Pangool</a> - 可替代 MapReduce 范式。</li><li><a href="https://www.datatorrent.com/">DataTorrent StrAM</a> - 实时计算引擎，旨在以一种尽可能畅通的方式支持分布式、异步、实时的内存大数据计算，同时最小化开销和对性能的影响。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-scheduling-mapreduce-jobs-more-efficiently-with-corona/10151142560538920">Facebook Corona</a> - Hadoop 的增强，可以消除单点故障。</li><li><a href="http://peregrine_mapreduce.bitbucket.org/">Facebook Peregrine</a> - Map Reduce 框架。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920">Facebook Scuba</a> - 分布式内存数据存储。</li><li><a href="https://googledevelopers.blogspot.it/2014/06/cloud-platform-at-google-io-new-big.html">Google Dataflow</a> - 创建数据管道来帮助我们摄取、转换和分析数据。</li><li><a href="https://research.google.com/archive/mapreduce.html">Google MapReduce</a> - Map Reduce 框架。</li><li><a href="https://research.google.com/pubs/pub41378.html">Google MillWheel</a> - 容错流处理框架。</li><li><a href="https://www.ibm.com/analytics/us/en/technology/stream-computing/">IBM Streams</a> - 用于分布式处理和实时分析的平台。 提供开箱即用的高级分析工具包，如地理空间、时间序列等。</li><li><a href="https://code.google.com/p/jaql/">JAQL</a> - 声明式编程语言，用于处理结构化、半结构化和非结构化数据。</li><li><a href="http://kitesdk.org/docs/current/">Kite</a> - 一组库、工具、示例和文档，重点在于简化在 Hadoop 生态系统之上构建系统的过程。</li><li><a href="http://druid.io/">Metamarkets Druid</a> - 用于实时分析大型数据集的框架。</li><li><a href="https://github.com/Netflix/PigPen">Netflix PigPen</a> - 是 Clojure 语音的 Map-Reduce，可以编译到 Apache Pig 或者 Cascading 中。</li><li><a href="http://discoproject.org/">Nokia Disco</a> - 诺基亚开发的 MapReduce 框架。</li><li><a href="http://www.onyxplatform.org/">Onyx</a> - 云的分布式计算。</li><li><a href="https://medium.com/@Pinterest_Engineering/pinlater-an-asynchronous-job-execution-system-b8664cb8aa7d">Pinterest Pinlater</a> - 异步作业执行系统。</li><li><a href="http://crs4.github.io/pydoop/">Pydoop</a> - 用 Python 编写，并采用 MapReduce 和 HDFS 技术对 Hadoop 进行扩展的 API。</li><li><a href="https://github.com/ray-project/ray">Ray</a> - 用于构建和运行分布式应用程序的快速而简单的框架。</li><li><a href="http://blueflood.io/">Rackerlabs Blueflood</a> - 多租户分布式度量处理系统。</li><li><a href="https://github.com/skale-me/skale-engine">Skale</a> - NodeJS 上的高性能分布式数据处理框架。</li><li><a href="http://stratosphere.eu/">Stratosphere</a> - 通用集群计算框架。</li><li><a href="https://streamdrill.com/">Streamdrill</a> - Streamdrill 在计算不同时间窗口上的事件流活动非常有用，并找出最活跃的时间窗口。</li><li><a href="https://github.com/IBMStreams/streamsx.topology">streamsx.topology</a> - 用于在 Java，Python 或 Scala 中构建 IBM Streams 应用程序的库。</li><li><a href="https://github.com/UnderstandLingBV/Tuktu">Tuktu</a> - 易于使用的批处理和流式计算平台，可以使用 Scala，Akka 和 Play 构建。</li><li><a href="https://github.com/twitter/heron">Twitter Heron</a> - 由 Twitter 开发的一个实时、分布式、容错的流处理引擎，主要用于代替 Storm。</li><li><a href="https://github.com/twitter/scalding">Twitter Scalding</a> - 用于 Map Reduce 作业的 Scala 库，基于 Cascading 构建。</li><li><a href="https://github.com/twitter/summingbird">Twitter Summingbird</a> - Summingbird 是一个类库，它允许我们编写看起来像原生 Scala 或 Java 集合转换的 MapReduce 程序，并在许多着名的分布式 MapReduce 平台上执行，包括 Storm 和 Scalding，由 Twitter 开发。</li><li><a href="https://blog.twitter.com/engineering/en_us/a/2014/tsar-a-timeseries-aggregator.html">Twitter TSAR</a> - Twitter 开发的时间序列聚合器。</li><li><a href="http://www.wallaroolabs.com/community">Wallaroo</a> - 超快弹性数据处理引擎，可以使有状态、分析、流处理和事件驱动的 AI 应用程序能够快速投入生产，而无需考虑规模。它为开发人员提供了几种语言的 API 来实现他们的自定义业务逻辑。</li></ul><h1 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h1><ul><li><a href="https://github.com/linkedin/ambry">Ambry</a> - 分布式对象存储，支持存储数万亿个小的不可变对象或者数十亿个大对象。</li><li><a href="http://hadoop.apache.org/">Apache HDFS</a> - 提供对应用程序数据的高吞吐量访问的分布式文件系统。</li><li><a href="http://kudu.apache.org/">Apache Kudu</a> - Hadoop 的存储层可实现对数据的快速分析。</li><li><a href="https://www.beegfs.io/content/">BeeGFS</a> - 之前称为 FhGFS，是一种并行分布式文件系统。</li><li><a href="http://ceph.com/ceph-storage/file-system/">Ceph Filesystem</a> -一个支持POSIX接口的文件系统。</li><li><a href="http://disco.readthedocs.org/en/latest/howto/ddfs.html">Disco DDFS</a> - 分布式文件系统。</li><li><a href="https://www.facebook.com/note.php?note_id=76191543919">Facebook Haystack</a> - 对象存储系统。</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">Google GFS</a> - 分布式文件系统。</li><li><a href="http://static.googleusercontent.com/media/research.google.reverse-proxy.org/en/us/university/relations/facultysummit2010/storage_architecture_and_challenges.pdf">Google Colossus</a> - 分布式文件系统（GFS2）。</li><li><a href="https://research.google.com/pubs/pub36971.html">Google Megastore</a> - 可扩展、高可用的存储。</li><li><a href="https://www.gridgain.com/">GridGain</a> - GGFS，Hadoop 兼容的内存文件系统。</li><li><a href="http://wiki.lustre.org/">Lustre file system</a> - 高性能分布式文件系统。</li><li><a href="https://hadoop.apache.org/docs/current/hadoop-azure-datalake/index.html">Microsoft Azure Data Lake Store</a> - Azure 上兼容 HDFS 的存储。</li><li><a href="https://www.quantcast.com/about-us/quantcast-file-system/">Quantcast File System QFS</a> - 开源分布式文件系统。</li><li><a href="http://gluster.org/">Red Hat GlusterFS</a> - 横向扩展网络附加的存储文件系统。</li><li><a href="https://github.com/chrislusf/seaweedfs">Seaweed-FS</a> - 简单且高度可伸缩的分布式文件系统。</li><li><a href="http://www.alluxio.org/">Alluxio</a> - 开源的基于内存的分布式存储系统。</li><li><a href="https://www.tahoe-lafs.org/trac/tahoe-lafs">Tahoe-LAFS</a> - 去中心化的云存储系统。</li><li><a href="https://github.com/baidu/bfs">Baidu File System</a> - 分布式文件系统。</li></ul><h1 id="分布式索引"><a href="#分布式索引" class="headerlink" title="分布式索引"></a>分布式索引</h1><ul><li><a href="https://github.com/pilosa/pilosa">Pilosa</a> - 开源的分布式位图索引，极大地加速了跨多个大规模数据集的查询。</li></ul><h1 id="文档数据模型"><a href="#文档数据模型" class="headerlink" title="文档数据模型"></a>文档数据模型</h1><ul><li><a href="https://www.actian.com/data-management/ingres-sql-rdbms/">Actian Versant</a> - 面向对象的商业数据库管理系统。</li><li><a href="https://crate.io/">Crate Data</a> - 是一个开源的大规模可扩展数据存储，它不需要任何管理。</li><li><a href="http://www.infoq.com/news/2014/06/facebook-apollo">Facebook Apollo</a> - Facebook 的类似于 Paxos 的 NoSQL 数据库。</li><li><a href="http://comsysto.github.io/jumbodb/">jumboDB</a> - 基于 Hadoop 的面向文档的数据存储。</li><li><a href="https://engineering.linkedin.com/data">LinkedIn Espresso</a> - 可水平扩展的面向文档 NoSQL 数据存储。</li><li><a href="http://www.marklogic.com/">MarkLogic</a> - 模式无关的企业 NoSQL 数据库技术。</li><li><a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Microsoft Azure DocumentDB</a> - NoSQL 云数据库服务，支持 MongoDB 协议</li><li><a href="https://www.mongodb.com/">MongoDB</a> - 面向文档的数据库系统。</li><li><a href="https://ravendb.net/">RavenDB</a> - 支持事务的开源文档数据库。</li><li><a href="https://rethinkdb.com/">RethinkDB</a> - 支持表 join 和 group by 等查询的文档数据库。</li></ul><h1 id="Key-Map-数据模型"><a href="#Key-Map-数据模型" class="headerlink" title="Key Map 数据模型"></a>Key Map 数据模型</h1><p><strong>注意</strong>: 业界存在一些术语混淆，存在两种不同的东西被称为“列式数据库”。这里列出的一些是围绕“键 - 映射”数据模型构建的分布式持久性数据库：所有数据都有一个(可能是组合的)键，键值对的映射与之关联。在某些系统中，多个这样的值映射可以与一个键关联，这些映射称为“列族”(值映射键称为“列”)。</p><p>另一种也称为“列式数据库”的技术，特点是它在磁盘或内存中如何存储数据。这些系统将所有行的相同列值数据存储在一起。因此，需要做更多的工作来获得给定键的所有列，但是需要更少的工作来获得给定列的所有值。</p><p>前一种在这里称为“键映射数据模型”。这些和 <a href="#Key-value-数据模型">Key-value 数据模型</a> 存储之间的界限相当模糊。</p><p>后者更多地是关于存储格式而不是数据模型，这些数据库我们把它归到 <a href="#列式数据库">列式数据库</a> 里面去了。</p><p>你可以到 Prof. Daniel Abadi 的博文：<a href="http://dbmsmusings.blogspot.com/2010/03/distinguishing-two-major-types-of_29.html">Distinguishing two major types of Column Stores</a>。</p><ul><li><a href="http://accumulo.apache.org/">Apache Accumulo</a> - 构建在 Hadoop 之上的分布式键值存储系统。</li><li><a href="http://cassandra.apache.org/">Apache Cassandra</a> - 受 BigTable 启发的、面向列的分布式数据存储。</li><li><a href="http://hbase.apache.org/">Apache HBase</a> - 受 BigTable 启发的、面向列的分布式数据存储。</li><li><a href="https://github.com/baidu/tera">Baidu Tera</a> - 受 BigTable 启发的一种大型分布式表格存储系统，具有高性能、可伸缩等存储特点，最初的设计是为了管理万亿量级的超链和网页信息。</li><li><a href="https://code.facebook.com/posts/321111638043166/hydrabase-the-evolution-of-hbase-facebook/">Facebook HydraBase</a> - 由 Facebook 开发的 HBase 演化版本。</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf">Google BigTable</a> - 面向列的分布式数据存储。</li><li><a href="https://cloud.google.com/datastore/docs/concepts/overview">Google Cloud Datastore</a> - 一个完全托管的无模式数据库，用于在 BigTable 上存储非关系数据。</li><li><a href="http://www.hypertable.org/">Hypertable</a> - 受 BigTable 启发的、面向列的分布式数据存储。</li><li><a href="https://github.com/infinidb/infinidb/">InfiniDB</a> - 通过MySQL接口访问，并使用大规模并行处理来并行化查询。</li><li><a href="https://github.com/caskdata/tephra">Tephra</a> - 使 HBase 支持事务</li><li><a href="https://blog.twitter.com/engineering/en_us/a/2014/manhattan-our-real-time-multi-tenant-distributed-database-for-twitter-scale.html">Twitter Manhattan</a> - Twitter 开发的实时、多租户分布式数据库。</li><li><a href="http://www.scylladb.com/">ScyllaDB</a> - 使用 C++ 编写的面向列的分布式数据存储，完全兼容 Apache Cassandra。</li></ul><h1 id="Key-value-数据模型"><a href="#Key-value-数据模型" class="headerlink" title="Key-value 数据模型"></a>Key-value 数据模型</h1><ul><li><a href="http://www.aerospike.com/">Aerospike</a> - 一个分布式，高可用的 K-V 类型的 NOSQL 数据库。提供类似传统数据库的ACID操作。</li><li><a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a> - 分布式 key/value 存储，Dynamo 论文的实现。</li><li><a href="https://open.dgraph.io/post/badger/">Badger</a> - 一个快速、简单、高效和持久的键值存储，是用 Go 编写。</li><li><a href="https://github.com/boltdb/bolt">Bolt</a> - 可在 Go 语言中使用的嵌入式键值数据库。</li><li><a href="https://github.com/Bobris/BTDB">BTDB</a> - .Net 中的 Key Value 数据库，包含 Object DB Layer，RPC，dynamic IL 等等。</li><li><a href="https://github.com/tidwall/buntdb">BuntDB</a> - Go 语言的一个快速，可嵌入，基于内存的 key/value 数据库，支持自定义索引和地理空间。</li><li><a href="https://github.com/cbd/edis">Edis</a> - 协议兼容 Redis 的数据库，可替代 Redis。</li><li><a href="https://github.com/nathanmarz/elephantdb">ElephantDB</a> - 专门用于从 Hadoop 导出数据的分布式数据库。</li><li><a href="https://geteventstore.com/">EventStore</a> - 分布式时间序列数据库。</li><li><a href="https://github.com/griddb/griddb_nosql">GridDB</a> - 一款高度可扩展的 NoSQL 数据库，非常适用于物联网和大数据领域，还具有高可靠性和高性能这些特性。</li><li><a href="https://github.com/rescrv/HyperDex">HyperDex</a> - 可扩展的下一代键值和文档存储，具有多种功能，包括一致性，容错性和高性能。</li><li><a href="https://ignite.apache.org/index.html">Ignite</a> - 分布式内存网格数据库，具有可持久化，分布式事务，分布式计算等特点，此外还支持丰富的键值存储以及SQL语法。</li><li><a href="https://github.com/linkedin-sna/sna-page/tree/master/krati">LinkedIn Krati</a> - 一个简单的持久化数据存储，具有非常低的延迟和高吞吐量。</li><li><a href="http://www.project-voldemort.com/voldemort/">Linkedin Voldemort</a> - 分布式 key/value 存储系统。</li><li><a href="http://www.oracle.com/technetwork/database/database-technologies/nosqldb/overview/index.html">Oracle NoSQL Database</a> - Oracle 公司开发的分布式 key/value 存储系统。</li><li><a href="https://redis.io/">Redis</a> - 一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</li><li><a href="https://github.com/basho/riak">Riak</a> - 去中心化的数据库存储。</li><li><a href="https://github.com/twitter/storehaus">Storehaus</a> - Twitter 开发的用于异步 key/value 存储的类库。</li><li><a href="https://github.com/tidwall/summitdb">SummitDB</a> - 基于内存的 NoSQL 键/值数据库，具有磁盘持久性，并支持 Raft 一致性算法。</li><li><a href="https://github.com/tarantool/tarantool">Tarantool</a> - 一个高效的 NoSQL 数据库和一个 Lua 应用服务器。</li><li><a href="https://github.com/pingcap/tikv">TiKV</a> - 一个基于 Rust 的分布式键值数据库，并受谷歌 Spanner 和 HBase 的启发。</li><li><a href="https://github.com/tidwall/tile38">Tile38</a> - 具有空间索引和实时地理围栏的地理位置数据库。支持各种对象类型，包括纬度/经度点，边界框，XYZ切片，Geohashes 和 GeoJSON。</li><li><a href="https://github.com/Treode/store">TreodeDB</a> - key-value 存储，支持数据副本、分片以及提供原子多行写。</li></ul><h1 id="图数据模型"><a href="#图数据模型" class="headerlink" title="图数据模型"></a>图数据模型</h1><ul><li><a href="http://www.agensgraph.com/">AgensGraph</a> - 基于 PostgreSQL 的新一代多模型图数据库。</li><li><a href="http://giraph.apache.org/">Apache Giraph</a> - 一个可伸缩的分布式迭代图处理系统，基于 Hadoop 平台，灵感来自 BSP (bulk synchronous parallel) 和 Google 的 Pregel。</li><li><a href="http://spark.apache.org/docs/0.7.3/bagel-programming-guide.html">Apache Spark Bagel</a> - Bagel 是谷歌 Pregel 图处理框架的 Spark 实现，支持基本的图形计算、组合器（combiners）和聚合器（aggregators）。目前已经被 GraphX 替代，在 Spark 2.0.0 版本已经被移除。</li><li><a href="https://www.arangodb.com/">ArangoDB</a> - 多模型分布式数据库。</li><li><a href="https://github.com/dgraph-io/dgraph">DGraph</a> - 一个可伸缩的、分布式的、低延迟的、高吞吐量的图数据库，旨在提供谷歌生产级别的规模和吞吐量，具有足够低的延迟，可以在 TB 级的结构化数据上为实时用户查询提供服务。</li><li><a href="https://github.com/krotik/eliasdb">EliasDB</a> - 一个轻量级的基于图的数据库，不需要任何第三方库。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/tao-the-power-of-the-graph/10151525983993920">Facebook TAO</a> - TAO 是 Facebook 广泛使用的分布式数据存储，用于存储和服务社交图。</li><li><a href="https://github.com/gchq/Gaffer">GCHQ Gaffer</a> - Gaffer 是 GCHQ（英国政府通讯总部）于 2015 年 12 月 14 日在 GitHub 上公布的第一个开源项目，Gaffer 是个大规模图形数据库，可以方便存储大规模图的框架，节点和边界有数据统计，比如计数，直方图和草图。这些统计数据是时间窗口的节点和边界属性，可以根据时间动态更新。</li><li><a href="https://github.com/cayleygraph/cayley">Google Cayley</a> - 开源的图数据库。</li><li><a href="http://kowshik.github.io/JPregel/pregel_paper.pdf">Google Pregel</a> - 图处理框架。</li><li><a href="https://turi.com/products/create/docs/">GraphLab PowerGraph</a> - 包含 C++ 实现的 GraphLab API 以及一组基于GraphLab API 构建的高性能机器学习和数据挖掘工具包。</li><li><a href="https://amplab.cs.berkeley.edu/publication/graphx-grades/">GraphX</a> - 一个分布式图处理框架，它是基于 Spark 平台提供对图计算和图挖掘简洁易用的而丰富的接口，极大的方便了对分布式图处理的需求。</li><li><a href="https://github.com/tinkerpop/gremlin">Gremlin</a> - 图遍历语言。</li><li><a href="https://github.com/paulhoule/infovore">Infovore</a> - 一个 Map/Reduce 框架，用来处理大量的 RDF 数据集，注入 Freebase 和 DBpedia，基于 Hadoop 构建。</li><li><a href="https://01.org/graphbuilder/">Intel GraphBuilder</a> - 基于 Hadoop 构造的大型图工具。</li><li><a href="http://janusgraph.org">JanusGraph</a> - 开源分布式图形数据库，后端存储可以选择多种组件包括 Bigtable、HBase、Cassandra 等，同时索引后端也可以选择很多种，包括 Elasticsearch、Solr、Lucene 等。</li><li><a href="https://www.blazegraph.com/mapgraph-technology/">MapGraph</a> - 一个高级的 API 用于快速开发基于 GPU 的高性能图形分析应用。</li><li><a href="https://github.com/Microsoft/GraphEngine">Microsoft Graph Engine</a> - 一个基于内存的分布式大规模图数据处理引擎，能够帮助用户更方便地构建实时查询应用和高吞吐量离线分析平台。在此之前，它在学术界更广为人之的名称是 Trinity。</li><li><a href="https://neo4j.com/">Neo4j</a> - 一个高性能的 NOSQL图数据库，完全由 Java 实现。</li><li><a href="http://orientdb.com/">OrientDB</a> - 文档图形数据库。</li><li><a href="https://github.com/xslogic/phoebus">Phoebus</a> - 大型图处理框架。</li><li><a href="http://thinkaurelius.github.io/titan/">Titan</a> - 建立在 Cassandra 之上的分布式图数据库。</li><li><a href="https://github.com/twitter-archive/flockdb">Twitter FlockDB</a> - 分布式图数据库。</li><li><a href="https://nodexl.codeplex.com/">NodeXL</a> - Microsoft® Excel® 2007，2010，2013 和 2016 免费开源的模板，可以很容易的探索网络图。</li></ul><h1 id="列式数据库"><a href="#列式数据库" class="headerlink" title="列式数据库"></a>列式数据库</h1><p><strong>注意</strong>：请读一下 <a href="#Key-value-数据模型">Key-value 数据模型</a> 章节的说明。</p><ul><li><a href="http://the-paper-trail.org/blog/columnar-storage/">Columnar Storage</a> - 解释什么是列式存储，以及我们什么时候需要它。</li><li><a href="http://www.actian.com/">Actian Vector</a> - 面向列的分析数据库。</li><li><a href="http://db.lcs.mit.edu/projects/cstore/">C-Store</a> - 面向列的 DBMS。</li><li><a href="https://clickhouse.yandex/">ClickHouse</a> - 一个开源的列式数据库（DBMS），主要用于在线分析处理查询（OLAP）。</li><li><a href="http://eventql.io/">EventQL</a> - 为大规模事件收集和分析而构建的分布式、面向列的数据库。</li><li><a href="https://www.monetdb.org/">MonetDB</a> - 列式存储数据库。</li><li><a href="http://parquet.apache.org/">Parquet</a> - 灵感来自于2010年 Google 发表的 Dremel 论文，是一种列式存储格式，与语言、平台无关，并且不需要和任何一种数据处理框架绑定。</li><li><a href="https://pivotal.io/pivotal-greenplum">Pivotal Greenplum</a> - 为特定目的而构建的专用分析数据仓库，它提供了一个列式存储引擎和一个传统的基于行的引擎。</li><li><a href="https://www.vertica.com/">Vertica</a> - 设计用于管理大量快速增长的数据，提供非常快的查询性能。</li><li><a href="http://sqream.com/">SQream DB</a> - 以色列大数据公司开发的跑在 GPU 上的大数据数据库，设计用于分析和数据仓库，使用 ANSI-92 SQL，适用于10TB到1PB的数据集。</li><li><a href="https://cloud.google.com/bigquery/what-is-bigquery">Google BigQuery</a> - Google 推出的一项 Web 服务，该服务让开发者可以使用 Google 的架构来运行 SQL 语句对超级大的数据库进行操作。</li><li><a href="https://aws.amazon.com/redshift/">Amazon Redshift</a> - 一个支持 SQL 查询的、快速、可扩展的列式存储数据库，它支持 PB 级的数量查询，是适用于企业级的数据仓库。</li><li><a href="https://github.com/shunfei/indexr">IndexR</a> - 一个开源的大数据存储格式，于 2017 年 1 月初正式开源，旨在通过添加索引、优化编码方式、提高 IO 效率等各种优化方式来提高计算层和存储层的数据交换效率，从而提升整体性能。</li><li><a href="https://github.com/cswinter/LocustDB">LocustDB</a> - 一个大规模并行且高性能的分析数据库 (Analytics Database)，可快速处理你的所有数据，目前处于实验性阶段。</li></ul><h1 id="NewSQL-数据库"><a href="#NewSQL-数据库" class="headerlink" title="NewSQL 数据库"></a>NewSQL 数据库</h1><ul><li><a href="http://www.actian.com/products/operational-databases/">Actian Ingres</a> - 商业支持，开源 SQL 关系数据库管理系统。</li><li><a href="https://github.com/biokoda/actordb">ActorDB</a> - 分布式的 SQL 数据库，可实现可伸缩的 K/V 存储系统。ActorDB 基于 Actor 计算模型，与传统的集中式数据库不同，ActorDB 由任意数量的被成为 actor 的独立和并发 SQL 数据库组成。</li><li><a href="http://aws.amazon.com/redshift/">Amazon RedShift</a> - 基于 PostgreSQL 的数据仓库服务。</li><li><a href="https://github.com/probcomp/BayesDB">BayesDB</a> - 一个贝叶斯数据库，内建贝叶斯查询语言 BQL，用户无需统计方面知识即可解决一些基本的科学数据问题</li><li><a href="http://bedrockdb.com/">Bedrock</a> - 构建在 SQLite 之上的简单、模块化、网络化、分布式事务层。</li><li><a href="https://www.citusdata.com/">CitusDB</a> - 通过分片和副本扩展 PostgreSQL。</li><li><a href="https://github.com/cockroachdb/cockroach">Cockroach</a> - 可伸缩、地理复制、事务性数据存储。</li><li><a href="https://github.com/bloomberg/comdb2">Comdb2</a> - 一个基于乐观并发控制技术的集群 RDBMS。</li><li><a href="http://www.datomic.com/">Datomic</a> - 分布式数据库旨在支持可伸缩、灵活和智能的应用程序。</li><li><a href="https://foundationdb.com/">FoundationDB</a> - 分布式数据库，受 F1 启发。</li><li><a href="https://research.google.com/pubs/pub41344.html">Google F1</a> - 构建在 Spanner 之上的分布式 SQL 数据库。</li><li><a href="https://research.google.com/archive/spanner.html">Google Spanner</a> - Google的全球级的分布式数据库，具有可扩展，多版本，全球分布式、同步复制等特性。</li><li><a href="http://hstore.cs.brown.edu/">H-Store</a> - 一个实验性的数据库管理系统。它专为驻线交易处理应用程序（OLTP）而设计。</li><li><a href="https://github.com/VCNC/haeinsa">Haeinsa</a> - Haeinsa 是 HBase 可线性扩展的多行，多表事务库。使用两阶段锁定和乐观并发控制来实现事务。 事务的隔离级别是可序列化的。基于 Percolator 实现。</li><li><a href="https://www.percona.com/doc/percona-server/5.5/performance/handlersocket.html">HandlerSocket</a> - MySQL/MariaDB 的 NoSQL 插件。</li><li><a href="http://www.infinisql.org/">InfiniSQL</a> - 无限扩展的 RDBMS.</li><li><a href="https://github.com/rayokota/kareldb">KarelDB</a> - 由 Apache Kafka 支持的关系数据库。</li><li><a href="https://www.mapd.com/">Map-D</a> - GPU 内存数据库，大数据分析可视化平台。</li><li><a href="http://www.memsql.com/">MemSQL</a> - 一款内存数据库，它通过将数据存在内存中，将 SQL 语句预编译为 C++ 而获得极速执行效率。</li><li><a href="http://www.nuodb.com/">NuoDB</a> - 符合 SQL/ACID 的分布式数据库。</li><li><a href="http://www.oracle.com/technetwork/database/database-technologies/timesten/overview/index.html">Oracle TimesTen in-Memory Database</a> - 基于内存的关系数据库管理系统，具有持久性和可恢复性。</li><li><a href="http://gemfirexd.docs.pivotal.io/latest/">Pivotal GemFire XD</a> - 低延迟、基于内存、分布式 SQL 数据存储。为内存表数据提供 SQL 接口，可在 HDFS 中持久存储。</li><li><a href="https://hana.sap.com/abouthana.html">SAP HANA</a> - 基于内存、面向列、关系数据库管理系统。</li><li><a href="http://senseidb.github.io/sensei/">SenseiDB</a> - 分布式、实时、半结构化的数据库。</li><li><a href="http://skydb.io/">Sky</a> - 用于灵活、高性能的行为数据分析的数据库。</li><li><a href="http://www.symmetricds.org/">SymmetricDS</a> - 用于文件和数据库同步的开源软件。</li><li><a href="https://github.com/pingcap/tidb">TiDB</a> - 一款定位于在线事务处理/在线分析处理的融合型数据库产品，实现了一键水平伸缩，强一致性的多副本数据安全，分布式事务，实时 OLAP 等重要特性。受 Google F1 启发。</li><li><a href="https://www.voltdb.com/">VoltDB</a> - 声称是最快的内存数据库。</li><li><a href="https://github.com/YugaByte/yugabyte-db">yugabyteDB</a> - 与 PostgreSQL 兼容的开源，高性能，分布式SQL数据库。</li></ul><h1 id="时间序列数据库"><a href="#时间序列数据库" class="headerlink" title="时间序列数据库"></a>时间序列数据库</h1><ul><li><a href="http://axibase.com/products/axibase-time-series-database/">Axibase Time Series Database</a> - 基于 HBase 的时间序列数据库，内置可视化、规则引擎和 SQL 支持。</li><li><a href="http://chronix.io/">Chronix</a> - 一种时间序列存储器，用于存储高度压缩的时间序列，并支持快速访问数据。</li><li><a href="http://square.github.io/cube/">Cube</a> - 使用 MongoDB 来存储时间序列数据。</li><li><a href="https://spotify.github.io/heroic/#!/index">Heroic</a> - 基于 Cassandra 和 Elasticsearch 的可扩展时间序列数据库。</li><li><a href="https://www.influxdata.com/">InfluxDB</a> - 分布式时间序列数据库。</li><li><a href="https://www.circonus.com/irondb/">IronDB</a> - 可扩展、通用时间序列数据库。</li><li><a href="https://github.com/kairosdb/kairosdb">Kairosdb</a> - 和 OpenTSDB 类似，但是构建在 Cassandra 之上。</li><li><a href="http://m3db.github.io/m3/m3db/">M3DB</a> - 一个分布式时间序列数据库，可用于长期存储实时指标。</li><li><a href="https://opennms.github.io/newts/">Newts</a> - 基于 Apache Cassandra 的时间序列数据库。</li><li><a href="https://github.com/taosdata/TDengine/">TDengine</a> - 使用 IoT 的独特功能的 C 语言中的时间序列数据库，以提高读 / 写吞吐量并减少存储数据所需的空间。</li><li><a href="http://opentsdb.net">OpenTSDB</a> - 构建在 HBase 之上的分布式时间序列数据库。</li><li><a href="https://prometheus.io/">Prometheus</a> - 时间序列数据库和服务监控系统。</li><li><a href="https://github.com/facebookincubator/beringei">Beringei</a> - Facebook 的内存时间序列数据库。</li><li><a href="http://traildb.io/">TrailDB</a> - 用于存储和查询一系列事件的有效工具。</li><li><a href="https://github.com/druid-io/druid/">Druid</a> - MetaMarket 公司研发，专为海量数据集上的做高性能 OLAP (OnLine Analysis Processing)而设计的数据存储和分析系统</li><li><a href="http://basho.com/products/riak-ts/">Riak-TS</a> - 唯一专为物联网和时间序列数据优化的企业级 NoSQL 时间序列数据库。</li><li><a href="https://github.com/akumuli/Akumuli">Akumuli</a> - 一个数值型时间序列数据库，可以存储、处理时序列数据。</li><li><a href="https://github.com/Pardot/Rhombus">Rhombus</a> - ACassandra 的时间序列对象存储。</li><li><a href="https://github.com/dalmatinerdb/dalmatinerdb">Dalmatiner DB</a> - 快速分布式度量数据库</li><li><a href="https://github.com/rackerlabs/blueflood">Blueflood</a> - 一种用于摄取和处理时间序列数据的分布式系统。</li><li><a href="https://github.com/NationalSecurityAgency/timely">Timely</a> - 一个时间序列数据库应用程序，它提供了基于 Accumulo 和 Grafana 的对时间序列数据的安全访问。</li><li><a href="https://github.com/transceptor-technology/siridb-server">SiriDB</a> - 具有集群功能的高扩展性、健壮性和快速的开源时间序列数据库。</li><li><a href="https://github.com/improbable-eng/thanos">Thanos</a> - 一组组件，可以使用多个 Prometheus 部署创建具有无限存储容量的高可用度量系统。</li><li><a href="https://github.com/VictoriaMetrics/VictoriaMetrics">VictoriaMetrics</a> - 与 Prometheus 兼容的快速，可扩展的开源 TSDB，包括单节点和群集版本。</li></ul><h1 id="类-SQL-处理系统"><a href="#类-SQL-处理系统" class="headerlink" title="类 SQL 处理系统"></a>类 SQL 处理系统</h1><ul><li><a href="http://www.actian.com/analytic-database/vectorh-sql-hadoop">Actian SQL for Hadoop</a> - 高性能交互式 SQL，可以利用它访问 Hadoop 上的数据。</li><li><a href="http://drill.apache.org/">Apache Drill</a> - 一个低延迟的分布式海量数据交互式查询引擎，使用 ANSI SQL 兼容语法，本质上是一个分布式的 MPP 查询层。目的在于支持更广泛的数据源，数据格式，以及查询语言。受 Google的Dremel 启发。</li><li><a href="https://cwiki.apache.org/confluence/display/Hive/HCatalog">Apache HCatalog</a> - Hadoop 的表存储管理工具。</li><li><a href="http://hive.apache.org/">Apache Hive</a> - 基于 Hadoop 的一个数据仓库工具，可以将结构化数据文件映射为一张数据库表，并提供类 SQL 查询功能。</li><li><a href="http://calcite.apache.org/">Apache Calcite</a> - 一款开源 SQL 解析工具，可以将各种 SQL 语句解析成抽象语法术AST(Abstract Syntax Tree)，之后通过操作 AST 就可以把 SQL 中所要表达的算法与关系体现在具体代码之中。</li><li><a href="http://phoenix.apache.org/index.html">Apache Phoenix</a> - 构建在 HBase 之上的关系型数据库层，可以对 HBase 中的数据进行低延迟访问。</li><li><a href="http://www.teradata.com/products-and-services/Teradata-Aster/teradata-aster-database">Aster Database</a> - 类 SQL 分析处理。</li><li><a href="https://www.cloudera.com/products/apache-hadoop/impala.html">Cloudera Impala</a> - 实时交互 SQL 大数据查询工具，受 Dremel 启发。</li><li><a href="http://www.cascading.org/projects/lingual/">Concurrent Lingual</a> - Cascading 上的 SQL 查询语言。</li><li><a href="http://www.datasalt.com/products/splout-sql/">Datasalt Splout SQL</a> - 针对大数据集的完整 SQL 查询引擎。</li><li><a href="https://www.dremio.com/">Dremio</a> - 一个基于Apache Arrow的开源，类似SQL的数据服务平台。</li><li><a href="https://prestodb.io/">Facebook PrestoDB</a> - 分布式 SQL 查询引擎。</li><li><a href="https://research.google.com/pubs/pub36632.html">Google BigQuery</a> - Google 推出的一项 Web 服务，该服务让开发者可以使用 Google 的架构来运行 SQL 语句对超级大的数据库进行操作，是 Dremel 的实现。</li><li><a href="https://www.pipelinedb.com/">PipelineDB</a> - 一个开源的关系数据库，它可以在实时流数据上执行 SQL 查询，并将结果增量地存储在表中。</li><li><a href="https://pivotal.io/pivotal-hdb">Pivotal HDB</a> - Hadoop 上的类 SQL 数据仓库系统。</li><li><a href="http://rainstor.com/products/rainstor-database/">RainstorDB</a> - 用于存储 PB 级结构化和半结构化数据量的数据库。</li><li><a href="https://github.com/apache/spark/tree/master/sql">Spark Catalyst</a> - Apache Spark 的查询优化框架。</li><li><a href="https://databricks.com/blog/2014/03/26/spark-sql-manipulating-structured-data-using-spark-2.html">SparkSQL</a> - 使用 Spark 操作结构化的数据。</li><li><a href="https://www.splicemachine.com/">Splice Machine</a> - 兼具了 SQL 和 NoSQL 的各自优势，且能对操作型和分析型应用进行实时处理，具有 ACID 特性。</li><li><a href="https://hortonworks.com/innovation/stinger/">Stinger</a> - 由 Hortonworks 开发的一个彻底提升 Hive 效率的工具。</li><li><a href="http://tajo.apache.org/">Tajo</a> - Hadoop 之上的分布式数据仓库系统。</li><li><a href="https://wiki.trafodion.org/wiki/index.php/Main_Page">Trafodion</a> - 由惠普开发并开源的基于 Hadoop 平台的事务数据库引擎。提供了一个基于 Hadoop 平台的交易型 SQL 引擎，是一个擅长处理交易型负载的 Hadoop 大数据解决方案。</li></ul><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><ul><li><a href="https://aws.amazon.com/kinesis/">Amazon Kinesis</a> - 一种在 AWS 上流式处理数据的平台，让您可以轻松地加载和分析流数据，同时还可让您根据具体需求来构建自定义流数据应用程序。</li><li><a href="https://aws.amazon.com/glue/">Amazon Web Services Glue</a> -  一项完全托管的提取、转换和加载（ETL）服务，让用户能够轻松准备和加载数据进行分析。</li><li><a href="http://chukwa.apache.org/">Apache Chukwa</a> - 数据采集系统。</li><li><a href="http://flume.apache.org/">Apache Flume</a> - 一个分布式的、可靠的、易用的系统，可以有效地将来自很多不同源系统的大量日志数据收集、汇总或者转移到一个数据中心存储。</li><li><a href="http://kafka.apache.org/">Apache Kafka</a> - 分布式发布订阅消息系统。</li><li><a href="https://nifi.apache.org/">Apache NiFi</a> - 一个易用、强大、可靠的数据处理与分发系统</li><li><a href="http://sqoop.apache.org/">Apache Sqoop</a> - 一款开源的工具，主要用于在 Hadoop/Hive 与传统的数据库（MySQL、Oracle...）间进行数据的传递</li><li><a href="http://www.embulk.org">Embulk</a> - 开源的批量数据加载器，帮助在各种数据库、存储、文件格式和云服务之间传输数据。</li><li><a href="https://github.com/facebookarchive/scribe">Facebook Scribe</a> - 流日志数据聚合器。</li><li><a href="http://www.fluentd.org">Fluentd</a> - 用于收集事件和日志的工具。</li><li><a href="https://research.google.com/pubs/pub41318.html">Google Photon</a> - 地理分布式系统，用于实时连接多个连续流动的数据流，具有高可伸缩性和低延迟。</li><li><a href="https://github.com/mozilla-services/heka">Heka</a> - 开源流处理系统。</li><li><a href="https://github.com/sonalgoyal/hiho">HIHO</a> - 用于将不同数据源的数据和 Hadoop 进行连接的框架。</li><li><a href="https://github.com/papertrail/kestrel">Kestrel</a> - 分布式消息队列系统。</li><li><a href="https://engineering.linkedin.com/data">LinkedIn Databus</a> - LinkedIn 开源的一个低延迟、可靠的、支持事务的、保持一致性的数据变更抓取系统。</li><li><a href="https://github.com/linkedin/kamikaze">LinkedIn Kamikaze</a> - 一种实用工具包，对 document lists 提供一系列的实现。</li><li><a href="https://github.com/linkedin/white-elephant">LinkedIn White Elephant</a> - 一个 Hadoop 日志收集器和展示器，它提供了用户角度的 Hadoop 集群可视化。</li><li><a href="https://www.elastic.co/products/logstash">Logstash</a> - 一个开源的日志收集管理工具，可以采集来自不同数据源的数据，并对数据进行处理后输出到多种输出源。</li><li><a href="https://github.com/Netflix/suro">Netflix Suro</a> - Netflix 开源的一款工具，它能够在数据被发送到不同的数据平台（如 Hadoop、Elasticsearch）之前，收集不同应用服务器上的事件数据。</li><li><a href="https://github.com/pinterest/secor">Pinterest Secor</a> - 实现 Kafka 日志持久性的服务</li><li><a href="https://github.com/linkedin/gobblin">Linkedin Gobblin</a> - 一套分布式数据集成框架，旨在简化大数据集成工作当中的各类常见任务，具体包括数据流与批量生态系统的提取、复制、组织与生命周期管理。</li><li><a href="https://github.com/skizzehq/skizze">Skizze</a> - 一种概率数据结构服务和存储。</li><li><a href="https://github.com/streamsets/datacollector">StreamSets Data Collector</a> - 使用一个简单的 IDE 来连续大数据摄取基础设施。</li><li><a href="https://github.com/apache/incubator-pulsar">Yahoo Pulsar</a> - 由 Yahoo 开发并开源的一个企业级的发布订阅消息系统。</li><li><a href="https://www.alooma.com/integrations/mysql">Alooma</a> - 实时的数据管道服务，支持将 MySQL 等数据源的数据移动到数据仓库中。</li></ul><h1 id="服务编程"><a href="#服务编程" class="headerlink" title="服务编程"></a>服务编程</h1><ul><li><a href="http://akka.io/">Akka Toolkit</a> - 基于 Actor 模型，提供了一个用于构建可扩展的（Scalable）、弹性的（Resilient）、快速响应的（Responsive）应用程序的平台。</li><li><a href="http://avro.apache.org/">Apache Avro</a> - 数据序列化系统。</li><li><a href="http://curator.apache.org/">Apache Curator</a> - 为 Apache ZooKeeper 开发的类库。</li><li><a href="http://karaf.apache.org/">Apache Karaf</a> - Apache 旗下的一个开源项目，同时也是一个基于 OSGi 的运行环境，Karaf 提供了一个轻量级的 OSGi 容器，可以用于部署各种组件，应用程序。</li><li><a href="http://thrift.apache.org//">Apache Thrift</a> - Facebook 开源的跨语言的 RPC 通信框架。</li><li><a href="http://zookeeper.apache.org/">Apache Zookeeper</a> - 一个分布式应用程序协调服务。</li><li><a href="https://research.google.com/archive/chubby.html">Google Chubby</a> - 一个分布式锁服务，Chubby 底层一致性实现就是以 Paxos 为基础的</li><li><a href="https://github.com/Hydrospheredata/mist">Hydrosphere Mist</a> - 一个将 Apache Spark 分析任务和机器学习模型转换为实时、批处理或反应性 web 服务的服务。</li><li><a href="https://engineering.linkedin.com/data">Linkedin Norbert</a> - 集群管理系统。</li><li><a href="https://github.com/mara/data-integration">Mara</a> - 一个轻量级的自定义ETL框架。</li><li><a href="https://www.open-mpi.org/">OpenMPI</a> - 消息传递框架。</li><li><a href="https://www.serf.io/">Serf</a> - 去中心化的服务发现和编排解决方案。</li><li><a href="https://github.com/spotify/luigi">Spotify Luigi</a> - 用于构建批处理作业的复杂管道的 Python 包。它处理依赖项解析、工作流管理、可视化、处理故障、命令行集成等等。</li><li><a href="https://github.com/spring-projects/spring-xd">Spring XD</a> - 用于数据摄取、实时分析、批处理和数据导出的分布式和可扩展系统。</li><li><a href="https://github.com/twitter/elephant-bird">Twitter Elephant Bird</a> - 用于处理 LZOP 压缩数据的库。</li><li><a href="https://twitter.github.io/finagle/">Twitter Finagle</a> - JVM的异步网络堆栈。</li></ul><h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><ul><li><a href="https://github.com/apache/incubator-airflow">Apache Airflow</a> - Airbnb 开源的一个用 Python 编写的工作流管理平台。</li><li><a href="http://aurora.apache.org/">Apache Aurora</a> - 长期运行服务和计划作业的 Mesos 框架。</li><li><a href="http://falcon.apache.org/">Apache Falcon</a> - 数据管理框架。</li><li><a href="http://oozie.apache.org/">Apache Oozie</a> - 工作流作业调度器。</li><li><a href="https://docs.microsoft.com/en-us/azure/data-factory/data-factory-introduction">Azure Data Factory</a> - 可大规模简化 ETL 的混合数据集成服务</li><li><a href="http://mesos.github.io/chronos/">Chronos</a> - 分布式和容错调度器。</li><li><a href="https://azkaban.github.io/">Linkedin Azkaban</a> - 批处理工作流作业调度程序。</li><li><a href="https://github.com/ottogroup/schedoscope">Schedoscope</a> - 用于 Hadoop 作业的敏捷调度 Scala DSL。</li><li><a href="https://github.com/radlab/sparrow">Sparrow</a> - 调度平台。</li></ul><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul><li><a href="https://studio.azureml.net/">Azure ML Studio</a> - 基于云的 R、Python 机器学习平台。</li><li><a href="https://github.com/harthur/brain">brain</a> - JavaScript 中的神经网络。</li><li><a href="https://github.com/OryxProject/oryx">Oryx</a> - 实时大规模机器学习。</li><li><a href="http://www.cascading.org/projects/pattern/">Concurrent Pattern</a> - Cascading 上的机器学习框架。</li><li><a href="https://github.com/karpathy/convnetjs">convnetjs</a> - Javascript 中的深入学习，可以在浏览器中训练卷积神经网络(或普通神经网络)。</li><li><a href="https://github.com/deeplearning4j/DataVec">DataVec</a> - 一个用于 Java 和 Scala 深度学习的矢量化和数据预处理库。Deeplearning4j生态系统的一部分。</li><li><a href="https://github.com/deeplearning4j">Deeplearning4j</a> - 美国 AI 创业公司 Skymind 开源并维护的一个基于 Java/JVM 的深度学习框架，可使用 CPU 或 GPU 运行。</li><li><a href="https://github.com/danielsdeleo/Decider">Decider</a> - Ruby中灵活且可扩展的机器学习。</li><li><a href="http://www.heatonresearch.com/encog/">ENCOG</a> - 支持多种高级算法的机器学习框架，以及支持规范化和处理数据的类。</li><li><a href="http://www.etcml.com/">etcML</a> - 在线免费文本分析工具是由美国的斯坦福大学计算机教授开发的基于成熟的文本分析引擎</li><li><a href="https://github.com/etsy/Conjecture">Etsy Conjecture</a> - Scalding 中可扩展的机器学习。</li><li><a href="https://github.com/gojek/feast">Feast</a> - 用于管理、发现和访问机器学习特性的特性存储库。Feast 为模型训练和模型服务提供了一致的特征数据视图。</li><li><a href="https://dato.com/products/create/">GraphLab Create</a> - Python 中的机器学习平台，包含大量 ML 工具包、数据工程和部署工具。</li><li><a href="https://github.com/h2oai/h2o-3/">H2O</a> - 使用 Hadoop、R 和 Python 进行统计、机器学习和数学运行时。</li><li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a> - 用于图形结构化数据的 Python 无监督机器学习库。</li><li><a href="https://github.com/fchollet/keras">Keras</a> - 一个高层神经网络 API，Keras 由纯 Python 编写而成并基 Tensorflow、Theano 以及 CNTK 后端。受 Torch 启发。</li><li><a href="https://github.com/johnsonc/lambdo">Lambdo</a> - 是一个工作流引擎，通过将一个分析管道、特征工程和机器学习、模型训练和预测结合起来，通过用户定义（Python）函数实现表填充和列评估，大大简化了数据处理和分析。</li><li><a href="http://mahout.apache.org/">Mahout</a> - 是 Apache Software Foundation（ASF）旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序。</li><li><a href="http://www.mlbase.org/">MLbase</a> - 是Spark生态圈的一部分，专注于机器学习，包含三个组件：MLlib、MLI、ML Optimizer。</li><li><a href="https://github.com/nikolaypavlov/MLPNeuralNet">MLPNeuralNet</a> - 一个针对 iOS 和 Mac OS 系统的快速多层感知神经网络库，可通过已训练的神经网络预测新实例。</li><li><a href="https://github.com/ml-tooling/ml-workspace">ML Workspace</a> - 基于 Web 的多合一 IDE，专门用于机器学习和数据科学。</li><li><a href="http://moa.cms.waikato.ac.nz">MOA</a> - 实时进行大数据流挖掘和大规模机器学习。</li><li><a href="https://monkeylearn.com/">MonkeyLearn</a> - 让文本挖掘变得很容易，可以从文本中提取和分类数据。</li><li><a href="https://github.com/deeplearning4j/nd4j">ND4J</a> - JVM 的矩阵库，可以认为是 Java 中的 Numpy。</li><li><a href="https://github.com/numenta/nupic">nupic</a> - 一个实现了HTM学习算法的机器智能平台。</li><li><a href="http://predictionio.incubator.apache.org/index.html">PredictionIO</a> - 面向开发人员和数据科学家的开源机器学习服务，构建在 Hadoop，Mahout 和 Cascading 之上。</li><li><a href="https://github.com/deeplearning4j/rl4j">RL4J</a> - 一个与 Deeplearning4j 集成的强化学习框架。</li><li><a href="http://samoa.incubator.apache.org/">SAMOA</a> - 分布式流数据机器学习框架。</li><li><a href="https://github.com/scikit-learn/scikit-learn">scikit-learn</a> - 专门面向机器学习的 Python 开源框架，实现了各种成熟的算法。</li><li><a href="http://spark.apache.org/docs/0.9.0/mllib-guide.html">Spark MLlib</a> - 使用 Spark 实现一些常见的机器学习算法和实用程序，包括分类、回归、聚类、协同过滤、降维以及底层优化。</li><li><a href="https://users.soe.ucsc.edu/~niejiazhong/slides/chandra.pdf">Sibyl</a> - 谷歌大型机器学习系统。</li><li><a href="https://github.com/tensorflow/tensorflow">TensorFlow</a> - 一个采用数据流图（data flow graphs），用于数值计算的开源软件库。</li><li><a href="https://github.com/theano">Theano</a> - 蒙特利尔大学支持的以 Python 为核心的机器学习类库。</li><li><a href="https://github.com/torch">Torch</a> - 一个基于 BSD License 的开源的机器学习的框架。</li><li><a href="https://github.com/amplab/velox-modelserver">Velox</a> - 服务于机器学习预测的系统。</li><li><a href="https://github.com/JohnLangford/vowpal_wabbit/wiki">Vowpal Wabbit</a> - 由微软和雅虎赞助的学习系统。</li><li><a href="http://www.cs.waikato.ac.nz/ml/weka/">WEKA</a> - 一套机器学习软件。</li><li><a href="https://github.com/BIDData/BIDMach">BidMach</a> - CPU 和 GPU 加速库的机器学习库。</li></ul><h1 id="基准"><a href="#基准" class="headerlink" title="基准"></a>基准</h1><ul><li><a href="https://issues.apache.org/jira/browse/MAPREDUCE-3561">Apache Hadoop Benchmarking</a> - 测试 Hadoop 性能的微基准测试。</li><li><a href="https://github.com/SWIMProjectUCB/SWIM/wiki">Berkeley SWIM Benchmark</a> - 真实大数据工作负载基准。</li><li><a href="https://github.com/intel-hadoop/HiBench">Intel HiBench</a> - Hadoop 基准套件。</li><li><a href="https://issues.apache.org/jira/browse/MAPREDUCE-5116">PUMA Benchmarking</a> - MapReduce 应用程序的基准测试套件。</li><li><a href="http://yahoohadoop.tumblr.com/post/98294079296/gridmix3-emulating-production-workload-for">Yahoo Gridmix3</a> - 来自 Yahoo 工程师团队的 Hadoop 集群基准测试。</li><li><a href="https://github.com/deeplearning4j/dl4j-benchmark">Deeplearning4j Benchmarks</a> - 对流行的模型和配置进行基准测试，并输出性能和版本统计信息。</li></ul><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><ul><li><a href="http://ranger.apache.org/">Apache Ranger</a> - 一个用在 Hadoop 平台上并提供操作、监控、管理综合数据安全的框架。</li><li><a href="http://eagle.apache.org/">Apache Eagle</a> - 由 eBay 公司开源的一个识别大数据平台上的安全和性能问题的开源解决方案。</li><li><a href="http://knox.apache.org/">Apache Knox Gateway</a> - Hadoop 集群中用于数据处理的 REST API 网关。</li><li><a href="http://incubator.apache.org/projects/sentry.html">Apache Sentry</a> - 为 Hadoop 集群中的元数据和数据存储提供集中、细粒度的访问控制。</li><li><a href="https://github.com/kotobukki/BDA/">BDA</a> - Hadoop 和 Spark 的漏洞检测器。</li></ul><h1 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h1><ul><li><a href="http://ambari.apache.org/">Apache Ambari</a> - 一个集中部署、管理、监控Hadoop 分布式集群的工具。</li><li><a href="http://bigtop.apache.org//">Apache Bigtop</a> - 一个针对基础设施工程师和数据科学家的开源项目，旨在全面打包、测试和配置领先的开源大数据组件 / 项目，包括但不限于 Hadoop、HBase 和 Spark 。</li><li><a href="http://helix.apache.org/">Apache Helix</a> - 集群管理框架。</li><li><a href="http://mesos.apache.org/">Apache Mesos</a> - 一个类似于 YARN 的集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享，可以运行 Hadoop、MPI、Hypertable、Spark。</li><li><a href="https://github.com/apache/incubator-slider">Apache Slider</a> - 是一个 YARN 应用程序，用于在 YARN 上部署现有的分布式应用程序。</li><li><a href="http://whirr.apache.org/">Apache Whirr</a> - 运行云服务的一组 Java 类库。</li><li><a href="https://hortonworks.com/hadoop/yarn/">Apache YARN</a> - 集群管理系统。</li><li><a href="http://brooklyncentral.github.io/">Brooklyn</a> - 简化应用程序部署和管理的库。</li><li><a href="http://buildoop.github.io/">Buildoop</a> - 类似于 Apache BigTop，基于 Groovy 语言开发。</li><li><a href="http://gethue.com/">Cloudera HUE</a> - 用于与 Hadoop 交互的 Web 应用程序。</li><li><a href="http://www.wired.com/2012/08/facebook-prism/">Facebook Prism</a> - 多数据中心复制系统。</li><li><a href="https://www.wired.com/2013/03/google-borg-twitter-mesos/all/">Google Borg</a> - Google 的内部大型集群管理系统。</li><li><a href="https://www.youtube.com/watch?v=0ZFMlO98Jkc">Google Omega</a> - Google 内部第三代的集群管理框架。</li><li><a href="https://hortonworks.com/blog/introducing-hoya-hbase-on-yarn/">Hortonworks HOYA</a> - 可以在 YARN 上部署 HBase 集群的应用程序。</li><li><a href="https://kubernetes.io/">Kubernetes</a> - Google 团队发起并维护的基于 Docker 的开源容器集群管理系统。</li><li><a href="https://github.com/mesosphere/marathon">Marathon</a> - 一个 Mesos 框架，能够支持运行长服务。</li></ul><h1 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h1><ul><li><a href="https://github.com/etsy/411">411</a> - 一个 Web 应用程序，用于通过计划搜索 Elasticsearch 而产生的警报管理。</li><li><a href="https://github.com/adobe-research/spindle">Adobe spindle</a> - 使用 Scala、Spark 和 Parquet 进行 web 分析的下一代系统。</li><li><a href="http://metron.apache.org/">Apache Metron</a> - 一个集成了各种开源大数据技术的平台，以提供用于安全监视和分析的集中式工具。</li><li><a href="http://nutch.apache.org/">Apache Nutch</a> - 开源 web 爬虫程序</li><li><a href="http://oodt.apache.org/">Apache OODT</a> - NASA 开源的用于做数据管理的系统。</li><li><a href="https://tika.apache.org/">Apache Tika</a> - 使用 Java 编写的内容检测和分析框架。</li><li><a href="https://github.com/salesforce/Argus">Argus</a> - 时序监控报警平台。</li><li><a href="https://github.com/uber/AthenaX">AthenaX</a> - 一个流分析平台，允许用户使用结构化查询语言（SQL）运行生产质量的大规模流分析。</li><li><a href="https://github.com/Netflix/atlas">Atlas</a> - 用于管理维度时间序列数据的系统。</li><li><a href="https://count.ly/">Countly</a> - 基于 Node.js 和 MongoDB 的开源移动和 web 分析平台。</li><li><a href="https://www.dominodatalab.com/">Domino</a> - 运行、扩展、共享和部署模型，不需要任何基础设施。</li><li><a href="http://www.eclipse.org/birt/">Eclipse BIRT</a> - 基于 Elasticsearch 的报告系统。</li><li><a href="https://github.com/Yelp/elastalert">ElastAert</a> - 为 ES 打造的报警监控工具。</li><li><a href="https://github.com/Codecademy/EventHub">Eventhub</a> - 开源事件分析平台。</li><li><a href="https://github.com/allegro/hermes">Hermes</a> - 构建在 Kafka 之上的异步消息代理。</li><li><a href="http://hipi.cs.virginia.edu/">HIPI Library</a> - 使用 Hadoop 的 MapReduce 来执行图像处理任务的 API。</li><li><a href="https://www.splunk.com/en_us/download/hunk.html">Hunk</a> - Hadoop 的分析工具。</li><li><a href="http://opensource.indeedeng.io/imhotep/">Imhotep</a> - 大型分析平台。</li><li><a href="https://www.indicative.com/">Indicative</a> - Web 和移动分析工具，具有数据仓库（AWS，BigQuery）集成。</li><li><a href="https://jupyter.org/">Jupyter</a> - 基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</li><li><a href="http://madlib.incubator.apache.org/community/">MADlib</a> - RDBMS 的数据处理库，用于分析数据。</li><li><a href="https://github.com/influxdata/kapacitor">Kapacitor</a> - 用于对时间序列数据进行处理、监视和警报的开源框架。</li><li><a href="http://kylin.apache.org/">Kylin</a> - 一个开源的分布式分析引擎，提供 Hadoop/Spark 之上的 SQL 查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由 eBay Inc. 开发并贡献至开源社区，能在亚秒内查询巨大的 Hive 表。</li><li><a href="https://github.com/pivotalsoftware/PivotalR">PivotalR</a> - 支持在 Pivotal HD/HAWQ 以及 PostgreSQL 上运行 R。</li><li><a href="https://github.com/rakam-io/rakam">Rakam</a> - 开源实时自定义分析平台，由 PostgreSQL，Kinesis 和 PrestoDB 提供支持。</li><li><a href="https://www.qubole.com/">Qubole</a> - 能够自动扩展 Hadoop 集群以及内置的链接器。</li><li><a href="https://sense.io/">Sense</a> - 数据科学和大数据分析的云平台。</li><li><a href="https://github.com/SnappyDataInc/snappydata">SnappyData</a> - 一个统一 OLTP + OLAP + 流式写入 的内存分布式数据库。</li><li><a href="https://github.com/snowplow/snowplow">Snowplow</a> - 由 Hadoop，Kinesis，Redshift 和 Postgres 支持的企业级 Web 和事件分析。</li><li><a href="http://amplab-extras.github.io/SparkR-pkg/">SparkR</a> - 用于 Spark 的 R 前端。</li><li><a href="https://www.splunk.com/">Splunk</a> - 一款成熟的商业化日志处理分析产品。</li><li><a href="https://www.sumologic.com/">Sumo Logic</a> - 基于云的日志处理分析产品。</li><li><a href="http://www.talend.com/products/big-data/">Talend</a> - YARN、Hadoop、HBASE、Hive、HCatalog 和 Pig 的统一开源环境。</li><li><a href="https://warp.one//">Warp</a> - 大数据示例查询工具(OS X 应用)。</li></ul><h1 id="搜索引擎和框架"><a href="#搜索引擎和框架" class="headerlink" title="搜索引擎和框架"></a>搜索引擎和框架</h1><ul><li><a href="http://lucene.apache.org/">Apache Lucene</a> - 一套用于全文检索和搜索的开放源码程序库。</li><li><a href="http://lucene.apache.org/solr/">Apache Solr</a> - 是 Apache Lucene 项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。</li><li><a href="https://github.com/strapdata/elassandra">Elassandra</a> - 是 ElasticSearch 的一个分支，经过修改，可以作为 Apache Cassandra 的插件运行，具有可扩展和灵活的点对点架构。</li><li><a href="https://www.elastic.co/">ElasticSearch</a> - 一个基于 Lucene 库的搜索引擎。它提供了一个分布式、支持多租户的全文搜索引擎，具有 HTTP Web 接口和无模式 JSON 文档。</li><li><a href="https://www.enigma.com/">Enigma.io</a> – 免费增值的 Web 应用程序，用于对 Web 上抓取的海量数据集进行浏览，过滤，分析，搜索和导出。</li><li><a href="https://www.facebook.com/publications/219621248185635/">Facebook Unicorn</a> - 社交图搜索平台。</li><li><a href="https://googleblog.blogspot.it/2010/06/our-new-search-index-caffeine.html">Google Caffeine</a> - 一个高性能、出色的缓存类库</li><li><a href="https://research.google.com/pubs/pub36726.html">Google Percolator</a> - 由 Google 公司开发的、为大数据集群进行增量处理更新的系统，主要用于 google 网页搜索索引服务。</li><li><a href="https://blogs.apache.org/hbase/entry/coprocessor_introduction">HBase Coprocessor</a> - HBase 的协处理器，Percolator 的实现。</li><li><a href="http://ngdata.github.io/hbase-indexer/">Lily HBase Indexer</a> - 一款快速、简单的 HBase 的内容检索方案，它可以帮助你在 Solr 中建立 HBase 的数据索引，从而通过 Solr 进行数据检索。</li><li><a href="http://senseidb.github.io/bobo/">LinkedIn Bobo</a> - 完全用 Java 编写的 Faceted Search 实现，是 Apache Lucene 的扩展。</li><li><a href="https://github.com/linkedin/cleo">LinkedIn Cleo</a> - 一个灵活的软件库，用于处理一些预输入和自动完成的搜索功能。</li><li><a href="https://engineering.linkedin.com/search/did-you-mean-galene">LinkedIn Galene</a> - LinkedIn 的搜索架构。</li><li><a href="https://github.com/senseidb/zoie">LinkedIn Zoie</a> - 一个用 Java 编写的实时搜索/索引系统。</li><li><a href="http://mg4j.di.unimi.it/">MG4J</a> - MG4J（Managing Gigabytes for Java）是一个用 Java 编写的大型文档集合的全文搜索引擎，它是高度可定制的，高性能的，并提供了最先进的功能和新的研究算法。</li><li><a href="http://sphinxsearch.com/">Sphinx Search Server</a> - 全文搜索引擎。</li><li><a href="http://vespa.ai/">Vespa</a> - 在大型数据集上进行低延迟计算的引擎。它存储和索引数据，以便可以在服务时执行对数据的查询，选择和处理</li><li><a href="https://github.com/facebookresearch/faiss">Facebook Faiss</a> - 用于高效相似性搜索和密集向量聚类的库。 它包含的算法可搜索任意大小的向量集，最多可搜索到不适合 RAM 的向量。 它还包含用于评估和参数调整的支持代码。Faiss 用 C++ 编写，带有完整的 Python/numpy 包装器。</li><li><a href="https://github.com/spotify/annoy">Annoy</a> - 具有 Python 绑定的 C++库，用于搜索空间中接近给定查询点的点。 它还会创建大型的基于文件的只读数据结构，这些数据结构被映射到内存中，以便许多进程可以共享相同的数据。</li></ul><h1 id="MySQL-分支和发展"><a href="#MySQL-分支和发展" class="headerlink" title="MySQL 分支和发展"></a>MySQL 分支和发展</h1><ul><li><a href="https://aws.amazon.com/rds/">Amazon RDS</a> - AWS 的 MySQL 数据库。</li><li><a href="http://www.drizzle.org/">Drizzle</a> - MySQL 6.0的发展。</li><li><a href="https://cloud.google.com/sql/docs/">Google Cloud SQL</a> - Google 云中的 MySQL 数据库。</li><li><a href="https://mariadb.org/">MariaDB</a> - MySQL 的一个分支，采用GPL授权许可。目的是完全兼容 MySQL，包括 API 和命令行。</li><li><a href="https://www.mysql.com/products/cluster/">MySQL Cluster</a> - 使用 NDB 集群存储引擎实现 MySQL 集群。</li><li><a href="https://www.percona.com/software/mysql-database/percona-server">Percona Server</a> - MySQL 增强版，可以替代它。</li><li><a href="https://github.com/renecannao/proxysql">ProxySQL</a> - MySQL 的高性能代理。</li><li><a href="https://www.percona.com/">TokuDB</a> - MySQL 和 MariaDB 的存储引擎。</li><li><a href="http://webscalesql.org/">WebScaleSQL</a> - Facebook、 Google、Twitter 和 Linkedin 四家公司的MySQL 团队发起的 MySQL 开源组织，旨在改进 MySQL 在规模和性能等方面的问题。</li></ul><h1 id="PostgreSQL-分支和发展"><a href="#PostgreSQL-分支和发展" class="headerlink" title="PostgreSQL 分支和发展"></a>PostgreSQL 分支和发展</h1><ul><li><a href="http://db.cs.yale.edu/hadoopdb/hadoopdb.html">HadoopDB</a> - MapReduce 和 DBMS 的混合体。</li><li><a href="http://www-01.ibm.com/software/data/netezza/">IBM Netezza</a> - 高性能数据仓库设备。</li><li><a href="http://www.postgres-xl.org/">Postgres-XL</a> - 可伸缩的基于 PostgreSQL 的开源数据库集群。</li><li><a href="http://www-users.cs.umn.edu/~sarwat/RecDB/">RecDB</a> - 完全在 PostgreSQL 内部构建的开源推荐引擎。</li><li><a href="http://www.stormdb.com/community/stado">Stado</a> - 仅针对数据仓库和数据集市应用程序的开源 MPP 数据库系统。</li><li><a href="https://www.scribd.com/doc/3159239/70-Everest-PGCon-RT">Yahoo Everest</a> - 由 PostgreSQL 派生的 PB 级数据库 / MPP。</li><li><a href="http://www.timescale.com/">TimescaleDB</a> - 针对快速摄取和复杂查询而优化的开源时间序列数据库。</li><li><a href="https://www.pipelinedb.com/">PipelineDB</a> - 开源的流式数据库，基于 PostgreSQL 数据库改造的，允许我们通过 SQL 的方式，对数据流做操作，并把操作结果储存起来。</li></ul><h1 id="Memcached-分支和发展"><a href="#Memcached-分支和发展" class="headerlink" title="Memcached 分支和发展"></a>Memcached 分支和发展</h1><ul><li><a href="https://www.facebook.com/notes/facebook-engineering/mcdipper-a-key-value-cache-for-flash-storage/10151347090423920">Facebook McDipper</a> - 用于闪存的 key/value 缓存，设计目的在于提高闪存存储的使用效率。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/scaling-memcache-at-facebook/10151411410803920">Facebook Memcached</a> - Memcache 的分支。</li><li><a href="https://github.com/twitter/twemproxy">Twemproxy</a> - 一个快速、轻量级的 memcached 和 redis 代理。</li><li><a href="https://github.com/twitter/fatcache">Twitter Fatcache</a> - 用于闪存的 key/value 缓存。</li><li><a href="https://github.com/twitter/twemcache">Twitter Twemcache</a> - Memcache 的分支。</li></ul><h1 id="嵌入式数据库"><a href="#嵌入式数据库" class="headerlink" title="嵌入式数据库"></a>嵌入式数据库</h1><ul><li><a href="http://www.actian.com/products/operational-databases/">Actian PSQL</a> - 由 Pervasive Software 开发的符合 ACID 的 DBMS，针对嵌入应用程序进行了优化。</li><li><a href="https://www.oracle.com/database/berkeley-db/index.html">BerkeleyDB</a> - 可为 key/value 数据提供高性能的嵌入式数据库。</li><li><a href="https://github.com/krestenkrab/hanoidb">HanoiDB</a> - Erlang LSM BTree 存储。</li><li><a href="https://github.com/google/leveldb">LevelDB</a> - Google 开源的持久化KV单机数据库，具有很高的随机写，顺序读/写性能。</li><li><a href="https://symas.com/mdb/">LMDB</a> - 由 Symas 开发的基于 Btree-based 的高性能 mmap key-value 数据库。</li><li><a href="http://rocksdb.org/">RocksDB</a> - Facebook 公司基于 LevelDB 开发的一款开源嵌入式数据库引擎。</li></ul><h1 id="商业智能"><a href="#商业智能" class="headerlink" title="商业智能"></a>商业智能</h1><ul><li><a href="https://www.bimeanalytics.com/?lang=en">BIME Analytics</a> - 商业智能云平台。</li><li><a href="https://github.com/ankane/blazer">Blazer</a> - 使商业智能变得简单。</li><li><a href="https://chartio.com">Chartio</a> - 商业智能平台，可以可视化和浏览我们的数据。</li><li><a href="https://www.datapine.com/">datapine</a> - 自助式商业智能工具。</li><li><a href="https://www.gooddata.com/">GoodData</a> - 商业智能和大数据分析软件。</li><li><a href="https://www.jaspersoft.com/">Jaspersoft</a> - 强大的商业智能套件。</li><li><a href="https://www.jedox.com/en/">Jedox Palo</a> - 可定制的商业智能平台.</li><li><a href="https://jethro.io/">Jethrodata</a> - 交互式大数据分析。</li><li><a href="https://intermix.io/">intermix.io</a> - Amazon Redshift 的性能监控</li><li><a href="https://github.com/metabase/metabase">Metabase</a> - 一个简单、开源的方式，通过给公司成员提问，从得到的数据中进行分析、学习。</li><li><a href="http://www.microsoft.com/en-us/server-cloud/solutions/business-intelligence/default.aspx">Microsoft</a> - 商业智能软件及平台。</li><li><a href="https://www.microstrategy.com/">Microstrategy</a> - 用于商业智能、移动智能和网络应用程序的软件平台。</li><li><a href="https://numeracy.co/">Numeracy</a> - 快速，干净的 SQL 客户端和商业智能。</li><li><a href="http://www.pentaho.com/">Pentaho</a> - 商业智能平台。</li><li><a href="http://www.qlik.com/us/">Qlik</a> - 商业智能及分析平台。</li><li><a href="https://redash.io/">Redash</a> - 开源商业智能平台，支持多个数据源和计划查询。</li><li><a href="https://www.meteorite.bi/">Saiku Analytics</a> - 开源分析平台。</li><li><a href="https://www.knowage-suite.com/">Knowage</a> - 开源商业智能平台。 前 <a href="http://www.spagobi.org/">SpagoBi</a>。</li><li><a href="http://sparklinedata.com/">SparklineData SNAP</a> - 基于 Apache Spark 的商业智能平台。</li><li><a href="https://www.tableau.com/">Tableau</a> - 商业智能平台。</li><li><a href="https://www.zoomdata.com/">Zoomdata</a> - 大数据分析平台。</li></ul><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><ul><li><a href="https://github.com/airbnb/airpal">Airpal</a> - PrestoDB 的 Web UI。</li><li><a href="http://www.anychart.com">AnyChart</a> - 一套灵活的 JavaScript（HTML5）库，可满足您的所有数据可视化需求。</li><li><a href="https://github.com/samizdatco/arbor">Arbor</a> - 一个使用 web workers 和 jQuery 创建的图可视化库。</li><li><a href="https://github.com/LucidWorks/banana">Banana</a> - 可视化存储在 Solr 中的日志和带时间戳的数据，是 Kibana 的一部分。</li><li><a href="https://github.com/ufukomer/bloomery">Bloomery</a> - Impala 的 Web UI。</li><li><a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> - 一个 Python 交互式可视化库，支持现代化 Web 浏览器，提供非常完美的展示功能。</li><li><a href="http://c3js.org/">C3</a> - 基于 D3 的可重用图表库。</li><li><a href="https://github.com/CartoDB/cartodb">CartoDB</a> - 开源的云上地理空间数据库，允许存储和可视化 web 上的数据。使用 CartoDB 可以快速创建基于地图的可视化效果。</li><li><a href="http://chartd.co/">chartd</a> - 响应式、视网膜兼容图表，仅需要一个 img 标签。</li><li><a href="http://www.chartjs.org/">Chart.js</a> - 一套开源、简单、干净并且有吸引力的基于 HTML5 技术的 JavaScript 图表工具。</li><li><a href="https://github.com/gionkunz/chartist-js">Chartist.js</a> - 非常简单而且实用的 JavaScript 前端图表生成器。</li><li><a href="http://square.github.io/crossfilter/">Crossfilter</a> -  一个 JavaScript 库，用于在 JavaScript 中制作交互式的仪表板，可以与 dc.js 、d3.js 一起工作。</li><li><a href="https://github.com/square/cubism">Cubism</a> - 用于时间序列可视化的 JavaScript 库。</li><li><a href="http://cytoscape.github.io/">Cytoscape</a> - 一个专注于网络可视化和分析的开源软件。</li><li><a href="http://dc-js.github.io/dc.js/">DC.js</a> - 一个用于网页作图、生成互动图形的 JavaScript 函数库。</li><li><a href="https://d3js.org/">D3</a> - 目前最流行的数据可视化库之一，小型，灵活，高效的数据可视化库，用来创建和操作基于数据的交互式文档。</li><li><a href="https://github.com/CSNW/d3.compose">D3.compose</a> - 由可重复使用的图表和组件组成复杂的、数据驱动的可视化文件。</li><li><a href="http://d3plus.org">D3Plus</a> - d3.js 的一组相当强大的可重用图表和样式。</li><li><a href="https://devexpress.github.io/devextreme-reactive/react/chart/">DevExtreme React Chart</a> - 基于高性能插件的 React 图表，用于 Bootstrap 和 Material Design。</li><li><a href="https://github.com/ecomfe/echarts">Echarts</a> - 一款由百度前端技术部开发的，基于Javascript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。</li><li><a href="https://github.com/HumbleSoftware/envisionjs">Envisionjs</a> - 一个基于 HTML5 技术的数据可视化库。</li><li><a href="https://metrictools.org/">FnordMetric</a> - 一个开源的 Web 应用，可用于创建实时仪表板，方便可视化任何数据。</li><li><a href="https://frappe.io/charts">Frappe Charts</a> - 一个受 Github 启发的轻量级 SVG 图表库，它不依赖任何类库和框架。</li><li><a href="https://github.com/Freeboard/freeboard">Freeboard</a> - 让用户创建他们自己的用来监控物联网部署的仪表盘，该代码在 GitHub上免费提供，你可以通过这些仪表板展示跟踪空气质量、住宅电器、酿酒情况和实时环境条件变化。</li><li><a href="https://github.com/gephi/gephi">Gephi</a> - 一款开源免费跨平台基于 JVM 的网络分析领域的数据可视化处理软件。</li><li><a href="https://developers.google.com/chart/">Google Charts</a> - 一种交互式 Web 服务，可根据用户提供的数据创建图形图表。</li><li><a href="https://grafana.com/">Grafana</a> - 一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</li><li><a href="http://graphiteapp.org/">Graphite</a> - 一款开源的监控绘图工具。</li><li><a href="https://www.highcharts.com/">Highcharts</a> - 兼容 IE6+、完美支持移动端、图表类型丰富、方便快捷的 HTML5 交互性图表库。</li><li><a href="http://ipython.org/">IPython</a> - 一种基于 Python 的交互式解释器。相较于原生的 Python Shell，IPython 提供了更为强大的编辑和交互功能。</li><li><a href="https://www.elastic.co/products/kibana">Kibana</a> - Elasticsearch 的开源数据可视化插件。</li><li><a href="http://lumify.io/">Lumify</a> - 开源大数据分析可视化平台。</li><li><a href="https://github.com/matplotlib/matplotlib">Matplotlib</a> - Python 编程语言及其数值数学扩展包 Numpy 的可视化操作界面。</li><li><a href="https://metricsgraphicsjs.org/">Metricsgraphic.js</a> - 一个建立在 D3 基础上，为可视化和时间序列化的数据而优化的库。</li><li><a href="http://nvd3.org/">NVD3</a> - d3.js 的图表组件。</li><li><a href="https://github.com/benpickles/peity">Peity</a> - 渐进式 SVG 条形图，折线图和饼图。</li><li><a href="https://plot.ly/">Plot.ly</a> - Plotly 为个人和协作提供在线图形，分析和统计工具，以及 Python，R，MATLAB，Perl，Julia，Arduino 和 REST 的科学图形库。</li><li><a href="https://github.com/plotly/plotly.js">Plotly.js</a> - 一个开源的交互式 JavaScript 图形库，建立在 d3.js 和 webgl 之上，并支持 20 多种类型的交互式图表。</li><li><a href="https://github.com/okfn/recline">Recline</a> - 简单而强大的库，可以使用纯 Javascript 和 HTML 构建数据应用程序。</li><li><a href="https://github.com/getredash/redash">Redash</a> - 查询和可视化数据的开源平台。</li><li><a href="http://recharts.org/">ReCharts</a> - 一个基于React组件的可组合图表库。</li><li><a href="http://shiny.rstudio.com/">Shiny</a> - R 的 Web 应用程序框架。</li><li><a href="https://github.com/jacomyal/sigma.js">Sigma.js</a> - 专门用于图形绘制的 JavaScript 库。</li><li><a href="https://github.com/apache/incubator-superset">Superset</a> - 由 Airbnb 开发并开源一个数据探索和可视化平台，设计用来提供直观的，可视化的，交互式的分析体验。</li><li><a href="https://github.com/vega/vega">Vega</a> - 一个可视化的语法。</li><li><a href="https://github.com/ZEPL/zeppelin">Zeppelin</a> - 一个基于 Web 的 notebook，提供交互数据分析和可视化。</li><li><a href="https://www.zingchart.com/">Zing Charts</a> - 一个功能强大的 JavaScript 图表。</li></ul><h1 id="物联网与传感器"><a href="#物联网与传感器" class="headerlink" title="物联网与传感器"></a>物联网与传感器</h1><ul><li><a href="http://edgent.apache.org/">Apache Edgent (Incubating)</a> - 一种编程模型和具有微内核风格的运行时，可嵌入到网关和小型的物联网设备中。</li><li><a href="https://azure.microsoft.com/en-us/services/iot-hub/">Azure IoT Hub</a> - 托管服务，支持 IoT 设备与 Azure 之间的双向通信。</li><li><a href="https://www.tempoiq.com/">TempoIQ</a> - 基于云计算的传感器分析。</li><li><a href="http://2lemetry.com/">2lemetry</a> - 物联网平台。</li><li><a href="https://www.pubnub.com/">Pubnub</a> - 数据流网络。</li><li><a href="https://www.thingworx.com/">ThingWorx</a> - 可用于查找数据来源，使数据与情境相关，合成数据，同时协调流程，以提供强大的 Web、移动和 AR 体验的平台。</li><li><a href="https://ifttt.com/">IFTTT</a> - 一个新生的网络服务平台，通过其他不同平台的条件来决定是否执行下一条命令。</li><li><a href="https://evrythng.com/">Evrything</a>- 使产品智能化。</li><li><a href="https://github.com/marty90/netlytics/">NetLytics</a> - 用于在Spark上处理网络数据的分析平台。</li></ul><h1 id="阅读材料"><a href="#阅读材料" class="headerlink" title="阅读材料"></a>阅读材料</h1><ul><li><a href="https://amplab.cs.berkeley.edu/benchmark/">Big Data Benchmark</a> - Redshift，Hive，Shark，Impala 和 Stiger/Tez的基准。</li><li><a href="https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis">NoSQL Comparison</a> - Cassandra，MongoDB，CouchDB，Redis，Riak，HBase，Couchbase，Neo4j，Hypertable，ElasticSearch，Accumulo，VoltDB 和 Scalaris 的比较。</li><li><a href="https://www.datadoghq.com/blog/monitoring-kafka-performance-metrics?ref=awesome">Monitoring Kafka performance</a> - 监视 Apache Kafka 的指南，包括度量收集的本地方法。</li><li><a href="https://www.datadoghq.com/blog/monitor-hadoop-metrics?ref=awesome">Monitoring Hadoop performance</a> - 监视 Hadoop 的指南，概述了 Hadoop 体系结构以及度量收集的本机方法。</li><li><a href="https://www.datadoghq.com/blog/how-to-monitor-cassandra-performance-metrics/?ref=awesome">Monitoring Cassandra performance</a> - 监控 Cassandra 的指南，包括度量收集的本地方法。</li></ul><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><h2 id="2015-2016"><a href="#2015-2016" class="headerlink" title="2015 - 2016"></a>2015 - 2016</h2><ul><li><a href="http://www.vldb.org/pvldb/vol8/p1804-ching.pdf">2015</a> - <strong>Facebook</strong> - One Trillion Edges: Graph Processing at Facebook-Scale.</li></ul><h2 id="2013-2014"><a href="#2013-2014" class="headerlink" title="2013 - 2014"></a>2013 - 2014</h2><ul><li><a href="http://infolab.stanford.edu/~ullman/mmds/book.pdf">2014</a> - <strong>Stanford</strong> - Mining of Massive Datasets.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/03/eurosys13-paper83.pdf">2013</a> - <strong>AMPLab</strong> - Presto: Distributed Machine Learning and Graph Processing with Sparse Matrices.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/01/dmx1.pdf">2013</a> - <strong>AMPLab</strong> - MLbase: A Distributed Machine-learning System.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/02/shark_sigmod2013.pdf">2013</a> - <strong>AMPLab</strong> - Shark: SQL and Rich Analytics at Scale.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/05/grades-graphx_with_fonts.pdf">2013</a> - <strong>AMPLab</strong> - GraphX: A Resilient Distributed Graph System on Spark.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf">2013</a> - <strong>Google</strong> - HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm.</li><li><a href="http://research.microsoft.com/pubs/200169/now-vldb.pdf">2013</a> - <strong>Microsoft</strong> - Scalable Progressive Analytics on Big Data in the Cloud.</li><li><a href="http://static.druid.io/docs/druid.pdf">2013</a> - <strong>Metamarkets</strong> - Druid: A Real-time Analytical Data Store.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p764-rae.pdf">2013</a> - <strong>Google</strong> - Online, Asynchronous Schema Change in F1.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/41344.pdf">2013</a> - <strong>Google</strong> - F1: A Distributed SQL Database That Scales.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p734-akidau.pdf">2013</a> - <strong>Google</strong> - MillWheel: Fault-Tolerant Stream Processing at Internet Scale.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p767-wiener.pdf">2013</a> - <strong>Facebook</strong> - Scuba: Diving into Data at Facebook.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p871-curtiss.pdf">2013</a> - <strong>Facebook</strong> - Unicorn: A System for Searching the Social Graph.</li><li><a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">2013</a> - <strong>Facebook</strong> - Scaling Memcache at Facebook.</li></ul><h2 id="2011-2012"><a href="#2011-2012" class="headerlink" title="2011 - 2012"></a>2011 - 2012</h2><ul><li><a href="http://vldb.org/pvldb/vol5/p1771_georgelee_vldb2012.pdf">2012</a> - <strong>Twitter</strong> - The Unified Logging Infrastructurefor Data Analytics at Twitter.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/04/blinkdb_vldb12_demo.pdf">2012</a> - <strong>AMPLab</strong> - Blink and It’s Done: Interactive Queries on Very Large Data.</li><li><a href="https://www.usenix.org/system/files/login/articles/zaharia.pdf">2012</a> - <strong>AMPLab</strong> - Fast and Interactive Analytics over Hadoop Data with Spark.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2012/03/mod482-xin1.pdf">2012</a> - <strong>AMPLab</strong> - Shark: Fast Data Analysis Using Coarse-grained Distributed Memory.</li><li><a href="https://www.usenix.org/legacy/event/nsdi11/tech/full_papers/Bolosky.pdf">2012</a> - <strong>Microsoft</strong> - Paxos Replicated State Machines as the Basis of a High-Performance Data Store.</li><li><a href="http://research.microsoft.com/pubs/178045/ppaoxs-paper29.pdf">2012</a> - <strong>Microsoft</strong> - Paxos Made Parallel.</li><li><a href="https://arxiv.org/pdf/1203.5485.pdf">2012</a> - <strong>AMPLab</strong> - BlinkDB: Queries with Bounded Errors and Bounded Response Times on Very Large Data.</li><li><a href="http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf">2012</a> - <strong>Google</strong> - Processing a trillion cells per mouse click.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">2012</a> - <strong>Google</strong> - Spanner: Google’s Globally-Distributed Database.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/euro118-ananthanarayanan.pdf">2011</a> - <strong>AMPLab</strong> - Scarlett: Coping with Skewed Popularity Content in MapReduce Clusters.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/Mesos-A-Platform-for-Fine-Grained-Resource-Sharing-in-the-Data-Center.pdf">2011</a> - <strong>AMPLab</strong> - Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36971.pdf">2011</a> - <strong>Google</strong> - Megastore: Providing Scalable, Highly Available Storage for Interactive Services.</li></ul><h2 id="2001-2010"><a href="#2001-2010" class="headerlink" title="2001 - 2010"></a>2001 - 2010</h2><ul><li><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf">2010</a> - <strong>Facebook</strong> - Finding a needle in Haystack: Facebook’s photo storage.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/Spark-Cluster-Computing-with-Working-Sets.pdf">2010</a> - <strong>AMPLab</strong> - Spark: Cluster Computing with Working Sets.</li><li><a href="http://kowshik.github.io/JPregel/pregel_paper.pdf">2010</a> - <strong>Google</strong> - Pregel: A System for Large-Scale Graph Processing.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36726.pdf">2010</a> - <strong>Google</strong> - Large-scale Incremental Processing Using Distributed Transactions and Notiﬁcations base of Percolator and Caffeine.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36632.pdf">2010</a> - <strong>Google</strong> - Dremel: Interactive Analysis of Web-Scale Datasets.</li><li><a href="http://leoneu.github.io/">2010</a> - <strong>Yahoo</strong> - S4: Distributed Stream Computing Platform.</li><li><a href="http://www.cs.umd.edu/~abadi/papers/hadoopdb.pdf">2009</a> - HadoopDB: An Architectural Hybrid of MapReduce and DBMS Technologies for Analytical Workloads.    </li><li><a href="https://cwiki.apache.org/confluence/download/attachments/120729877/chukwa_cca08.pdf?version=1&amp;modificationDate=1562667399000&amp;api=v2">2008</a> - <strong>AMPLab</strong> - Chukwa: A large-scale monitoring system.</li><li><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf">2007</a> - <strong>Amazon</strong> - Dynamo: Amazon’s Highly Available Key-value Store.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf">2006</a> - <strong>Google</strong> - The Chubby lock service for loosely-coupled distributed systems.</li><li><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en//archive/bigtable-osdi06.pdf">2006</a> - <strong>Google</strong> - Bigtable: A Distributed Storage System for Structured Data.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf">2004</a> - <strong>Google</strong> - MapReduce: Simplied Data Processing on Large Clusters.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">2003</a> - <strong>Google</strong> - The Google File System.</li></ul><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><ul><li><a href="https://www.manning.com/livevideo/spark-in-motion">Spark in Motion</a> - Spark in Motion 教你如何使用 Spark 进行批处理和流数据分析。</li><li><a href="https://www.manning.com/livevideo/machine-learning-data-science-and-deep-learning-with-python">Machine Learning, Data Science and Deep Learning with Python </a> - LiveVideo 教程涵盖了机器学习，Tensorflow，人工智能和神经网络。</li></ul><h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><ul><li><a href="https://www.manning.com/books/data-science-at-scale-with-python-and-dask">Data Science at Scale with Python and Dask</a> - 使用 Python 和 Dask 进行大规模数据科学教学，将教您如何构建可处理大量数据的分布式数据项目。</li><li><a href="https://www.manning.com/books/streaming-data">Streaming Data</a> - 介绍了流数据和实时数据系统的概念和要求。</li><li><a href="https://www.manning.com/books/storm-applied">Storm Applied</a> - 将 Apache Storm 用于与处理和分析实时数据流相关的实际任务的实用指南。</li><li><a href="http://www.cambridge.org/us/academic/subjects/engineering/communications-and-signal-processing/fundamentals-stream-processing-application-design-systems-and-analytics">Fundamentals of Stream Processing: Application Design, Systems, and Analytics</a> - 该指南结合了流处理中的基本构建块和新兴研究，非常适合应用程序设计人员，系统构建人员，分析开发人员以及该领域的学生和研究人员。</li><li><a href="http://www.springer.com/us/book/9780387710020">Stream Data Processing: A Quality of Service Perspective</a> - 提出了适用于流和复杂事件处理的新范例。</li><li><a href="https://www.manning.com/books/event-streams-in-action">Unified Log Processing</a> - 统一日志处理是在企业中实施事件流（Kafka 或 Kinesis）的统一日志的实用指南</li><li><a href="https://www.manning.com/books/kafka-streams-in-action">Kafka Streams in Action</a> - 在 Kafka 平台的数据上实现流处理所需的一切知识，可以集中精力从数据中获取更多信息，而无需花费时间或精力。</li><li><a href="https://www.manning.com/books/big-data">Big Data</a> - 教您使用一种架构来构建大数据系统，该架构利用了群集硬件以及专门用于捕获和分析 Web 规模数据的新工具。</li><li><a href="https://www.manning.com/books/spark-in-action">Spark in Action</a> &amp; <a href="https://www.manning.com/books/spark-in-action-second-edition">Spark in Action 2nd Ed.</a> - 教您使用Spark有效处理批处理和流式数据所需的理论和技能。 完全更新为Spark 2.0。</li><li><a href="https://www.manning.com/books/kafka-in-action">Kafka in Action</a> - 快速介绍与Kafka合作的各个方面的信息，您需要真正利用它的好处。</li><li><a href="https://www.manning.com/books/fusion-in-action">Fusion in Action</a> - 教您建立功能齐全的数据分析管道，包括文档和数据搜索以及分布式数据集群。</li><li><a href="https://www.manning.com/books/reactive-data-handling">Reactive Data Handling</a> - Reactive Data Handling 是由 Manuel Bernhardt 选择的五个精选章节的集合，向您介绍构建能够处理大数据负载实时处理的反应式应用程序。</li></ul><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><ul><li><a href="http://book.mixu.net/distsys/">Distributed Systems for fun and profit</a> - 分布式系统理论。 包括有关时间和顺序，复制和不可能结果的部分。</li></ul><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><ul><li><a href="https://www.manning.com/books/graph-powered-machine-learning">Graph-Powered Machine Learning</a> - Alessandro Negro 结合图论和模型来改善机器学习项目。</li></ul><h2 id="数据可视化-1"><a href="#数据可视化-1" class="headerlink" title="数据可视化"></a>数据可视化</h2><ul><li><a href="https://www.youtube.com/watch?v=5Zg-C8AAIGg">The beauty of data visualization</a></li><li><a href="https://www.youtube.com/watch?v=R-oiKt7bUU8">Designing Data Visualizations with Noah Iliinsky</a></li><li><a href="https://www.youtube.com/watch?v=jbkSRLYSojo">Hans Rosling&#39;s 200 Countries, 200 Years, 4 Minutes</a></li><li><a href="https://www.youtube.com/watch?v=qTEchen97rQ">Ice Bucket Challenge Data Visualization</a></li></ul><h1 id="其他清单"><a href="#其他清单" class="headerlink" title="其他清单"></a>其他清单</h1><ul><li>Other awesome lists <a href="https://github.com/bayandin/awesome-awesomeness">awesome-awesomeness</a>.</li><li>Even more lists <a href="https://github.com/sindresorhus/awesome">awesome</a>.</li><li>Another list? <a href="https://github.com/jnv/lists">list</a>.</li><li>WTF! <a href="https://github.com/t3chnoboy/awesome-awesome-awesome">awesome-awesome-awesome</a>.</li><li>Analytics <a href="https://github.com/onurakpolat/awesome-analytics">awesome-analytics</a>.</li><li>Public Datasets <a href="https://github.com/awesomedata/awesome-public-datasets">awesome-public-datasets</a>.</li><li>Graph Classification <a href="https://github.com/benedekrozemberczki/awesome-graph-classification">awesome-graph-classification</a>.</li><li>Network Embedding <a href="https://github.com/chihming/awesome-network-embedding">awesome-network-embedding</a>.</li><li>Community Detection <a href="https://github.com/benedekrozemberczki/awesome-community-detection">awesome-community-detection</a>.</li><li>Decision Tree Papers <a href="https://github.com/benedekrozemberczki/awesome-decision-tree-papers">awesome-decision-tree-papers</a>.</li><li>Fraud Detection Papers <a href="https://github.com/benedekrozemberczki/awesome-fraud-detection-papers">awesome-fraud-detection-papers</a>.</li><li>Gradient Boosting Papers <a href="https://github.com/benedekrozemberczki/awesome-gradient-boosting-papers">awesome-gradient-boosting-papers</a>.</li><li>Monte Carlo Tree Search Papers <a href="https://github.com/benedekrozemberczki/awesome-monte-carlo-tree-search-papers">awesome-monte-carlo-tree-search-papers</a>.</li><li>Kafka <a href="https://github.com/monksy/awesome-kafka">awesome-kafka</a>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Hexo 中插入 ECharts 动态图表</title>
      <link href="post/6f565d8c.html"/>
      <url>post/6f565d8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="ECharts-简介"><a href="#ECharts-简介" class="headerlink" title="ECharts 简介"></a>ECharts 简介</h1><p><a href="https://echarts.apache.org/">ECharts</a> 是一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（Chrome，Firefox，Safari，IE8/9/10/11等），底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。它提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于 BI 的漏斗图，仪表盘，并且支持图与图之间的混搭。</p><h1 id="Hexo-中的-ECharts"><a href="#Hexo-中的-ECharts" class="headerlink" title="Hexo 中的 ECharts"></a>Hexo 中的 ECharts</h1><p>ECharts 的 Hexo 插件目前有三个版本，分别为：</p><ul><li><a href="https://github.com/zhoulvjun/hexo-tag-echarts">hexo-tag-echarts</a><ul><li>需要手动引入 ECharts.js</li></ul></li><li><a href="https://github.com/kchen0x/hexo-tag-echarts3">hexo-tag-echarts3</a><ul><li>自动引入 <a href="https://cdn.bootcss.com/echarts/3.8.0/echarts.min.js">https://cdn.bootcss.com/echarts/3.8.0/echarts.min.js</a></li></ul></li><li><a href="https://github.com/gyx138/hexo-tag-echarts4">hexo-tag-echarts4</a><ul><li>自动引入 <a href="https://cdn.bootcss.com/echarts/4.3.0/echarts.min.js">https://cdn.bootcss.com/echarts/4.3.0/echarts.min.js</a></li></ul></li></ul><p>本文使用的是 Hexo 的 ECharts 插件 <a href="https://github.com/zhoulvjun/hexo-tag-echarts">hexo-tag-echarts</a>，只需要在 Hexo 文档中引入一次 ECharts.js 就可以渲染整个页面的图表了。插件的安装和使用非常的简单，只需要进入博客目录，然后打开命令行，用 <code>npm</code> 安装一下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-tag-echarts --save<br></code></pre></td></tr></table></figure></p><p>之后在文章内使用 <code>echarts</code> 的 <code>tag</code> 就可以了</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>\\TODO echarts option goes here<br>&#123;% endecharts %&#125;<br></code></pre></td></tr></table></figure></p><p>其中 <code>echarts</code> 是标签名，<code>endecharts</code> 是结束标签，不需要更改，<code>400</code> 是图表容器的高度，默认是按正常比例缩放的，<code>&#39;90%&#39;</code> 是图表容器的相对宽度，默认是 <code>100%</code>。在标签之间的部分，需要自己填充的图表数据和属性，更多自定义属性可以查看 <a href="https://echarts.apache.org/zh/option.html#title">ECharts 配置项文档</a>。</p><h1 id="图表示例"><a href="#图表示例" class="headerlink" title="图表示例"></a>图表示例</h1><p>现在你已经基本学会了在 Hexo 中插入 ECharts 图表了，下面再展示一些基本的图表，更多炫酷的图表可以自己去尝试一下。</p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        trigger: &#x27;axis&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    xAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;category&#x27;,</span><br><span class="hljs-code">        data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    yAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;value&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="hljs-code">        type: &#x27;line&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts7996" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts7996'));        // 指定图表的配置项和数据        var option = {    tooltip: {        trigger: 'axis'    },    xAxis: {        type: 'category',        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [820, 932, 901, 934, 1290, 1330, 1320],        type: 'line'    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="柱状图、条形图"><a href="#柱状图、条形图" class="headerlink" title="柱状图、条形图"></a>柱状图、条形图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    xAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;category&#x27;,</span><br><span class="hljs-code">        data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    yAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;value&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        data: [120, 200, 150, 80, 70, 110, 130],</span><br><span class="hljs-code">        type: &#x27;bar&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts3378" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts3378'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    xAxis: {        type: 'category',        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [120, 200, 150, 80, 70, 110, 130],        type: 'bar'    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="环形图、饼状图"><a href="#环形图、饼状图" class="headerlink" title="环形图、饼状图"></a>环形图、饼状图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        trigger: &#x27;item&#x27;,</span><br><span class="hljs-code">        formatter: &#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    legend: &#123;</span><br><span class="hljs-code">        orient: &#x27;vertical&#x27;,</span><br><span class="hljs-code">        left: 10,</span><br><span class="hljs-code">        data: [&#x27;直接访问&#x27;, &#x27;邮件营销&#x27;, &#x27;联盟广告&#x27;, &#x27;视频广告&#x27;, &#x27;搜索引擎&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            name: &#x27;访问来源&#x27;,</span><br><span class="hljs-code">            type: &#x27;pie&#x27;,</span><br><span class="hljs-code">            radius: [&#x27;50%&#x27;, &#x27;70%&#x27;],</span><br><span class="hljs-code">            avoidLabelOverlap: false,</span><br><span class="hljs-code">            label: &#123;</span><br><span class="hljs-code">                show: false,</span><br><span class="hljs-code">                position: &#x27;center&#x27;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            emphasis: &#123;</span><br><span class="hljs-code">                label: &#123;</span><br><span class="hljs-code">                    show: true,</span><br><span class="hljs-code">                    fontSize: &#x27;30&#x27;,</span><br><span class="hljs-code">                    fontWeight: &#x27;bold&#x27;</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            labelLine: &#123;</span><br><span class="hljs-code">                show: false</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            data: [</span><br><span class="hljs-code">                &#123;value: 335, name: &#x27;直接访问&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 310, name: &#x27;邮件营销&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 234, name: &#x27;联盟广告&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 135, name: &#x27;视频广告&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 1548, name: &#x27;搜索引擎&#x27;&#125;</span><br><span class="hljs-code">            ]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts8046" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8046'));        // 指定图表的配置项和数据        var option = {    tooltip: {        trigger: 'item',        formatter: '{a} <br/>{b}: {c} ({d}%)'    },    legend: {        orient: 'vertical',        left: 10,        data: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎']    },    series: [        {            name: '访问来源',            type: 'pie',            radius: ['50%', '70%'],            avoidLabelOverlap: false,            label: {                show: false,                position: 'center'            },            emphasis: {                label: {                    show: true,                    fontSize: '30',                    fontWeight: 'bold'                }            },            labelLine: {                show: false            },            data: [                {value: 335, name: '直接访问'},                {value: 310, name: '邮件营销'},                {value: 234, name: '联盟广告'},                {value: 135, name: '视频广告'},                {value: 1548, name: '搜索引擎'}            ]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    xAxis: &#123;&#125;,</span><br><span class="hljs-code">    yAxis: &#123;&#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        symbolSize: 20,</span><br><span class="hljs-code">        data: [</span><br><span class="hljs-code">            [10.0, 8.04],</span><br><span class="hljs-code">            [8.0, 6.95],</span><br><span class="hljs-code">            [13.0, 7.58],</span><br><span class="hljs-code">            [9.0, 8.81],</span><br><span class="hljs-code">            [11.0, 8.33],</span><br><span class="hljs-code">            [14.0, 9.96],</span><br><span class="hljs-code">            [6.0, 7.24],</span><br><span class="hljs-code">            [4.0, 4.26],</span><br><span class="hljs-code">            [12.0, 10.84],</span><br><span class="hljs-code">            [7.0, 4.82],</span><br><span class="hljs-code">            [5.0, 5.68]</span><br><span class="hljs-code">        ],</span><br><span class="hljs-code">        type: &#x27;scatter&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：<div id="echarts8024" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8024'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    xAxis: {},    yAxis: {},    series: [{        symbolSize: 20,        data: [            [10.0, 8.04],            [8.0, 6.95],            [13.0, 7.58],            [9.0, 8.81],            [11.0, 8.33],            [14.0, 9.96],            [6.0, 7.24],            [4.0, 4.26],            [12.0, 10.84],            [7.0, 4.82],            [5.0, 5.68]        ],        type: 'scatter'    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    legend: &#123;</span><br><span class="hljs-code">        data: [&#x27;预算分配（Allocated Budget）&#x27;, &#x27;实际开销（Actual Spending）&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    radar: &#123;</span><br><span class="hljs-code">        name: &#123;</span><br><span class="hljs-code">            textStyle: &#123;</span><br><span class="hljs-code">                color: &#x27;#fff&#x27;,</span><br><span class="hljs-code">                backgroundColor: &#x27;#999&#x27;,</span><br><span class="hljs-code">                borderRadius: 3,</span><br><span class="hljs-code">                padding: [3, 5]</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        &#125;,</span><br><span class="hljs-code">        indicator: [</span><br><span class="hljs-code">            &#123; name: &#x27;销售（sales）&#x27;, max: 6500&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;管理（Administration）&#x27;, max: 16000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;信息技术（Information Techology）&#x27;, max: 30000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;客服（Customer Support）&#x27;, max: 38000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;研发（Development）&#x27;, max: 52000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;市场（Marketing）&#x27;, max: 25000&#125;</span><br><span class="hljs-code">        ]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        name: &#x27;预算 vs 开销（Budget vs spending）&#x27;,</span><br><span class="hljs-code">        type: &#x27;radar&#x27;,</span><br><span class="hljs-code">        data: [</span><br><span class="hljs-code">            &#123;</span><br><span class="hljs-code">                value: [4300, 10000, 28000, 35000, 50000, 19000],</span><br><span class="hljs-code">                name: &#x27;预算分配（Allocated Budget）&#x27;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            &#123;</span><br><span class="hljs-code">                value: [5000, 14000, 28000, 31000, 42000, 21000],</span><br><span class="hljs-code">                name: &#x27;实际开销（Actual Spending）&#x27;</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        ]</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts8509" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8509'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    legend: {        data: ['预算分配（Allocated Budget）', '实际开销（Actual Spending）']    },    radar: {        name: {            textStyle: {                color: '#fff',                backgroundColor: '#999',                borderRadius: 3,                padding: [3, 5]            }        },        indicator: [            { name: '销售（sales）', max: 6500},            { name: '管理（Administration）', max: 16000},            { name: '信息技术（Information Techology）', max: 30000},            { name: '客服（Customer Support）', max: 38000},            { name: '研发（Development）', max: 52000},            { name: '市场（Marketing）', max: 25000}        ]    },    series: [{        name: '预算 vs 开销（Budget vs spending）',        type: 'radar',        data: [            {                value: [4300, 10000, 28000, 35000, 50000, 19000],                name: '预算分配（Allocated Budget）'            },            {                value: [5000, 14000, 28000, 31000, 42000, 21000],                name: '实际开销（Actual Spending）'            }        ]    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            type: &#x27;graph&#x27;,</span><br><span class="hljs-code">            layout: &#x27;none&#x27;,</span><br><span class="hljs-code">            symbolSize: 50,</span><br><span class="hljs-code">            label: &#123;</span><br><span class="hljs-code">                show: true</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            edgeSymbol: [&#x27;circle&#x27;, &#x27;arrow&#x27;],</span><br><span class="hljs-code">            edgeSymbolSize: [4, 10],</span><br><span class="hljs-code">            edgeLabel: &#123;</span><br><span class="hljs-code">                fontSize: 20</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            data: [&#123;</span><br><span class="hljs-code">                name: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                x: 300,</span><br><span class="hljs-code">                y: 300</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                x: 800,</span><br><span class="hljs-code">                y: 300</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;节点3&#x27;,</span><br><span class="hljs-code">                x: 550,</span><br><span class="hljs-code">                y: 100</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;节点4&#x27;,</span><br><span class="hljs-code">                x: 550,</span><br><span class="hljs-code">                y: 500</span><br><span class="hljs-code">            &#125;],</span><br><span class="hljs-code">            links: [&#123;</span><br><span class="hljs-code">                source: 0,</span><br><span class="hljs-code">                target: 1,</span><br><span class="hljs-code">                symbolSize: [5, 20],</span><br><span class="hljs-code">                label: &#123;</span><br><span class="hljs-code">                    show: true</span><br><span class="hljs-code">                &#125;,</span><br><span class="hljs-code">                lineStyle: &#123;</span><br><span class="hljs-code">                    width: 5,</span><br><span class="hljs-code">                    curveness: 0.2</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                label: &#123;</span><br><span class="hljs-code">                    show: true</span><br><span class="hljs-code">                &#125;,</span><br><span class="hljs-code">                lineStyle: &#123;</span><br><span class="hljs-code">                    curveness: 0.2</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点3&#x27;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点3&#x27;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点4&#x27;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点4&#x27;</span><br><span class="hljs-code">            &#125;],</span><br><span class="hljs-code">            lineStyle: &#123;</span><br><span class="hljs-code">                opacity: 0.9,</span><br><span class="hljs-code">                width: 2,</span><br><span class="hljs-code">                curveness: 0</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts1921" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts1921'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: [        {            type: 'graph',            layout: 'none',            symbolSize: 50,            label: {                show: true            },            edgeSymbol: ['circle', 'arrow'],            edgeSymbolSize: [4, 10],            edgeLabel: {                fontSize: 20            },            data: [{                name: '节点1',                x: 300,                y: 300            }, {                name: '节点2',                x: 800,                y: 300            }, {                name: '节点3',                x: 550,                y: 100            }, {                name: '节点4',                x: 550,                y: 500            }],            links: [{                source: 0,                target: 1,                symbolSize: [5, 20],                label: {                    show: true                },                lineStyle: {                    width: 5,                    curveness: 0.2                }            }, {                source: '节点2',                target: '节点1',                label: {                    show: true                },                lineStyle: {                    curveness: 0.2                }            }, {                source: '节点1',                target: '节点3'            }, {                source: '节点2',                target: '节点3'            }, {                source: '节点2',                target: '节点4'            }, {                source: '节点1',                target: '节点4'            }],            lineStyle: {                opacity: 0.9,                width: 2,                curveness: 0            }        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="矩形树图"><a href="#矩形树图" class="headerlink" title="矩形树图"></a>矩形树图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        type: &#x27;treemap&#x27;,</span><br><span class="hljs-code">        data: [&#123;</span><br><span class="hljs-code">            name: &#x27;nodeA&#x27;,            // First tree</span><br><span class="hljs-code">            value: 10,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;nodeAa&#x27;,       // First leaf of first tree</span><br><span class="hljs-code">                value: 4</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;nodeAb&#x27;,       // Second leaf of first tree</span><br><span class="hljs-code">                value: 6</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;nodeB&#x27;,            // Second tree</span><br><span class="hljs-code">            value: 20,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;nodeBa&#x27;,       // Son of first tree</span><br><span class="hljs-code">                value: 20,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;nodeBa1&#x27;,  // Granson of first tree</span><br><span class="hljs-code">                    value: 20</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;]</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts6177" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts6177'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: [{        type: 'treemap',        data: [{            name: 'nodeA',            // First tree            value: 10,            children: [{                name: 'nodeAa',       // First leaf of first tree                value: 4            }, {                name: 'nodeAb',       // Second leaf of first tree                value: 6            }]        }, {            name: 'nodeB',            // Second tree            value: 20,            children: [{                name: 'nodeBa',       // Son of first tree                value: 20,                children: [{                    name: 'nodeBa1',  // Granson of first tree                    value: 20                }]            }]        }]    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="旭日图"><a href="#旭日图" class="headerlink" title="旭日图"></a>旭日图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: &#123;</span><br><span class="hljs-code">        type: &#x27;sunburst&#x27;,</span><br><span class="hljs-code">        data: [&#123;</span><br><span class="hljs-code">            name: &#x27;Grandpa&#x27;,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;Uncle Leo&#x27;,</span><br><span class="hljs-code">                value: 15,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Jack&#x27;,</span><br><span class="hljs-code">                    value: 2</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Mary&#x27;,</span><br><span class="hljs-code">                    value: 5,</span><br><span class="hljs-code">                    children: [&#123;</span><br><span class="hljs-code">                        name: &#x27;Jackson&#x27;,</span><br><span class="hljs-code">                        value: 2</span><br><span class="hljs-code">                    &#125;]</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Ben&#x27;,</span><br><span class="hljs-code">                    value: 4</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;Father&#x27;,</span><br><span class="hljs-code">                value: 10,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;Me&#x27;,</span><br><span class="hljs-code">                    value: 5</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Brother Peter&#x27;,</span><br><span class="hljs-code">                    value: 1</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;Nancy&#x27;,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;Uncle Nike&#x27;,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Betty&#x27;,</span><br><span class="hljs-code">                    value: 1</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Jenny&#x27;,</span><br><span class="hljs-code">                    value: 2</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;],</span><br><span class="hljs-code">        radius: [0, &#x27;90%&#x27;],</span><br><span class="hljs-code">        label: &#123;</span><br><span class="hljs-code">            rotate: &#x27;radial&#x27;</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts8961" style="width: 90%;height: 700px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8961'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: {        type: 'sunburst',        data: [{            name: 'Grandpa',            children: [{                name: 'Uncle Leo',                value: 15,                children: [{                    name: 'Cousin Jack',                    value: 2                }, {                    name: 'Cousin Mary',                    value: 5,                    children: [{                        name: 'Jackson',                        value: 2                    }]                }, {                    name: 'Cousin Ben',                    value: 4                }]            }, {                name: 'Father',                value: 10,                children: [{                    name: 'Me',                    value: 5                }, {                    name: 'Brother Peter',                    value: 1                }]            }]        }, {            name: 'Nancy',            children: [{                name: 'Uncle Nike',                children: [{                    name: 'Cousin Betty',                    value: 1                }, {                    name: 'Cousin Jenny',                    value: 2                }]            }]        }],        radius: [0, '90%'],        label: {            rotate: 'radial'        }    }};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="平行坐标系"><a href="#平行坐标系" class="headerlink" title="平行坐标系"></a>平行坐标系</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    parallelAxis: [</span><br><span class="hljs-code">        &#123;dim: 0, name: &#x27;Price&#x27;&#125;,</span><br><span class="hljs-code">        &#123;dim: 1, name: &#x27;Net Weight&#x27;&#125;,</span><br><span class="hljs-code">        &#123;dim: 2, name: &#x27;Amount&#x27;&#125;,</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            dim: 3,</span><br><span class="hljs-code">            name: &#x27;Score&#x27;,</span><br><span class="hljs-code">            type: &#x27;category&#x27;,</span><br><span class="hljs-code">            data: [&#x27;Excellent&#x27;, &#x27;Good&#x27;, &#x27;OK&#x27;, &#x27;Bad&#x27;]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ],</span><br><span class="hljs-code">    series: &#123;</span><br><span class="hljs-code">        type: &#x27;parallel&#x27;,</span><br><span class="hljs-code">        lineStyle: &#123;</span><br><span class="hljs-code">            width: 4</span><br><span class="hljs-code">        &#125;,</span><br><span class="hljs-code">        data: [</span><br><span class="hljs-code">            [12.99, 100, 82, &#x27;Good&#x27;],</span><br><span class="hljs-code">            [9.99, 80, 77, &#x27;OK&#x27;],</span><br><span class="hljs-code">            [20, 120, 60, &#x27;Excellent&#x27;]</span><br><span class="hljs-code">        ]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts7009" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts7009'));        // 指定图表的配置项和数据        var option = {    parallelAxis: [        {dim: 0, name: 'Price'},        {dim: 1, name: 'Net Weight'},        {dim: 2, name: 'Amount'},        {            dim: 3,            name: 'Score',            type: 'category',            data: ['Excellent', 'Good', 'OK', 'Bad']        }    ],    series: {        type: 'parallel',        lineStyle: {            width: 4        },        data: [            [12.99, 100, 82, 'Good'],            [9.99, 80, 77, 'OK'],            [20, 120, 60, 'Excellent']        ]    }};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="桑基图"><a href="#桑基图" class="headerlink" title="桑基图"></a>桑基图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27;&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: &#123;</span><br><span class="hljs-code">        type: &#x27;sankey&#x27;,</span><br><span class="hljs-code">        layout: &#x27;none&#x27;,</span><br><span class="hljs-code">        focusNodeAdjacency: &#x27;allEdges&#x27;,</span><br><span class="hljs-code">        data: [&#123;</span><br><span class="hljs-code">            name: &#x27;a&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;b&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;a1&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;a2&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;b1&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;c&#x27;</span><br><span class="hljs-code">        &#125;],</span><br><span class="hljs-code">        links: [&#123;</span><br><span class="hljs-code">            source: &#x27;a&#x27;,</span><br><span class="hljs-code">            target: &#x27;a1&#x27;,</span><br><span class="hljs-code">            value: 5</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;a&#x27;,</span><br><span class="hljs-code">            target: &#x27;a2&#x27;,</span><br><span class="hljs-code">            value: 3</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;b&#x27;,</span><br><span class="hljs-code">            target: &#x27;b1&#x27;,</span><br><span class="hljs-code">            value: 8</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;a&#x27;,</span><br><span class="hljs-code">            target: &#x27;b1&#x27;,</span><br><span class="hljs-code">            value: 3</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;b1&#x27;,</span><br><span class="hljs-code">            target: &#x27;a1&#x27;,</span><br><span class="hljs-code">            value: 1</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;b1&#x27;,</span><br><span class="hljs-code">            target: &#x27;c&#x27;,</span><br><span class="hljs-code">            value: 2</span><br><span class="hljs-code">        &#125;]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts3143" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts3143'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: {        type: 'sankey',        layout: 'none',        focusNodeAdjacency: 'allEdges',        data: [{            name: 'a'        }, {            name: 'b'        }, {            name: 'a1'        }, {            name: 'a2'        }, {            name: 'b1'        }, {            name: 'c'        }],        links: [{            source: 'a',            target: 'a1',            value: 5        }, {            source: 'a',            target: 'a2',            value: 3        }, {            source: 'b',            target: 'b1',            value: 8        }, {            source: 'a',            target: 'b1',            value: 3        }, {            source: 'b1',            target: 'a1',            value: 1        }, {            source: 'b1',            target: 'c',            value: 2        }]    }};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27;&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        trigger: &#x27;item&#x27;,</span><br><span class="hljs-code">        formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&quot;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    legend: &#123;</span><br><span class="hljs-code">        data: [&#x27;展现&#x27;,&#x27;点击&#x27;,&#x27;访问&#x27;,&#x27;咨询&#x27;,&#x27;订单&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            name:&#x27;漏斗图&#x27;,</span><br><span class="hljs-code">            type:&#x27;funnel&#x27;,</span><br><span class="hljs-code">            left: &#x27;10%&#x27;,</span><br><span class="hljs-code">            top: 60,</span><br><span class="hljs-code">            //x2: 80,</span><br><span class="hljs-code">            bottom: 60,</span><br><span class="hljs-code">            width: &#x27;80%&#x27;,</span><br><span class="hljs-code">            // height: &#123;totalHeight&#125; - y - y2,</span><br><span class="hljs-code">            min: 0,</span><br><span class="hljs-code">            max: 100,</span><br><span class="hljs-code">            minSize: &#x27;0%&#x27;,</span><br><span class="hljs-code">            maxSize: &#x27;100%&#x27;,</span><br><span class="hljs-code">            sort: &#x27;descending&#x27;,</span><br><span class="hljs-code">            gap: 2,</span><br><span class="hljs-code">            label: &#123;</span><br><span class="hljs-code">                show: true,</span><br><span class="hljs-code">                position: &#x27;inside&#x27;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            labelLine: &#123;</span><br><span class="hljs-code">                length: 10,</span><br><span class="hljs-code">                lineStyle: &#123;</span><br><span class="hljs-code">                    width: 1,</span><br><span class="hljs-code">                    type: &#x27;solid&#x27;</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            itemStyle: &#123;</span><br><span class="hljs-code">                borderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">                borderWidth: 1</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            data: [</span><br><span class="hljs-code">                &#123;value: 60, name: &#x27;访问&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 40, name: &#x27;咨询&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 20, name: &#x27;订单&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 80, name: &#x27;点击&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 100, name: &#x27;展现&#x27;&#125;</span><br><span class="hljs-code">            ]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts154" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts154'));        // 指定图表的配置项和数据        var option = {    tooltip: {        trigger: 'item',        formatter: "{a} <br/>{b} : {c}%"    },    legend: {        data: ['展现','点击','访问','咨询','订单']    },    series: [        {            name:'漏斗图',            type:'funnel',            left: '10%',            top: 60,            //x2: 80,            bottom: 60,            width: '80%',            // height: {totalHeight} - y - y2,            min: 0,            max: 100,            minSize: '0%',            maxSize: '100%',            sort: 'descending',            gap: 2,            label: {                show: true,                position: 'inside'            },            labelLine: {                length: 10,                lineStyle: {                    width: 1,                    type: 'solid'                }            },            itemStyle: {                borderColor: '#fff',                borderWidth: 1            },            data: [                {value: 60, name: '访问'},                {value: 40, name: '咨询'},                {value: 20, name: '订单'},                {value: 80, name: '点击'},                {value: 100, name: '展现'}            ]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27;&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        formatter: &#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            name: &#x27;业务指标&#x27;,</span><br><span class="hljs-code">            type: &#x27;gauge&#x27;,</span><br><span class="hljs-code">            detail: &#123;formatter: &#x27;&#123;value&#125;%&#x27;&#125;,</span><br><span class="hljs-code">            data: [&#123;value: 88.88, name: &#x27;完成率&#x27;&#125;]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts5980" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5980'));        // 指定图表的配置项和数据        var option = {    tooltip: {        formatter: '{a} <br/>{b} : {c}%'    },    series: [        {            name: '业务指标',            type: 'gauge',            detail: {formatter: '{value}%'},            data: [{value: 88.88, name: '完成率'}]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果你想了解更多，可以查看 ECharts 的 <a href="https://echarts.apache.org/en/index.html">英文文档</a> 或者 <a href="https://echarts.apache.org/zh/index.html">中文文档</a>，更多的实例和属性设置都可以找到，也可以在 ECharts 官网配置好图表属性后再引入到自己的 Hexo 文档中。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Hexo 中插入 Chart 动态图表</title>
      <link href="post/a6e75a2b.html"/>
      <url>post/a6e75a2b.html</url>
      
        <content type="html"><![CDATA[<p><div class="note info simple"><p>文章来源：<br>  作者: <a href="https://github.com/Shen-Yu">Shen-Yu</a><br>  链接: <a href="https://shen-yu.gitee.io/2020/chartjs/">https://shen-yu.gitee.io/2020/chartjs/</a><br>  来源: <a href="https://shen-yu.gitee.io/">岛</a><br>  著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></div></p><h1 id="Chartjs-简介"><a href="#Chartjs-简介" class="headerlink" title="Chartjs 简介"></a>Chartjs 简介</h1><p><a href="https://chartjs.bootcss.com/">Chartjs</a> 是一款简单优雅的数据可视化工具，对比其他图表库如 <a href="https://echarts.apache.org/">ECharts</a>、<a href="https://www.highcharts.com/">Highcharts</a>、<a href="https://c3js.org/">C3</a>、<a href="http://www.flotcharts.org/">Flot</a>、<a href="https://www.amcharts.com/javascript-charts/">amCharts</a> 等，它的画面效果、动态效果都更精致，它的 <a href="https://chartjs.bootcss.com/">文档首页</a> 就透出一股小清新，基于 HTML5 Canvas，它拥有更好的性能且响应式，基本满足了一般数据展示的需要，包括折线图，条形图，饼图，散点图，雷达图，极地图，甜甜圈图等。</p><h1 id="Hexo-中的-Chartjs"><a href="#Hexo-中的-Chartjs" class="headerlink" title="Hexo 中的 Chartjs"></a>Hexo 中的 Chartjs</h1><p>为了方便在 Hexo 中使用这么漂亮的图表库，我自己写了一个 Hexo 的 <a href="https://github.com/Shen-Yu/hexo-tag-chart">Chartjs</a> 插件。插件的安装和使用非常的简单，只需要进入博客目录，然后打开命令行，用 <code>npm</code> 安装一下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-tag-chart --save<br></code></pre></td></tr></table></figure></p><p>之后在文章内使用 <code>chart</code> 的 <code>tag</code> 就可以了</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>\\TODO option goes here<br>&#123;% endchart %&#125;<br></code></pre></td></tr></table></figure></p><p>其中 <code>chart</code> 是标签名，<code>endchart</code> 是结束标签，不需要更改，<code>90%</code> 是图表容器的相对宽度，默认是 <code>100%</code>，<code>300</code> 是图表容器的高度，默认是按正常比例缩放的，你可以通过设置 <code>options</code> 里面的 <code>aspectRatio</code> 属性来调整宽高比例，另外还有许多属性可以自定义，你可以查看 <a href="https://chartjs.bootcss.com/docs/">官方文档</a>。在标签之间的部分，需要自己填充的图表数据和属性。</p><h1 id="图表示例"><a href="#图表示例" class="headerlink" title="图表示例"></a>图表示例</h1><p>现在你已经基本学会了在 Hexo 中插入 Chart 图表了，下面再展示一些基本的图表，更多炫酷的图表可以自己去尝试一下。</p><h2 id="柱状图、条形图"><a href="#柱状图、条形图" class="headerlink" title="柱状图、条形图"></a>柱状图、条形图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;bar&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [65, 59, 80, 81, 56, 55, 40],</span><br><span class="hljs-code">      fill: false,</span><br><span class="hljs-code">      backgroundColor: [&#x27;rgba(255, 99, 132, 0.5)&#x27;, &#x27;rgba(255, 159, 64, 0.5)&#x27;, &#x27;rgba(255, 205, 86, 0.5)&#x27;, &#x27;rgba(75, 192, 192, 0.5)&#x27;, &#x27;rgba(54, 162, 235, 0.5)&#x27;, &#x27;rgba(153, 102, 255, 0.5)&#x27;, &#x27;rgba(201, 203, 207, 0.5)&#x27;],</span><br><span class="hljs-code">      borderColor: [&#x27;rgb(255, 99, 132)&#x27;, &#x27;rgb(255, 159, 64)&#x27;, &#x27;rgb(255, 205, 86)&#x27;, &#x27;rgb(75, 192, 192)&#x27;, &#x27;rgb(54, 162, 235)&#x27;, &#x27;rgb(153, 102, 255)&#x27;, &#x27;rgb(201, 203, 207)&#x27;],</span><br><span class="hljs-code">      borderWidth: 1</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    scales: &#123;</span><br><span class="hljs-code">      yAxes: [&#123;</span><br><span class="hljs-code">        ticks: &#123;</span><br><span class="hljs-code">          beginAtZero: true</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart4399" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart4399').getContext('2d');    var options = {  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [{      label: 'First Dataset',      data: [65, 59, 80, 81, 56, 55, 40],      fill: false,      backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(255, 159, 64, 0.5)', 'rgba(255, 205, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(201, 203, 207, 0.5)'],      borderColor: ['rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(54, 162, 235)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)'],      borderWidth: 1    }]  },  options: {    scales: {      yAxes: [{        ticks: {          beginAtZero: true        }      }]    }  }};    new Chart(ctx, options);</script></p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;line&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First dataset&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      data: [0, 10, 5, 2, 20, 30, 45]</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    responsive: true,</span><br><span class="hljs-code">    title: &#123;</span><br><span class="hljs-code">    display: true,</span><br><span class="hljs-code">    text: &#x27;Chart.js Line Chart&#x27;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart2748" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart2748').getContext('2d');    var options = {  type: 'line',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [{      label: 'First dataset',      backgroundColor: 'rgb(255, 99, 132)',      borderColor: 'rgb(255, 99, 132)',      data: [0, 10, 5, 2, 20, 30, 45]      }]  },  options: {    responsive: true,    title: {    display: true,    text: 'Chart.js Line Chart'    }  }};    new Chart(ctx, options);</script></p><h2 id="环形图、饼状图"><a href="#环形图、饼状图" class="headerlink" title="环形图、饼状图"></a>环形图、饼状图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;pie&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;Red&#x27;, &#x27;Blue&#x27;, &#x27;Yellow&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [300, 50, 100],</span><br><span class="hljs-code">      backgroundColor: [&#x27;rgb(255, 99, 132)&#x27;, &#x27;rgb(54, 162, 235)&#x27;, &#x27;rgb(255, 205, 86)&#x27;]</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart7953" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart7953').getContext('2d');    var options = {  type: 'pie',  data: {    labels: ['Red', 'Blue', 'Yellow'],    datasets: [{      label: 'First Dataset',      data: [300, 50, 100],      backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']    }]  }};    new Chart(ctx, options);</script></p><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;radar&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;Eating&#x27;, &#x27;Drinking&#x27;, &#x27;Sleeping&#x27;, &#x27;Designing&#x27;, &#x27;Coding&#x27;, &#x27;Cycling&#x27;, &#x27;Running&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [65, 59, 90, 81, 56, 55, 40],</span><br><span class="hljs-code">      fill: true,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgba(255, 99, 132, 0.2)&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      pointBackgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      pointBorderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBackgroundColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBorderColor: &#x27;rgb(255, 99, 132)&#x27;</span><br><span class="hljs-code">    &#125;, &#123;</span><br><span class="hljs-code">      label: &#x27;Second Dataset&#x27;,</span><br><span class="hljs-code">      data: [28, 48, 40, 19, 96, 27, 100],</span><br><span class="hljs-code">      fill: true,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgba(54, 162, 235, 0.2)&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      pointBackgroundColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      pointBorderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBackgroundColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBorderColor: &#x27;rgb(54, 162, 235)&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    elements: &#123;</span><br><span class="hljs-code">      line: &#123;</span><br><span class="hljs-code">        tension: 0,</span><br><span class="hljs-code">        borderWidth: 3</span><br><span class="hljs-code">      &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart6637" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart6637').getContext('2d');    var options = {  type: 'radar',  data: {    labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],    datasets: [{      label: 'First Dataset',      data: [65, 59, 90, 81, 56, 55, 40],      fill: true,      backgroundColor: 'rgba(255, 99, 132, 0.2)',      borderColor: 'rgb(255, 99, 132)',      pointBackgroundColor: 'rgb(255, 99, 132)',      pointBorderColor: '#fff',      pointHoverBackgroundColor: '#fff',      pointHoverBorderColor: 'rgb(255, 99, 132)'    }, {      label: 'Second Dataset',      data: [28, 48, 40, 19, 96, 27, 100],      fill: true,      backgroundColor: 'rgba(54, 162, 235, 0.2)',      borderColor: 'rgb(54, 162, 235)',      pointBackgroundColor: 'rgb(54, 162, 235)',      pointBorderColor: '#fff',      pointHoverBackgroundColor: '#fff',      pointHoverBorderColor: 'rgb(54, 162, 235)'    }]  },  options: {    elements: {      line: {        tension: 0,        borderWidth: 3      }    }  }};    new Chart(ctx, options);</script></p><h2 id="气泡图"><a href="#气泡图" class="headerlink" title="气泡图"></a>气泡图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;bubble&#x27;,<br>  data: &#123;<br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [&#123;</span><br><span class="hljs-code">        x: 20,</span><br><span class="hljs-code">        y: 30,</span><br><span class="hljs-code">        r: 6</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 25,</span><br><span class="hljs-code">        y: 20,</span><br><span class="hljs-code">        r: 8</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 32,</span><br><span class="hljs-code">        y: 6,</span><br><span class="hljs-code">        r: 7</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 35,</span><br><span class="hljs-code">        y: 26,</span><br><span class="hljs-code">        r: 9</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 40,</span><br><span class="hljs-code">        y: 10,</span><br><span class="hljs-code">        r: 5</span><br><span class="hljs-code">      &#125;],</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(255, 99, 132)&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart7816" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart7816').getContext('2d');    var options = {  type: 'bubble',  data: {    datasets: [{      label: 'First Dataset',      data: [{        x: 20,        y: 30,        r: 6      }, {        x: 25,        y: 20,        r: 8      }, {        x: 32,        y: 6,        r: 7      }, {        x: 35,        y: 26,        r: 9      }, {        x: 40,        y: 10,        r: 5      }],      backgroundColor: 'rgb(255, 99, 132)'    }]  }};    new Chart(ctx, options);</script></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;scatter&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First dataset&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      data: [&#123;</span><br><span class="hljs-code">        x: 12,</span><br><span class="hljs-code">        y: 45,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 12,</span><br><span class="hljs-code">        y: 13,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 56,</span><br><span class="hljs-code">        y: 3,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 5,</span><br><span class="hljs-code">        y: 87,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 43,</span><br><span class="hljs-code">        y: 76,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 34,</span><br><span class="hljs-code">        y: 8,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 9,</span><br><span class="hljs-code">        y: 53,</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;, &#123;</span><br><span class="hljs-code">      label: &#x27;Second dataset&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      data: [&#123;</span><br><span class="hljs-code">        x: 56,</span><br><span class="hljs-code">        y: 12,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 7,</span><br><span class="hljs-code">        y: 12,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 87,</span><br><span class="hljs-code">        y: 24,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 34,</span><br><span class="hljs-code">        y: 45,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 65,</span><br><span class="hljs-code">        y: 27,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 8,</span><br><span class="hljs-code">        y: 37,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 24,</span><br><span class="hljs-code">        y: 89,</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;],</span><br><span class="hljs-code">    options: &#123;</span><br><span class="hljs-code">      title: &#123;</span><br><span class="hljs-code">        display: true,</span><br><span class="hljs-code">        text: &#x27;Chart.js Scatter Chart&#x27;</span><br><span class="hljs-code">      &#125;,</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart4927" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart4927').getContext('2d');    var options = {  type: 'scatter',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [{      label: 'First dataset',      borderColor: 'rgb(255, 99, 132)',      backgroundColor: 'rgb(255, 99, 132)',      data: [{        x: 12,        y: 45,      }, {        x: 12,        y: 13,      }, {        x: 56,        y: 3,      }, {        x: 5,        y: 87,      }, {        x: 43,        y: 76,      }, {        x: 34,        y: 8,      }, {        x: 9,        y: 53,      }]    }, {      label: 'Second dataset',      borderColor: 'rgb(54, 162, 235)',      backgroundColor: 'rgb(54, 162, 235)',      data: [{        x: 56,        y: 12,      }, {        x: 7,        y: 12,      }, {        x: 87,        y: 24,      }, {        x: 34,        y: 45,      }, {        x: 65,        y: 27,      }, {        x: 8,        y: 37,      }, {        x: 24,        y: 89,      }]    }],    options: {      title: {        display: true,        text: 'Chart.js Scatter Chart'      },    }  }};    new Chart(ctx, options);</script></p><h2 id="混合图"><a href="#混合图" class="headerlink" title="混合图"></a>混合图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;bar&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;Bar Dataset&#x27;,</span><br><span class="hljs-code">      data: [10, 20, 30, 40],</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgba(255, 99, 132)&#x27;</span><br><span class="hljs-code">    &#125;, &#123;</span><br><span class="hljs-code">      label: &#x27;Line Dataset&#x27;,</span><br><span class="hljs-code">      data: [20, 30, 40, 50],</span><br><span class="hljs-code">      type: &#x27;line&#x27;,</span><br><span class="hljs-code">      fill: false,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(54, 162, 235)&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    scales: &#123;</span><br><span class="hljs-code">      yAxes: [&#123;</span><br><span class="hljs-code">        ticks: &#123;</span><br><span class="hljs-code">          beginAtZero: true</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart2620" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart2620').getContext('2d');    var options = {  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April'],    datasets: [{      label: 'Bar Dataset',      data: [10, 20, 30, 40],      borderColor: 'rgb(255, 99, 132)',      backgroundColor: 'rgba(255, 99, 132)'    }, {      label: 'Line Dataset',      data: [20, 30, 40, 50],      type: 'line',      fill: false,      borderColor: 'rgb(54, 162, 235)'    }]  },  options: {    scales: {      yAxes: [{        ticks: {          beginAtZero: true        }      }]    }  }};    new Chart(ctx, options);</script></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果你想了解更多，<a href="https://www.chartjs.org/">官方文档</a> 是不二之选。如果你英语不好，那么可以看看 <a href="https://chartjs.bootcss.com/">中文文档</a>，所有的例子和属性都能在里面找到，祝你玩得开心。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基本语法</title>
      <link href="post/c894e39a.html"/>
      <url>post/c894e39a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-应用"><a href="#Markdown-应用" class="headerlink" title="Markdown 应用"></a>Markdown 应用</h1><ul><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li><li>Markdown 编写的文档可以导出 HTML、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 .md 或 .markdown。</li></ul><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge 等。</p><h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>Markdown 标题有两种格式。</p><ol><li><p>使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p><p>= 和 - 标记语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一级标题<br>=======<br><br>二级标题<br>-------<br></code></pre></td></tr></table></figure></p><p><!-- 显示效果如下所示：> 一级标题> =======> 二级标题> ------- --></p></li><li><p>使用 <code>#</code> 号标记</p><p>使用 <code>#</code> 号克表示 1-6 级标题，一级标题对应一个 <code>#</code> 号，二级标题对应两个 <code>#</code> 号，以此类推。</p><p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure></p><p> <!-- 显示效果如下所示：> # 一级标题> ## 二级标题> ### 三级标题> #### 四级标题> ##### 五级标题> ###### 六级标题 --></p></li></ol><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个空格以上加上回车。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Markdown[<span class="hljs-string">空格</span>][<span class="hljs-symbol">空格</span>][<span class="hljs-string">回车</span>]<br>Markdown<br></code></pre></td></tr></table></figure></p><p>当然也可以在段落后面使用一个空行表示重新开始一个段落</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Markdown<br>[空行]<br>Markdown<br></code></pre></td></tr></table></figure></p><p>还可以使用 <code>&lt;br/&gt;</code> 实现强制换行</p><p>显示效果如下所示：</p><blockquote><p>Markdown<br>Markdown</p></blockquote><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-strong">__粗体文本__</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*斜粗体文本<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_斜粗体文本<span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span></span></span></span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><em>斜体文本</em><br><em>斜体文本</em>  </p><p><strong>粗体文本</strong><br><strong>粗体文本</strong></p><p><strong><em>斜粗体文本</em></strong><br><strong><em>斜粗体文本</em></strong></p></blockquote><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个以上的星号 <code>*</code>、减号 <code>-</code>、底线 <code>_</code> 来建立一个分隔线，行内不能有其他东西，也可以在星号 <code>*</code>、减号 <code>-</code>、底线 <code>_</code> 中间插入空格。下面每种写法都可以建立分隔线：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">- - -</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">* * *</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">_</span> <span class="hljs-emphasis">_ _</span></span></span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><hr><hr><hr><hr><hr><hr></blockquote><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <code>~~</code> 即可：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正常文本<br>~~删除文本~~<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>正常文本<br><del>删除文本</del></p></blockquote><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线文本<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><u>下划线文本</u></p></blockquote><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明，Markdown 脚注的格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[^ 要脚注的文本]<br>Markdown[^ Markdown]  <br><br>[^ Markdown ]：一种轻量级标记语言<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>Markdown<sup><a href="#fn_ Markdown" id="reffn_ Markdown"> Markdown</a></sup>。</p><blockquote id="fn_ Markdown"><sup> Markdown</sup>. 一种轻量级标记语言<a href="#reffn_ Markdown" title="Jump back to footnote [ Markdown] in the text."> &#8617;</a></blockquote></blockquote><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号 <code>*</code>、加号 <code>+</code>、减号 <code>-</code> 作为列表标记，这些标记后面都要添加一个空格，然后再填写内容：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表使用数字并加上 <code>.</code> 号来表示，如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><p>列表嵌套只需要在子列表中的选项前面添加四个空格即可：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">  -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">  -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">  1.</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">  2.</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ol><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ol></li></ol></blockquote><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号，然后后面紧跟一个空格符号：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块引用</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>区块引用</p></blockquote><p>另外区块是可以嵌套的，一个 <code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 最外层</span><br><span class="hljs-quote">&gt; &gt; 第一层嵌套</span><br><span class="hljs-quote">&gt; &gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p><br></p><p><strong>区块中使用列表</strong></p><p>区块中使用列表实例如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块中使用列表</span><br><span class="hljs-quote">&gt; 1. 第一项</span><br><span class="hljs-quote">&gt; 2. 第二项</span><br><span class="hljs-quote">&gt; + 第一项</span><br><span class="hljs-quote">&gt; + 第二项</span><br><span class="hljs-quote">&gt; + 第三项</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p><br></p><p><strong>列表中使用区块</strong></p><p>如果要在列表项目内放进区块，那么就需要在 <code>&gt;</code> 前添加四个空格的缩进。</p><p>区块中使用列表实例如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-code">    &gt; 列表中使用区块</span><br><span class="hljs-code">* 第二项</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><ul><li>第一项<blockquote><p>列表中使用区块</p></blockquote></li><li>第二项</li></ul><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号 <code>` </code> 或用三个反引号 <code>``` </code> 把它包起来例如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">` print `</span> 函数<br><span class="hljs-code">``` print ``` </span>函数<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><code>print</code> 函数<br><code>print</code> 函数</p></blockquote><p><br></p><p><strong>代码区块</strong></p><p>代码区块使用 4 个空格或者一个制表符（Tab 键）：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">空格</span>][<span class="hljs-symbol">空格</span>][<span class="hljs-string">空格</span>][<span class="hljs-symbol">空格</span>]print(&quot;Hello&quot;);<br>[Tab]print(&quot;World&quot;);<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>   print(&quot;Hello&quot;);<br>   print(&quot;World&quot;);</p></blockquote><p>你也可以用 <code>``` </code> 包裹一段代码，并指定一种语言（也可以不指定）：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">javascript</span>]<br>$(document).ready(function () &#123;<br><span class="hljs-code">    alert(&#x27;Hello World&#x27;);</span><br><span class="hljs-code">&#125;);</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">&#x27;Hello World&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1></blockquote><p>链接语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">链接名称</span>](<span class="hljs-link">链接地址</span>)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><a href="https://www.baidu.com/">Baidu</a><br>或者<br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p></blockquote><p><br></p><p><strong>高级链接</strong></p><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这个链接用 Google 作为网址变量 [<span class="hljs-string">Google</span>][<span class="hljs-symbol">Google</span>]<br>然后在文档的结尾为变量赋值（网址）<br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://www.google.com/</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>这个链接用 Google 作为网址变量 [Google][Google]<br>然后在文档的结尾为变量赋值（网址）</p><p>  [Google]: <a href="http://www.google.com/">http://www.google.com/</a></p></blockquote><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址</span>)<br>![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址 &quot;可选标题&quot;</span>)<br></code></pre></td></tr></table></figure></p><ul><li>开头一个感叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 <code>title</code> 属性的文字。</li></ul><p>使用实例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图标</span>](<span class="hljs-link">https://www.baidu.com/img/flexible/logo/pc/result.png</span>)<br>![<span class="hljs-string">图标</span>](<span class="hljs-link">https://www.baidu.com/img/flexible/logo/pc/result.png &quot;Baidu&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="https://www.baidu.com/img/flexible/logo/pc/result.png" alt="图标"><br><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="https://www.baidu.com/img/flexible/logo/pc/result.png" alt="图标" title="Baidu"></p></blockquote><p>当然，也可以像网址那样对图片网址使用变量:</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这个链接用 Baidu 作为网址变量 [<span class="hljs-string">Baidu</span>][<span class="hljs-symbol">Baidu</span>]。<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-symbol">Baidu</span>]: <span class="hljs-link">https://www.baidu.com/img/flexible/logo/pc/result.png</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>这个链接用 Baidu 作为网址变量 [Baidu][Baidu]。<br>然后在文档的结尾为变量赋值（网址）</p><p>[Baidu]: <a href="https://www.baidu.com/img/flexible/logo/pc/result.png">https://www.baidu.com/img/flexible/logo/pc/result.png</a></p></blockquote><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30%&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN@latest/hexo/images/user/loading.gif" data-lazy-src="https://www.baidu.com/img/flexible/logo/pc/result.png" width="30%"></p></blockquote><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><p>语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 表头 | 表头 |<br>| ---- | ---- |<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div></blockquote><p><br></p><p><strong>对齐方式</strong></p><p>我们可以设置表格的对齐方式：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐。</li><li><code>:-</code> 设置内容和标题栏居左对齐。</li><li><code>:-:</code> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 左对齐 | 居中对齐 | 右对齐 |<br>| :-----| :----: | ----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:center">居中对齐</th><th style="text-align:right">右对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:center">单元格</td><td style="text-align:right">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:center">单元格</td><td style="text-align:right">单元格</td></tr></tbody></table></div></blockquote><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code> 等 ，如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">普通文本：使用 Ctrl+Alt+Del 重启电脑<br>HTML文本：使用 <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span> 重启电脑<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>普通文本：使用 Ctrl+Alt+Del 重启电脑<br>HTML文本：使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></blockquote><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**文本加粗**</span> <br>\<span class="hljs-emphasis">*\*</span> 正常显示星号 \<span class="hljs-emphasis">*\*</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><strong>文本加粗</strong><br>** 正常显示星号 **</p></blockquote><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\   反斜线<br>`   反引号<br><span class="hljs-bullet">*</span>   星号<br><span class="hljs-emphasis">_   下划线</span><br><span class="hljs-emphasis">&#123;&#125;  花括号</span><br><span class="hljs-emphasis">[]  方括号</span><br><span class="hljs-emphasis">()  小括号</span><br><span class="hljs-emphasis">#   井字号</span><br><span class="hljs-emphasis">+   加号</span><br><span class="hljs-emphasis">-   减号</span><br><span class="hljs-emphasis">.   英文句点</span><br><span class="hljs-emphasis">!   感叹号</span><br></code></pre></td></tr></table></figure></p><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符号<code>$$</code>包裹 <code>TeX</code> 或 <code>LaTeX</code> 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 <code>Mathjax</code> 对数学公式进行渲染。如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125; <br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;<br>$$<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><ol><li><p>横向流程图源码格式：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>graph LR<br>A[方形] --&gt;B(圆角)<br><span class="hljs-code">    B --&gt; C&#123;条件a&#125;</span><br><span class="hljs-code">    C --&gt;|a=1| D[结果1]</span><br><span class="hljs-code">    C --&gt;|a=2| E[结果2]</span><br><span class="hljs-code">    F[横向流程图]</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><pre class="mermaid">  graph LRA[方形] -->B(圆角)   B --> C{条件a}   C -->|a=1| D[结果1]   C -->|a=2| E[结果2]   F[横向流程图]</pre></p></li><li><p>竖向流程图源码格式：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>graph TD<br>A[方形] --&gt; B(圆角)<br><span class="hljs-code">    B --&gt; C&#123;条件a&#125;</span><br><span class="hljs-code">    C --&gt; |a=1| D[结果1]</span><br><span class="hljs-code">    C --&gt; |a=2| E[结果2]</span><br><span class="hljs-code">    F[竖向流程图]</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><pre class="mermaid">  graph TDA[方形] --> B(圆角)   B --> C{条件a}   C --> |a=1| D[结果1]   C --> |a=2| E[结果2]   F[竖向流程图]</pre></p></li><li><p>标准流程图源码格式：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">flow</span>]<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="flowchart-0" class="flow-chart"></div></p></li><li><p>标准流程图源码格式（横向）：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">flow</span>]<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(yes)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="flowchart-1" class="flow-chart"></div></p></li></ol><h2 id="时序图-顺序图"><a href="#时序图-顺序图" class="headerlink" title="时序图(顺序图)"></a>时序图(顺序图)</h2><ol><li><p>UML时序图源码样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">sequence</span>]<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="sequence-0"></div></p></li><li><p>UML时序图源码复杂样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">sequence</span>]<br>Title: 标题：复杂使用<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象B-&gt;小三: 你好吗<br>小三--&gt;&gt;对象A: 对象B找我了<br>对象A-&gt;对象B: 你真的好吗？<br>Note over 小三, 对象B: 我们是朋友<br>participant C<br>Note right of C: 没人陪我玩<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="sequence-1"></div></p></li><li><p>UML标准时序图样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>%% 时序图例子，-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头<br>  sequenceDiagram<br><span class="hljs-code">    participant 张三</span><br><span class="hljs-code">    participant 李四</span><br><span class="hljs-code">    张三-&gt;王五: 王五你好吗？</span><br><span class="hljs-code">    loop 健康检查</span><br><span class="hljs-code">        王五-&gt;王五: 与疾病战斗</span><br><span class="hljs-code">    end</span><br><span class="hljs-code">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="hljs-code">    李四--&gt;&gt;张三: 很好!</span><br><span class="hljs-code">    王五-&gt;李四: 你怎么样?</span><br><span class="hljs-code">    李四--&gt;王五: 很好!</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><pre class="mermaid">  %% 时序图例子，-> 直线，-->虚线，->>实线箭头 sequenceDiagram   participant 张三   participant 李四   张三->王五: 王五你好吗？   loop 健康检查       王五->王五: 与疾病战斗   end   Note right of 王五: 合理 食物 <br>看医生...   李四-->>张三: 很好!   王五->李四: 你怎么样?   李四-->王五: 很好!</pre></p></li></ol><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><p>甘特图样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>%% 语法示例<br>  gantt<br>  dateFormat YYYY-MM-DD<br>  title 软件开发甘特图<br>  section 设计<br><span class="hljs-code">    需求: done, des1, 2014-01-06, 2014-01-08</span><br><span class="hljs-code">    原型: active, des2, 2014-01-09, 3d</span><br><span class="hljs-code">    UI设计: des3, after des2, 5d</span><br><span class="hljs-code">    未来任务: des4, after des3, 5d</span><br><span class="hljs-code">  section 开发</span><br><span class="hljs-code">    理解需求: crit, done, 2014-01-06, 24h</span><br><span class="hljs-code">    设计框架: crit, done, after des2, 2d</span><br><span class="hljs-code">    开发: crit, active, 3d</span><br><span class="hljs-code">    未来任务: crit, 5d</span><br><span class="hljs-code">    玩耍: 2d</span><br><span class="hljs-code">  section 测试</span><br><span class="hljs-code">    功能测试: active, a1, after des3, 3d</span><br><span class="hljs-code">    压力测试: after a1, 20h</span><br><span class="hljs-code">    测试报告: 48h</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><code>mermaid%% 语法示例  gantt  dateFormat YYYY-MM-DD  title 软件开发甘特图  section 设计    需求: done, des1, 2014-01-06, 2014-01-08    原型: active, des2, 2014-01-09, 3d    UI设计: des3, after des2, 5d    未来任务: des4, after des3, 5d  section 开发    理解需求: crit, done, 2014-01-06, 24h    设计框架: crit, done, after des2, 2d    开发: crit, active, 3d    未来任务: crit, 5d    玩耍: 2d  section 测试    功能测试: active, a1, after des3, 3d    压力测试: after a1, 20h    测试报告: 48h</code><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">  st=>start: 开始框  op=>operation: 处理框  cond=>condition: 判断框(是或否?)  sub1=>subroutine: 子流程  io=>inputoutput: 输入输出框  e=>end: 结束框  st->op->cond  cond(yes)->io->e  cond(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">  st=>start: 开始框  op=>operation: 处理框  cond=>condition: 判断框(是或否?)  sub1=>subroutine: 子流程  io=>inputoutput: 输入输出框  e=>end: 结束框  st(right)->op(right)->cond  cond(yes)->io(bottom)->e  cond(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">  对象A->对象B: 对象B你好吗?（请求）  Note right of 对象B: 对象B的描述  Note left of 对象A: 对象A的描述(提示)  对象B-->对象A: 我很好(响应)  对象A->对象B: 你真的好吗？</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">  Title: 标题：复杂使用  对象A->对象B: 对象B你好吗?（请求）  Note right of 对象B: 对象B的描述  Note left of 对象A: 对象A的描述(提示)  对象B-->对象A: 我很好(响应)  对象B->小三: 你好吗  小三-->>对象A: 对象B找我了  对象A->对象B: 你真的好吗？  Note over 小三, 对象B: 我们是朋友  participant C  Note right of C: 没人陪我玩</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 📃Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter</title>
      <link href="post/31e4c77c.html"/>
      <url>post/31e4c77c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h1><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table></div><h1 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h1><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图 (如果没有设置 top_img，文章页顶部将显示缩略图，可设为 false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块 (默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章版权链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
            <tag> 🦋Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="post/a1751c09.html"/>
      <url>post/a1751c09.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
