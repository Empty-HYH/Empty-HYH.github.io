<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 面试题解析</title>
      <link href="post/d2aef718.html"/>
      <url>post/d2aef718.html</url>
      
        <content type="html"><![CDATA[<p><div class="note info simple"><p>文章来源：<br>  作者: <a href="https://blog.csdn.net/jackfrued">骆昊</a><br>  链接: <a href="https://blog.csdn.net/jackfrued/article/details/44921941">https://blog.csdn.net/jackfrued/article/details/44921941</a><br>  来源: <a href="https://www.csdn.net/">CSDN</a><br>  著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></div></p><h1 id="Java-基础（1-51）"><a href="#Java-基础（1-51）" class="headerlink" title="Java 基础（1~51）"></a>Java 基础（1~51）</h1><blockquote><p>1、面向对象的特征有哪些方面？</p></blockquote><p>答：面向对象的特征主要有以下几个方面：</p><ul><li><p>抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括<strong>数据抽象</strong>和<strong>行为抽象</strong>两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p></li><li><p>继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。</p></li><li><p>封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。</p></li><li><p>多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为<strong>编译时的多态性</strong>和<strong>运行时的多态性</strong>。如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当 A 系统访问 B 系统提供的服务时，B 系统有多种提供服务的方式，但一切对 A 系统来说都是透明的（就像电动剃须刀是 A 系统，它的供电系统是 B 系统，B 系统可以使用电池供电或者用交流电，甚至还有可能是太阳能，A 系统只会通过 B 类对象调用供电的方法，但并不知道供电系统的底层实现是什么，究竟通过何种方式获得了动力）。</p><ul><li><strong>方法重载</strong>（<code>overload</code>）实现的是编译时的多态性（也称为前绑定），而<strong>方法重写</strong>（<code>override</code>）实现的是运行时的多态性（也称为后绑定）。</li><li>运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：<ol><li>方法重写（子类继承父类并重写父类中已有的或抽象的方法）；</li><li>对象造型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</li></ol></li></ul></li></ul><blockquote><p>2、访问修饰符 <code>public</code>、<code>private</code>、<code>protected</code>、以及不写（默认）时的区别？</p></blockquote><p>答：</p><div class="table-container"><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><p>类的成员不写访问修饰时默认为 <code>default</code>。默认对于同一个包中的其他类相当于公开（<code>public</code>），对于不是同一个包中的其他类相当于私有（<code>private</code>）。受保护（<code>protected</code>）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私有。Java 中，外部类的修饰符只能是 <code>public</code> 或默认，类的成员（包括内部类）的修饰符可以是以上四种。</p><blockquote><p>3、<code>String</code> 是最基本的数据类型吗？</p></blockquote><p>答：不是。Java 中的基本数据类型只有 8 个：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>boolean</code>；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5 以后引入的枚举类型（enum）也算是一种比较特殊的引用类型。</p><blockquote><p>4、<code>float f = 3.4;</code> 是否正确？</p></blockquote><p>答：不正确。3.4 是双精度数，将双精度型（<code>double</code>）赋值给浮点型（<code>float</code>）属于<strong>下转型</strong>（down-casting，也称为窄化）会造成<strong>精度损失</strong>，因此需要<strong>强制类型转换</strong> <code>float f = (float)3.4;</code> 或者写成 <code>float f = 3.4F</code>;。</p><blockquote><p>5、<code>short s1 = 1; s1 = s1 + 1;</code> 有错吗？<code>short s1 = 1; s1 += 1;</code> 有错吗？</p></blockquote><p>答：对于 <code>short s1 = 1; s1 = s1 + 1;</code> 由于 1 是 <code>int</code> 类型，因此 <code>s1 + 1</code> 运算结果也是 <code>int</code> 型，需要强制转换类型才能赋值给 <code>short</code> 型。而 <code>short s1 = 1; s1 += 1;</code> 可以正确编译，因为 <code>s1 += 1;</code> 相当于 <code>s1 = (short)(s1 + 1);</code> 其中有隐含的强制类型转换。</p><blockquote><p>6、Java 有没有 <code>goto</code>？</p></blockquote><p>答：<code>goto</code> 是 Java 中的<strong>保留字</strong>，在目前版本的 Java 中没有使用。（根据James Gosling（Java之父）编写的《The Java Programming Language》一书的附录中给出了一个 Java 关键字列表，其中有 <code>goto</code> 和 <code>const</code>，但是这两个是目前无法使用的关键字，因此有些地方将其称之为保留字，其实保留字这个词应该有更广泛的意义，因为熟悉 C 语言的程序员都知道，在系统类库中使用过的有特殊意义的单词或单词的组合都被视为保留字）。</p><blockquote><p>7、<code>int</code> 和 <code>Integer</code> 有什么区别？</p></blockquote><p>答：Java 是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java 为每一个基本数据类型都引入了对应的包装类型（wrapper class），<code>int</code> 的包装类就是 <code>Integer</code>，从 Java 5 开始引入了<strong>自动装箱 / 拆箱</strong>机制，使得二者可以相互转换。</p><p>Java 为每个原始类型提供了包装类型：</p><ul><li>原始类型：<code>boolean</code>，<code>char</code>，<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>float</code>，<code>double</code>。</li><li>包装类型：<code>Boolean</code>，<code>Character</code>，<code>Byte</code>，<code>Short</code>，<code>Integer</code>，<code>Long</code>，<code>Float</code>，<code>Double</code>。</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoUnboxingTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer a = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">3</span>);<br>        Integer b = <span class="hljs-number">3</span>;                  <span class="hljs-comment">// 将 3 自动装箱成Integer类型</span><br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">3</span>;<br>        System.out.println(a == b);     <span class="hljs-comment">// false 两个引用没有引用同一对象</span><br>        System.out.println(a == c);     <span class="hljs-comment">// true a 自动拆箱成 int 类型再和 c 比较</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>最近还遇到一个面试题，也是和自动装箱和拆箱有点关系的，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 整型字面量的值在 -128 到 127 之间直接引用常量池中的 Integer 对象，否则 new 新的 Integer 对象</span><br>        Integer f1 = <span class="hljs-number">100</span>, f2 = <span class="hljs-number">100</span>, f3 = <span class="hljs-number">150</span>, f4 = <span class="hljs-number">150</span>;<br>        System.out.println(f1 == f2);     <span class="hljs-comment">// true 直接引用常量池中的 Integer 对象</span><br>        System.out.println(f3 == f4);     <span class="hljs-comment">// false 两个引用没有引用同一对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果不明就里很容易认为两个输出要么都是 <code>true</code> 要么都是 <code>false</code>。首先需要注意的是 <code>f1</code>、<code>f2</code>、<code>f3</code>、<code>f4</code> 四个变量都是 <code>Integer</code> 对象引用，所以下面的 <code>==</code> 运算比较的不是值而是引用。装箱的本质是什么呢？当我们给一个 <code>Integer</code> 对象赋一个 <code>int</code> 值的时候，会调用 <code>Integer</code> 类的静态方法 <code>valueOf</code>，如果看看 <code>valueOf</code> 的源代码就知道发生了什么。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>IntegerCache</code> 是 <code>Integer</code> 的内部类，其代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Cache to support the object identity semantics of autoboxing for values between</span><br><span class="hljs-comment">  * -128 and 127 (inclusive) as required by JLS.</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * The cache is initialized on first usage.  The size of the cache</span><br><span class="hljs-comment">  * may be controlled by the &#123;<span class="hljs-doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</span><br><span class="hljs-comment">  * During VM initialization, java.lang.Integer.IntegerCache.high property</span><br><span class="hljs-comment">  * may be set and saved in the private system properties in the</span><br><span class="hljs-comment">  * sun.misc.VM class.</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;<br>        String integerCacheHighPropValue =<br>            sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);<br>                i = Math.max(i, <span class="hljs-number">127</span>);<br>                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>            &#125;<br>        &#125;<br>        high = h;<br><br>        cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> j = low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>            cache[k] = <span class="hljs-keyword">new</span> Integer(j++);<br><br>        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IntegerCache</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>简单的说，如果整型字面量的值在 <code>-128</code> 到 <code>127</code> 之间，那么不会 <code>new</code> 新的 <code>Integer</code> 对象，而是直接引用常量池中的 <code>Integer</code> 对象，所以上面的面试题中 <code>f1 == f2</code> 的结果是 <code>true</code>，而 <code>f3==f4</code> 的结果是 <code>false</code>。</p><p><strong>注意：</strong>越是貌似简单的面试题其中的玄机就越多，需要面试者有相当深厚的功力。</p><blockquote><p>8、<code>&amp;</code> 和 <code>&amp;&amp;</code> 的区别？</p></blockquote><p>答：<code>&amp;</code> 运算符有两种用法：(1)<strong>按位与</strong>；(2)<strong>逻辑与</strong>。<code>&amp;&amp;</code> 运算符是<strong>短路与</strong>运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 <code>true</code> 整个表达式的值才是 <code>true</code>。<code>&amp;&amp;</code> 之所以称为短路运算是因为，如果 <code>&amp;&amp;</code> 左边的表达式的值是 <code>false</code>，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 <code>&amp;&amp;</code> 而不是 <code>&amp;</code>，例如在验证用户登录时判定用户名不是 <code>null</code> 而且不是空字符串，应当写为：<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用 <code>&amp;</code> 运算符，因为第一个条件如果不成立，根本不能进行字符串的 <code>equals</code> 比较，否则会产生 <code>NullPointerException</code> 异常。<strong>注意：</strong>逻辑或运算符（<code>|</code>）和短路或运算符（<code>||</code>）的差别也是如此。</p><p><strong>补充：</strong>如果你熟悉 JavaScript，那你可能更能感受到短路运算的强大，想成为 JavaScript 的高手就先从玩转短路运算开始吧。</p><blockquote><p>9、解释内存中的栈（stack）、堆（heap）和方法区（method area）的用法。</p></blockquote><p>答：通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用 JVM 中的栈空间；而通过 <code>new</code> 关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为 Eden、Survivor（又可分为 From Survivor 和 To Survivor）、Tenured；方法区和堆都是各个线程共享的内存区域，用于存储已经被 JVM 加载的类信息、常量、静态变量、JIT 编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的 <code>100</code>、<code>&quot;hello&quot;</code> 和常量都是放在常量池中，常量池是方法区的一部分。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过 JVM 的启动参数来进行调整，栈空间用光了会引发 <code>StackOverflowError</code>，而堆和常量池空间不足则会引发 <code>OutOfMemoryError</code>。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure></p><p>上面的语句中变量 <code>str</code> 放在栈上，用 <code>new</code> 创建出来的字符串对象放在堆上，而 <code>&quot;hello&quot;</code> 这个字面量是放在方法区的。</p><p><strong>补充1：</strong>较新版本的 Java（从 Java 6 的某个更新开始）中，由于 JIT 编译器的发展和“逃逸分析”技术的逐渐成熟，栈上分配、标量替换等优化技术使得对象一定分配在堆上这件事情已经变得不那么绝对了。</p><p><strong>补充2：</strong>运行时常量池相当于 Class 文件常量池具有动态性，Java 语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，<code>String</code> 类的 <code>intern()</code> 方法就是这样的。</p><p>看看下面代码的执行结果是什么并且比较一下 Java 7 以前和以后的运行结果是否一致。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;go&quot;</span>).append(<span class="hljs-string">&quot;od&quot;</span>).toString();<br>System.out.println(s1.intern() == s1);<br><br>String s2 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;ja&quot;</span>).append(<span class="hljs-string">&quot;va&quot;</span>).toString();<br>System.out.println(s2.intern() == s2);<br></code></pre></td></tr></table></figure></p><blockquote><p>10、<code>Math.round(11.5)</code> 等于多少？<code>Math.round(-11.5)</code> 等于多少？</p></blockquote><p>答：<code>Math.round(11.5)</code> 的返回值是 <code>12</code>，<code>Math.round(-11.5)</code> 的返回值是 <code>-11</code>。四舍五入的原理是在参数上加 <code>0.5</code> 然后进行下取整。</p><blockquote><p>11、<code>switch</code> 是否能作用在 <code>byte</code> 上，是否能作用在 <code>long</code> 上，是否能作用在 <code>String</code> 上？</p></blockquote><p>答：在 Java 5 以前，<code>switch(expr)</code> 中，<code>expr</code> 只能是 <code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>。从 Java 5 开 始，Java 中引入了枚举类型，<code>expr</code> 也可以是 <code>enum</code> 类型，从 Java 7 开始，<code>expr</code> 还可以是字符串（<code>String</code>），但是长整型（<code>long</code>）在目前所有的版本中都是不可以的。</p><blockquote><p>12、用最有效率的方法计算 2 乘以 8？</p></blockquote><p>答：<code>2 &lt;&lt; 3</code>（左移 3 位相当于乘以 2 的 3 次方，右移3位相当于除以 2 的 3 次方）。</p><p><strong>补充：</strong>我们为编写的类重写 <code>hashCode</code> 方法时，可能会看到如下所示的代码，其实我们不太理解为什么要使用这样的乘法运算来产生哈希码（散列码），而且为什么这个数是个素数，为什么通常选择 31 这个数？前两个问题的答案你可以自己百度一下，选择 31 是因为可以用移位和减法运算来代替乘法，从而得到更好的性能。说到这里你可能已经想到了：<code>31 * num</code> 等价于 <code>(num &lt;&lt; 5) - num</code>，左移 5 位相当于乘以 2 的 5 次方再减去自身就相当于乘以 31，现在的 JVM 都能自动完成这个优化。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhoneNumber</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> areaCode;<br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> String lineNumber;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> prime = <span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>        result = prime * result + areaCode;<br>        result = prime * result<br>                + ((lineNumber == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : lineNumber.hashCode());<br>        result = prime * result + ((prefix == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : prefix.hashCode());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == obj)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass())<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        PhoneNumber other = (PhoneNumber) obj;<br>        <span class="hljs-keyword">if</span> (areaCode != other.areaCode)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (lineNumber == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.lineNumber != <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!lineNumber.equals(other.lineNumber))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (prefix == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.prefix != <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!prefix.equals(other.prefix))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>13、数组有没有 <code>length()</code> 方法？String 有没有 <code>length()</code> 方法？</p></blockquote><p>答：数组没有 <code>length()</code> 方法，有 <code>length</code> 的属性。<code>String</code> 有 <code>length()</code> 方法。<code>JavaScript</code> 中，获得字符串的长度是通过 <code>length</code> 属性得到的，这一点容易和 Java 混淆。</p><blockquote><p>14、在 Java 中，如何跳出当前的多重嵌套循环？</p></blockquote><p>答：在最外层循环前加一个标记如 <code>A</code>，然后用 <code>break A;</code> 可以跳出多重循环。（Java 中支持带标签的 <code>break</code> 和 <code>continue</code> 语句，作用有点类似于 C 和 C++ 中的 <code>goto</code> 语句，但是就像要避免使用 <code>goto</code> 一样，应该避免使用带标签的 <code>break</code> 和 <code>continue</code>，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法其实不知道更好）</p><blockquote><p>15、构造器（<code>constructor</code>）是否可被重写（<code>override</code>）？</p></blockquote><p>答：构造器不能被继承，因此不能被重写，但可以被重载。</p><blockquote><p>16、两个对象值相同 (<code>x.equals(y) == true</code>)，但却可有不同的 <code>hash code</code>，这句话对不对？</p></blockquote><p>答：不对，如果两个对象 <code>x</code> 和 <code>y</code> 满足 <code>x.equals(y) == true</code>，它们的哈希码（hash code）应当相同。Java 对于 <code>eqauls</code> 方法和 <code>hashCode</code> 方法是这样规定的：</p><ol><li>如果两个对象相同（<code>equals</code> 方法返回 <code>true</code>），那么它们的 <code>hashCode</code> 值一定要相同；</li><li>如果两个对象的 <code>hashCode</code> 相同，它们并不一定相同。</li></ol><p>当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 <code>Set</code> 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</p><p><strong>补充：</strong>关于 <code>equals</code> 和 <code>hashCode</code> 方法，很多 Java 程序员都知道，但很多人也就是仅仅知道而已，在 Joshua Bloch 的大作《Effective Java》（很多软件公司，《Effective Java》、《Java编程思想》以及《重构：改善既有代码质量》是 Java 程序员必看书籍，如果你还没看过，那就赶紧去亚马逊买一本吧）中是这样介绍 <code>equals</code> 方法的：首先 <code>equals</code> 方法必须满足<strong>自反性</strong>（<code>x.equals(x)</code> 必须返回 <code>true</code>）、<strong>对称性</strong>（ <code>x.equals(y)</code> 返回 <code>true</code> 时，<code>y.equals(x)</code> 也必须返回 <code>true</code>）、<strong>传递性</strong>（<code>x.equals(y)</code> 和 <code>y.equals(z)</code> 都返回 <code>true</code> 时，<code>x.equals(z)</code> 也必须返回 <code>true</code>）和<strong>一致性</strong>（当 <code>x</code> 和 <code>y</code> 引用的对象信息没有被修改时，多次调用 <code>x.equals(y)</code> 应该得到同样的返回值），而且对于任何非 <code>null</code> 值的引用 <code>x</code>，<code>x.equals(null)</code> 必须返回 <code>false</code>。实现高质量的 <code>equals</code> 方法的诀窍包括：</p><ol><li>使用 <code>==</code> 操作符检查“参数是否为这个对象的引用”；</li><li>使用 <code>instanceof</code> 操作符检查“参数是否为正确的类型”；</li><li>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；</li><li>编写完 <code>equals</code> 方法后，问自己它是否满足对称性、传递性、一致性；</li><li>重写 <code>equals</code> 时总是要重写 <code>hashCode</code>；</li><li>不要将 <code>equals</code> 方法参数中的 <code>Object</code> 对象替换为其他的类型，在重写时不要忘掉 <code>@Override</code> 注解。</li></ol><blockquote><p>17、是否可以继承 <code>String</code> 类？</p></blockquote><p>答：<code>String</code> 类是 <code>final</code> 类，不可以被继承。</p><p><strong>补充：</strong>继承 <code>String</code> 本身就是一个错误的行为，对 <code>String</code> 类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。</p><blockquote><p>18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</p></blockquote><p>答：是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++ 和 C# 中可以通过传引用或传输出参数来改变传入的参数的值。在 C# 中可以编写如下所示的代码，但是在 Java 中却做不到。</p><p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CS01</span> &#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> x, <span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> y</span>)</span> &#123;<br>            <span class="hljs-built_in">int</span> temp = x;<br>            x = y;<br>            y = temp;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span> (<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span> &#123;<br>            <span class="hljs-built_in">int</span> a = <span class="hljs-number">5</span>, b = <span class="hljs-number">10</span>;<br>            swap (<span class="hljs-keyword">ref</span> a, <span class="hljs-keyword">ref</span> b);<br>            <span class="hljs-comment">// a = 10, b = 5;</span><br>            Console.WriteLine (<span class="hljs-string">&quot;a = &#123;0&#125;, b = &#123;1&#125;&quot;</span>, a, b);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>Java中没有传引用实在是非常的不方便，这一点在 Java 8 中仍然没有得到改进，正是如此在 Java 编写的代码中才会出现大量的 <code>Wrapper</code> 类（将需要通过方法调用修改的引用置于一个 <code>Wrapper</code> 类中，再将 <code>Wrapper</code> 对象传入方法），这样的做法只会让代码变得臃肿，尤其是让从 C 和 C++ 转型为 Java 程序员的开发者无法容忍。</p><blockquote><p>19、<code>String</code> 和 <code>StringBuilder</code>、<code>StringBuffer</code> 的区别？</p></blockquote><p>答：Java 平台提供了两种类型的字符串：<code>String</code> 和 <code>StringBuffer/StringBuilder</code>，它们可以储存和操作字符串。其中 <code>String</code> 是只读字符串，也就意味着 String 引用的字符串内容是不能被改变的。而 <code>StringBuffer/StringBuilder</code> 类表示的字符串对象可以直接进行修改。<code>StringBuilder</code> 是 Java 5 中引入的，它和 <code>StringBuffer</code> 的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被 <code>synchronized</code> 修饰，因此它的效率也比 <code>StringBuffer</code> 要高。</p><p>面试题1 - 什么情况下用 <code>+</code> 运算符进行字符串连接比调用 <code>StringBuffer/StringBuilder</code> 对象的 <code>append</code> 方法连接字符串性能更好？</p><p>面试题2 - 请说出下面程序的输出。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringEqualTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;Programming&quot;</span>;<br>        String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Programming&quot;</span>);<br>        String s3 = <span class="hljs-string">&quot;Program&quot;</span>;<br>        String s4 = <span class="hljs-string">&quot;ming&quot;</span>;<br>        String s5 = <span class="hljs-string">&quot;Program&quot;</span> + <span class="hljs-string">&quot;ming&quot;</span>;<br>        String s6 = s3 + s4;<br>        System.out.println(s1 == s2);             <span class="hljs-comment">// false</span><br>        System.out.println(s1 == s5);             <span class="hljs-comment">// true</span><br>        System.out.println(s1 == s6);             <span class="hljs-comment">// false</span><br>        System.out.println(s1 == s6.intern());    <span class="hljs-comment">// true</span><br>        System.out.println(s2 == s2.intern());    <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>补充：</strong>解答上面的面试题需要清楚两点：</p><ol><li><p><code>String</code> 对象的 <code>intern</code> 方法会得到字符串对象在常量池中对应的版本的引用（如果常量池中有一个字符串与 <code>String</code> 对象的 <code>equals</code> 结果是 <code>true</code>），如果常量池中没有对应的字符串，则该字符串将被添加到常量池中，然后返回常量池中字符串的引用；</p></li><li><p>字符串的 <code>+</code> 操作其本质是创建了 <code>StringBuilder</code> 对象进行 <code>append</code> 操作，然后将拼接后的 <code>StringBuilder</code> 对象用 <code>toString</code> 方法处理成 <code>String</code> 对象，这一点可以用 <code>javap -c StringEqualTest.class</code> 命令获得 class 文件对应的 JVM 字节码指令就可以看出来。</p></li></ol><blockquote><p>20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</p></blockquote><p>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</p><p>面试题：华为的面试题中曾经问过这样一个问题 - &quot;为什么不能根据返回类型来区分重载&quot;，快说出你的答案吧！</p><blockquote><p>21、描述一下 JVM 加载 <code>class</code> 文件的原理机制？</p></blockquote><p>答：JVM 中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的 Java 运行时系统组件，它负责在运行时查找和装入类文件中的类。</p><p>由于 Java 的跨平台性，经过编译的 Java 源程序并不是一个可执行程序，而是一个或多个类文件。当 Java 程序需要使用某个类时，JVM 会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的 <code>.class</code> 文件中的数据读入到内存中，通常是创建一个字节数组读入 <code>.class</code> 文件，然后产生与所加载类对应的 <code>Class</code> 对象。加载完成后，<code>Class</code> 对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括<strong>验证</strong>、<strong>准备</strong>（为静态变量分配内存并设置默认的初始值）和<strong>解析</strong>（将符号引用替换为直接引用）三个步骤。最后 JVM 对类进行初始化，包括：(1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；(2)如果类中存在初始化语句，就依次执行这些初始化语句。</p><p>类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（<code>java.lang.ClassLoader</code> 的子类）。从 Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM 更好的保证了 Java 平台的安全性，在该机制中，JVM 自带的 Bootstrap 是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM 不会向 Java 程序提供对 Bootstrap 的引用。下面是关于几个类加载器的说明：</p><ul><li>Bootstrap：一般用本地代码实现，负责加载 JVM 基础核心类库（<code>rt.jar</code>）；</li><li>Extension：从 <code>java.ext.dirs</code> 系统属性所指定的目录中加载类库，它的父加载器是 Bootstrap；</li><li>System：又叫应用类加载器，其父类是 <code>Extension</code>。它是应用最广泛的类加载器。它从环境变量 <code>classpath</code> 或者系统属性 <code>java.class.path</code> 所指定的目录中记载类，是用户自定义加载器的默认父加载器。</li></ul><blockquote><p>22、<code>char</code> 类型变量中能不能存储一个中文汉字，为什么？</p></blockquote><p>答：<code>char</code> 类型可以存储一个中文汉字，因为 Java 中使用的编码是 <code>Unicode</code>（不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一个 <code>char</code> 类型占 2 个字节（16 比特），所以放一个中文是没问题的。</p><p><strong>补充：</strong>使用 <code>Unicode</code> 意味着字符在 JVM 内部和外部有不同的表现形式，在 JVM 内部都是 <code>Unicode</code>，当这个字符被从 JVM 内部转移到外部时（例如存入文件系统中），需要进行编码转换。所以 Java 中有字节流和字符流，以及在字符流和字节流之间进行转换的转换流，如 <code>InputStreamReader</code> 和 <code>OutputStreamReader</code>，这两个类是字节流和字符流之间的适配器类，承担了编码转换的任务；对于 C 程序员来说，要完成这样的编码转换恐怕要依赖于 <code>union</code>（联合体/共用体）共享内存的特征来实现了。</p><blockquote><p>23、抽象类（abstract class）和接口（interface）有什么异同？</p></blockquote><p>答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是 <code>private</code>、<code>默认</code>、<code>protected</code>、<code>public</code> 的，而接口中的成员全都是 <code>public</code> 的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><blockquote><p>24、静态嵌套类（Static Nested Class）和内部类（Inner Class）的不同？</p></blockquote><p>答：Static Nested Class 是被声明为静态（<code>static</code>）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化，其语法看起来挺诡异的，如下所示。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扑克类（一副扑克）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poker</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String[] suites = &#123;<span class="hljs-string">&quot;黑桃&quot;</span>, <span class="hljs-string">&quot;红桃&quot;</span>, <span class="hljs-string">&quot;草花&quot;</span>, <span class="hljs-string">&quot;方块&quot;</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] faces = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>&#125;;<br><br>    <span class="hljs-keyword">private</span> Card[] cards;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Poker</span><span class="hljs-params">()</span> </span>&#123;<br>        cards = <span class="hljs-keyword">new</span> Card[<span class="hljs-number">52</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; suites.length; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; faces.length; j++) &#123;<br>                cards[i * <span class="hljs-number">13</span> + j] = <span class="hljs-keyword">new</span> Card(suites[i], faces[j]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 洗牌 （随机乱序）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, len = cards.length; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">int</span> index = (<span class="hljs-keyword">int</span>) (Math.random() * len);<br>            Card temp = cards[index];<br>            cards[index] = cards[i];<br>            cards[i] = temp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 发牌的位置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Card <span class="hljs-title">deal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cards[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 卡片类（一张扑克）</span><br><span class="hljs-comment">     * [内部类]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Card</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String suite;   <span class="hljs-comment">// 花色</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> face;       <span class="hljs-comment">// 点数</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Card</span><span class="hljs-params">(String suite, <span class="hljs-keyword">int</span> face)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.suite = suite;<br>            <span class="hljs-keyword">this</span>.face = face;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            String faceStr = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">switch</span>(face) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: faceStr = <span class="hljs-string">&quot;A&quot;</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>: faceStr = <span class="hljs-string">&quot;J&quot;</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>: faceStr = <span class="hljs-string">&quot;Q&quot;</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>: faceStr = <span class="hljs-string">&quot;K&quot;</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: faceStr = String.valueOf(face);<br>            &#125;<br>            <span class="hljs-keyword">return</span> suite + faceStr;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>测试代码：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PokerTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Poker poker = <span class="hljs-keyword">new</span> Poker();<br>        poker.shuffle();                  <span class="hljs-comment">// 洗牌</span><br>        Poker.Card c1 = poker.deal(<span class="hljs-number">0</span>);    <span class="hljs-comment">// 发第一张牌</span><br>        <span class="hljs-comment">// 对于非静态内部类Card</span><br>        <span class="hljs-comment">// 只有通过其外部类Poker对象才能创建Card对象</span><br>        Poker.Card c2 = poker.<span class="hljs-function">new <span class="hljs-title">Card</span><span class="hljs-params">(<span class="hljs-string">&quot;红心&quot;</span>, <span class="hljs-number">1</span>)</span></span>;    <span class="hljs-comment">// 自己创建一张牌</span><br><br>        System.out.println(c1);           <span class="hljs-comment">// 洗牌后的第一张</span><br>        System.out.println(c2);           <span class="hljs-comment">// 打印: 红心A</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>面试题 - 下面的代码哪些地方会产生编译错误？</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">new</span> Inner(); &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">new</span> Inner(); &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Inner();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>注意：</strong>Java 中非静态内部类对象的创建要依赖其外部类对象，上面的面试题中 <code>foo</code> 和 <code>main</code> 方法都是静态方法，静态方法中没有 <code>this</code>，也就是说没有所谓的外部类对象，因此无法创建内部类对象，如果要在静态方法中创建内部类对象，可以这样做：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Outer().<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></p><blockquote><p>25、Java 中会存在内存泄漏吗，请简单描述。</p></blockquote><p>答：理论上 Java 因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是 Java 被广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被 GC 回收，因此也会导致内存泄露的发生。例如 Hibernate 的 Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）或清空（flush）一级缓存就可能导致内存泄露。下面例子中的代码也会导致内存泄露。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.EmptyStackException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> T[] elements;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INIT_CAPACITY = <span class="hljs-number">16</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;<br>        elements = (T[]) <span class="hljs-keyword">new</span> Object[INIT_CAPACITY];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T elem)</span> </span>&#123;<br>        ensureCapacity();<br>        elements[size++] = elem;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> EmptyStackException();<br>        <span class="hljs-keyword">return</span> elements[--size];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(elements.length == size) &#123;<br>            elements = Arrays.copyOf(elements, <span class="hljs-number">2</span> * size + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>上面的代码实现了一个栈（先进后出（FILO））结构，乍看之下似乎没有什么明显的问题，它甚至可以通过你编写的各种单元测试。然而其中的 <code>pop</code> 方法却存在内存泄露的问题，当我们用 <code>pop</code> 方法弹出栈中的对象时，该对象不会被当作垃圾回收，即使使用栈的程序不再引用这些对象，因为栈内部维护着对这些对象的过期引用（obsolete reference）。在支持垃圾回收的语言中，内存泄露是很隐蔽的，这种内存泄露其实就是无意识的对象保持。如果一个对象引用被无意识的保留起来了，那么垃圾回收器不会处理这个对象，也不会处理该对象引用的其他对象，即使这样的对象只有少数几个，也可能会导致很多的对象被排除在垃圾回收之外，从而对性能造成重大影响，极端情况下会引发 Disk Paging（物理内存与硬盘的虚拟内存交换数据），甚至造成 OutOfMemoryError。</p><blockquote><p>26、抽象的（<code>abstract</code>）方法是否可同时是静态的（<code>static</code>），是否可同时是本地方法（<code>native</code>），是否可同时被 <code>synchronized</code> 修饰？</p></blockquote><p>答：都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如 C 代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。<code>synchronized</code> 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p><blockquote><p>27、阐述静态变量和实例变量的区别。</p></blockquote><p>答：静态变量是被 <code>static</code> 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><p><strong>补充：</strong>在 Java 开发中，上下文类和工具类中通常会有大量的静态成员。</p><blockquote><p>28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</p></blockquote><p>答：不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。</p><blockquote><p>29、如何实现对象克隆？</p></blockquote><p>答：有两种方式：</p><ul><li>实现 <code>Cloneable</code> 接口并重写 <code>Object</code> 类中的 <code>clone()</code> 方法；</li><li>实现 <code>Serializable</code> 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下。</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MyUtil</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError();<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Serializable&gt; <span class="hljs-function">T <span class="hljs-title">clone</span><span class="hljs-params">(T obj)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ByteArrayOutputStream bout = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bout);<br>        oos.writeObject(obj);<br><br>        ByteArrayInputStream bin = <span class="hljs-keyword">new</span> ByteArrayInputStream(bout.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bin);<br>        <span class="hljs-keyword">return</span> (T) ois.readObject();<br><br>        <span class="hljs-comment">// **说明：**调用ByteArrayInputStream或ByteArrayOutputStream对象的close方法没有任何意义</span><br>        <span class="hljs-comment">// 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源（如文件流）的释放</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>下面是测试代码：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">9102017020286042305L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;        <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> Car car;        <span class="hljs-comment">// 座驾</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, Car car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">getCar</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span><span class="hljs-params">(Car car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, car=&quot;</span> + car + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小汽车类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">5713945027627603702L</span>;<br><br>    <span class="hljs-keyword">private</span> String brand;       <span class="hljs-comment">// 品牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSpeed;       <span class="hljs-comment">// 最高时速</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String brand, <span class="hljs-keyword">int</span> maxSpeed)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>        <span class="hljs-keyword">this</span>.maxSpeed = maxSpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBrand</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBrand</span><span class="hljs-params">(String brand)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxSpeed</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> maxSpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxSpeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSpeed)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maxSpeed = maxSpeed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car [brand=&quot;</span> + brand + <span class="hljs-string">&quot;, maxSpeed=&quot;</span> + maxSpeed + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Hao LUO&quot;</span>, <span class="hljs-number">33</span>, <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;Benz&quot;</span>, <span class="hljs-number">300</span>));<br>            Person p2 = MyUtil.clone(p1); <span class="hljs-comment">// 深度克隆</span><br>            p2.getCar().setBrand(<span class="hljs-string">&quot;BYD&quot;</span>);<br>            <span class="hljs-comment">// 修改克隆的 Person 对象 p2 关联的汽车对象的品牌属性</span><br>            <span class="hljs-comment">// 原来的 Person 对象 p1 关联的汽车不会受到任何影响</span><br>            <span class="hljs-comment">// 因为在克隆 Person 对象时其关联的汽车对象也被克隆了</span><br>            System.out.println(p1);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>注意：</strong>基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用 <code>Object</code> 类的 <code>clone()</code> 方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。</p><blockquote><p>30、GC 是什么？为什么要有 GC？</p></blockquote><p>答：GC 是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。Java 程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：<code>System.gc()</code> 或 <code>Runtime.getRuntime().gc()</code> ，但 JVM 可以屏蔽掉显示的垃圾回收调用。</p><p>垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在 Java 诞生初期，垃圾回收是 Java 最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今 Java 的垃圾回收机制已经成为被诟病的东西。移动智能终端用户通常觉得 iOS 的系统比 Android 系统有更好的用户体验，其中一个深层次的原因就在于 Android 系统中垃圾回收的不可预知性。</p><p><strong>补充：</strong>垃圾回收机制有很多种，包括：分代复制垃圾回收、标记垃圾回收、增量垃圾回收等方式。标准的 Java 进程既有栈又有堆。栈保存了原始型局部变量，堆保存了要创建的对象。Java 平台对堆内存回收和再利用的基本算法被称为标记和清除，但是 Java 对其进行了改进，采用“分代式垃圾收集”。这种方法会跟 Java 对象的生命周期将堆内存划分为不同的区域，在垃圾收集过程中，可能会将对象移动到不同区域：</p><ul><li>伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。</li><li>幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。</li><li>终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。</li></ul><p>与垃圾回收相关的 JVM 参数：</p><ul><li><code>-Xms / -Xmx</code>：堆的初始大小 / 堆的最大大小</li><li><code>-Xmn</code>：堆中年轻代的大小</li><li><code>-XX:-DisableExplicitGC</code>：让System.gc()不产生任何作用</li><li><code>-XX:+PrintGCDetails</code>：打印GC的细节</li><li><code>-XX:+PrintGCDateStamps</code>：打印GC操作的时间戳</li><li><code>-XX:NewSize / XX:MaxNewSize</code>：设置新生代大小/新生代最大大小</li><li><code>-XX:NewRatio</code>：可以设置老生代和新生代的比例</li><li><code>-XX:PrintTenuringDistribution</code>：设置每次新生代GC后输出幸存者乐园中对象年龄的分布</li><li><code>-XX:InitialTenuringThreshold / -XX:MaxTenuringThreshold</code>：设置老年代阀值的初始值和最大值</li><li><code>-XX:TargetSurvivorRatio</code>：设置幸存区的目标使用率</li></ul><blockquote><p>31、<code>String s = new String(&quot;xyz&quot;);</code> 创建了几个字符串对象？</p></blockquote><p>答：两个对象，一个是静态区的 <code>&quot;xyz&quot;</code>，一个是用 <code>new</code> 创建在堆上的对象。</p><blockquote><p>32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？</p></blockquote><p>答：接口可以继承接口，而且支持多重继承。抽象类可以实现（implements）接口，抽象类可继承具体类也可以继承抽象类。</p><blockquote><p>33、一个 <code>.java</code> 源文件中是否可以包含多个类（不是内部类）？有什么限制？</p></blockquote><p>答：可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。</p><blockquote><p>34、Anonymous Inner Class（匿名内部类）是否可以继承其它类？是否可以实现接口？</p></blockquote><p>答：可以继承其他类或实现其他接口，在 Swing 编程和 Android 开发中常用此方式来实现事件监听和回调。</p><blockquote><p>35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？</p></blockquote><p>答：一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。</p><blockquote><p>36、Java 中的 <code>final</code> 关键字有哪些用法？</p></blockquote><p>答：</p><ul><li>修饰类：表示该类不能被继承；</li><li>修饰方法：表示方法不能被重写；</li><li>修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</li></ul><blockquote><p>37、指出下面程序的运行结果。</p></blockquote><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>&#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;a&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        A ab = <span class="hljs-keyword">new</span> B();<br>        ab = <span class="hljs-keyword">new</span> B();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>答：执行结果：<code>1a2b2b</code>。创建对象时构造器的调用顺序是：先初始化静态成员，然后调用父类构造器，再初始化非静态成员，最后调用自身构造器。</p><p><strong>注意：</strong>如果不能给出此题的正确答案，说明之前第 21 题 Java 类加载机制还没有完全理解，赶紧再看看吧。</p><blockquote><p>38、数据类型之间的转换：</p><ul><li>如何将字符串转换为基本数据类型？</li><li>如何将基本数据类型转换为字符串？</li></ul></blockquote><p>答：</p><ul><li>调用基本数据类型对应的包装类中的方法 <code>parseXXX(String)</code> 或 <code>valueOf(String)</code> 即可返回相应基本类型；</li><li>一种方法是将基本数据类型与空字符串（<code>&quot;&quot;</code>）连接（<code>+</code>）即可获得其所对应的字符串；另一种方法是调用 <code>String</code> 类中的 <code>valueOf()</code> 方法返回相应字符串</li></ul><blockquote><p>39、如何实现字符串的反转及替换？</p></blockquote><p>答：方法很多，可以自己写实现也可以使用 <code>String</code> 或 <code>StringBuffer/StringBuilder</code> 中的方法。有一道很常见的面试题是用递归实现字符串反转，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">reverse</span><span class="hljs-params">(String originStr)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(originStr == <span class="hljs-keyword">null</span> || originStr.length() &lt;= <span class="hljs-number">1</span>) <br>        <span class="hljs-keyword">return</span> originStr;<br>    <span class="hljs-keyword">return</span> reverse(originStr.substring(<span class="hljs-number">1</span>)) + originStr.charAt(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>40、怎样将 GB2312 编码的字符串转换为 ISO-8859-1 编码的字符串？</p></blockquote><p>答：代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;你好&quot;</span>;<br>String s2 = <span class="hljs-keyword">new</span> String(s1.getBytes(<span class="hljs-string">&quot;GB2312&quot;</span>), <span class="hljs-string">&quot;ISO-8859-1&quot;</span>);<br></code></pre></td></tr></table></figure></p><blockquote><p>41、日期和时间：问题1：如何取得年月日、小时分钟秒？</p></blockquote><p>创建 <code>java.util.Calendar</code> 实例，调用其 <code>get()</code> 方法传入不同的参数即可获得参数所对应的值。Java 8中可以使用 <code>java.time.LocalDateTime</code> 来获取，代码如下所示。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTimeTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Calendar cal = Calendar.getInstance();<br>        System.out.println(cal.get(Calendar.YEAR));<br>        System.out.println(cal.get(Calendar.MONTH));    <span class="hljs-comment">// 0 - 11</span><br>        System.out.println(cal.get(Calendar.DATE));<br>        System.out.println(cal.get(Calendar.HOUR_OF_DAY));<br>        System.out.println(cal.get(Calendar.MINUTE));<br>        System.out.println(cal.get(Calendar.SECOND));<br><br>        <span class="hljs-comment">// Java 8</span><br>        LocalDateTime dt = LocalDateTime.now();<br>        System.out.println(dt.getYear());<br>        System.out.println(dt.getMonthValue());     <span class="hljs-comment">// 1 - 12</span><br>        System.out.println(dt.getDayOfMonth());<br>        System.out.println(dt.getHour());<br>        System.out.println(dt.getMinute());<br>        System.out.println(dt.getSecond());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>问题2：如何取得从 1970 年 1 月 1 日 0 时 0 分 0 秒到现在的毫秒数？</p></blockquote><p>以下方法均可获得该毫秒数。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar.getInstance().getTimeInMillis();<br>System.currentTimeMillis();<br>Clock.systemDefaultZone().millis(); <span class="hljs-comment">// Java 8</span><br></code></pre></td></tr></table></figure></p><blockquote><p>问题3：如何取得某月的最后一天？</p></blockquote><p>代码如下所示。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar time = Calendar.getInstance();<br>time.getActualMaximum(Calendar.DAY_OF_MONTH);<br></code></pre></td></tr></table></figure></p><blockquote><p>问题4：如何格式化日期？</p></blockquote><p>利用 <code>java.text.DataFormat</code> 的子类（如 <code>SimpleDateFormat</code> 类）中的 <code>format(Date)</code> 方法可将日期格式化。Java 8 中可以用 <code>java.time.format.DateTimeFormatter</code> 来格式化时间日期，代码如下所示。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateFormatTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleDateFormat oldFormatter = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(oldFormatter.format(date1));<br><br>        <span class="hljs-comment">// Java 8</span><br>        DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>        LocalDate date2 = LocalDate.now();<br>        System.out.println(date2.format(newFormatter));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>补充：</strong>Java 的时间日期 API 一直以来都是被诟病的东西，为了解决这一问题，Java 8 中引入了新的时间日期 API，其中包括 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>Clock</code>、<code>Instant</code> 等类，这些的类的设计都使用了不变模式，因此是线程安全的设计。如果不理解这些内容，可以参考我的另一篇文章<a href="https://blog.csdn.net/jackfrued/article/details/44499227">《关于 Java 并发编程的总结和思考》</a>。</p><blockquote><p>42、打印昨天的当前时刻。</p></blockquote><p>答：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Calendar;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YesterdayCurrent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Calendar cal = Calendar.getInstance();<br>        cal.add(Calendar.DATE, -<span class="hljs-number">1</span>);<br>        System.out.println(cal.getTime());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在Java 8中，可以用下面的代码实现相同的功能。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YesterdayCurrent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime today = LocalDateTime.now();<br>        LocalDateTime yesterday = today.minusDays(<span class="hljs-number">1</span>);<br>        System.out.println(yesterday);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>43、比较一下 Java 和 JavaSciprt。</p></blockquote><p>答：JavaScript 与 Java 是两个公司开发的不同的两个产品。Java 是原 Sun Microsystems 公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而 JavaScript 是 Netscape 公司的产品，为了扩展 Netscape 浏览器的功能而开发的一种可以嵌入 Web 页面中运行的基于对象和事件驱动的解释性语言。JavaScript 的前身是 LiveScript；而 Java 的前身是 Oak 语言。</p><p>下面对两种语言间的异同作如下比较：</p><ul><li>基于对象和面向对象：Java 是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象； JavaScript 是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。</li><li>解释和编译：Java 的源代码在执行之前，必须经过编译。JavaScript 是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行。（目前的浏览器几乎都使用了 JIT（即时编译）技术来提升 JavaScript 的运行效率）</li><li>强类型变量和类型弱变量：Java 采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript 中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript 的解释器在运行时检查推断其数据类型。</li><li>代码格式不一样。</li></ul><p><strong>补充：</strong>上面列出的四点是网上流传的所谓的标准答案。其实 Java 和 JavaScript 最重要的区别是一个是静态语言，一个是动态语言。目前的编程语言的发展趋势是函数式语言和动态语言。在 Java 中类（class）是一等公民，而 JavaScript 中函数（function）是一等公民，因此 JavaScript 支持函数式编程，可以使用 Lambda 函数和闭包（closure），当然 Java 8 也开始支持函数式编程，提供了对 Lambda 表达式以及函数式接口的支持。对于这类问题，在面试的时候最好还是用自己的语言回答会更加靠谱，不要背网上所谓的标准答案。</p><blockquote><p>44、什么时候用断言（assert）？</p></blockquote><p>答：断言在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。一般来说，断言用于保证程序最基本、关键的正确性。断言检查通常在开发和测试时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。断言是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为 <code>true</code>；如果表达式的值为 <code>false</code>，那么系统会报告一个 AssertionError。断言的使用如下面的代码所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">assert</span>(a &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// throws an AssertionError if a &lt;= 0</span><br></code></pre></td></tr></table></figure></p><p>断言可以有两种形式：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">assert</span> Expression1;<br><span class="hljs-keyword">assert</span> Expression1 : Expression2 ;<br></code></pre></td></tr></table></figure></p><p>Expression1 应该总是产生一个布尔值。Expression2 可以是得出一个值的任意表达式；这个值用于生成显示更多调试信息的字符串消息。</p><p>要在运行时启用断言，可以在启动 JVM 时使用 <code>-enableassertions</code> 或者 <code>-ea</code> 标记。要在运行时选择禁用断言，可以在启动 JVM 时使用 <code>-da</code> 或者 <code>-disableassertions</code> 标记。要在系统类中启用或禁用断言，可使用 <code>-esa</code> 或 <code>-dsa</code> 标记。还可以在包的基础上启用或者禁用断言。</p><p><strong>注意：</strong>断言不应该以任何方式改变程序的状态。简单的说，如果希望在不满足某些条件时阻止代码的执行，就可以考虑用断言来阻止它。</p><blockquote><p>45、Error 和 Exception有什么区别？</p></blockquote><p>答：</p><ul><li>Error 表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；</li><li>Exception 表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。</li></ul><p>面试题：2005 年摩托罗拉的面试中曾经问过这么一个问题“If a process reports a stack overflow run-time error, what’s the most possible cause?”，给了四个选项 a. lack of memory; b. write on an invalid memory space; c. recursive function calling; d. array index out of boundary. Java 程序在运行时也可能会遭遇 StackOverflowError，这是一个无法恢复的错误，只能重新修改代码了，这个面试题的答案是 c。如果写了不能迅速收敛的递归，则很有可能引发栈溢出的错误，如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackOverflowErrorTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        main(<span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>注意：</strong>用递归编写程序时一定要牢记两点：1. 递归公式；2. 收敛条件（什么时候就不再继续递归）。</p><blockquote><p>46、<code>try&#123;&#125;</code> 里有一个 <code>return</code> 语句，那么紧跟在这个 <code>try</code> 后的 <code>finally&#123;&#125;</code> 里的代码会不会被执行，什么时候被执行，在 <code>return</code> 前还是后?</p></blockquote><p>答：会执行，在方法返回调用者前执行。</p><p><strong>注意：</strong>在 <code>finally</code> 中改变返回值的做法是不好的，因为如果存在 <code>finally</code> 代码块，<code>try</code> 中的 <code>return</code> 语句不会立马返回调用者，而是记录下返回值待 <code>finally</code> 代码块执行完毕之后再向调用者返回其值，然后如果在 <code>finally</code> 中修改了返回值，就会返回修改后的值。显然，在 <code>finally</code> 中返回或者修改返回值会对程序造成很大的困扰，C# 中直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java 中也可以通过提升编译器的语法检查级别来产生警告或错误，Eclipse 中可以在如图所示的地方进行设置，强烈建议将此项设置为编译错误。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/46.png" alt></p><blockquote><p>47、Java 语言如何进行异常处理，关键字：<code>throws</code>、<code>throw</code>、<code>try</code>、<code>catch</code>、<code>finally</code> 分别如何使用？</p></blockquote><p>答：Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在 Java 中，每个异常都是一个对象，它是 <code>Throwable</code> 类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。</p><p>Java 的异常处理是通过5个关键词来实现的：<code>try</code>、<code>catch</code>、<code>throw</code>、<code>throws</code> 和 <code>finally</code>。</p><p>一般情况下是用 <code>try</code> 来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；<code>try</code> 用来指定一块预防所有异常的程序；<code>catch</code> 子句紧跟在 <code>try</code> 块后面，用来指定你想要捕获的异常的类型；<code>throw</code> 语句用来明确地抛出一个异常；<code>throws</code> 用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；<code>finally</code> 为确保一段代码不管发生什么异常状况都要被执行；<code>try</code> 语句可以嵌套，每当遇到一个 <code>try</code> 语句，异常的结构就会被放入异常栈中，直到所有的 <code>try</code> 语句都完成。如果下一级的 <code>try</code> 语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的 <code>try</code> 语句或者最终将异常抛给 JVM。</p><blockquote><p>48、运行时异常与受检异常有何异同？</p></blockquote><p>答：异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java 编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在《Effective Java》中对异常的使用给出了以下指导原则：</p><ul><li>不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的控制流而使用异常）</li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</li><li>优先使用标准的异常</li><li>每个方法抛出的异常都要有文档</li><li>保持异常的原子性</li><li>不要在 <code>catch</code> 中忽略掉捕获到的异常</li></ul><blockquote><p>49、列出一些你常见的运行时异常？</p></blockquote><p>答：</p><ul><li><code>ArithmeticException</code>：算术异常</li><li><code>ClassCastException</code>：类转换异常</li><li><code>IllegalArgumentException</code>：非法参数异常</li><li><code>IndexOutOfBoundsException</code>：下标越界异常</li><li><code>NullPointerException</code>：空指针异常</li><li><code>SecurityException</code>：安全异常</li></ul><blockquote><p>50、阐述 <code>final</code>、<code>finally</code>、<code>finalize</code> 的区别。</p></blockquote><p>答：</p><ul><li><code>final</code>：修饰符（关键字）有三种用法：如果一个类被声明为 <code>final</code>，意味着它不能再派生出新的子类，即不能被继承，因此它和 <code>abstract</code> 是反义词。将变量声明为 <code>final</code>，可以保证它们在使用中不被改变，被声明为 <code>final</code> 的变量必须在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为 <code>final</code> 的方法也同样只能使用，不能在子类中被重写。</li><li><code>finally</code>：通常放在 <code>try…catch…</code> 的后面构造总是执行代码块，这就意味着程序无论正常执行还是发生异常，这里的代码只要 JVM 不关闭都能执行，可以将释放外部资源的代码写在 <code>finally</code> 块中。</li><li><code>finalize</code>：<code>Object</code> 类中定义的方法，Java 中允许使用 <code>finalize()</code> 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写 <code>finalize()</code> 方法可以整理系统资源或者执行其他清理工作。</li></ul><blockquote><p>51、类 <code>ExampleA</code> 继承 <code>Exception</code>，类 <code>ExampleB</code> 继承 <code>ExampleA</code>。有如下代码片段：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ExampleB(<span class="hljs-string">&quot;b&quot;</span>)<br>&#125; <span class="hljs-keyword">catch</span>(ExampleA e)&#123;<br>    System.out.println(<span class="hljs-string">&quot;ExampleA&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    System.out.println(<span class="hljs-string">&quot;Exception&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>请问执行此段代码的输出是什么？</p></blockquote><p>答：输出：<code>ExampleA</code>。根据里氏代换原则（能使用父类型的地方一定能使用子类型），抓取<code>ExampleA</code> 类型异常的 <code>catch</code> 块能够抓住 <code>try</code> 块中抛出的 <code>ExampleB</code> 类型的异常。</p><p>面试题 - 说出下面代码的运行结果。（此题的出处是《Java编程思想》一书）</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Annoyance</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sneeze</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Annoyance</span> </span>&#123;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Sneeze();<br>            &#125; <br>            <span class="hljs-keyword">catch</span> ( Annoyance a ) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Caught Annoyance&quot;</span>);<br>                <span class="hljs-keyword">throw</span> a;<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">catch</span> ( Sneeze s ) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught Sneeze&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//       输出结果：</span><br><span class="hljs-comment">//       Caught Annoyance</span><br><span class="hljs-comment">//       Caught Sneeze</span><br><span class="hljs-comment">//       Hello World!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="Java-容器（52-56）"><a href="#Java-容器（52-56）" class="headerlink" title="Java 容器（52~56）"></a>Java 容器（52~56）</h1><blockquote><p>52、<code>List</code>、<code>Set</code>、<code>Map</code> 是否继承自 <code>Collection</code> 接口？</p></blockquote><p>答：<code>List</code>、<code>Set</code> 是，<code>Map</code> 不是。<code>Map</code> 是键值对映射容器，与 <code>List</code> 和 <code>Set</code> 有明显的区别，而 <code>Set</code> 存储的零散的元素且不允许有重复元素（数学中的集合也是如此），<code>List</code> 是线性结构的容器，适用于按数值索引访问元素的情形。</p><blockquote><p>53、阐述 <code>ArrayList</code>、<code>Vector</code>、<code>LinkedList</code> 的存储性能和特性。</p></blockquote><p>答：</p><ul><li><p><code>ArrayList</code> 和 <code>Vector</code> 都是使用<strong>数组方式</strong>存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，<code>Vector</code> 中的方法由于添加了 <code>synchronized</code> 修饰，因此 <code>Vector</code> 是<strong>线程安全</strong>的容器，但性能上较 <code>ArrayList</code> 差，因此已经是 Java 中的遗留容器。</p></li><li><p><code>LinkedList</code> 使用<strong>双向链表</strong>实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p></li><li><p><code>Vector</code> 属于遗留容器（Java 早期的版本中提供的容器，除此之外，<code>Hashtable</code>、<code>Dictionary</code>、<code>BitSet</code>、<code>Stack</code>、<code>Properties</code> 都是遗留容器），已经不推荐使用，但是由于 <code>ArrayList</code> 和 <code>LinkedListed</code> 都是<strong>非线程安全</strong>的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类 <code>Collections</code> 中的 <code>synchronizedList</code> 方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p></li></ul><p><strong>补充：</strong>遗留容器中的 <code>Properties</code> 类和 <code>Stack</code> 类在设计上有严重的问题，<code>Properties</code> 是一个键和值都是字符串的特殊的键值对映射，在设计上应该是关联一个 <code>Hashtable</code> 并将其两个泛型参数设置为 <code>String</code> 类型，但是 Java API 中的 <code>Properties</code> 直接继承了 <code>Hashtable</code>，这很明显是对继承的滥用。这里复用代码的方式应该是 Has-A 关系而不是 Is-A 关系，另一方面容器都属于工具类，继承工具类本身就是一个错误的做法，使用工具类最好的方式是 Has-A 关系（关联）或 Use-A 关系（依赖）。同理，<code>Stack</code> 类继承 <code>Vector</code> 也是不正确的。Sun 公司的工程师们也会犯这种低级错误，让人唏嘘不已。</p><blockquote><p>54、<code>Collection</code> 和 <code>Collections</code> 的区别？</p></blockquote><p>答：<code>Collection</code> 是一个接口，它是 <code>Set</code>、<code>List</code> 等容器的父接口；<code>Collections</code> 是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。</p><blockquote><p>55、<code>List</code>、<code>Map</code>、<code>Set</code> 三个接口存取元素时，各有什么特点？</p></blockquote><p>答：<code>List</code> 以特定索引来存取元素，可以有重复元素。<code>Set</code> 不能存放重复元素（用对象的 <code>equals()</code> 方法来区分元素是否重复）。<code>Map</code> 保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。<code>Set</code> 和 <code>Map</code> 容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为 <code>O(1)</code>，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。</p><blockquote><p>56、<code>TreeMap</code> 和 <code>TreeSet</code> 在排序时如何比较元素？<code>Collections</code>工具类中的<code>sort()</code>方法如何比较元素？</p></blockquote><p>答：<code>TreeSet</code> 要求存放的对象所属的类必须实现 <code>Comparable</code> 接口，该接口提供了比较元素的 <code>compareTo()</code> 方法，当插入元素时会回调该方法比较元素的大小。<code>TreeMap</code> 要求存放的键值对映射的键必须实现 <code>Comparable</code> 接口从而根据键对元素进行排序。<code>Collections</code> 工具类的 <code>sort()</code> 方法有两种重载的形式，第一种要求传入的待排序容器中存放的对象比较实现 <code>Comparable</code> 接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是 <code>Comparator</code> 接口的子类型（需要重写 <code>compare</code> 方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java 中对函数式编程的支持）。例子1：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;        <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;            <span class="hljs-comment">// 年龄</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age - o.age; <span class="hljs-comment">// 比较年龄(年龄的升序)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;Student&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();     <span class="hljs-comment">// Java 7 的钻石语法(构造器后面的尖括号中不需要写类型)</span><br>        set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Hao LUO&quot;</span>, <span class="hljs-number">33</span>));<br>        set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;XJ WANG&quot;</span>, <span class="hljs-number">32</span>));<br>        set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Bruce LEE&quot;</span>, <span class="hljs-number">60</span>));<br>        set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Bob YANG&quot;</span>, <span class="hljs-number">22</span>));<br><br>        <span class="hljs-keyword">for</span>(Student stu : set) &#123;<br>            System.out.println(stu);<br>        &#125;<br><span class="hljs-comment">//      输出结果：</span><br><span class="hljs-comment">//      Student [name=Bob YANG, age=22]</span><br><span class="hljs-comment">//      Student [name=XJ WANG, age=32]</span><br><span class="hljs-comment">//      Student [name=Hao LUO, age=33]</span><br><span class="hljs-comment">//      Student [name=Bruce LEE, age=60]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>例子2：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;        <span class="hljs-comment">// 年龄</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取学生姓名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取学生年龄</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();     <span class="hljs-comment">// Java 7的钻石语法(构造器后面的尖括号中不需要写类型)</span><br>        list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Hao LUO&quot;</span>, <span class="hljs-number">33</span>));<br>        list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;XJ WANG&quot;</span>, <span class="hljs-number">32</span>));<br>        list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Bruce LEE&quot;</span>, <span class="hljs-number">60</span>));<br>        list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Bob YANG&quot;</span>, <span class="hljs-number">22</span>));<br><br>        <span class="hljs-comment">// 通过 sort 方法的第二个参数传入一个 Comparator 接口对象</span><br>        <span class="hljs-comment">// 相当于是传入一个比较对象大小的算法到 sort 方法中</span><br>        <span class="hljs-comment">// 由于 Java 中没有函数指针、仿函数、委托这样的概念</span><br>        <span class="hljs-comment">// 因此要将一个算法传入一个方法中唯一的选择就是通过接口回调</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Student&gt; () &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o1.getName().compareTo(o2.getName());    <span class="hljs-comment">// 比较学生姓名</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">for</span>(Student stu : list) &#123;<br>            System.out.println(stu);<br>        &#125;<br><span class="hljs-comment">//      输出结果: </span><br><span class="hljs-comment">//      Student [name=Bob YANG, age=22]</span><br><span class="hljs-comment">//      Student [name=Bruce LEE, age=60]</span><br><span class="hljs-comment">//      Student [name=Hao LUO, age=33]</span><br><span class="hljs-comment">//      Student [name=XJ WANG, age=32]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="Java-并发（57-67）"><a href="#Java-并发（57-67）" class="headerlink" title="Java 并发（57~67）"></a>Java 并发（57~67）</h1><blockquote><p>57、<code>Thread</code> 类的 <code>sleep()</code> 方法和对象的 <code>wait()</code> 方法都可以让线程暂停执行，它们有什么区别?</p></blockquote><p>答：<code>sleep()</code> 方法（休眠）是线程类 <code>Thread</code> 的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第 66 题中的线程状态转换图）。<code>wait()</code> 是 <code>Object</code> 类的方法，调用对象的 <code>wait()</code> 方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的 <code>notify()</code> 方法（或 <code>notifyAll()</code> 方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p><p><strong>补充：</strong>可能不少人对什么是进程，什么是线程还比较模糊，对于为什么需要多线程编程也不是特别理解。简单的说：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是操作系统进行资源分配和调度的一个独立单位；线程是进程的一个实体，是 CPU 调度和分派的基本单位，是比进程更小的能独立运行的基本单位。线程的划分尺度小于进程，这使得多线程程序的并发性高；进程在执行时通常拥有独立的内存单元，而线程之间可以共享内存。使用多线程的编程通常能够带来更好的性能和用户体验，但是多线程的程序对于其他程序是不友好的，因为它可能占用了更多的 CPU 资源。当然，也不是线程越多，程序的性能就越好，因为线程之间的调度和切换也会浪费 CPU 时间。时下很时髦的 Node.js 就采用了单线程异步 I/O 的工作模式。</p><blockquote><p>58、线程的 <code>sleep()</code> 方法和 <code>yield()</code> 方法有什么区别？</p></blockquote><p>答：</p><ol><li><code>sleep()</code> 方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；<code>yield()</code> 方法只会给相同优先级或更高优先级的线程以运行的机会；</li><li>线程执行 <code>sleep()</code> 方法后转入阻塞（blocked）状态，而执行 <code>yield()</code> 方法后转入就绪（ready）状态；</li><li><code>sleep()</code> 方法声明抛出 <code>InterruptedException</code>，而 <code>yield()</code> 方法没有声明任何异常；</li><li><code>sleep()</code> 方法比 <code>yield()</code> 方法（跟操作系统 CPU 调度相关）具有更好的可移植性。</li></ol><blockquote><p>59、当一个线程进入一个对象的 <code>synchronized</code> 方法 <code>A</code> 之后，其它线程是否可进入此对象的 <code>synchronized</code> 方法 <code>B</code>？</p></blockquote><p>答：不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的 <code>synchronized</code> 修饰符要求执行方法时要获得对象的锁，如果已经进入 <code>A</code> 方法说明对象锁已经被取走，那么试图进入 <code>B</code> 方法的线程就只能在<strong>等锁池</strong>（注意不是等待池哦）中等待对象的锁。</p><blockquote><p>60、请说出与线程同步以及线程调度相关的方法。</p></blockquote><p>答：</p><ul><li><code>wait()</code>：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</li><li><code>sleep()</code>：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理 <code>InterruptedException</code> 异常；</li><li><code>notify()</code>：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由 JVM 确定唤醒哪个线程，而且<strong>与优先级无关</strong>；</li><li><code>notityAll()</code>：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们<strong>竞争</strong>，只有获得锁的线程才能进入就绪状态；</li></ul><p><strong>说明：</strong>关于 Java 多线程和并发编程的问题，建议大家看我的另一篇文章<a href="https://blog.csdn.net/jackfrued/article/details/44499227">《关于Java并发编程的总结和思考》</a>。</p><p><strong>补充：</strong>Java 5 通过 <code>Lock</code> 接口提供了显式的锁机制（explicit lock），增强了灵活性以及对线程的协调。<code>Lock</code> 接口中定义了加锁 <code>lock()</code> 和解锁 <code>unlock()</code> 的方法，同时还提供了 <code>newCondition()</code> 方法来产生用于线程之间通信的 <code>Condition</code> 对象；此外，Java 5 还提供了信号量机制（semaphore），信号量可以用来限制对某个共享资源进行访问的线程的数量。在对资源进行访问之前，线程必须得到信号量的许可（调用 <code>Semaphore</code> 对象的 <code>acquire()</code> 方法）；在完成对资源的访问后，线程必须向信号量归还许可（调用 <code>Semaphore</code> 对象的 <code>release()</code> 方法）。</p><p>下面的例子演示了 100 个线程同时向一个银行账户中存入 1 元钱，在没有使用同步机制和使用同步机制情况下的执行情况。</p><p>银行账户类：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 银行账户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;       <span class="hljs-comment">// 账户余额</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存款</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money 存入金额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> newBalance = balance + money;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);     <span class="hljs-comment">// 模拟此业务需要一段处理时间</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span>(InterruptedException ex) &#123;<br>            ex.printStackTrace();<br>        &#125;<br>        balance = newBalance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得账户余额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存钱线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddMoneyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Account account;    <span class="hljs-comment">// 存入账户</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> money;       <span class="hljs-comment">// 存入金额</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddMoneyThread</span><span class="hljs-params">(Account account, <span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = account;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        account.deposit(money);   <span class="hljs-comment">// 调用存款方法</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Account account = <span class="hljs-keyword">new</span> Account();<br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            service.execute(<span class="hljs-keyword">new</span> AddMoneyThread(account, <span class="hljs-number">1</span>));<br>        &#125;<br>        <br>        service.shutdown();<br><br>        <span class="hljs-keyword">while</span>(!service.isTerminated()) &#123;&#125;<br><br>        System.out.println(<span class="hljs-string">&quot;账户余额: &quot;</span> + account.getBalance());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在没有同步的情况下，执行结果通常是显示账户余额在 10 元以下，出现这种状况的原因是，当一个线程 A 试图存入 1 元的时候，另外一个线程 B 也能够进入存款的方法中，线程 B 读取到的账户余额仍然是线程 A 存入 1 元钱之前的账户余额，因此也是在原来的余额 0 上面做了加 1 元的操作，同理线程 C 也会做类似的事情，所以最后 100 个线程执行结束时，本来期望账户余额为 100 元，但实际得到的通常在 10 元以下（很可能是 1 元哦）。解决这个问题的办法就是同步，当一个线程对银行账户存钱时，需要将此账户锁定，待其操作完成后才允许其他的线程进行操作，代码有如下几种调整方案：</p><ol><li><p>在银行账户的存款（<code>deposit</code>）方法上同步（<code>synchronized</code>）关键字</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 银行账户</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;     <span class="hljs-comment">// 账户余额</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 存款</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> money 存入金额</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;  <span class="hljs-comment">// 加上同步（synchronized）关键字</span><br>        <span class="hljs-keyword">double</span> newBalance = balance + money;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);   <span class="hljs-comment">// 模拟此业务需要一段处理时间</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span>(InterruptedException ex) &#123;<br>            ex.printStackTrace();<br>        &#125;<br>        balance = newBalance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 获得账户余额</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>在线程调用存款方法时对银行账户进行同步</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 存钱线程</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddMoneyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Account account;    <span class="hljs-comment">// 存入账户</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> money;       <span class="hljs-comment">// 存入金额</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddMoneyThread</span><span class="hljs-params">(Account account, <span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = account;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (account) &#123;      <span class="hljs-comment">// 加上同步（synchronized）关键字</span><br>            account.deposit(money);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>通过 Java 5 显示的锁机制，为每个银行账户创建一个锁对象，在存款操作进行加锁和解锁的操作</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 银行账户</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Lock accountLock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance; <span class="hljs-comment">// 账户余额</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 存入金额</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> money</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        accountLock.lock(); <span class="hljs-comment">// 加锁</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">double</span> newBalance = balance + money;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>); <span class="hljs-comment">// 模拟此业务需要一段处理时间</span><br>            &#125;<br>            <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                ex.printStackTrace();<br>            &#125;<br>            balance = newBalance;<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            accountLock.unlock(); <span class="hljs-comment">// 解锁</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 获得账户余额</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>按照上述三种方式对代码进行修改后，重写执行测试代码 Test01，将看到最终的账户余额为 100 元。当然也可以使用 <code>Semaphore</code> 或 <code>CountdownLatch</code> 来实现同步。</p></li></ol><blockquote><p>61、编写多线程程序有几种实现方式？</p></blockquote><p>答：Java 5 以前实现多线程有两种实现方法：一种是继承 <code>Thread</code> 类；另一种是实现 <code>Runnable</code> 接口。两种方式都要通过重写 <code>run()</code> 方法来定义线程的行为，推荐使用后者，因为 Java 中的继承是单继承，一个类有一个父类，如果继承了 <code>Thread</code> 类就无法再继承其他类了，显然使用 <code>Runnable</code> 接口更为灵活。</p><p><strong>补充：</strong>Java 5 以后创建线程还有第三种方式：实现 <code>Callable</code> 接口，该接口中的 <code>call</code> 方法可以在线程执行结束时产生一个返回值，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.Future;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> upperBounds;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyTask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> upperBounds)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.upperBounds = upperBounds;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= upperBounds; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        List&lt;Future&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            list.add(service.submit(<span class="hljs-keyword">new</span> MyTask((<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">100</span>))));<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(Future&lt;Integer&gt; future : list) &#123;<br>            <span class="hljs-comment">// while(!future.isDone()) ;</span><br>            sum += future.get();<br>        &#125;<br><br>        System.out.println(sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>62、<code>synchronized</code> 关键字的用法？</p></blockquote><p>答：<code>synchronized</code> 关键字可以将对象或者方法标记为<strong>同步</strong>，以实现对对象和方法的互斥访问，可以用 <code>synchronized(对象) &#123; … &#125;</code> 定义同步代码块，或者在声明方法时将 <code>synchronized</code> 作为方法的修饰符。在第 60 题的例子中已经展示了 <code>synchronized</code> 关键字的用法。</p><blockquote><p>63、举例说明同步和异步。</p></blockquote><p>答：如果系统中存在临界资源（资源数量少于竞争资源的线程数量的资源），例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就必须进行同步存取（数据库操作中的排他锁就是最好的例子）。当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。事实上，所谓的同步就是指<strong>阻塞式操作</strong>，而异步就是<strong>非阻塞式操作</strong>。</p><blockquote><p>64、启动一个线程是调用 <code>run()</code> 还是 <code>start()</code> 方法？</p></blockquote><p>答：启动一个线程是调用 <code>start()</code> 方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由 JVM 调度并执行，这并不意味着线程就会立即运行。<code>run()</code> 方法是线程启动后要进行回调（callback）的方法。</p><blockquote><p>65、什么是线程池（thread pool）？</p></blockquote><p>答：在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在 Java 中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是“池化资源”技术产生的原因。线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。</p><p>Java 5+ 中的 <code>Executor</code> 接口定义一个执行线程的工具。它的子类型即线程池接口是 <code>ExecutorService</code>。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类 <code>Executors</code> 里面提供了一些静态工厂方法，生成一些常用的线程池，如下所示：</p><ul><li><code>newSingleThreadExecutor</code>：创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</li><li><code>newFixedThreadPool</code>：创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</li><li><code>newCachedThreadPool</code>：创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。</li><li><code>newScheduledThreadPool</code>：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</li><li><code>newSingleThreadScheduledExecutor</code>：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。</li></ul><p>第 60 题的例子中演示了通过 <code>Executors</code> 工具类创建线程池并使用线程池执行线程的代码。如果希望在服务器上使用线程池，强烈建议使用 <code>newFixedThreadPool</code> 方法来创建线程池，这样能获得更好的性能。</p><blockquote><p>66、线程的基本状态以及状态之间的关系？</p></blockquote><p>答：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/66.png" alt></p><p><strong>说明：</strong>其中 <code>Running</code> 表示运行状态，<code>Runnable</code> 表示就绪状态（万事俱备，只欠 CPU），<code>Blocked</code> 表示阻塞状态，阻塞状态又有多种情况，可能是因为调用 <code>wait()</code> 方法进入等待池，也可能是执行同步方法或同步代码块进入等锁池，或者是调用了 <code>sleep()</code> 方法或 <code>join()</code> 方法等待休眠或其他线程结束，或是因为发生了 I/O 中断。</p><blockquote><p>67、简述 <code>synchronized</code> 和 <code>java.util.concurrent.locks.Lock</code> 的异同？</p></blockquote><p>答：<code>Lock</code> 是 Java 5 以后引入的新的 API，和关键字 <code>synchronized</code> 相比主要相同点：<code>Lock</code> 能完成 <code>synchronized</code> 所实现的所有功能；主要不同点：<code>Lock</code> 有比 <code>synchronized</code> 更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。<code>synchronized</code> 会自动释放锁，而 <code>Lock</code> 一定要求程序员手工释放，并且最好在 <code>finally</code> 块中释放（这是释放外部资源的最好的地方）。</p><h1 id="Java-I-O（68-72）"><a href="#Java-I-O（68-72）" class="headerlink" title="Java I/O（68~72）"></a>Java I/O（68~72）</h1><blockquote><p>68、Java 中如何实现序列化，有什么意义？</p></blockquote><p>答：序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。</p><p>要实现序列化，需要让一个类实现 <code>Serializable</code> 接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过 <code>writeObject(Object)</code> 方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过 <code>readObject</code> 方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆（可以参考第 29 题）。</p><blockquote><p>69、Java 中有几种类型的流？</p></blockquote><p>答：<strong>字节流</strong>和<strong>字符流</strong>。字节流继承于 <code>InputStream</code>、<code>OutputStream</code>，字符流继承于 <code>Reader</code>、<code>Writer</code>。在 <code>java.io</code> 包中还有许多其他的流，主要是为了提高性能和使用方便。关于 Java 的 I/O 需要注意的有两点：一是两种<strong>对称性</strong>（输入和输出的对称性，字节和字符的对称性）；二是两种<strong>设计模式</strong>（适配器模式和装潢模式）。另外 Java 中的流不同于 C# 的是它只有一个维度一个方向。</p><p>面试题 - 编程实现文件拷贝。（这个题目在笔试的时候经常出现，下面的代码给出了两种实现方案）</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">// 工具类中的方法都是静态方式访问的，因此将构造器私有不允许创建对象(绝对好习惯)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MyUtil</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileCopy</span><span class="hljs-params">(String source, String target)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span> (InputStream in = <span class="hljs-keyword">new</span> FileInputStream(source)) &#123;<br>            <span class="hljs-keyword">try</span> (OutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(target)) &#123;<br>                <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">4096</span>];<br>                <span class="hljs-keyword">int</span> bytesToRead;<br>                <span class="hljs-keyword">while</span>((bytesToRead = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    out.write(buffer, <span class="hljs-number">0</span>, bytesToRead);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileCopyNIO</span><span class="hljs-params">(String source, String target)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span> (FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(source)) &#123;<br>            <span class="hljs-keyword">try</span> (FileOutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(target)) &#123;<br>                FileChannel inChannel = in.getChannel();<br>                FileChannel outChannel = out.getChannel();<br>                ByteBuffer buffer = ByteBuffer.allocate(<span class="hljs-number">4096</span>);<br>                <span class="hljs-keyword">while</span>(inChannel.read(buffer) != -<span class="hljs-number">1</span>) &#123;<br>                    buffer.flip();<br>                    outChannel.write(buffer);<br>                    buffer.clear();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>注意：</strong>上面用到 Java 7 的 TWR，使用 TWR 后可以不用在 <code>finally</code> 中释放外部资源 ，从而让代码更加优雅。</p><blockquote><p>70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。</p></blockquote><p>答：代码如下：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">// 工具类中的方法都是静态方式访问的，因此将构造器私有不允许创建对象(绝对好习惯)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MyUtil</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 统计给定文件中给定字符串的出现次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename 文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> word 字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 字符串在文件中出现的次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countWordInFile</span><span class="hljs-params">(String filename, String word)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (FileReader fr = <span class="hljs-keyword">new</span> FileReader(filename)) &#123;<br>            <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(fr)) &#123;<br>                String line = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">while</span> (line.length() &gt;= word.length() &amp;&amp; (index = line.indexOf(word)) &gt;= <span class="hljs-number">0</span>) &#123;<br>                        counter++;<br>                        line = line.substring(index + word.length());<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            ex.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> counter;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>71、如何用 Java 代码列出一个目录下所有的文件？</p></blockquote><p>答：</p><p>如果只要求列出当前文件夹下的文件，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test12</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/Users/Hao/Downloads&quot;</span>);<br>        <span class="hljs-keyword">for</span>(File temp : f.listFiles()) &#123;<br>            <span class="hljs-keyword">if</span>(temp.isFile()) &#123;<br>                System.out.println(temp.getName());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果需要对文件夹继续展开，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test12</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        showDirectory(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/Users/Hao/Downloads&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDirectory</span><span class="hljs-params">(File f)</span> </span>&#123;<br>        _walkDirectory(f, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_walkDirectory</span><span class="hljs-params">(File f, <span class="hljs-keyword">int</span> level)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br>            <span class="hljs-keyword">for</span>(File temp : f.listFiles()) &#123;<br>                _walkDirectory(temp, level + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; level - <span class="hljs-number">1</span>; i++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println(f.getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在 Java 7 中可以使用 NIO.2 的 API 来做同样的事情，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowFileTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Path initPath = Paths.get(<span class="hljs-string">&quot;/Users/Hao/Downloads&quot;</span>);<br>        Files.walkFileTree(initPath, <span class="hljs-keyword">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> FileVisitResult <span class="hljs-title">visitFile</span><span class="hljs-params">(Path file, BasicFileAttributes attrs)</span> </span><br><span class="hljs-function">                    <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(file.getFileName().toString());<br>                <span class="hljs-keyword">return</span> FileVisitResult.CONTINUE;<br>            &#125;<br><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>72、用 Java 的套接字编程实现一个多线程的回显（echo）服务器。</p></blockquote><p>答：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EchoServer</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ECHO_SERVER_PORT = <span class="hljs-number">6789</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <br>        <span class="hljs-keyword">try</span>(ServerSocket server = <span class="hljs-keyword">new</span> ServerSocket(ECHO_SERVER_PORT)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;服务器已经启动...&quot;</span>);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>                Socket client = server.accept();<br>                <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> ClientHandler(client)).start();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Socket client;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClientHandler</span><span class="hljs-params">(Socket client)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.client = client;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span>(BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(client.getInputStream()));<br>                    PrintWriter pw = <span class="hljs-keyword">new</span> PrintWriter(client.getOutputStream())) &#123;<br>                String msg = br.readLine();<br>                System.out.println(<span class="hljs-string">&quot;收到&quot;</span> + client.getInetAddress() + <span class="hljs-string">&quot;发送的: &quot;</span> + msg);<br>                pw.println(msg);<br>                pw.flush();<br>            &#125; <span class="hljs-keyword">catch</span>(Exception ex) &#123;<br>                ex.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    client.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>注意：</strong>上面的代码使用了 Java 7 的 TWR 语法，由于很多外部资源类都间接的实现了 <code>AutoCloseable</code> 接口（单方法回调接口），因此可以利用 TWR 语法在 <code>try</code> 结束的时候通过回调的方式自动调用外部资源类的 <code>close()</code> 方法，避免书写冗长的 <code>finally</code> 代码块。此外，上面的代码用一个静态内部类实现线程的功能，使用多线程可以避免一个用户 I/O 操作所产生的中断影响其他用户对服务器的访问，简单的说就是一个用户的输入操作不会造成其他用户的阻塞。当然，上面的代码使用线程池可以获得更好的性能，因为频繁的创建和销毁线程所造成的开销也是不可忽视的。</p><p>下面是一段回显客户端测试代码：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EchoClient</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Socket client = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6789</span>);<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入内容: &quot;</span>);<br>        String msg = sc.nextLine();<br>        sc.close();<br>        PrintWriter pw = <span class="hljs-keyword">new</span> PrintWriter(client.getOutputStream());<br>        pw.println(msg);<br>        pw.flush();<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(client.getInputStream()));<br>        System.out.println(br.readLine());<br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果希望用 NIO 的多路复用套接字实现服务器，代码如下所示。NIO 的操作虽然带来了更好的性能，但是有些操作是比较底层的，对于初学者来说还是有些难于理解。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.CharBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EchoServerNIO</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ECHO_SERVER_PORT = <span class="hljs-number">6789</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ECHO_SERVER_TIMEOUT = <span class="hljs-number">5000</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BUFFER_SIZE = <span class="hljs-number">1024</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ServerSocketChannel serverChannel = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Selector selector = <span class="hljs-keyword">null</span>;    <span class="hljs-comment">// 多路复用选择器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ByteBuffer buffer = <span class="hljs-keyword">null</span>;    <span class="hljs-comment">// 缓冲区</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        init();<br>        listen();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            serverChannel = ServerSocketChannel.open();<br>            buffer = ByteBuffer.allocate(BUFFER_SIZE);<br>            serverChannel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(ECHO_SERVER_PORT));<br>            serverChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>            selector = Selector.open();<br>            serverChannel.register(selector, SelectionKey.OP_ACCEPT);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listen</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (selector.select(ECHO_SERVER_TIMEOUT) != <span class="hljs-number">0</span>) &#123;<br>                    Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();<br>                    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>                        SelectionKey key = it.next();<br>                        it.remove();<br>                        handleKey(key);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleKey</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SocketChannel channel = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();<br>                channel = serverChannel.accept();<br>                channel.configureBlocking(<span class="hljs-keyword">false</span>);<br>                channel.register(selector, SelectionKey.OP_READ);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                channel = (SocketChannel) key.channel();<br>                buffer.clear();<br>                <span class="hljs-keyword">if</span> (channel.read(buffer) &gt; <span class="hljs-number">0</span>) &#123;<br>                    buffer.flip();<br>                    CharBuffer charBuffer = CharsetHelper.decode(buffer);<br>                    String msg = charBuffer.toString();<br>                    System.out.println(<span class="hljs-string">&quot;收到&quot;</span> + channel.getRemoteAddress() + <span class="hljs-string">&quot;的消息：&quot;</span> + msg);<br>                    channel.write(CharsetHelper.encode(CharBuffer.wrap(msg)));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    channel.close();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">if</span> (channel != <span class="hljs-keyword">null</span>) &#123;<br>                channel.close();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.CharBuffer;<br><span class="hljs-keyword">import</span> java.nio.charset.CharacterCodingException;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.nio.charset.CharsetDecoder;<br><span class="hljs-keyword">import</span> java.nio.charset.CharsetEncoder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharsetHelper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String UTF_8 = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CharsetEncoder encoder = Charset.forName(UTF_8).newEncoder();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CharsetDecoder decoder = Charset.forName(UTF_8).newDecoder();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">CharsetHelper</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteBuffer <span class="hljs-title">encode</span><span class="hljs-params">(CharBuffer in)</span> <span class="hljs-keyword">throws</span> CharacterCodingException</span>&#123;<br>        <span class="hljs-keyword">return</span> encoder.encode(in);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CharBuffer <span class="hljs-title">decode</span><span class="hljs-params">(ByteBuffer in)</span> <span class="hljs-keyword">throws</span> CharacterCodingException</span>&#123;<br>        <span class="hljs-keyword">return</span> decoder.decode(in);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="Java-数据库（73-84）"><a href="#Java-数据库（73-84）" class="headerlink" title="Java 数据库（73~84）"></a>Java 数据库（73~84）</h1><blockquote><p>73、XML 文档定义有几种形式？它们之间有何本质区别？解析 XML 文档有哪几种方式？</p></blockquote><p>答：XML 文档定义分为 DTD 和 Schema 两种形式，二者都是对 XML 语法的约束，其本质区别在于 Schema 本身也是一个 XML 文件，可以被 XML 解析器解析，而且可以为 XML 承载的数据定义类型，约束能力较之 DTD 更强大。对 XML 的解析主要有 DOM（文档对象模型，Document Object Model）、SAX（Simple API for XML）和 StAX（Java 6 中引入的新的解析 XML 的方式，Streaming API for XML），其中 DOM 处理大型文件时其性能下降的非常厉害，这个问题是由 DOM 树结构占用的内存较多造成的，而且 DOM 解析方式必须在解析文件之前把整个文档装入内存，适合对 XML 的随机访问（典型的用空间换取时间的策略）；SAX 是事件驱动型的 XML 解析方式，它顺序读取 XML 文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过事件回调代码来处理XML文件，适合对 XML 的顺序访问；顾名思义，StAX 把重点放在流上，实际上 StAX 与其他解析方式的本质区别就在于应用程序能够把 XML 作为一个事件流来处理。将 XML 作为一组事件来处理的想法并不新颖（SAX 就是这样做的），但不同之处在于 StAX 允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。</p><blockquote><p>74、你在项目中哪些地方用到了 XML？</p></blockquote><p>答：XML 的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML 将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从 XML 文件中还原相关信息进行处理，XML 曾经是异构系统间交换数据的事实标准，但此项功能几乎已经被 JSON（JavaScript Object Notation）取而代之。当然，目前很多软件仍然使用 XML 来存储配置信息，我们在很多项目中通常也会将作为配置信息的硬代码写在 XML 文件中，Java 的很多框架也是这么做的，而且这些框架都选择了 dom4j 作为处理 XML 的工具，因为 Sun 公司的官方 API 实在不怎么好用。</p><p><strong>补充：</strong>现在有很多时髦的软件（如 Sublime）已经开始将配置文件书写成 JSON 格式，我们已经强烈的感受到 XML 的另一项功能也将逐渐被业界抛弃。</p><blockquote><p>75、阐述 JDBC 操作数据库的步骤。</p></blockquote><p>答：下面的代码以连接本机的 Oracle 数据库为例，演示 JDBC 操作数据库的步骤。</p><ol><li><p>加载驱动。</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);<br></code></pre></td></tr></table></figure></p></li><li><p>创建连接。</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection con = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;</span>, <span class="hljs-string">&quot;scott&quot;</span>, <span class="hljs-string">&quot;tiger&quot;</span>);<br></code></pre></td></tr></table></figure></p></li><li><p>创建语句。</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PreparedStatement ps = con.prepareStatement(<span class="hljs-string">&quot;select * from emp where sal between ? and ?&quot;</span>);<br>ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>);<br>ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure></p></li><li><p>执行语句。</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet rs = ps.executeQuery();<br></code></pre></td></tr></table></figure></p></li><li><p>处理结果。</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(rs.next()) &#123;<br>    System.out.println(rs.getInt(<span class="hljs-string">&quot;empno&quot;</span>) + <span class="hljs-string">&quot; - &quot;</span> + rs.getString(<span class="hljs-string">&quot;ename&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>关闭资源。</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span>(con != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            con.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ol><p><strong>注意：</strong>关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭 <code>ResultSet</code>、再关闭 <code>Statement</code>、最后关闭 <code>Connection</code>。上面的代码只关闭了 Connection`（连接），虽然通常情况下在关闭连接时，连接上创建的语句和打开的游标也会关闭，但不能保证总是如此，因此应该按照刚才说的顺序分别关闭。此外，第一步加载驱动在 JDBC 4.0 中是可以省略的（自动从类路径中加载驱动），但是我们建议保留。</p><blockquote><p>76、<code>Statement</code> 和 <code>PreparedStatement</code> 有什么区别？哪个性能更好？</p></blockquote><p>答：与 <code>Statement</code> 相比，<code>PreparedStatement</code> 主要有以下优势：</p><ol><li><code>PreparedStatement</code> 接口代表预编译的语句，它主要的优势在于可以减少 SQL 的编译错误并增加 SQL 的安全性（减少 SQL 注射攻击的可能性）；</li><li><code>PreparedStatement</code> 中的 SQL 语句是可以带参数的，避免了用字符串连接拼接 SQL 语句的麻烦和不安全；</li><li>当批量处理 SQL 或频繁执行相同的查询时，<code>PreparedStatement</code>有明显的性能上的优势，由于数据库可以将编译优化后的 SQL 语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成执行计划）。</li></ol><p><strong>补充：</strong>为了提供对存储过程的调用，JDBC API 中还提供了 <code>CallableStatement</code> 接口。存储过程（Stored Procedure）是数据库中一组为了完成特定功能的 SQL 语句的集合，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。虽然调用存储过程会在网络开销、安全性、性能上获得很多好处，但是存在如果底层数据库发生迁移时就会有很多麻烦，因为每种数据库的存储过程在书写上存在不少的差别。</p><blockquote><p>77、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</p></blockquote><p>答：要<strong>提升读取数据的性能</strong>，可以指定通过结果集（ResultSet）对象的 <code>setFetchSize()</code> 方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用 <code>PreparedStatement</code> 语句构建批处理，将若干 SQL 语句置于一个批处理中执行。</p><blockquote><p>78、在进行数据库编程时，连接池有什么作用？</p></blockquote><p>答：由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行 TCP 的三次握手，释放连接需要进行 TCP 四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在 Java 开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于 Java 的开源数据库连接池主要有：C3P0、Proxool、DBCP、BoneCP、Druid等。</p><p><strong>补充：</strong>在计算机系统中时间和空间是不可调和的矛盾，理解这一点对设计满足性能要求的算法是至关重要的。大型网站性能优化的一个关键就是使用缓存，而缓存跟上面讲的连接池道理非常类似，也是使用空间换时间的策略。可以将热点数据置于缓存中，当用户查询这些数据时可以直接从缓存中得到，这无论如何也快过去数据库中查询。当然，缓存的置换策略等也会对系统性能产生重要影响，对于这个问题的讨论已经超出了这里要阐述的范围。</p><blockquote><p>79、什么是 DAO 模式？</p></blockquote><p>答：DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共 API 中。用程序设计语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该类对应一个特定的数据存储。DAO 模式实际上包含了两个模式，一是 Data Accessor（数据访问器），二是 Data Object（数据对象），前者要解决如何访问数据的问题，而后者要解决的是如何用对象封装数据。</p><blockquote><p>80、事务的 ACID 是指什么？</p></blockquote><p>答：</p><ul><li>原子性（Atomic）：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败；</li><li>一致性（Consistent）：事务结束后系统状态是一致的；</li><li>隔离性（Isolated）：并发执行的事务彼此无法看到对方的中间状态；</li><li>持久性（Durable）：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。</li></ul><p><strong>补充：</strong>关于事务，在面试中被问到的概率是很高的，可以问的问题也是很多的。首先需要知道的是，只有存在<strong>并发数据访问</strong>时才需要事务。当多个事务访问同一数据时，可能会存在 5 类问题，包括 3 类<strong>数据读取</strong>问题（脏读、不可重复读和幻读）和 2 类<strong>数据更新</strong>问题（第 1 类丢失更新和第 2 类丢失更新）。</p><ul><li>脏读（Dirty Read）：A 事务读取 B 事务尚未提交的数据并在此基础上操作，而 B 事务执行回滚，那么 A 读取到的数据就是脏数据。</li></ul><div class="table-container"><table><thead><tr><th>时间</th><th>转账事务A</th><th>取款事务B</th></tr></thead><tbody><tr><td>T1</td><td>&nbsp;</td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td>&nbsp;</td></tr><tr><td>T3</td><td>&nbsp;</td><td>查询账户余额为1000元</td></tr><tr><td>T4</td><td>&nbsp;</td><td>取出500元余额修改为500元</td></tr><tr><td>T5</td><td>查询账户余额为500元（脏读）</td><td>&nbsp;</td></tr><tr><td>T6</td><td>&nbsp;</td><td>撤销事务余额恢复为1000元</td></tr><tr><td>T7</td><td>汇入100元把余额修改为600元</td><td>&nbsp;</td></tr><tr><td>T8</td><td>提交事务</td><td>&nbsp;</td></tr></tbody></table></div><ul><li>不可重复读（Unrepeatable Read）：事务 A 重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务 B 修改过了。</li></ul><div class="table-container"><table><thead><tr><th>时间</th><th>转账事务A</th><th>取款事务B</th></tr></thead><tbody><tr><td>T1</td><td>&nbsp;</td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td>&nbsp;</td></tr><tr><td>T3</td><td>&nbsp;</td><td>查询账户余额为1000元</td></tr><tr><td>T4</td><td>查询账户余额为1000元</td><td>&nbsp;</td></tr><tr><td>T5</td><td>&nbsp;</td><td>取出100元修改余额为900元</td></tr><tr><td>T6</td><td>&nbsp;</td><td>提交事务</td></tr><tr><td>T7</td><td>查询账户余额为900元（不可重复读）</td><td>&nbsp;</td></tr></tbody></table></div><ul><li>幻读（Phantom Read）：事务 A 重新执行一个查询，返回一系列符合查询条件的行，发现其中插入了被事务 B 提交的行。</li></ul><div class="table-container"><table><thead><tr><th>时间</th><th>统计金额事务A</th><th>转账事务B</th></tr></thead><tbody><tr><td>T1</td><td>&nbsp;</td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td>&nbsp;</td></tr><tr><td>T3</td><td>统计总存款为10000元</td><td>&nbsp;</td></tr><tr><td>T4</td><td>&nbsp;</td><td>新增一个存款账户存入100元</td></tr><tr><td>T5</td><td>&nbsp;</td><td>提交事务</td></tr><tr><td>T6</td><td>再次统计总存款为10100元（幻读）</td><td>&nbsp;</td></tr></tbody></table></div><ul><li>第 1 类丢失更新：事务 A 撤销时，把已经提交的事务 B 的更新数据覆盖了。</li></ul><div class="table-container"><table><thead><tr><th>时间</th><th>取款事务A</th><th>转账事务B</th></tr></thead><tbody><tr><td>T1</td><td>开始事务</td><td>&nbsp;</td></tr><tr><td>T2</td><td>&nbsp;</td><td>开始事务</td></tr><tr><td>T3</td><td>查询账户余额为1000元</td><td>&nbsp;</td></tr><tr><td>T4</td><td>&nbsp;</td><td>查询账户余额为1000元</td></tr><tr><td>T5</td><td>&nbsp;</td><td>汇入100元修改余额为1100元</td></tr><tr><td>T6</td><td>&nbsp;</td><td>提交事务</td></tr><tr><td>T7</td><td>取出100元将余额修改为900元</td><td>&nbsp;</td></tr><tr><td>T8</td><td>撤销事务</td><td>&nbsp;</td></tr><tr><td>T9</td><td>余额恢复为1000元（丢失更新）</td><td>&nbsp;</td></tr></tbody></table></div><ul><li>第 2 类丢失更新：事务 A 覆盖事务 B 已经提交的数据，造成事务 B 所做的操作丢失。</li></ul><div class="table-container"><table><thead><tr><th>时间</th><th>转账事务A</th><th>取款事务B</th></tr></thead><tbody><tr><td>T1</td><td>&nbsp;</td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td>&nbsp;</td></tr><tr><td>T3</td><td>&nbsp;</td><td>查询账户余额为1000元</td></tr><tr><td>T4</td><td>查询账户余额为1000元</td><td>&nbsp;</td></tr><tr><td>T5</td><td>&nbsp;</td><td>取出100元将余额修改为900元</td></tr><tr><td>T6</td><td>&nbsp;</td><td>提交事务</td></tr><tr><td>T7</td><td>汇入100元将余额修改为1100元</td><td>&nbsp;</td></tr><tr><td>T8</td><td>提交事务</td><td>&nbsp;</td></tr><tr><td>T9</td><td>查询账户余额为1100元（丢失更新）</td><td>&nbsp;</td></tr></tbody></table></div><p>数据并发访问所产生的问题，在有些场景下可能是允许的，但是有些场景下可能就是致命的，数据库通常会通过<strong>锁机制</strong>来解决数据并发访问问题，按锁定对象不同可以分为<strong>表级锁</strong>和<strong>行级锁</strong>；按并发事务锁定关系可以分为<strong>共享锁</strong>和<strong>独占锁</strong>，具体的内容大家可以自行查阅资料进行了解。</p><p>直接使用锁是非常麻烦的，为此数据库为用户提供了自动锁机制，只要用户指定会话的事务隔离级别，数据库就会通过分析 SQL 语句然后为事务访问的资源加上合适的锁，此外，数据库还会维护这些锁通过各种手段提高系统的性能，这些对用户来说都是透明的（就是说你不用理解，事实上我确实也不知道）。ANSI/ISO SQL 92 标准定义了 4 个等级的事务隔离级别，如下表所示：</p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>第一类丢失更新</th><th>第二类丢失更新</th></tr></thead><tbody><tr><td>READ UNCOMMITED</td><td>允许</td><td>允许</td><td>允许</td><td>不允许</td><td>允许</td></tr><tr><td>READ COMMITTED</td><td>不允许</td><td>允许</td><td>允许</td><td>不允许</td><td>允许</td></tr><tr><td>REPEATABLE READ</td><td>不允许</td><td>不允许</td><td>允许</td><td>不允许</td><td>不允许</td></tr><tr><td>SERIALIZABLE</td><td>不允许</td><td>不允许</td><td>不允许</td><td>不允许</td><td>不允许</td></tr></tbody></table></div><p><strong>注意：</strong>需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。</p><blockquote><p>81、JDBC 中如何进行事务处理？</p></blockquote><p>答：<code>Connection</code> 提供了事务处理的方法，通过调用 <code>setAutoCommit(false)</code> 可以设置手动提交事务；当事务完成后用 <code>commit()</code> 显式提交事务；如果在事务处理过程中发生异常则通过 <code>rollback()</code> 进行事务回滚。除此之外，从 JDBC 3.0 中还引入了 Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/81.png" alt></p><blockquote><p>82、JDBC 能否处理 Blob 和 Clob？</p></blockquote><p>答： Blob 是指二进制大对象（Binary Large Object），而 Clob 是指大字符对象（Character Large Objec），因此其中 Blob 是为存储大的二进制数据而设计的，而 Clob 是为存储大的文本数据而设计的。JDBC 的 <code>PreparedStatement</code> 和 <code>ResultSet</code> 都提供了相应的方法来支持 Blob 和 Clob 操作。下面的代码展示了如何使用 JDBC 操作 LOB：下面以 MySQL 数据库为例，创建一个张有三个字段的用户表，包括编号（<code>id</code>）、姓名（<code>name</code>）和照片（<code>photo</code>），建表语句如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_user (<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> auto_increment,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  photo LONGBLOB <br>);<br></code></pre></td></tr></table></figure></p><p>下面的 Java 代码向数据库中插入一条记录：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcLobTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection con = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 加载驱动（Java6以上版本可以省略）</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">// 2. 建立连接</span><br>            con = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>            <span class="hljs-comment">// 3. 创建语句对象</span><br>            PreparedStatement ps = con.prepareStatement(<span class="hljs-string">&quot;insert into tb_user values (default, ?, ?)&quot;</span>);<br>            ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Jack&quot;</span>);            <span class="hljs-comment">// 将SQL语句中第一个占位符换成字符串</span><br><br>            <span class="hljs-keyword">try</span> (InputStream in = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;test.jpg&quot;</span>)) &#123;    <span class="hljs-comment">// Java 7的TWR</span><br>                ps.setBinaryStream(<span class="hljs-number">2</span>, in);      <span class="hljs-comment">// 将SQL语句中第二个占位符换成二进制流</span><br>                <br>                <span class="hljs-comment">// 4. SQL 语句获得受影响行数</span><br>                System.out.println(ps.executeUpdate() == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;插入成功&quot;</span> : <span class="hljs-string">&quot;插入失败&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;读取照片失败!&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;     <span class="hljs-comment">// Java 7的多异常捕获</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;     <span class="hljs-comment">// 释放外部资源的代码都应当放在finally中保证其能够得到执行</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(con != <span class="hljs-keyword">null</span> &amp;&amp; !con.isClosed()) &#123;<br>                    con.close();    <span class="hljs-comment">// 5. 释放数据库连接 </span><br>                    con = <span class="hljs-keyword">null</span>;     <span class="hljs-comment">// 指示垃圾回收器可以回收该对象</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>83、简述正则表达式及其用途。</p></blockquote><p>答：在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p><strong>说明：</strong>计算机诞生初期处理的信息几乎都是数值，但是时过境迁，今天我们使用计算机处理的信息更多的时候不是数值而是字符串，正则表达式就是在进行字符串匹配和处理的时候最为强大的工具，绝大多数语言都提供了对正则表达式的支持。</p><blockquote><p>84、Java 中是如何支持正则表达式操作的？</p></blockquote><p>答：Java 中的 <code>String</code> 类提供了支持正则表达式操作的方法，包括：<code>matches()</code>、<code>replaceAll()</code>、<code>replaceFirst()</code>、<code>split()</code>。此外，Java 中可以用 <code>Pattern</code> 类表示正则表达式对象，它提供了丰富的 API 进行各种正则表达式操作，请参考下面面试题的代码。</p><p>面试题：如果要从字符串中截取第一个英文左括号之前的字符串，例如：北京市(朝阳区)(西城区)(海淀区)，截取结果为：北京市，那么正则表达式怎么写？</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegExpTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str = <span class="hljs-string">&quot;北京市(朝阳区)(西城区)(海淀区)&quot;</span>;<br>        Pattern p = Pattern.compile(<span class="hljs-string">&quot;.*?(?=\\()&quot;</span>);<br>        Matcher m = p.matcher(str);<br>        <span class="hljs-keyword">if</span>(m.find()) &#123;<br>            System.out.println(m.group());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>上面的正则表达式中使用了懒惰匹配和前瞻，如果不清楚这些内容，推荐读一下网上很有名的<a href="https://www.jb51.net/tools/zhengze.html">《正则表达式30分钟入门教程》</a>。</p><h1 id="Java-反射（85-88）"><a href="#Java-反射（85-88）" class="headerlink" title="Java 反射（85~88）"></a>Java 反射（85~88）</h1><blockquote><p>85、获得一个类的类对象有哪些方式？</p></blockquote><p>答：</p><ul><li>类型.class，例如：<code>String.class</code></li><li>对象.getClass()，例如：<code>&quot;hello&quot;.getClass()</code></li><li>Class.forName()，例如：<code>Class.forName(&quot;java.lang.String&quot;)</code></li></ul><blockquote><p>86、如何通过反射创建对象？</p></blockquote><p>答：</p><ul><li>通过类对象调用 <code>newInstance()</code> 方法，例如：<code>String.class.newInstance()</code></li><li>通过类对象的 <code>getConstructor()</code> 或 <code>getDeclaredConstructor()</code> 方法获得构造器（Constructor）对象并调用其 <code>newInstance()</code> 方法创建对象，例如：<code>String.class.getConstructor(String.class).newInstance(&quot;Hello&quot;);</code></li></ul><blockquote><p>87、如何通过反射获取和设置对象私有字段的值？</p></blockquote><p>答：可以通过类对象的 <code>getDeclaredField()</code> 方法字段（Field）对象，然后再通过字段对象的 <code>setAccessible(true)</code> 将其设置为可以访问，接下来就可以通过 get/set 方法来获取/设置字段的值了。下面的代码实现了一个反射的工具类，其中的两个静态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类型且支持多级对象操作，例如 <code>ReflectionUtil.get(dog, &quot;owner.car.engine.id&quot;);</code> 可以获得 dog 对象的主人的汽车的引擎的 ID 号。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反射工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ReflectionUtil</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过反射取对象指定字段(属性)的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target 目标对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldName 字段的名字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> 如果取不到对象指定字段的值则抛出异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 字段的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getValue</span><span class="hljs-params">(Object target, String fieldName)</span> </span>&#123;<br>        Class&lt;?&gt; clazz = target.getClass();<br>        String[] fs = fieldName.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fs.length - <span class="hljs-number">1</span>; i++) &#123;<br>                Field f = clazz.getDeclaredField(fs[i]);<br>                f.setAccessible(<span class="hljs-keyword">true</span>);<br>                target = f.get(target);<br>                clazz = target.getClass();<br>            &#125;<br><br>            Field f = clazz.getDeclaredField(fs[fs.length - <span class="hljs-number">1</span>]);<br>            f.setAccessible(<span class="hljs-keyword">true</span>);<br>            <span class="hljs-keyword">return</span> f.get(target);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过反射给对象的指定字段赋值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target 目标对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldName 字段的名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(Object target, String fieldName, Object value)</span> </span>&#123;<br>        Class&lt;?&gt; clazz = target.getClass();<br>        String[] fs = fieldName.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fs.length - <span class="hljs-number">1</span>; i++) &#123;<br>                Field f = clazz.getDeclaredField(fs[i]);<br>                f.setAccessible(<span class="hljs-keyword">true</span>);<br>                Object val = f.get(target);<br>                <span class="hljs-keyword">if</span>(val == <span class="hljs-keyword">null</span>) &#123;<br>                    Constructor&lt;?&gt; c = f.getType().getDeclaredConstructor();<br>                    c.setAccessible(<span class="hljs-keyword">true</span>);<br>                    val = c.newInstance();<br>                    f.set(target, val);<br>                &#125;<br>                target = val;<br>                clazz = target.getClass();<br>            &#125;<br><br>            Field f = clazz.getDeclaredField(fs[fs.length - <span class="hljs-number">1</span>]);<br>            f.setAccessible(<span class="hljs-keyword">true</span>);<br>            f.set(target, value);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>88、如何通过反射调用对象的方法？</p></blockquote><p>答：请看下面的代码：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodInvokeTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String str = <span class="hljs-string">&quot;hello&quot;</span>;<br>        Method m = str.getClass().getMethod(<span class="hljs-string">&quot;toUpperCase&quot;</span>);<br>        System.out.println(m.invoke(str));  <span class="hljs-comment">// HELLO</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="Java-设计模式（89-95）"><a href="#Java-设计模式（89-95）" class="headerlink" title="Java 设计模式（89~95）"></a>Java 设计模式（89~95）</h1><blockquote><p>89、简述一下面向对象的&quot;六原则一法则&quot;。</p></blockquote><p>答：</p><ul><li><p><strong>单一职责原则：一个类只做它该做的事情。</strong>（单一职责原则想表达的就是&quot;高内聚&quot;，写代码最终极的原则只有六个字“高内聚、低耦合”，就如同葵花宝典或辟邪剑谱的中心思想就八个字“欲练此功必先自宫”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。我们都知道一句话叫“因为专注，所以专业”，一个对象如果承担太多的职责，那么注定它什么都做不好。这个世界上任何好的东西都有两个特征，一个是功能单一，好的相机绝对不是电视购物里面卖的那种一个机器有一百多种功能的，它基本上只能照相；另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）</p></li><li><p><strong>开闭原则：软件实体应当对扩展开放，对修改关闭。</strong>（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：(1)抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；(2)封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》一书中对桥梁模式的讲解的章节。）</p></li><li><p><strong>依赖倒转原则：面向接口编程。</strong>（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）<strong>里氏替换原则：任何时候都可以用子类型替换掉父类型。</strong>（关于里氏替换原则的描述，Barbara Liskov 女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）</p></li><li><p><strong>接口隔离原则：接口要小而专，绝不能大而全。</strong>（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）</p></li><li><p><strong>合成聚合复用原则：优先使用聚合或合成关系复用代码。</strong>（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A 关系、Has-A 关系、Use-A 关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是 Has-A关 系，合成聚合复用原则想表达的是优先考虑 Has-A 关系而不是 Is-A 关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在 Java 的 API 中也有不少滥用继承的例子，例如 Properties 类继承了 Hashtable 类，Stack 类继承了 Vector 类，这些继承明显就是错误的，更好的做法是在 Properties 类中放置一个 Hashtable 类型的成员并且将其键和值都设置为字符串来存储数据，而 Stack 类的设计也应该是在 Stack 类中放一个 Vector 对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）</p></li><li><p><strong>迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。</strong>（迪米特法则简单的说就是如何做到“低耦合”，门面模式和调停者模式就是对迪米特法则的践行。对于门面模式可以举一个简单的例子，你去一家公司洽谈业务，你不需要了解这个公司内部是如何运作的，你甚至可以对这个公司一无所知，去的时候只需要找到公司入口处的前台美女，告诉她们你要做什么，她们会找到合适的人跟你接洽，前台的美女就是公司这个系统的门面。再复杂的系统都可以为用户提供一个简单的门面，Java Web 开发中作为前端控制器的 Servlet 或 Filter 不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度，如下图所示。迪米特法则用通俗的话来将就是不要和陌生人打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。）</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/89_1.png" alt></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/89_2.png" alt></p><blockquote><p>90、简述一下你了解的设计模式。</p></blockquote><p>答：所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。</p><p>在 GoF 的《Design Patterns: Elements of Reusable Object-Oriented Software》中给出了三类（<strong>创建型</strong>[对类的实例化过程的抽象化]、<strong>结构型</strong>[描述如何将类或对象结合在一起形成更大的结构]、<strong>行为型</strong>[对在不同的对象之间划分责任和算法的抽象化]）共 23 种设计模式，包括：Abstract Factory（抽象工厂模式），Builder（建造者模式），Factory Method（工厂方法模式），Prototype（原始模型模式），Singleton（单例模式）；Facade（门面模式），Adapter（适配器模式），Bridge（桥梁模式），Composite（合成模式），Decorator（装饰模式），Flyweight（享元模式），Proxy（代理模式）；Command（命令模式），Interpreter（解释器模式），Visitor（访问者模式），Iterator（迭代子模式），Mediator（调停者模式），Memento（备忘录模式），Observer（观察者模式），State（状态模式），Strategy（策略模式），Template Method（模板方法模式），Chain Of Responsibility（责任链模式）。</p><p>面试被问到关于设计模式的知识时，可以拣最常用的作答，例如：</p><ul><li>工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作（多态方法）。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。</li><li>代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引用。实际开发中，按照使用目的的不同，代理可以分为：远程代理、虚拟代理、保护代理、Cache 代理、防火墙代理、同步化代理、智能引用代理。</li><li>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起使用的类能够一起工作。</li><li>模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法（多态实现），从而实现不同的业务逻辑。</li></ul><p>除此之外，还可以讲讲上面提到的门面模式、桥梁模式、单例模式、装潢模式（Collections 工具类和 I/O 系统中都使用装潢模式）等，反正基本原则就是拣自己最熟悉的、用得最多的作答，以免言多必失。</p><blockquote><p>91、用Java写一个单例类。</p></blockquote><p>答：</p><ul><li><p>饿汉式单例</p><p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>懒汉式单例</p><p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) instance ＝ <span class="hljs-keyword">new</span> Singleton();<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ul><p><strong>注意：</strong>实现一个单例有两点注意事项，(1)将构造器私有，不允许外界通过构造器创建对象；(2)通过公开的静态方法向外界返回类的唯一实例。这里有一个问题可以思考：Spring 的 IoC 容器可以为普通的类创建单例，它是怎么做到的呢？</p><blockquote><p>92、什么是 UML？</p></blockquote><p>答：UML 是统一建模语言（Unified Modeling Language）的缩写，它发表于 1997 年，综合了当时已经存在的面向对象的建模语言、方法和过程，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持。使用UML可以帮助沟通与交流，辅助应用设计和文档的生成，还能够阐释系统的结构和行为。</p><blockquote><p>93、UML 中有哪些常用的图？</p></blockquote><p>答：UML 定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（use case diagram）、类图（class diagram）、时序图（sequence diagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、构件图（component diagram）、部署图（deployment diagram）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图（描述执行特定任务时对象之间的交互关系以及执行顺序，通过该图可以了解对象能接收的消息也就是说对象能够向外界提供的服务）。</p><ul><li>用例图：</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/93_1.png" alt></p><ul><li>类图：</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/93_2.png" alt></p><ul><li>时序图：</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/93_3.png" alt></p><blockquote><p>94、用 Java 写一个冒泡排序。</p></blockquote><p>答：冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到，下面提供一个参考代码：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可以相互替换)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sorter</span> </span>&#123;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 排序</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> list 待排序的数组</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] list)</span></span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 排序</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> list 待排序的数组</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> comp 比较两个对象的比较器</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] list, Comparator&lt;T&gt; comp)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSorter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sorter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] list)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> swapped = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, len = list.length; i &lt; len &amp;&amp; swapped; ++i) &#123;<br>            swapped = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len - i; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (list[j].compareTo(list[j + <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>) &#123;<br>                    T temp = list[j];<br>                    list[j] = list[j + <span class="hljs-number">1</span>];<br>                    list[j + <span class="hljs-number">1</span>] = temp;<br>                    swapped = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] list, Comparator&lt;T&gt; comp)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> swapped = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, len = list.length; i &lt; len &amp;&amp; swapped; ++i) &#123;<br>            swapped = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len - i; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (comp.compare(list[j], list[j + <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>) &#123;<br>                    T temp = list[j];<br>                    list[j] = list[j + <span class="hljs-number">1</span>];<br>                    list[j + <span class="hljs-number">1</span>] = temp;<br>                    swapped = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>95、用 Java 写一个折半查找。</p></blockquote><p>答：折半查找，也称二分查找、二分搜索，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组已经为空，则表示找不到指定的元素。这种搜索算法每一次比较都使搜索范围缩小一半，其时间复杂度是 O(logN)。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUtil</span> </span>&#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(T[] x, T key)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> binarySearch(x, <span class="hljs-number">0</span>, x.length- <span class="hljs-number">1</span>, key);<br>   &#125;<br><br>   <span class="hljs-comment">// 使用循环实现的二分查找</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(T[] x, T key, Comparator&lt;T&gt; comp)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">int</span> high = x.length - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>          <span class="hljs-keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">int</span> cmp = comp.compare(x[mid], key);<br>          <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>) &#123;<br>            low= mid + <span class="hljs-number">1</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>) &#123;<br>            high= mid - <span class="hljs-number">1</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// 使用递归实现的二分查找</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>&lt;T extends Comparable&lt;T&gt;&gt; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(T[] x, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high, T key)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span>(low &lt;= high) &#123;<br>        <span class="hljs-keyword">int</span> mid = low + ((high -low) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(key.compareTo(x[mid])== <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key.compareTo(x[mid])&lt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">return</span> binarySearch(x,low, mid - <span class="hljs-number">1</span>, key);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> binarySearch(x,mid + <span class="hljs-number">1</span>, high, key);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>上面的代码中给出了折半查找的两个版本，一个用递归实现，一个用循环实现。需要注意的是计算中间位置时不应该使用(high+ low) / 2的方式，因为加法运算可能导致整数越界，这里应该使用以下三种方式之一：low + (high - low) / 2或low + (high – low) &gt;&gt; 1或(low + high) &gt;&gt;&gt; 1（&gt;&gt;&gt;是逻辑右移，是不带符号位的右移）</p><h1 id="Java-Web（96-125）"><a href="#Java-Web（96-125）" class="headerlink" title="Java Web（96~125）"></a>Java Web（96~125）</h1><blockquote><p>96、阐述 Servlet 和 CGI 的区别?</p></blockquote><p>答：Servlet 与 CGI 的区别在于 Servlet 处于服务器进程中，它通过多线程方式运行其 <code>service()</code> 方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而 CGI 对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于 Servlet。</p><p><strong>补充：</strong>Sun Microsystems 公司在 1996 年发布 Servlet 技术就是为了和 CGI 进行竞争，Servlet 是一个特殊的 Java 程序，一个基于 Java 的 Web 应用通常包含一个或多个 Servlet 类。Servlet 不能够自行创建并执行，它是在 Servlet 容器中运行的，容器将用户的请求传递给 Servlet 程序，并将 Servlet 的响应回传给用户。通常一个 Servlet 会关联一个或多个 JSP 页面。以前 CGI 经常因为性能开销上的问题被诟病，然而 Fast CGI 早就已经解决了 CGI 效率上的问题，所以面试的时候大可不必信口开河的诟病 CGI，事实上有很多你熟悉的网站都使用了 CGI 技术。</p><blockquote><p>97、Servlet 接口中有哪些方法？</p></blockquote><p>答：Servlet 接口定义了 5 个方法，其中前三个方法与 Servlet 生命周期相关：</p><ul><li><code>void init(ServletConfig config) throws ServletException</code></li><li><code>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</code></li><li><code>void destroy()</code></li><li><code>java.lang.String getServletInfo()</code></li><li><code>ServletConfig getServletConfig()</code></li></ul><p>Web 容器加载 Servlet 并将其实例化后，Servlet 生命周期开始，容器运行其 <code>init()</code> 方法进行 Servlet 的初始化；请求到达时调用 Servlet 的 <code>service()</code> 方法，<code>service()</code> 方法会根据需要调用与请求对应的 <code>doGet</code> 或 <code>doPost</code> 等方法；当服务器关闭或项目被卸载时服务器会将 Servlet 实例销毁，此时会调用 Servlet 的 <code>destroy()</code> 方法。</p><blockquote><p>98、转发（forward）和重定向（redirect）的区别？</p></blockquote><p>答：<code>forward</code> 是容器中控制权的转向，是服务器请求资源，服务器直接访问目标地址的 URL，把那个 URL 的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。<code>redirect</code> 就是服务器端根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址，因此从浏览器的地址栏中可以看到跳转后的链接地址，很明显 <code>redirect</code> 无法访问到服务器保护起来资源，但是可以从一个网站 <code>redirect</code> 到其他网站。<code>forward</code> 更加高效，所以在满足需要时尽量使用 <code>forward</code>（通过调用 <code>RequestDispatcher</code> 对象的 <code>forward()</code> 方法，该对象可以通过 <code>ServletRequest</code> 对象的 <code>getRequestDispatcher()</code> 方法获得），并且这样也有助于隐藏实际的链接；在有些情况下，比如需要访问一个其它服务器上的资源，则必须使用重定向（通过 <code>HttpServletResponse</code> 对象调用其 <code>sendRedirect()</code> 方法实现）。</p><blockquote><p>99、JSP 有哪些内置对象？作用分别是什么？</p></blockquote><p>答：JSP 有 9 个内置对象：</p><ul><li><code>request</code>：封装客户端的请求，其中包含来自 GET 或 POST 请求的参数；</li><li><code>response</code>：封装服务器对客户端的响应；</li><li><code>pageContext</code>：通过该对象可以获取其他对象；</li><li><code>session</code>：封装用户会话的对象；</li><li><code>application</code>：封装服务器运行环境的对象；</li><li><code>out</code>：输出服务器响应的输出流对象；</li><li><code>config</code>：Web 应用的配置对象；</li><li><code>page</code>：JSP 页面本身（相当于 Java 程序中的 <code>this</code>）；</li><li><code>exception</code>：封装页面抛出异常的对象。</li></ul><p><strong>补充：</strong>如果用 Servlet 来生成网页中的动态内容无疑是非常繁琐的工作，另一方面，所有的文本和 HTML 标签都是硬编码，即使做出微小的修改，都需要进行重新编译。JSP 解决了 Servlet 的这些问题，它是 Servlet 很好的补充，可以专门用作为用户呈现视图（View），而 Servlet 作为控制器（Controller）专门负责处理用户请求并转发或重定向到某个页面。基于 Java 的 Web 开发很多都同时使用了 Servlet 和 JSP。JSP 页面其实是一个 Servlet，能够运行 Servlet 的服务器（Servlet 容器）通常也是 JSP 容器，可以提供 JSP 页面的运行环境，Tomcat 就是一个 Servlet/JSP 容器。第一次请求一个 JSP 页面时，Servlet/JSP 容器首先将 JSP 页面转换成一个 JSP 页面的实现类，这是一个实现了 JspPage 接口或其子接口 HttpJspPage 的 Java 类。JspPage 接口是 Servlet 的子接口，因此每个 JSP 页面都是一个 Servlet。转换成功后，容器会编译 Servlet 类，之后容器加载和实例化 Java 字节码，并执行它通常对 Servlet 所做的生命周期操作。对同一个 JSP 页面的后续请求，容器会查看这个 JSP 页面是否被修改过，如果修改过就会重新转换并重新编译并执行。如果没有则执行内存中已经存在的 Servlet 实例。我们可以看一段 JSP 代码对应的 Java 程序就知道一切了，而且 9 个内置对象的神秘面纱也会被揭开。</p><p>JSP 页面：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%<br>String path = request.getContextPath();<br>String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + path + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;首页&lt;/title&gt;<br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        * &#123; font-family: <span class="hljs-string">&quot;Arial&quot;</span>; &#125;<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>    &lt;h1&gt;Hello, World!&lt;/h1&gt;<br>    &lt;hr/&gt;<br>    &lt;h2&gt;Current time is: &lt;%= new java.util.Date().toString() %&gt;&lt;/h2&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></p><p>对应的 Java 代码：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Generated by the Jasper component of Apache Tomcat</span><br><span class="hljs-comment"> * Version: Apache Tomcat/7.0.52</span><br><span class="hljs-comment"> * Generated at: 2014-10-13 13:28:38 UTC</span><br><span class="hljs-comment"> * Note: The last modified time of this file was set to</span><br><span class="hljs-comment"> *       the last modified time of the source file after</span><br><span class="hljs-comment"> *       generation to assist with modification tracking.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.apache.jsp;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">HttpJspBase</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">JspSourceDependent</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> javax.servlet.jsp.JspFactory _jspxFactory = javax.servlet.jsp.JspFactory<br>            .getDefaultFactory();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.Map&lt;java.lang.String, java.lang.Long&gt; _jspx_dependants;<br><br>    <span class="hljs-keyword">private</span> javax.el.ExpressionFactory _el_expressionfactory;<br>    <span class="hljs-keyword">private</span> org.apache.tomcat.InstanceManager _jsp_instancemanager;<br><br>    <span class="hljs-keyword">public</span> java.util.Map&lt;java.lang.String, java.lang.Long&gt; getDependants() &#123;<br>        <span class="hljs-keyword">return</span> _jspx_dependants;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>        _el_expressionfactory = _jspxFactory.getJspApplicationContext(<br>                getServletConfig().getServletContext()).getExpressionFactory();<br>        _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory<br>                .getInstanceManager(getServletConfig());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;<br>        <span class="hljs-comment">// 内置对象就是在这里定义的</span><br>        <span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;<br>        javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">final</span> javax.servlet.ServletContext application;<br>        <span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;<br>        javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>;<br>        javax.servlet.jsp.JspWriter _jspx_out = <span class="hljs-keyword">null</span>;<br>        javax.servlet.jsp.PageContext _jspx_page_context = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>            pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                    <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>            _jspx_page_context = pageContext;<br>            application = pageContext.getServletContext();<br>            config = pageContext.getServletConfig();<br>            session = pageContext.getSession();<br>            out = pageContext.getOut();<br>            _jspx_out = out;<br><br>            out.write(<span class="hljs-string">&#x27;\r&#x27;</span>);<br>            out.write(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>            String path = request.getContextPath();<br>            String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span><br>                    + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort()<br>                    + path + <span class="hljs-string">&quot;/&quot;</span>;<br>            <br>            <span class="hljs-comment">// 以下代码通过输出流将HTML标签输出到浏览器中</span><br>            out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;  &lt;head&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;base href=\&quot;&quot;</span>);<br>            out.print(basePath);<br>            out.write(<span class="hljs-string">&quot;\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;title&gt;首页&lt;/title&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;style type=\&quot;text/css\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    \t* &#123; font-family: \&quot;Arial\&quot;; &#125;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;/style&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;  &lt;/head&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;  \r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;  &lt;body&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;h1&gt;Hello, World!&lt;/h1&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;hr/&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;h2&gt;Current time is: &quot;</span>);<br>            out.print(<span class="hljs-keyword">new</span> java.util.Date().toString());<br>            out.write(<span class="hljs-string">&quot;&lt;/h2&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;  &lt;/body&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (java.lang.Throwable t) &#123;<br>            <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> javax.servlet.jsp.SkipPageException)) &#123;<br>                out = _jspx_out;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        out.clearBuffer();<br>                    &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>                    &#125;<br>                <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-keyword">null</span>)<br>                    _jspx_page_context.handlePageException(t);<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServletException(t);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            _jspxFactory.releasePageContext(_jspx_page_context);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>100、get 和 post 请求的区别？</p></blockquote><p>答：</p><ol><li>get 请求用来从服务器上获得资源，而 post 是用来向服务器提交数据；</li><li>get 将表单中数据按照 <code>name=value</code> 的形式，添加到 <code>action</code> 所指向的 URL 后面，并且两者使用 <code>?</code> 连接，而各个变量之间使用 <code>&amp;</code> 连接；post 是将表单中的数据放在 HTTP 协议的请求头或消息体中，传递到 <code>action</code> 所指向 URL；</li><li>get 传输的数据要受到 URL 长度限制（1024 字节）；而 post 可以传输大量的数据，上传文件通常要使用 post 方式；</li><li>使用 get 时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用 get；对于敏感数据还是应用使用 post；</li><li>get 使用 MIME 类型 <code>application/x-www-form-urlencoded</code> 的 URL 编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是 <code>%20</code>。</li></ol><blockquote><p>101、常用的 Web 服务器有哪些？</p></blockquote><p>答：Unix 和 Linux 平台下使用最广泛的免费 HTTP 服务器是 Apache 服务器，而 Windows 平台的服务器通常使用 IIS 作为 Web 服务器。选择 Web 服务器应考虑的因素有：性能、安全性、日志和统计、虚拟主机、代理服务器、缓冲服务和集成应用程序等。下面是对常见服务器的简介：</p><ul><li><p>IIS：Microsoft 的 Web 服务器产品，全称是 Internet Information Services。IIS 是允许在公共 Intranet 或 Internet 上发布信息的 Web 服务器。IIS 是目前最流行的 Web 服务器产品之一，很多著名的网站都是建立在 IIS 的平台上。IIS 提供了一个图形界面的管理工具，称为 Internet 服务管理器，可用于监视配置和控制 Internet 服务。IIS 是一种 Web 服务组件，其中包括 Web 服务器、FTP 服务器、NNTP 服务器和 SMTP 服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。它提供 ISAPI（Intranet Server API）作为扩展 Web 服务器功能的编程接口；同时，它还提供一个 Internet 数据库连接器，可以实现对数据库的查询和更新。</p></li><li><p>Kangle：Kangle Web 服务器是一款跨平台、功能强大、安全稳定、易操作的高性能 Web 服务器和反向代理服务器软件。此外，Kangle 也是一款专为做虚拟主机研发的 Web 服务器。实现虚拟主机独立进程、独立身份运行。用户之间安全隔离，一个用户出问题不影响其他用户。支持 PHP、ASP、ASP.NET、Java、Ruby 等多种动态开发语言。</p></li><li><p>WebSphere：WebSphere Application Server 是功能完善、开放的 Web 应用程序服务器，是 IBM 电子商务计划的核心部分，它是基于 Java 的应用环境，用于建立、部署和管理 Internet 和 Intranet Web 应用程序，适应各种 Web 应用程序服务器的需要。</p></li><li><p>WebLogic：WebLogic Server 是一款多功能、基于标准的 Web 应用服务器，为企业构建企业应用提供了坚实的基础。针对各种应用开发、关键性任务的部署，各种系统和数据库的集成、跨 Internet 协作等 Weblogic 都提供了相应的支持。由于它具有全面的功能、对开放标准的遵从性、多层架构、支持基于组件的开发等优势，很多公司的企业级应用都选择它来作为开发和部署的环境。WebLogic Server 在使应用服务器成为企业应用架构的基础方面一直处于领先地位，为构建集成化的企业级应用提供了稳固的基础。</p></li><li><p>Apache：目前 Apache 仍然是世界上用得最多的 Web 服务器，其市场占有率很长时间都保持在 60% 以上（目前的市场份额约 40% 左右）。世界上很多著名的网站都是 Apache 的产物，它的成功之处主要在于它的源代码开放、有一支强大的开发团队、支持跨平台的应用（可以运行在几乎所有的 Unix、Windows、Linux 系统平台上）以及它的可移植性等方面。</p></li><li><p>Tomcat：Tomcat 是一个开放源代码、运行 Servlet 和 JSP 的容器。Tomcat 实现了 Servlet 和 JSP 规范。此外，Tomcat 还实现了 Apache-Jakarta 规范而且比绝大多数商业应用软件服务器要好，因此目前也有不少的 Web 服务器都选择了 Tomcat。</p></li><li><p>Nginx：读作&quot;engine x&quot;，是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler 站点开发的，第一个公开版本 0.1.0 发布于 2004 年 10 月 4 日。其将源代码以类 BSD 许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。在 2014 年下半年，Nginx 的市场份额达到了 14%。</p></li></ul><blockquote><p>102、JSP 和 Servlet 是什么关系？</p></blockquote><p>答：其实这个问题在上面已经阐述过了，Servlet 是一个特殊的 Java 程序，它运行于服务器的 JVM 中，能够依靠服务器的支持向浏览器提供显示内容。JSP 本质上是 Servlet 的一种简易形式，JSP 会被服务器处理成一个类似于 Servlet 的 Java 程序，可以简化页面内容的生成。Servlet 和 JSP 最主要的不同点在于，Servlet 的应用逻辑是在 Java 文件中，并且完全从表示层中的 HTML 分离开来。而 JSP 的情况是 Java 和 HTML 可以组合成一个扩展名为 <code>.jsp</code> 的文件。有人说，Servlet 就是在 Java 中写 HTML，而 JSP 就是在 HTML 中写 Java 代码，当然这个说法是很片面且不够准确的。JSP 侧重于视图，Servlet 更侧重于控制逻辑，在 MVC 架构模式中，JSP 适合充当视图（view）而 Servlet 适合充当控制器（controller）。</p><blockquote><p>103、讲解 JSP 中的四种作用域。</p></blockquote><p>答：JSP 中的四种作用域包括 <code>page</code>、<code>request</code>、<code>session</code> 和 <code>application</code>，具体来说：</p><ul><li><code>page</code> 代表与一个页面相关的对象和属性。</li><li><code>request</code> 代表与 Web 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件；需要在页面显示的临时数据可以置于此作用域。</li><li><code>session</code> 代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的 session 中。</li><li><code>application</code> 代表与整个 Web 应用程序相关的对象和属性，它实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域。</li></ul><blockquote><p>104、如何实现 JSP 或 Servlet 的单线程模式？</p></blockquote><p>答：</p><p>对于 JSP 页面，可以通过 <code>page</code> 指令进行设置。</p><p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> isThreadSafe=”<span class="hljs-keyword">false</span>”%&gt;<br></code></pre></td></tr></table></figure></p><p>对于 Servlet，可以让自定义的 Servlet 实现 <code>SingleThreadModel</code> 标识接口。</p><p><strong>说明：</strong>如果将 JSP 或 Servlet 设置成单线程工作模式，会导致每个请求创建一个 Servlet 实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p><blockquote><p>105、实现会话跟踪的技术有哪些？</p></blockquote><p>答：由于 HTTP 协议本身是无状态的，服务器为了区分不同的用户，就需要对用户会话进行跟踪，简单的说就是为用户进行登记，为用户分配唯一的 ID，下一次用户在请求中包含此 ID，服务器据此判断到底是哪一个用户。</p><ol><li>URL 重写：在 URL 中添加用户会话的信息作为请求的参数，或者将唯一的会话 ID 添加到 URL 结尾以标识一个会话。</li><li>设置表单隐藏域：将和会话跟踪相关的字段添加到隐式表单域中，这些信息不会在浏览器中显示但是提交表单时会提交给服务器。这两种方式很难处理跨越多个页面的信息传递，因为如果每次都要修改 URL 或在页面中添加隐式表单域来存储用户会话相关信息，事情将变得非常麻烦。</li><li>cookie：cookie 有两种，一种是基于窗口的，浏览器窗口关闭后，cookie 就没有了；另一种是将信息存储在一个临时文件中，并设置存在的时间。当用户通过浏览器和服务器建立一次会话后，会话 ID 就会随响应信息返回存储在基于窗口的 cookie 中，那就意味着只要浏览器没有关闭，会话没有超时，下一次请求时这个会话 ID 又会提交给服务器让服务器识别用户身份。会话中可以为用户保存信息。会话对象是在服务器内存中的，而基于窗口的 cookie 是在客户端内存中的。如果浏览器禁用了 cookie，那么就需要通过下面两种方式进行会话跟踪。当然，在使用 cookie 时要注意几点：首先不要在 cookie 中存放敏感信息；其次 cookie 存储的数据量有限（4k），不能将过多的内容存储 cookie 中；再者浏览器通常只允许一个站点最多存放 20 个 cookie。当然，和用户会话相关的其他信息（除了会话 ID）也可以存在 cookie 方便进行会话跟踪。</li><li>HttpSession：在所有会话跟踪技术中，HttpSession 对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建 HttpSession，每个用户可以访问他自己的 HttpSession。可以通过 <code>HttpServletRequest</code> 对象的 <code>getSession</code> 方法获得 HttpSession，通过 HttpSession 的 <code>setAttribute</code> 方法可以将一个值放在 HttpSession 中，通过调用 HttpSession 对象的 <code>getAttribute</code> 方法，同时传入属性名就可以获取保存在 HttpSession 中的对象。与上面三种方式不同的是，HttpSession 放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的 Servlet 容器可以在内存将满时将 HttpSession 中的对象移到其他存储设备中，但是这样势必影响性能。添加到 HttpSession 中的值可以是任意 Java 对象，这个对象最好实现了 <code>Serializable</code> 接口，这样 Servlet 容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</li></ol><p><strong>补充：</strong>HTML5 中可以使用 Web Storage 技术通过 JavaScript 来保存数据，例如可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> 来保存用户会话的信息，也能够实现会话跟踪。</p><blockquote><p>106、过滤器有哪些作用和用法？</p></blockquote><p>答：Java Web 开发中的过滤器（filter）是从 Servlet 2.3 规范开始增加的功能，并在 Servlet 2.4 规范中得到增强。对 Web 应用来说，过滤器是一个驻留在服务器端的 Web 组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。当 Web 容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。</p><p>常见的过滤器用途主要包括：对用户请求进行统一认证、对用户的访问请求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件、对 XML 的输出应用 XSLT 等。</p><p>和过滤器相关的接口主要有：<code>Filter</code>、<code>FilterConfig</code> 和 <code>FilterChain</code>。</p><p>编码过滤器的例子：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebInitParam;<br><br><span class="hljs-meta">@WebFilter(urlPatterns = &#123; &quot;*&quot; &#125;, initParams = &#123;@WebInitParam(name=&quot;encoding&quot;, value=&quot;utf-8&quot;)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String defaultEncoding = <span class="hljs-string">&quot;utf-8&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp,</span></span><br><span class="hljs-function"><span class="hljs-params">            FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        req.setCharacterEncoding(defaultEncoding);<br>        resp.setCharacterEncoding(defaultEncoding);<br>        chain.doFilter(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        String encoding = config.getInitParameter(<span class="hljs-string">&quot;encoding&quot;</span>);<br>        <span class="hljs-keyword">if</span> (encoding != <span class="hljs-keyword">null</span>) &#123;<br>            defaultEncoding = encoding;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>下载计数过滤器的例子：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-meta">@WebFilter(urlPatterns = &#123;&quot;/*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadCounterFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ExecutorService executorService = Executors.newSingleThreadExecutor();<br>    <span class="hljs-keyword">private</span> Properties downloadLog;<br>    <span class="hljs-keyword">private</span> File logFile;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        executorService.shutdown();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp,</span></span><br><span class="hljs-function"><span class="hljs-params">            FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest) req;<br>        <span class="hljs-keyword">final</span> String uri = request.getRequestURI();<br>        executorService.execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                String value = downloadLog.getProperty(uri);<br>                <span class="hljs-keyword">if</span>(value == <span class="hljs-keyword">null</span>) &#123;<br>                    downloadLog.setProperty(uri, <span class="hljs-string">&quot;1&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">int</span> count = Integer.parseInt(value);<br>                    downloadLog.setProperty(uri, String.valueOf(++count));<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    downloadLog.store(<span class="hljs-keyword">new</span> FileWriter(logFile), <span class="hljs-string">&quot;&quot;</span>);<br>                &#125; <br>                <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>        chain.doFilter(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        String appPath = config.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        logFile = <span class="hljs-keyword">new</span> File(appPath, <span class="hljs-string">&quot;downloadLog.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!logFile.exists()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                logFile.createNewFile();<br>            &#125; <br>            <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        downloadLog = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-keyword">try</span> &#123;<br>            downloadLog.load(<span class="hljs-keyword">new</span> FileReader(logFile));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>这里使用了 Servlet 3 规范中的注解来部署过滤器，当然也可以在 web.xml 中使用 <code>&lt;filter&gt;</code> 和 <code>&lt;filter-mapping&gt;</code> 标签部署过滤器，如 108 题中所示。</p><blockquote><p>107、监听器有哪些作用和用法？</p></blockquote><p>答：Java Web 开发中的监听器（listener）就是 <code>application</code>、<code>session</code>、<code>request</code> 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件，如下所示：</p><ol><li><code>ServletContextListener</code>：对 Servlet 上下文的创建和销毁进行监听。</li><li><code>ServletContextAttributeListener</code>：监听 Servlet 上下文属性的添加、删除和替换。</li><li><code>HttpSessionListener</code>：对 Session 的创建和销毁进行监听。</li><li><code>HttpSessionAttributeListener</code>：对 Session 对象中属性的添加、删除和替换进行监听。</li><li><code>ServletRequestListener</code>：对请求对象的初始化和销毁进行监听。</li><li><code>ServletRequestAttributeListener</code>：对请求对象属性的添加、删除和替换进行监听。</li></ol><p><strong>补充：</strong>session 的销毁有两种情况：(1)session 超时（可以在 web.xml 中通过 <code>&lt;session-config&gt;/&lt;session-timeout&gt;</code> 标签配置超时时间）；(2)通过调用 session 对象的 <code>invalidate()</code> 方法使 session 失效。</p><p>下面是一个统计网站最多在线人数监听器的例子。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletContextEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContextListener;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 上下文监听器，在服务器启动时初始化onLineCount和maxOnLineCount两个变量</span><br><span class="hljs-comment"> 并将其置于服务器上下文（ServletContext）中，其初始值都是0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InitListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent evt)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent evt)</span> </span>&#123;<br>        evt.getServletContext().setAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>, <span class="hljs-number">0</span>);<br>        evt.getServletContext().setAttribute(<span class="hljs-string">&quot;maxOnLineCount&quot;</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 会话监听器，在用户会话创建和销毁的时候根据情况</span><br><span class="hljs-comment"> 修改onLineCount和maxOnLineCount的值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent event)</span> </span>&#123;<br>        ServletContext ctx = event.getSession().getServletContext();<br>        <span class="hljs-keyword">int</span> count = Integer.parseInt(ctx.getAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>).toString());<br>        count++;<br>        ctx.setAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>, count);<br>        <span class="hljs-keyword">int</span> maxOnLineCount = Integer.parseInt(ctx.getAttribute(<span class="hljs-string">&quot;maxOnLineCount&quot;</span>).toString());<br>        <span class="hljs-keyword">if</span> (count &gt; maxOnLineCount) &#123;<br>            ctx.setAttribute(<span class="hljs-string">&quot;maxOnLineCount&quot;</span>, count);<br>            DateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            ctx.setAttribute(<span class="hljs-string">&quot;date&quot;</span>, df.format(<span class="hljs-keyword">new</span> Date()));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent event)</span> </span>&#123;<br>        ServletContext app = event.getSession().getServletContext();<br>        <span class="hljs-keyword">int</span> count = Integer.parseInt(app.getAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>).toString());<br>        count--;<br>        app.setAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>, count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>这里使用了 Servlet 3 规范中的 @WebListener 注解配置监听器，当然你可以在 web.xml 文件中用 <code>&lt;listener&gt;</code> 标签配置监听器，如 108 题中所示。</p><blockquote><p>108、web.xml 文件中可以配置哪些内容？</p></blockquote><p>答：web.xml 用于配置 Web 应用的相关信息，如：监听器（listener）、过滤器（filter）、Servlet、相关参数、会话超时时间、安全验证方式、错误页面等，下面是一些开发中常见的配置：</p><ol><li>配置Spring上下文加载监听器加载Spring配置文件并创建IoC容器：</li></ol><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>     org.springframework.web.context.ContextLoaderListener<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol><li>配置Spring的OpenSessionInView过滤器来解决延迟加载和Hibernate会话关闭的矛盾：</li></ol><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>openSessionInView<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>       org.springframework.orm.hibernate3.support.OpenSessionInViewFilter<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>openSessionInView<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol><li>配置会话超时时间为10分钟：</li></ol><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol><li>配置404和Exception的错误页面：</li></ol><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/error.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exception-type</span>&gt;</span>java.lang.Exception<span class="hljs-tag">&lt;/<span class="hljs-name">exception-type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/error.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol><li>配置安全认证方式：</li></ol><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security-constraint</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">web-resource-collection</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">web-resource-name</span>&gt;</span>ProtectedArea<span class="hljs-tag">&lt;/<span class="hljs-name">web-resource-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">http-method</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">http-method</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">http-method</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">http-method</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">web-resource-collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">auth-constraint</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">role-name</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">role-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">auth-constraint</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security-constraint</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">login-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">auth-method</span>&gt;</span>BASIC<span class="hljs-tag">&lt;/<span class="hljs-name">auth-method</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">login-config</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">security-role</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role-name</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">role-name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security-role</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>对 Servlet（小服务）、Listener（监听器）和 Filter（过滤器）等 Web 组件的配置，Servlet 3 规范提供了基于注解的配置方式，可以分别使用 <code>@WebServlet</code>、<code>@WebListener</code>、<code>@WebFilter</code> 注解进行配置。</p><p><strong>补充：</strong>如果 Web 提供了有价值的商业信息或者是敏感数据，那么站点的安全性就是必须考虑的问题。安全认证是实现安全性的重要手段，认证就是要解决“Are you who you say you are?”的问题。认证的方式非常多，简单说来可以分为三类：</p><ul><li>A. What you know? — 口令</li><li>B. What you have? — 数字证书（U盾、密保卡）</li><li>C. Who you are? — 指纹识别、虹膜识别</li></ul><p>在 Tomcat 中可以通过建立安全套接字层（Secure Socket Layer, SSL）以及通过基本验证或表单验证来实现对安全性的支持。</p><blockquote><p>109、你的项目中使用过哪些 JSTL 标签（JSP 标准标签库）？</p></blockquote><p>答：项目中主要使用了 JSTL 的核心标签库，包括 <code>&lt;c:if&gt;</code>、<code>&lt;c:choose&gt;</code>、<code>&lt;c: when&gt;</code>、<code>&lt;c: otherwise&gt;</code>、<code>&lt;c:forEach&gt;</code> 等，主要用于构造循环和分支结构以控制显示逻辑。</p><p><strong>说明：</strong>虽然 JSTL 标签库提供了 <code>core</code>、<code>sql</code>、<code>fmt</code>、<code>xml</code> 等标签库，但是实际开发中建议只使用核心标签库（<code>core</code>），而且最好只使用分支和循环标签并辅以表达式语言（EL），这样才能真正做到数据显示和业务逻辑的分离，这才是最佳实践。</p><blockquote><p>110、使用标签库有什么好处？如何自定义 JSP 标签？</p></blockquote><p>答：使用标签库的好处包括以下几个方面：</p><ul><li>分离 JSP 页面的内容和逻辑，简化了 Web 开发；</li><li>开发者可以创建自定义标签来封装业务逻辑和显示逻辑；</li><li>标签具有很好的可移植性、可维护性和可重用性；</li><li>避免了对 Scriptlet（小脚本）的使用（很多公司的项目开发都不允许在 JSP 中书写小脚本）。</li></ul><p>自定义 JSP 标签包括以下几个步骤：</p><ol><li>编写一个 Java 类实现实现 <code>Tag</code>/<code>BodyTag</code>/<code>IterationTag</code> 接口（开发中通常不直接实现这些接口而是继承 <code>TagSupport</code>/<code>BodyTagSupport</code>/<code>SimpleTagSupport</code> 类，这是对缺省适配模式的应用），重写 <code>doStartTag()</code>、<code>doEndTag()</code> 等方法，定义标签要完成的功能；</li><li>编写扩展名为 <code>tld</code> 的标签描述文件对自定义标签进行部署，tld 文件通常放在 WEB-INF 文件夹下或其子目录中；</li><li>在 JSP 页面中使用 <code>taglib</code> 指令引用该标签库。</li></ol><p>下面是一个自定义标签库的例子。</p><ol><li><p>标签类源代码 TimeTag.java：</p><p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.tags;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> javax.servlet.jsp.JspException;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.JspWriter;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.tagext.TagSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeTag</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TagSupport</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String format = <span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>;<br>    <span class="hljs-keyword">private</span> String foreColor = <span class="hljs-string">&quot;black&quot;</span>;<br>    <span class="hljs-keyword">private</span> String backColor = <span class="hljs-string">&quot;white&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doStartTag</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JspException </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(format);<br>        JspWriter writer = pageContext.getOut();<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        sb.append(String.format(<span class="hljs-string">&quot;&lt;span style=&#x27;color:%s;background-color:%s&#x27;&gt;%s&lt;/span&gt;&quot;</span>,<br>            foreColor, backColor, sdf.format(<span class="hljs-keyword">new</span> Date())));<br>        <span class="hljs-keyword">try</span> &#123;<br>          writer.print(sb.toString());<br>        &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>          e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> SKIP_BODY;<br>      &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFormat</span><span class="hljs-params">(String format)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.format = format;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setForeColor</span><span class="hljs-params">(String foreColor)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.foreColor = foreColor;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBackColor</span><span class="hljs-params">(String backColor)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.backColor = backColor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>编写标签库描述文件 my.tld：</p><p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">taglib</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee </span></span><br><span class="hljs-tag"><span class="hljs-string">    http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>定义标签库<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tlib-version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">tlib-version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">short-name</span>&gt;</span>MyTag<span class="hljs-tag">&lt;/<span class="hljs-name">short-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>time<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tag-class</span>&gt;</span>com.jackfrued.tags.TimeTag<span class="hljs-tag">&lt;/<span class="hljs-name">tag-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">body-content</span>&gt;</span>empty<span class="hljs-tag">&lt;/<span class="hljs-name">body-content</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>format<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">required</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">required</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">attribute</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>foreColor<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">attribute</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>backColor<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">attribute</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tag</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">taglib</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li><li><p>在 JSP 页面中使用自定义标签：</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;my&quot;</span> uri=<span class="hljs-string">&quot;/WEB-INF/tld/my.tld&quot;</span> %&gt;<br>&lt;%<br>String path = request.getContextPath();<br>String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + path + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;首页&lt;/title&gt;<br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        * &#123; font-family: <span class="hljs-string">&quot;Arial&quot;</span>; font-size:72px; &#125;<br>    &lt;/style&gt;<br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>    &lt;my:time format=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span> backColor=<span class="hljs-string">&quot;blue&quot;</span> foreColor=<span class="hljs-string">&quot;yellow&quot;</span>/&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></p></li></ol><p><strong>注意：</strong>如果要将自定义的标签库发布成 JAR 文件，需要将标签库描述文件（tld 文件）放在 JAR 文件的 META-INF 目录下，可以用 JDK 中的 jar 工具完成 JAR 文件的生成，如果不清楚如何操作，可以请教<a href="https://www.google.com/">谷老师</a>和<a href="https://www.baidu.com/">百老师</a>。</p><blockquote><p>111、说一下表达式语言（EL）的隐式对象及其作用。</p></blockquote><p>答：EL 的隐式对象包括：pageContext、initParam（访问上下文参数）、param（访问请求参数）、paramValues、header（访问请求头）、headerValues、cookie（访问 cookie）、applicationScope（访问 application 作用域）、sessionScope（访问 session 作用域）、requestScope（访问 request 作用域）、pageScope（访问 page 作用域）。</p><p>用法如下所示：</p><p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;pageContext.request.method&#125;<br>$&#123;pageContext[<span class="hljs-string">&quot;request&quot;</span>][<span class="hljs-string">&quot;method&quot;</span>]&#125;<br>$&#123;pageContext.request[<span class="hljs-string">&quot;method&quot;</span>]&#125;<br>$&#123;pageContext[<span class="hljs-string">&quot;request&quot;</span>].method&#125;<br>$&#123;initParam.defaultEncoding&#125;<br>$&#123;header[<span class="hljs-string">&quot;accept-language&quot;</span>]&#125;<br>$&#123;headerValues[<span class="hljs-string">&quot;accept-language&quot;</span>][<span class="hljs-number">0</span>]&#125;<br>$&#123;cookie.jsessionid.value&#125;<br>$&#123;sessionScope.loginUser.username&#125;<br></code></pre></td></tr></table></figure></p><p><strong>补充：</strong>表达式语言的 <code>.</code> 和 <code>[]</code> 运算作用是一致的，唯一的差别在于如果访问的属性名不符合 Java 标识符命名规则，例如上面的 <code>accept-language</code> 就不是一个有效的 Java 标识符，那么这时候就只能用 <code>[]</code> 运算符而不能使用 <code>.</code> 运算符获取它的值。</p><blockquote><p>112、表达式语言（EL）支持哪些运算符？</p></blockquote><p>答：除了 <code>.</code> 和 <code>[]</code> 运算符，EL 还提供了：</p><ul><li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 或 <code>div</code>、<code>%</code> 或 <code>mod</code>；</li><li>关系运算符：<code>==</code> 或 <code>eq</code>、<code>!=</code> 或 <code>ne</code>、<code>&gt;</code> 或 <code>gt</code>、<code>&gt;=</code> 或 <code>ge</code>、<code>&lt;</code> 或 <code>lt</code>、<code>&lt;=</code> 或 <code>le</code>；</li><li>逻辑运算符：<code>&amp;&amp;</code> 或 <code>and</code>、<code>||</code> 或 <code>or</code>、<code>!</code> 或 <code>not</code>；</li><li>条件运算符：<code>$&#123;statement? A : B&#125;</code>（跟 Java 的条件运算符类似）；</li><li><code>empty</code> 运算符：检查一个值是否为 <code>null</code> 或者 <code>空</code>（数组长度为 0 或集合中没有元素也返回 <code>true</code>）。</li></ul><blockquote><p>113、Java Web 开发的 Model 1 和 Model 2 分别指的是什么？</p></blockquote><p>答：Model 1 是以页面为中心的 Java Web开发，使用 JSP+JavaBean 技术将页面显示逻辑和业务逻辑处理分开，JSP 实现页面显示，JavaBean 对象用来保存数据和实现业务逻辑。Model 2 是基于 MVC（模型-视图-控制器，Model-View-Controller）架构模式的开发模型，实现了模型和视图的彻底分离，利于团队开发和代码复用，如下图所示。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/113.png" alt></p><blockquote><p>114、Servlet 3 中的异步处理指的是什么？</p></blockquote><p>答：在 Servlet 3 中引入了一项新的技术可以让 Servlet 异步处理请求。有人可能会质疑，既然都有多线程了，还需要异步处理请求吗？答案是肯定需要的，因为如果一个任务处理时间相当长，那么 Servlet 或 Filter 会一直占用着请求处理线程直到任务结束，随着并发用户的增加，容器将会遭遇线程超出的风险，这这种情况下很多的请求将会被堆积起来而后续的请求可能会遭遇拒绝服务，直到有资源可以处理请求为止。异步特性可以帮助应用节省容器中的线程，特别适合执行时间长而且用户需要得到结果的任务，如果用户不需要得到结果则直接将一个 Runnable 对象交给 Executor 并立即返回即可。</p><p><strong>补充：</strong>多线程在 Java 诞生初期无疑是一个亮点，而 Servlet 单实例多线程的工作方式也曾为其赢得美名，然而技术的发展往往会颠覆我们很多的认知，就如同当年爱因斯坦的相对论颠覆了牛顿的经典力学一般。事实上，异步处理绝不是 Serlvet 3 首创，如果你了解 Node.js 的话，对 Servlet 3 的这个重要改进就不以为奇了。</p><p>下面是一个支持异步处理请求的 Servlet 的例子。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.servlet.AsyncContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@WebServlet(urlPatterns = &#123;&quot;/async&quot;&#125;, asyncSupported = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 开启Tomcat异步Servlet支持</span><br>        req.setAttribute(<span class="hljs-string">&quot;org.apache.catalina.ASYNC_SUPPORTED&quot;</span>, <span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">final</span> AsyncContext ctx = req.startAsync();  <span class="hljs-comment">// 启动异步处理的上下文</span><br>        <span class="hljs-comment">// ctx.setTimeout(30000);</span><br>        ctx.start(<span class="hljs-keyword">new</span> Runnable() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">// 在此处添加异步处理的代码</span><br><br>                ctx.complete();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>115、如何在基于 Java 的 Web 项目中实现文件上传和下载？</p></blockquote><p>答：在 Sevlet 3 以前，Servlet API 中没有支持上传功能的 API，因此要实现上传功能需要引入第三方工具从 POST 请求中获得上传的附件或者通过自行处理输入流来获得上传的文件，我们推荐使用 Apache 的 commons-fileupload。</p><p>从 Servlet 3 开始，文件上传变得无比简单，相信看看下面的例子一切都清楚了。</p><p>上传页面index.jsp：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>&lt;title&gt;Photo Upload&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Select your photo and upload&lt;/h1&gt;<br>&lt;hr/&gt;<br>&lt;div style=&quot;color:red;font-size:14px;&quot;&gt;$&#123;hint&#125;&lt;/div&gt;<br>&lt;form action=<span class="hljs-string">&quot;UploadServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    Photo file: &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;photo&quot;</span> /&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Upload&quot;</span> /&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></p><p>支持上传的 Servlet：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.servlet;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.MultipartConfig;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.Part;<br><br><span class="hljs-meta">@WebServlet(&quot;/UploadServlet&quot;)</span><br><span class="hljs-meta">@MultipartConfig</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">            HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 可以用request.getPart()方法获得名为photo的上传附件</span><br>        <span class="hljs-comment">// 也可以用request.getParts()获得所有上传附件（多文件上传）</span><br>        <span class="hljs-comment">// 然后通过循环分别处理每一个上传的文件</span><br>        Part part = request.getPart(<span class="hljs-string">&quot;photo&quot;</span>);<br>        <span class="hljs-keyword">if</span> (part != <span class="hljs-keyword">null</span> &amp;&amp; part.getSubmittedFileName().length() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 用ServletContext对象的getRealPath()方法获得上传文件夹的绝对路径</span><br>            String savePath = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>            <span class="hljs-comment">// Servlet 3.1规范中可以用Part对象的getSubmittedFileName()方法获得上传的文件名</span><br>            <span class="hljs-comment">// 更好的做法是为上传的文件进行重命名（避免同名文件的相互覆盖）</span><br>            part.write(savePath + <span class="hljs-string">&quot;/&quot;</span> + part.getSubmittedFileName());<br>            request.setAttribute(<span class="hljs-string">&quot;hint&quot;</span>, <span class="hljs-string">&quot;Upload Successfully!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            request.setAttribute(<span class="hljs-string">&quot;hint&quot;</span>, <span class="hljs-string">&quot;Upload failed!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 跳转回到上传页面</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;index.jsp&quot;</span>).forward(request, response);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>116、服务器收到用户提交的表单数据，到底是调用 Servlet 的 <code>doGet()</code> 还是 <code>doPost()</code> 方法？</p></blockquote><p>答：HTML 的 <code>&lt;form&gt;</code> 元素有一个 <code>method</code> 属性，用来指定提交表单的方式，其值可以是 <code>get</code> 或 <code>post</code>。我们自定义的 Servlet 一般情况下会重写 <code>doGet()</code> 或 <code>doPost()</code> 两个方法之一或全部，如果是 <code>GET</code> 请求就调用 <code>doGet()</code> 方法，如果是 <code>POST</code> 请求就调用 <code>doPost()</code> 方法，那为什么为什么这样呢？我们自定义的 Servlet 通常继承自 <code>HttpServlet</code>，<code>HttpServlet</code> 继承自 <code>GenericServlet</code> 并重写了其中的 <code>service()</code> 方法，这个方法是 Servlet 接口中定义的。<code>HttpServlet</code> 重写的 <code>service()</code> 方法会先获取用户请求的方法，然后根据请求方法调用 <code>doGet()</code>、<code>doPost()</code>、<code>doPut()</code>、<code>doDelete()</code> 等方法，如果在自定义 Servlet 中重写了这些方法，那么显然会调用重写过的（自定义的）方法，这显然是对模板方法模式的应用（如果不理解，请参考阎宏博士的《Java与模式》一书的第 37 章）。当然，自定义 Servlet 中也可以直接重写 <code>service()</code> 方法，那么不管是哪种方式的请求，都可以通过自己的代码进行处理，这对于不区分请求方法的场景比较合适。</p><blockquote><p>117、JSP 中的静态包含和动态包含有什么区别？</p></blockquote><p>答：静态包含是通过 JSP 的 <code>include</code> 指令包含页面，动态包含是通过 JSP 标准动作 <code>&lt;jsp:forward&gt;</code> 包含页面。</p><ul><li><p>静态包含是编译时包含，如果包含的页面不存在则会产生编译错误，而且两个页面的 <code>contentType</code> 属性应保持一致，因为两个页面会合二为一，只产生一个 class 文件，因此被包含页面发生的变动再包含它的页面更新前不会得到更新。</p></li><li><p>动态包含是运行时包含，可以向被包含的页面传递参数，包含页面和被包含页面是独立的，会编译出两个 class 文件，如果被包含的页面不存在，不会产生编译错误，也不影响页面其他部分的执行。代码如下所示：</p></li></ul><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- 静态包含 --%&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;...&quot;</span> %&gt;<br><br>&lt;%-- 动态包含 --%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;...&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;...&quot;</span> value=<span class="hljs-string">&quot;...&quot;</span> /&gt;<br>&lt;/jsp:include&gt;<br></code></pre></td></tr></table></figure></p><blockquote><p>118、Servlet 中如何获取用户提交的查询参数或表单数据？</p></blockquote><p>答：可以通过请求对象 <code>HttpServletRequest</code> 的 <code>getParameter()</code> 方法通过参数名获得参数值。如果有包含多个值的参数（例如复选框），可以通过请求对象的 <code>getParameterValues()</code> 方法获得。当然也可以通过请求对象的 <code>getParameterMap()</code> 获得一个参数名和参数值的映射（Map）。</p><blockquote><p>119、Servlet 中如何获取用户配置的初始化参数以及服务器上下文参数？</p></blockquote><p>答：可以通过重写 Servlet 接口的 <code>init(ServletConfig)</code> 方法并通过 <code>ServletConfig</code> 对象的 <code>getInitParameter()</code> 方法来获取 Servlet 的初始化参数。可以通过 <code>ServletConfig</code> 对象的 <code>getServletContext()</code> 方法获取 <code>ServletContext</code> 对象，并通过该对象的 <code>getInitParameter()</code> 方法来获取服务器上下文参数。当然，<code>ServletContext</code> 对象也在处理用户请求的方法（如 <code>doGet()</code> 方法）中通过请求对象的 <code>getServletContext()</code>方法来获得。</p><blockquote><p>120、如何设置请求的编码以及响应内容的类型？</p></blockquote><p>答：通过请求对象 <code>ServletRequest</code> 的 <code>setCharacterEncoding(String)</code> 方法可以设置请求的编码，其实要彻底解决乱码问题就应该让页面、服务器、请求和响应、Java 程序都使用统一的编码，最好的选择当然是 <code>UTF-8</code>；通过响应对象 <code>ServletResponse</code> 的 <code>setContentType(String)</code> 方法可以设置响应内容的类型，当然也可以通过 <code>HttpServletResponsed</code> 对象的 <code>setHeader(String, String)</code> 方法来设置。</p><p><strong>说明：</strong>现在如果还有公司在面试的时候问 JSP 的声明标记、表达式标记、小脚本标记这些内容的话，这样的公司也不用去了，其实 JSP 内置对象、JSP 指令这些东西基本上都可以忘却了，关于 Java Web 开发的相关知识，可以看一下我的 <a target="_blank" rel="noopener" href="/images/post/java_interview/servlet_jsp.png" one-link-mark="yes">Servlet&amp;JSP 思维导图</a>，上面有完整的知识点的罗列。</p><blockquote><p>121、解释一下网络应用的模式及其特点。</p></blockquote><p>答：典型的网络应用模式大致有三类：B/S、C/S、P2P。其中 B 代表浏览器（Browser）、C 代表客户端（Client）、S 代表服务器（Server），P2P 是对等模式，不区分客户端和服务器。B/S 应用模式中可以视为特殊的 C/S 应用模式，只是将 C/S 应用模式中的特殊的客户端换成了浏览器，因为几乎所有的系统上都有浏览器，那么只要打开浏览器就可以使用应用，没有安装、配置、升级客户端所带来的各种开销。P2P 应用模式中，成千上万台彼此连接的计算机都处于对等的地位，整个网络一般来说不依赖专用的集中服务器。网络中的每一台计算机既能充当网络服务的请求者，又对其它计算机的请求作出响应，提供资源和服务。通常这些资源和服务包括：信息的共享和交换、计算资源（如 CPU 的共享）、存储共享（如缓存和磁盘空间的使用）等，这种应用模式最大的阻力安全性、版本等问题，目前有很多应用都混合使用了多种应用模型，最常见的网络视频应用，它几乎把三种模式都用上了。</p><p><strong>补充：</strong>此题要跟“电子商务模式”区分开，因为有很多人被问到这个问题的时候马上想到的是 B2B（如阿里巴巴）、B2C（如当当、亚马逊、京东）、C2C（如淘宝、拍拍）、C2B（如威客）、O2O（如美团、饿了么）。对于这类问题，可以去百度上面科普一下。</p><blockquote><p>122、什么是 Web Service（Web 服务）？</p></blockquote><p>答：从表面上看，Web Service 就是一个应用程序，它向外界暴露出一个能够通过 Web 进行调用的 API。这就是说，你能够用编程的方法透明的调用这个应用程序，不需要了解它的任何细节，跟你使用的编程语言也没有关系。例如可以创建一个提供天气预报的 Web Service，那么无论你用哪种编程语言开发的应用都可以通过调用它的 API 并传入城市信息来获得该城市的天气预报。之所以称之为 Web Service，是因为它基于 HTTP 协议传输数据，这使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件，就可相互交换数据或集成。</p><p><strong>补充：</strong>这里必须要提及的一个概念是 SOA（Service-Oriented Architecture，面向服务的架构），SOA 是一种思想，它将应用程序的不同功能单元通过中立的契约联系起来，独立于硬件平台、操作系统和编程语言，使得各种形式的功能单元能够更好的集成。显然，Web Service 是 SOA 的一种较好的解决方案，它更多的是一种标准，而不是一种具体的技术。</p><blockquote><p>123、概念解释：SOAP、WSDL、UDDI。</p></blockquote><p>答：</p><ul><li>SOAP：简单对象访问协议（Simple Object Access Protocol），是 Web Service 中交换数据的一种协议规范。</li><li>WSDL：Web 服务描述语言（Web Service Description Language），它描述了 Web 服务的公共接口。这是一个基于 XML 的关于如何与 Web 服务通讯和使用的服务描述；也就是描述与目录中列出的 Web 服务进行交互时需要绑定的协议和信息格式。通常采用抽象语言描述该服务支持的操作和信息，使用的时候再将实际的网络协议和信息格式绑定给该服务。</li><li>UDDI：统一描述、发现和集成（Universal Description, Discovery and Integration），它是一个基于 XML 的跨平台的描述规范，可以使世界范围内的企业在互联网上发布自己所提供的服务。简单的说，UDDI 是访问各种 WSDL 的一个门面（可以参考设计模式中的门面模式）。</li></ul><blockquote><p>124、Java 规范中和 Web Service 相关的规范有哪些？</p></blockquote><p>答：Java 规范中和 Web Service 相关的有三个：</p><ul><li>JAX-WS(JSR 224)：这个规范是早期的基于 SOAP 的 Web Service 规范 JAX-RPC 的替代版本，它并不提供向下兼容性，因为 RPC 样式的 WSDL 以及相关的 API 已经在 Java EE5 中被移除了。WS-MetaData 是 JAX-WS 的依赖规范，提供了基于注解配置 Web Service 和 SOAP 消息的相关 API。</li><li>JAXM(JSR 67)：定义了发送和接收消息所需的 API，相当于 Web Service 的服务器端。</li><li>JAX-RS(JSR 311 &amp; JSR 339 &amp; JSR 370)：是 Java 针对 REST（Representation State Transfer）架构风格制定的一套 Web Service 规范。REST 是一种软件架构模式，是一种风格，它不像 SOAP 那样本身承载着一种消息协议， (两种风格的 Web Service 均采用了 HTTP 做传输协议，因为 HTTP 协议能穿越防火墙，Java 的远程方法调用（RMI）等是重量级协议，通常不能穿越防火墙），因此可以将 REST 视为基于 HTTP 协议的软件架构。REST 中最重要的两个概念是资源定位和资源操作，而 HTTP 协议恰好完整的提供了这两个点。HTTP 协议中的 URI 可以完成资源定位，而 GET、POST、OPTION、DELETE 方法可以完成资源操作。因此 REST 完全依赖 HTTP 协议就可以完成 Web Service，而不像 SOAP 协议那样只利用了 HTTP 的传输特性，定位和操作都是由 SOAP 协议自身完成的，也正是由于 SOAP 消息的存在使得基于 SOAP 的 Web Service 显得笨重而逐渐被淘汰。</li></ul><blockquote><p>125、介绍一下你了解的 Java 领域的 Web Service 框架。</p></blockquote><p>答：Java 领域的 Web Service 框架很多，包括 Axis2（Axis 的升级版本）、Jersey（RESTful 的 Web Service 框架）、CXF（XFire 的延续版本）、Hessian、Turmeric、JBoss SOA 等，其中绝大多数都是开源框架。</p><p><strong>注意：</strong>面试被问到这类问题的时候一定选择自己用过的最熟悉的作答，如果之前没有了解过就应该在面试前花一些时间了解其中的两个，并比较其优缺点，这样才能在面试时给出一个漂亮的答案。</p><h1 id="Java-EE-框架（126-170）"><a href="#Java-EE-框架（126-170）" class="headerlink" title="Java EE 框架（126~170）"></a>Java EE 框架（126~170）</h1><blockquote><p>126、什么是 ORM？</p></blockquote><p>答：对象关系映射（Object-Relational Mapping，简称 ORM）是一种为了解决程序的面向对象模型与数据库的关系模型互不匹配问题的技术；简单的说，ORM 是通过使用描述对象和数据库之间映射的元数据（在 Java 中可以用 XML 或者是注解），将程序中的对象自动持久化到关系数据库中或者将关系数据库表中的行转换成 Java 对象，其本质上就是将数据从一种形式转换到另外一种形式。</p><blockquote><p>127、持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？</p></blockquote><p>答：所谓“持久”就是将数据保存到可掉电式存储设备中以便今后使用，简单的说，就是将内存中的数据保存到关系型数据库、文件系统、消息队列等提供持久化支持的设备中。持久层就是系统中专注于实现数据持久化的相对独立的层面。</p><p>持久层设计的目标包括：</p><ul><li>数据存储逻辑的分离，提供抽象化的数据访问接口。</li><li>数据访问底层实现的分离，可以在不修改代码的情况下切换底层实现。</li><li>资源管理和调度的分离，在数据访问层实现统一的资源调度（如缓存机制）。</li><li>数据抽象，提供更面向对象的数据操作。</li></ul><p>持久层框架有：</p><ul><li>Hibernate</li><li>MyBatis</li><li>TopLink</li><li>Guzz</li><li>jOOQ</li><li>Spring Data</li><li>ActiveJDBC</li></ul><blockquote><p>128、Hibernate 中 SessionFactory 是线程安全的吗？Session 是线程安全的吗（两个线程能够共享同一个 Session 吗）？</p></blockquote><p>答：SessionFactory 对应 Hibernate 的一个数据存储的概念，它是线程安全的，可以被多个线程并发访问。SessionFactory 一般只会在启动的时候构建。对于应用程序，最好将 SessionFactory 通过单例模式进行封装以便于访问。Session 是一个轻量级非线程安全的对象（线程间不能共享 Session），它表示与数据库进行交互的一个工作单元。Session 是由 SessionFactory 创建的，在任务完成之后它会被关闭。Session 是持久层服务对外提供的主要接口。Session 会延迟获取数据库连接（也就是在需要的时候才会获取）。为了避免创建太多的 Session，可以使用 <code>ThreadLocal</code> 将 Session 和当前线程绑定在一起，这样可以让同一个线程获得的总是同一个 Session。Hibernate 3 中 SessionFactory 的 <code>getCurrentSession()</code> 方法就可以做到。</p><blockquote><p>129、Hibernate 中 Session 的 <code>load</code> 和 <code>get</code> 方法的区别是什么？</p></blockquote><p>答：主要有以下三项区别：</p><ol><li>如果没有找到符合条件的记录，<code>get</code> 方法返回 <code>null</code>，<code>load</code> 方法抛出异常。</li><li><code>get</code> 方法直接返回实体类对象，<code>load</code> 方法返回实体类对象的代理。</li><li>在 Hibernate 3 之前，<code>get</code> 方法只在一级缓存中进行数据查找，如果没有找到对应的数据则越过二级缓存，直接发出 SQL 语句完成数据读取；<code>load</code> 方法则可以从二级缓存中获取数据；从 Hibernate 3 开始，<code>get</code> 方法不再是对二级缓存只写不读，它也是可以访问二级缓存的。</li></ol><p><strong>说明：</strong>对于 <code>load()</code> 方法 Hibernate 认为该数据在数据库中一定存在可以放心的使用代理来实现延迟加载，如果没有数据就抛出异常，而通过 <code>get()</code> 方法获取的数据可以不存在。</p><blockquote><p>130、Session 的 <code>save()</code>、<code>update()</code>、<code>merge()</code>、<code>lock()</code>、<code>saveOrUpdate()</code>和 <code>persist()</code> 方法分别是做什么的？有什么区别？</p></blockquote><p>答：Hibernate 的对象有三种状态：瞬时态（transient）、持久态（persistent）和游离态（detached），如第 135 题中的图所示。瞬时态的实例可以通过调用 <code>save()</code>、<code>persist()</code> 或者 <code>saveOrUpdate()</code> 方法变成持久态；游离态的实例可以通过调用 <code>update()</code>、<code>saveOrUpdate()</code>、<code>lock()</code> 或者 <code>replicate()</code> 变成持久态。<code>save()</code> 和 <code>persist()</code> 将会引发 SQL 的 <code>INSERT</code> 语句，而 <code>update()</code> 或 <code>merge()</code> 会引发 <code>UPDATE</code> 语句。<code>save()</code> 和 <code>update()</code> 的区别在于一个是将瞬时态对象变成持久态，一个是将游离态对象变为持久态。<code>merge()</code> 方法可以完成 <code>save()</code> 和 <code>update()</code> 方法的功能，它的意图是将新的状态合并到已有的持久化对象上或创建新的持久化对象。对于 <code>persist()</code> 方法，按照官方文档的说明：(1)<code>persist()</code> 方法把一个瞬时态的实例持久化，但是并不保证标识符被立刻填入到持久化实例中，标识符的填入可能被推迟到 <code>flush</code> 的时间；(2)<code>persist()</code> 方法保证当它在一个事务外部被调用的时候并不触发一个 <code>INSERT</code> 语句，当需要封装一个长会话流程的时候，<code>persist()</code> 方法是很有必要的；(3)<code>save()</code> 方法不保证第(2)条，它要返回标识符，所以它会立即执行 <code>INSERT</code> 语句，不管是在事务内部还是外部。至于 <code>lock()</code> 方法和 <code>update()</code> 方法的区别，<code>update()</code> 方法是把一个已经更改过的脱管状态的对象变成持久状态；<code>lock()</code> 方法是把一个没有更改过的脱管状态的对象变成持久状态。</p><blockquote><p>131、阐述 Session 加载实体对象的过程。</p></blockquote><p>答：Session 加载实体对象的步骤是：</p><ol><li>Session 在调用数据库查询功能之前，首先会在一级缓存中通过实体类型和主键进行查找，如果一级缓存查找命中且数据状态合法，则直接返回；</li><li>如果一级缓存没有命中，接下来 Session 会在当前 <code>NonExists</code> 记录（相当于一个查询黑名单，如果出现重复的无效查询可以迅速做出判断，从而提升性能）中进行查找，如果 <code>NonExists</code> 中存在同样的查询条件，则返回 <code>null</code>；</li><li>如果一级缓存查询失败则查询二级缓存，如果二级缓存命中则直接返回；</li><li>如果之前的查询都未命中，则发出 SQL 语句，如果查询未发现对应记录则将此次查询添加到 Session 的 <code>NonExists</code> 中加以记录，并返回 <code>null</code>；</li><li>根据映射配置和 SQL 语句得到 <code>ResultSet</code>，并创建对应的实体对象；</li><li>将对象纳入 Session（一级缓存）的管理；</li><li>如果有对应的拦截器，则执行拦截器的 <code>onLoad</code> 方法；</li><li>如果开启并设置了要使用二级缓存，则将数据对象纳入二级缓存；</li><li>返回数据对象。</li></ol><blockquote><p>132、<code>Query</code> 接口的 <code>list</code> 方法和 <code>iterate</code> 方法有什么区别？</p></blockquote><p>答：</p><ul><li><code>list()</code> 方法无法利用一级缓存和二级缓存（对缓存只写不读），它只能在开启查询缓存的前提下使用查询缓存；<code>iterate()</code> 方法可以充分利用缓存，如果目标数据只读或者读取频繁，使用 <code>iterate()</code> 方法可以减少性能开销。</li><li><code>list()</code> 方法不会引起 N+1 查询问题，而 <code>iterate()</code> 方法可能引起 N+1 查询问题</li></ul><p><strong>说明：</strong>关于 N+1 查询问题，可以参考 CSDN 的一篇文章<a href="http://blog.csdn.net/xtayhicbladwin/article/details/4739852">《什么是N+1查询》</a></p><blockquote><p>133、Hibernate 如何实现分页查询？</p></blockquote><p>答：通过 Hibernate 实现分页查询，开发人员只需要提供 HQL 语句（调用 Session 的 <code>createQuery()</code> 方法）或查询条件（调用 Session 的 <code>createCriteria()</code> 方法）、设置查询起始行数（调用 <code>Query</code> 或 <code>Criteria</code> 接口的 <code>setFirstResult()</code> 方法）和最大查询行数（调用 <code>Query</code> 或 <code>Criteria</code> 接口的 <code>setMaxResults()</code> 方法），并调用 <code>Query</code> 或 <code>Criteria</code> 接口的 <code>list()</code> 方法，Hibernate 会自动生成分页查询的 SQL 语句。</p><blockquote><p>134、锁机制有什么用？简述 Hibernate 的悲观锁和乐观锁机制。</p></blockquote><p>答：有些业务逻辑在执行过程中要求对数据进行排他性的访问，于是需要通过一些机制保证在此过程中数据被锁住不会被外界修改，这就是所谓的锁机制。</p><p>Hibernate 支持悲观锁和乐观锁两种锁机制。</p><ul><li><p>悲观锁，顾名思义悲观的认为在数据处理过程中极有可能存在修改数据的并发事务（包括本系统的其他事务或来自外部系统的事务），于是将处理的数据设置为锁定状态。悲观锁必须依赖数据库本身的锁机制才能真正保证数据访问的排他性，关于数据库的锁机制和事务隔离级别在前面已经讨论过了。</p></li><li><p>乐观锁，顾名思义，对并发事务持乐观态度（认为对数据的并发操作不会经常性的发生），通过更加宽松的锁机制来解决由于悲观锁排他性的数据访问对系统性能造成的严重影响。最常见的乐观锁是通过数据版本标识来实现的，读取数据时获得数据的版本号，更新数据时将此版本号加 1，然后和数据库表对应记录的当前版本号进行比较，如果提交的数据版本号大于数据库中此记录的当前版本号则更新数据，否则认为是过期数据无法更新。Hibernate 中通过 Session 的 <code>get()</code> 和 <code>load()</code> 方法从数据库中加载对象时可以通过参数指定使用悲观锁；而乐观锁可以通过给实体类加整型的版本字段再通过 XML 或 <code>@Version</code> 注解进行配置。</p></li></ul><p><strong>注意：</strong>使用乐观锁会增加了一个版本字段，很明显这需要额外的空间来存储这个版本字段，浪费了空间，但是乐观锁会让系统具有更好的并发性，这是对时间的节省。因此乐观锁也是典型的空间换时间的策略。</p><blockquote><p>135、阐述实体对象的三种状态以及转换关系。</p></blockquote><p>答：最新的 Hibernate 文档中为 Hibernate 对象定义了四种状态（原来是三种状态，面试的时候基本上问的也是三种状态），分别是：<strong>瞬时态</strong>（new, or transient）、<strong>持久态</strong>（managed, or persistent）、<strong>游状态</strong>（detached）和<strong>移除态</strong>（removed，以前 Hibernate 文档中定义的三种状态中没有移除态），如下图所示，就以前的Hibernate文档中移除态被视为是瞬时态。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/135.png" alt></p><ul><li><p>瞬时态：当 new 一个实体对象后，这个对象处于瞬时态，即这个对象只是一个保存临时数据的内存区域，如果没有变量引用这个对象，则会被 JVM 的垃圾回收机制回收。这个对象所保存的数据与数据库没有任何关系，除非通过 Session 的 <code>save()</code>、<code>saveOrUpdate()</code>、<code>persist()</code>、<code>merge()</code> 方法把瞬时态对象与数据库关联，并把数据插入或者更新到数据库，这个对象才转换为持久态对象。</p></li><li><p>持久态：持久态对象的实例在数据库中有对应的记录，并拥有一个持久化标识（ID）。对持久态对象进行 <code>delete</code> 操作后，数据库中对应的记录将被删除，那么持久态对象与数据库记录不再存在对应关系，持久态对象变成移除态（可以视为瞬时态）。持久态对象被修改变更后，不会马上同步到数据库，直到数据库事务提交。</p></li><li><p>游离态：当 Session 进行了 <code>close()</code>、<code>clear()</code>、<code>evict()</code> 或 <code>flush()</code> 后，实体对象从持久态变成游离态，对象虽然拥有持久和与数据库对应记录一致的标识值，但是因为对象已经从会话中清除掉，对象不在持久化管理之内，所以处于游离态（也叫脱管态）。游离态的对象与临时状态对象是十分相似的，只是它还含有持久化标识。</p></li></ul><p><strong>注意：</strong>关于这个问题，在 <a href="https://docs.jboss.org/hibernate/orm/4.3/devguide/en-US/html_single/">Hibernate 的官方文档</a>中有更为详细的解读。</p><blockquote><p>136、如何理解 Hibernate 的延迟加载机制？在实际应用中，延迟加载与 Session 关闭的矛盾是如何处理的？</p></blockquote><p>答：延迟加载就是并不是在读取的时候就把数据加载进来，而是等到使用时再加载。Hibernate 使用了虚拟代理机制实现延迟加载，我们使用 Session 的 <code>load()</code> 方法加载数据或者一对多关联映射在使用延迟加载的情况下从一的一方加载多的一方，得到的都是虚拟代理，简单的说返回给用户的并不是实体本身，而是实体对象的代理。代理对象在用户调用 <code>getter</code> 方法时才会去数据库加载数据。但加载数据就需要数据库连接。而当我们把会话关闭时，数据库连接就同时关闭了。</p><p>延迟加载与 session 关闭的矛盾一般可以这样处理：</p><ol><li>关闭延迟加载特性。这种方式操作起来比较简单，因为 Hibernate 的延迟加载特性是可以通过映射文件或者注解进行配置的，但这种解决方案存在明显的缺陷。首先，出现 &quot;no session or session was closed&quot; 通常说明系统中已经存在主外键关联，如果去掉延迟加载的话，每次查询的开销都会变得很大。</li><li>在 session 关闭之前先获取需要查询的数据，可以使用工具方法 <code>Hibernate.isInitialized()</code> 判断对象是否被加载，如果没有被加载则可以使用 <code>Hibernate.initialize()</code> 方法加载对象。</li><li>使用拦截器或过滤器延长 Session 的生命周期直到视图获得数据。Spring 整合 Hibernate 提供的 <code>OpenSessionInViewFilter</code> 和 <code>OpenSessionInViewInterceptor</code> 就是这种做法。</li></ol><blockquote><p>137、举一个多对多关联的例子，并说明如何实现多对多关联映射。</p></blockquote><p>答：例如：商品和订单、学生和课程都是典型的多对多关系。可以在实体类上通过 <code>@ManyToMany</code> 注解配置多对多关联或者通过映射文件中的和标签配置多对多关联，但是实际项目开发中，很多时候都是将多对多关联映射转换成两个多对一关联映射来实现的。</p><blockquote><p>138、谈一下你对继承映射的理解。</p></blockquote><p>答：继承关系的映射策略有三种：</p><ul><li>每个继承结构一张表（table per class hierarchy），不管多少个子类都用一张表。</li><li>每个子类一张表（table per subclass），公共信息放一张表，特有信息放单独的表。</li><li>每个具体类一张表（table per concrete class），有多少个子类就有多少张表。</li></ul><p>第一种方式属于单表策略，其优点在于查询子类对象的时候无需表连接，查询速度快，适合多态查询；缺点是可能导致表很大。后两种方式属于多表策略，其优点在于数据存储紧凑，其缺点是需要进行连接查询，不适合多态查询。</p><blockquote><p>139、简述 Hibernate 常见优化策略。</p></blockquote><p>答：这个问题应当挑自己使用过的优化策略回答，常用的有：</p><ul><li>制定合理的缓存策略（二级缓存、查询缓存）。</li><li>采用合理的 Session 管理机制。</li><li>尽量使用延迟加载特性。</li><li>设定合理的批处理参数。</li><li>如果可以，选用 UUID 作为主键生成器。</li><li>如果可以，选用基于版本号的乐观锁替代悲观锁。</li><li>在开发过程中, 开启 <code>hibernate.show_sql</code> 选项查看生成的 SQL，从而了解底层的状况；开发完成后关闭此选项。</li><li>考虑数据库本身的优化，合理的索引、恰当的数据分区策略等都会对持久层的性能带来可观的提升，但这些需要专业的 DBA（数据库管理员）提供支持。</li></ul><blockquote><p>140、谈一谈 Hibernate 的一级缓存、二级缓存和查询缓存。</p></blockquote><p>答：Hibernate 的 Session 提供了一级缓存的功能，默认总是有效的，当应用程序保存持久化实体、修改持久化实体时，Session 并不会立即把这种改变提交到数据库，而是缓存在当前的 Session 中，除非显示调用了 Session 的 <code>flush()</code> 方法或通过 <code>close()</code> 方法关闭 Session。通过一级缓存，可以减少程序与数据库的交互，从而提高数据库访问性能。</p><p>SessionFactory 级别的二级缓存是全局性的，所有的 Session 可以共享这个二级缓存。不过二级缓存默认是关闭的，需要显示开启并指定需要使用哪种二级缓存实现类（可以使用第三方提供的实现）。一旦开启了二级缓存并设置了需要使用二级缓存的实体类，SessionFactory 就会缓存访问过的该实体类的每个对象，除非缓存的数据超出了指定的缓存空间。</p><p>一级缓存和二级缓存都是对整个实体进行缓存，不会缓存普通属性，如果希望对普通属性进行缓存，可以使用查询缓存。查询缓存是将HQL或SQL语句以及它们的查询结果作为键值对进行缓存，对于同样的查询可以直接从缓存中获取数据。查询缓存默认也是关闭的，需要显示开启。</p><blockquote><p>141、Hibernate 中 DetachedCriteria 类是做什么的？</p></blockquote><p>答：DetachedCriteria 和 Criteria 的用法基本上是一致的，但 Criteria 是由 Session 的 <code>createCriteria()</code> 方法创建的，也就意味着离开创建它的 Session，Criteria 就无法使用了。DetachedCriteria 不需要 Session 就可以创建（使用 <code>DetachedCriteria.forClass()</code> 方法创建），所以通常也称其为离线的 Criteria，在需要进行查询操作的时候再和 Session 绑定（调用其 <code>getExecutableCriteria(Session)</code> 方法），这也就意味着一个 DetachedCriteria 可以在需要的时候和不同的 Session 进行绑定。</p><blockquote><p>142、<code>@OneToMany</code> 注解的 <code>mappedBy</code> 属性有什么作用？</p></blockquote><p>答：<code>@OneToMany</code> 用来配置一对多关联映射，但通常情况下，一对多关联映射都由多的一方来维护关联关系，例如学生和班级，应该在学生类中添加班级属性来维持学生和班级的关联关系（在数据库中是由学生表中的外键班级编号来维护学生表和班级表的多对一关系），如果要使用双向关联，在班级类中添加一个容器属性来存放学生，并使用 <code>@OneToMany</code> 注解进行映射，此时 <code>mappedBy</code> 属性就非常重要。如果使用 XML 进行配置，可以用 <code>&lt;set&gt;</code> 标签的 <code>inverse=&quot;true&quot;</code> 设置来达到同样的效果。</p><blockquote><p>143、<code>MyBatis</code> 中使用 <code>#</code> 和 <code>$</code> 书写占位符有什么区别？</p></blockquote><p>答：<code>#</code> 将传入的数据都当成一个字符串，会对传入的数据自动加上引号；<code>$</code> 将传入的数据直接显示生成在SQL中。</p><p><strong>注意：</strong>使用 <script type="math/tex">` 占位符可能会导致 SQL 注射攻击，能用 `#` 的地方就不要使用 `</script>，写 <code>order by</code> 子句的时候应该用 <code>$</code> 而不是 <code>#</code>。</p><blockquote><p>144、解释一下 MyBatis 中命名空间（namespace）的作用。</p></blockquote><p>答：在大型项目中，可能存在大量的 SQL 语句，这时候为每个 SQL 语句起一个唯一的标识（ID）就变得并不容易了。为了解决这个问题，在 MyBatis 中，可以为每个映射文件起一个唯一的命名空间，这样定义在这个映射文件中的每个 SQL 语句就成了定义在这个命名空间中的一个 ID。只要我们能够保证每个命名空间中这个 ID 是唯一的，即使在不同映射文件中的语句 ID 相同，也不会再产生冲突了。</p><blockquote><p>145、MyBatis 中的动态 SQL 是什么意思？</p></blockquote><p>答：对于一些复杂的查询，我们可能会指定多个查询条件，但是这些条件可能存在也可能不存在，例如在 58 同城上面找房子，我们可能会指定面积、楼层和所在位置来查找房源，也可能会指定面积、价格、户型和所在位置来查找房源，此时就需要根据用户指定的条件动态生成 SQL 语句。如果不使用持久层框架我们可能需要自己拼装 SQL 语句，还好 MyBatis 提供了动态 SQL 的功能来解决这个问题。MyBatis 中用于实现动态 SQL 的元素主要有：</p><ul><li>if</li><li>choose / when / otherwise</li><li>trim</li><li>where</li><li>set</li><li>foreach</li></ul><p>下面是映射文件的片段。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Blog&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>     select * from t_blog where 1 = 1<br>     <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>         and title = #&#123;title&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;content != null&quot;</span>&gt;</span><br>         and content = #&#123;content&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;owner != null&quot;</span>&gt;</span><br>         and owner = #&#123;owner&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>当然也可以像下面这些书写。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Blog&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from t_blog where 1 = 1 <br>    <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;content != null&quot;</span>&gt;</span><br>            and content = #&#123;content&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>            and owner = &quot;owner1&quot;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>再看看下面这个例子。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bar&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from t_blog where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;item&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>146、什么是 IoC 和 DI？DI 是如何实现的？</p></blockquote><p>答：IoC 叫控制反转，是 Inversion of Control 的缩写，DI（Dependency Injection）叫依赖注入，是对 IoC 更简单的诠释。控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。 IoC 体现了好莱坞原则 - &quot;Don’t call me, we will call you&quot;。依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI 是对 IoC 更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。</p><p>举个例子：一个类 A 需要用到接口 B 中的方法，那么就需要为类 A 和接口 B 建立关联或依赖关系，最原始的方法是在类 A 中创建一个接口 B 的实现类 C 的实例，但这种方法需要开发人员自行维护二者的依赖关系，也就是说当依赖关系发生变动的时候需要修改代码并重新构建整个系统。如果通过一个容器来管理这些对象以及对象的依赖关系，则只需要在类 A 中定义好用于关联接口 B 的方法（构造器或 setter 方法），将类 A 和接口 B 的实现类 C 放入容器中，通过对容器的配置来实现二者的关联。</p><p>依赖注入可以通过 setter 方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring 支持 setter 注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则 setter 注入是更好的选择，setter 注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。</p><blockquote><p>147、Spring 中 Bean 的作用域有哪些？</p></blockquote><p>答：在 Spring 的早期版本中，仅有两个作用域：<code>singleton</code> 和 <code>prototype</code>，前者表示 Bean 以单例的方式存在；后者表示每次从容器中调用 Bean 时，都会返回一个新的实例，<code>prototype</code> 通常翻译为原型。</p><p><strong>补充：</strong>设计模式中的创建型模式中也有一个原型模式，原型模式也是一个常用的模式，例如做一个室内设计软件，所有的素材都在工具箱中，而每次从工具箱中取出的都是素材对象的一个原型，可以通过对象克隆来实现原型模式。</p><p>Spring 2.x 中针对 <code>WebApplicationContext</code> 新增了3个作用域，分别是：<code>request</code>（每次HTTP请求都会创建一个新的Bean）、<code>session</code>（同一个 HttpSession 共享同一个 Bean，不同的 HttpSession 使用不同的 Bean）和 <code>globalSession</code>（同一个全局 Session 共享一个 Bean）。</p><p><strong>说明：</strong>单例模式和原型模式都是重要的设计模式。一般情况下，无状态或状态不可变的类适合使用单例模式。在传统开发中，由于 DAO 持有 Connection 这个非线程安全对象因而没有使用单例模式；但在 Spring 环境下，所有 DAO 类对可以采用单例模式，因为 Spring 利用 AOP 和 Java API 中的 ThreadLocal 对非线程安全的对象进行了特殊处理。</p><p>ThreadLocal 为解决多线程程序的并发问题提供了一种新的思路。ThreadLocal，顾名思义是线程的一个本地化对象，当工作于多线程中的对象使用 ThreadLocal 维护变量时，ThreadLocal 为每个使用该变量的线程分配一个独立的变量副本，所以每一个线程都可以独立的改变自己的副本，而不影响其他线程所对应的副本。从线程的角度看，这个变量就像是线程的本地变量。</p><p>ThreadLocal 类非常简单好用，只有四个方法，能用上的也就是下面三个方法：</p><ul><li><code>void set(T value)</code>：设置当前线程的线程局部变量的值。</li><li><code>T get()</code>：获得当前线程所对应的线程局部变量的值。</li><li><code>void remove()</code>：删除当前线程中线程局部变量的值。</li></ul><p>ThreadLocal 是如何做到为每一个线程维护一份独立的变量副本的呢？在 ThreadLocal 类中有一个 <code>Map</code>，键为线程对象，值是其线程对应的变量的副本，自己要模拟实现一个ThreadLocal 类其实并不困难，代码如下所示：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadLocal</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;Thread, T&gt; map = Collections.synchronizedMap(<span class="hljs-keyword">new</span> HashMap&lt;Thread, T&gt;());<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T newValue)</span> </span>&#123;<br>        map.put(Thread.currentThread(), newValue);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> map.get(Thread.currentThread());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>        map.remove(Thread.currentThread());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>148、解释一下什么叫 AOP（面向切面编程）？</p></blockquote><p>答：AOP（Aspect-Oriented Programming）指一种程序设计范型，该范型以一种称为切面（aspect）的语言构造为基础，切面是一种新的模块化机制，用来描述分散在对象、类或方法中的横切关注点（crosscutting concern）。</p><blockquote><p>149、你是如何理解“横切关注”这个概念的？</p></blockquote><p>答：“横切关注”是会影响到整个应用程序的关注功能，它跟正常的业务逻辑是正交的，没有必然的联系，但是几乎所有的业务逻辑都会涉及到这些关注功能。通常，事务、日志、安全性等关注就是应用中的横切关注功能。</p><blockquote><p>150、你如何理解 AOP 中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？</p></blockquote><p>答：</p><ul><li>连接点（Joinpoint）：程序执行的某个特定位置（如：某个方法调用前、调用后，方法抛出异常后）。一个类或一段程序代码拥有一些具有边界性质的特定点，这些代码中的特定点就是连接点。Spring 仅支持方法的连接点。</li><li>切点（Pointcut）：如果连接点相当于数据中的记录，那么切点相当于查询条件，一个切点可以匹配多个连接点。Spring AOP 的规则解析引擎负责解析切点所设定的查询条件，找到对应的连接点。</li><li>增强（Advice）：增强是织入到目标类连接点上的一段程序代码。Spring 提供的增强接口都是带方位名的，如：BeforeAdvice、AfterReturningAdvice、ThrowsAdvice 等。很多资料上将增强译为“通知”，这明显是个词不达意的翻译，让很多程序员困惑了许久。</li></ul><p><strong>说明：</strong> Advice 在国内的很多书面资料中都被翻译成&quot;通知&quot;，但是很显然这个翻译无法表达其本质，有少量的读物上将这个词翻译为&quot;增强&quot;，这个翻译是对 Advice 较为准确的诠释，我们通过 AOP 将横切关注功能加到原有的业务逻辑上，这就是对原有业务逻辑的一种增强，这种增强可以是前置增强、后置增强、返回后增强、抛异常时增强和包围型增强。</p><ul><li>引介（Introduction）：引介是一种特殊的增强，它为类添加一些属性和方法。这样，即使一个业务类原本没有实现某个接口，通过引介功能，可以动态的未该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。</li><li>织入（Weaving）：织入是将增强添加到目标类具体连接点上的过程，AOP 有三种织入方式：<ul><li>编译期织入：需要特殊的 Java 编译期（例如 AspectJ 的 ajc）；</li><li>装载期织入：要求使用特殊的类加载器，在装载类的时候对类进行增强；</li><li>运行时织入：在运行时为目标类生成代理实现增强。Spring 采用了动态代理的方式实现了运行时织入，而 AspectJ 采用了编译期织入和装载期织入的方式。</li></ul></li><li>切面（Aspect）：切面是由切点和增强（引介）组成的，它包括了对横切关注功能的定义，也包括了对连接点的定义。</li></ul><p><strong>补充：</strong>代理模式是 GoF 提出的 23 种设计模式中最为经典的模式之一，代理模式是对象的结构模式，它给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。简单的说，代理对象可以完成比原对象更多的职责，当需要为原对象添加横切关注功能时，就可以使用原对象的代理对象。我们在打开 Office 系列的 Word 文档时，如果文档中有插图，当文档刚加载时，文档中的插图都只是一个虚框占位符，等用户真正翻到某页要查看该图片时，才会真正加载这张图，这其实就是对代理模式的使用，代替真正图片的虚框就是一个虚拟代理； Hibernate 的 <code>load</code> 方法也是返回一个虚拟代理对象，等用户真正需要访问对象的属性时，才向数据库发出 SQL 语句获得真实对象。</p><p>下面用一个找枪手代考的例子演示代理模式的使用：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 参考人员接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Candidate</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 答题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">answerTheQuestions</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒学生</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyStudent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Candidate</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;        <span class="hljs-comment">// 姓名</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LazyStudent</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">answerTheQuestions</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 懒学生只能写出自己的名字不会答题</span><br>        System.out.println(<span class="hljs-string">&quot;姓名: &quot;</span> + name);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枪手</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gunman</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Candidate</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Candidate target;     <span class="hljs-comment">// 被代理对象</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Gunman</span><span class="hljs-params">(Candidate target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">answerTheQuestions</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 枪手要写上代考的学生的姓名</span><br>        target.answerTheQuestions();<br>        <span class="hljs-comment">// 枪手要帮助懒学生答题并交卷</span><br>        System.out.println(<span class="hljs-string">&quot;奋笔疾书正确答案&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;交卷&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Candidate c = <span class="hljs-keyword">new</span> Gunman(<span class="hljs-keyword">new</span> LazyStudent(<span class="hljs-string">&quot;王小二&quot;</span>));<br>        c.answerTheQuestions();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>从 JDK 1.3 开始，Java 提供了动态代理技术，允许开发者在运行时创建接口的代理实例，主要包括 <code>Proxy</code> 类和 <code>InvocationHandler</code> 接口。下面的例子使用动态代理为 <code>ArrayList</code> 编写一个代理，在添加和删除元素时，在控制台打印添加或删除的元素以及 <code>ArrayList</code> 的大小：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListProxy</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListProxy</span><span class="hljs-params">(List&lt;T&gt; target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Object retVal = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;[&quot;</span> + method.getName() + <span class="hljs-string">&quot;: &quot;</span> + args[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span>);<br>        retVal = method.invoke(target, args);<br>        System.out.println(<span class="hljs-string">&quot;[size=&quot;</span> + target.size() + <span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest2</span> </span>&#123;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        Class&lt;?&gt; clazz = list.getClass();<br>        ListProxy&lt;String&gt; myProxy = <span class="hljs-keyword">new</span> ListProxy&lt;String&gt;(list);<br>        List&lt;String&gt; newList = (List&lt;String&gt;) <br>                Proxy.newProxyInstance(clazz.getClassLoader(), <br>                clazz.getInterfaces(), myProxy);<br>        newList.add(<span class="hljs-string">&quot;apple&quot;</span>);<br>        newList.add(<span class="hljs-string">&quot;banana&quot;</span>);<br>        newList.add(<span class="hljs-string">&quot;orange&quot;</span>);<br>        newList.remove(<span class="hljs-string">&quot;banana&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>使用 Java 的动态代理有一个局限性就是代理的类必须要实现接口，虽然面向接口编程是每个优秀的 Java 程序都知道的规则，但现实往往不尽如人意，对于没有实现接口的类如何为其生成代理呢？继承！继承是最经典的扩展已有代码能力的手段，虽然继承常常被初学者滥用，但继承也常常被进阶的程序员忽视。CGLib 采用非常底层的字节码生成技术，通过为一个类创建子类来生成代理，它弥补了 Java 动态代理的不足，因此 Spring 中动态代理和 CGLib 都是创建代理的重要手段，对于实现了接口的类就用动态代理为其生成代理类，而没有实现接口的类就用 CGLib 通过继承的方式为其创建代理。</p><blockquote><p>151、Spring 中自动装配的方式有哪些？</p></blockquote><p>答：</p><ul><li><code>no</code>：不进行自动装配，手动设置 Bean 的依赖关系。</li><li><code>byName</code>：根据 Bean 的名字进行自动装配。</li><li><code>byType</code>：根据 Bean 的类型进行自动装配。</li><li><code>constructor</code>：类似于 <code>byType</code>，不过是应用于构造器的参数，如果正好有一个 Bean 与构造器的参数类型相同则可以自动装配，否则会导致错误。</li><li><code>autodetect</code>：如果有默认的构造器，则通过 <code>constructor</code> 的方式进行自动装配，否则使用 <code>byType</code> 的方式进行自动装配。</li></ul><p><strong>说明：</strong>自动装配没有自定义装配方式那么精确，而且不能自动装配简单属性（基本类型、字符串等），在使用时应注意。</p><blockquote><p>152、Spring 中如何使用注解来配置 Bean？有哪些相关的注解？</p></blockquote><p>答：首先需要在 Spring 配置文件中增加如下配置：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></p><p>然后可以用 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code> 注解来标注需要由 Spring IoC 容器进行对象托管的类。这几个注解没有本质区别，只不过 <code>@Controller</code> 通常用于控制器，<code>@Service</code> 通常用于业务逻辑类，<code>@Repository</code> 通常用于仓储类（例如我们的 DAO 实现类），普通的类用 <code>@Component</code> 来标注。</p><blockquote><p>153、Spring 支持的事务管理类型有哪些？你在项目中使用哪种方式？</p></blockquote><p>答：Spring 支持<strong>编程式</strong>事务管理和<strong>声明式</strong>事务管理。许多 Spring 框架的用户选择声明式事务管理，因为这种方式和应用程序的关联较少，因此更加符合轻量级容器的概念。声明式事务管理要优于编程式事务管理，尽管在灵活性方面它弱于编程式事务管理，因为编程式事务允许你通过代码控制业务。</p><p>事务分为<strong>全局事务</strong>和<strong>局部事务</strong>。全局事务由应用服务器管理，需要底层服务器 JTA 支持（如 WebLogic、WildFly 等）。局部事务和底层采用的持久化方案有关，例如使用 JDBC 进行持久化时，需要使用 Connetion 对象来操作事务；而采用 Hibernate 进行持久化时，需要使用 Session 对象来操作事务。</p><p>Spring 提供了如下所示的事务管理器。</p><div class="table-container"><table><thead><tr><th>事务管理器实现类</th><th>目标对象</th></tr></thead><tbody><tr><td>DataSourceTransactionManager</td><td>注入 DataSource</td></tr><tr><td>HibernateTransactionManager</td><td>注入 SessionFactory</td></tr><tr><td>JdoTransactionManager</td><td>管理 JDO 事务</td></tr><tr><td>JtaTransactionManager</td><td>使用 JTA 管理事务</td></tr><tr><td>PersistenceBrokerTransactionManager</td><td>管理 Apache 的 OJB 事务</td></tr></tbody></table></div><p>这些事务的父接口都是 <code>PlatformTransactionManager</code>。Spring 的事务管理机制是一种典型的策略模式，<code>PlatformTransactionManager</code> 代表事务管理接口，该接口定义了三个方法，该接口并不知道底层如何管理事务，但是它的实现类必须提供 <code>getTransaction()</code> 方法（开启事务）、<code>commit()</code> 方法（提交事务）、<code>rollback()</code> 方法（回滚事务）的多态实现，这样就可以用不同的实现类代表不同的事务管理策略。使用 JTA 全局事务策略时，需要底层应用服务器支持，而不同的应用服务器所提供的 JTA 全局事务可能存在细节上的差异，因此实际配置全局事务管理器是可能需要使用 <code>JtaTransactionManager</code> 的子类，如：<code>WebLogicJtaTransactionManager</code>（Oracle 的 WebLogic 服务器提供）、<code>UowJtaTransactionManager</code>（IBM 的 WebSphere 服务器提供）等。</p><p>编程式事务管理如下所示。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.jackfrued&quot;</span>/&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propertyConfig&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;location&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>jdbc.properties<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$&#123;db.driver&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$&#123;db.url&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$&#123;db.username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$&#123;db.password&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- JDBC事务管理器 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>　<span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- 声明事务模板 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionTemplate&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.dao.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-keyword">import</span> com.jackfrued.dao.EmpDao;<br><span class="hljs-keyword">import</span> com.jackfrued.entity.Emp;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmpDao</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">save</span><span class="hljs-params">(Emp emp)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into emp values (?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.update(sql, emp.getId(), emp.getName(), emp.getBirthday()) == <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.biz.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionStatus;<br><span class="hljs-keyword">import</span> org.springframework.transaction.support.TransactionCallbackWithoutResult;<br><span class="hljs-keyword">import</span> org.springframework.transaction.support.TransactionTemplate;<br><br><span class="hljs-keyword">import</span> com.jackfrued.biz.EmpService;<br><span class="hljs-keyword">import</span> com.jackfrued.dao.EmpDao;<br><span class="hljs-keyword">import</span> com.jackfrued.entity.Emp;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmpService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TransactionTemplate txTemplate;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpDao empDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Emp emp)</span> </span>&#123;<br>        txTemplate.execute(<span class="hljs-keyword">new</span> TransactionCallbackWithoutResult() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doInTransactionWithoutResult</span><span class="hljs-params">(TransactionStatus txStatus)</span> </span>&#123;<br>                empDao.save(emp);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>声明式事务如下图所示，以 Spring 整合 Hibernate 3 为例，包括完整的 DAO 和业务逻辑代码。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/tx</span></span><br><span class="hljs-tag"><span class="hljs-string">           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置由Spring IoC容器托管的对象对应的被注解的类所在的包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.jackfrued&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置通过自动生成代理实现AOP功能 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据库连接池 (DBCP) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置驱动程序类 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置连接数据库的URL --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/myweb&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置访问数据库的用户名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置访问数据库的口令 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置最大连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;150&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置最小空闲连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置最大空闲连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置初始连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置连接被泄露时是否生成日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置是否删除超时连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置删除超时连接的超时门限值(以秒为单位) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandonedTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;120&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置超时等待时间(以毫秒为单位) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5000&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置空闲连接回收器线程运行的时间间隔(以毫秒为单位) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300000&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置连接空闲多长时间后(以毫秒为单位)被断开连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置Spring提供的支持注解ORM映射的Hibernate会话工厂 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sessionFactory&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 通过setter注入数据源属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置实体类所在的包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;packagesToScan&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.jackfrued.entity&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置Hibernate的相关属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hibernateProperties&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 在项目调试完成后要删除show_sql和format_sql属性否则对性能有显著影响 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>                hibernate.dialect=org.hibernate.dialect.MySQL5Dialect<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置Spring提供的Hibernate事务管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 通过setter注入Hibernate会话工厂 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置基于注解配置声明式事务 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.dao;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryBean;<br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryResult;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据访问对象接口(以对象为单位封装CRUD操作)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 实体类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;K&gt; 实体标识字段的类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BaseDao</span> &lt;<span class="hljs-title">E</span>, <span class="hljs-title">K</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> entity 业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 增加成功返回实体对象的标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">save</span><span class="hljs-params">(E entity)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> entity 业务实体对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(E entity)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据ID删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 业务实体对象的标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 删除成功返回true否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(K id)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> entity 业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 修改成功返回true否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(E entity)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据ID查找业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 业务实体对象的标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 业务实体对象对象或null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">findById</span><span class="hljs-params">(K id)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据ID查找业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 业务实体对象的标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lazy 是否使用延迟加载</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 业务实体对象对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">findById</span><span class="hljs-params">(K id, <span class="hljs-keyword">boolean</span> lazy)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查找所有业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 装所有业务实体对象的列表容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;E&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查找业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页面大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询结果对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;E&gt; <span class="hljs-title">findByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查找业务实体对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queryBean 查询条件对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页面大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询结果对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;E&gt; <span class="hljs-title">findByPage</span><span class="hljs-params">(QueryBean queryBean, <span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.dao;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryBean;<br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryResult;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BaseDao的缺省适配器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 实体类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;K&gt; 实体标识字段的类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDaoAdapter</span>&lt;<span class="hljs-title">E</span>, <span class="hljs-title">K</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">BaseDao</span>&lt;<span class="hljs-title">E</span>, <span class="hljs-title">K</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">save</span><span class="hljs-params">(E entity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(E entity)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(K id)</span> </span>&#123;<br>        E entity = findById(id);<br>        <span class="hljs-keyword">if</span>(entity != <span class="hljs-keyword">null</span>) &#123;<br>            delete(entity);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(E entity)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">findById</span><span class="hljs-params">(K id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">findById</span><span class="hljs-params">(K id, <span class="hljs-keyword">boolean</span> lazy)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;E&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;E&gt; <span class="hljs-title">findByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;E&gt; <span class="hljs-title">findByPage</span><span class="hljs-params">(QueryBean queryBean, <span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.dao;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.hibernate.Query;<br><span class="hljs-keyword">import</span> org.hibernate.Session;<br><span class="hljs-keyword">import</span> org.hibernate.SessionFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-keyword">import</span> com.jackfrued.comm.HQLQueryBean;<br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryBean;<br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryResult;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于Hibernate的BaseDao实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 实体类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;K&gt; 主键类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDaoHibernateImpl</span>&lt;<span class="hljs-title">E</span>, <span class="hljs-title">K</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDaoAdapter</span>&lt;<span class="hljs-title">E</span>, <span class="hljs-title">K</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> SessionFactory sessionFactory;<br><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; entityClass;       <span class="hljs-comment">// 业务实体的类对象</span><br>    <span class="hljs-keyword">private</span> String entityName;          <span class="hljs-comment">// 业务实体的名字</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BaseDaoHibernateImpl</span><span class="hljs-params">()</span> </span>&#123;<br>        ParameterizedType pt = (ParameterizedType) <span class="hljs-keyword">this</span>.getClass().getGenericSuperclass();<br>        entityClass = (Class&lt;?&gt;) pt.getActualTypeArguments()[<span class="hljs-number">0</span>];<br>        entityName = entityClass.getSimpleName();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">save</span><span class="hljs-params">(E entity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (K) sessionFactory.getCurrentSession().save(entity);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(E entity)</span> </span>&#123;<br>        sessionFactory.getCurrentSession().delete(entity);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(E entity)</span> </span>&#123;<br>        sessionFactory.getCurrentSession().update(entity);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">findById</span><span class="hljs-params">(K id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> findById(id, <span class="hljs-keyword">false</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">findById</span><span class="hljs-params">(K id, <span class="hljs-keyword">boolean</span> lazy)</span> </span>&#123;<br>        Session session = sessionFactory.getCurrentSession();<br>        <span class="hljs-keyword">return</span> (E) (lazy? session.load(entityClass, id) : session.get(entityClass, id));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;E&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sessionFactory.getCurrentSession().createCriteria(entityClass).list();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;E&gt; <span class="hljs-title">findByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> QueryResult&lt;E&gt;(<br>            findByHQLAndPage(<span class="hljs-string">&quot;from &quot;</span> + entityName , page, size),<br>            getCountByHQL(<span class="hljs-string">&quot;select count(*) from &quot;</span> + entityName)<br>        );<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;E&gt; <span class="hljs-title">findByPage</span><span class="hljs-params">(QueryBean queryBean, <span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(queryBean <span class="hljs-keyword">instanceof</span> HQLQueryBean) &#123;<br>            HQLQueryBean hqlQueryBean = (HQLQueryBean) queryBean;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> QueryResult&lt;E&gt;(<br>                findByHQLAndPage(hqlQueryBean.getQueryString(), page, size, hqlQueryBean.getParameters()),<br>                getCountByHQL(hqlQueryBean.getCountString(), hqlQueryBean.getParameters())<br>            );<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据HQL和可变参数列表进行查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hql 基于HQL的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 可变参数列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 持有查询结果的列表容器或空列表容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;E&gt; <span class="hljs-title">findByHQL</span><span class="hljs-params">(String hql, Object... params)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.findByHQL(hql, getParamList(params));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据HQL和参数列表进行查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hql 基于HQL的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 查询参数列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 持有查询结果的列表容器或空列表容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;E&gt; <span class="hljs-title">findByHQL</span><span class="hljs-params">(String hql, List&lt;Object&gt; params)</span> </span>&#123;<br>        List&lt;E&gt; list = createQuery(hql, params).list();<br>        <span class="hljs-keyword">return</span> list != <span class="hljs-keyword">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span> ? list : Collections.EMPTY_LIST;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据HQL和参数列表进行分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hql 基于HQL的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@page</span> 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@size</span> 页面大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 可变参数列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 持有查询结果的列表容器或空列表容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;E&gt; <span class="hljs-title">findByHQLAndPage</span><span class="hljs-params">(String hql, <span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size, Object... params)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.findByHQLAndPage(hql, page, size, getParamList(params));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据HQL和参数列表进行分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hql 基于HQL的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@page</span> 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@size</span> 页面大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 查询参数列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 持有查询结果的列表容器或空列表容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;E&gt; <span class="hljs-title">findByHQLAndPage</span><span class="hljs-params">(String hql, <span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size, List&lt;Object&gt; params)</span> </span>&#123;<br>        List&lt;E&gt; list = createQuery(hql, params)<br>                .setFirstResult((page - <span class="hljs-number">1</span>) * size)<br>                .setMaxResults(size)<br>                .list();<br>        <span class="hljs-keyword">return</span> list != <span class="hljs-keyword">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span> ? list : Collections.EMPTY_LIST;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询满足条件的记录数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hql 基于HQL的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 可变参数列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 满足查询条件的总记录数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getCountByHQL</span><span class="hljs-params">(String hql, Object... params)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getCountByHQL(hql, getParamList(params));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询满足条件的记录数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hql 基于HQL的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 参数列表容器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 满足查询条件的总记录数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getCountByHQL</span><span class="hljs-params">(String hql, List&lt;Object&gt; params)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (Long) createQuery(hql, params).uniqueResult();<br>    &#125;<br><br>    <span class="hljs-comment">// 创建Hibernate查询对象(Query)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Query <span class="hljs-title">createQuery</span><span class="hljs-params">(String hql, List&lt;Object&gt; params)</span> </span>&#123;<br>        Query query = sessionFactory.getCurrentSession().createQuery(hql);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; params.size(); i++) &#123;<br>            query.setParameter(i, params.get(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> query;<br>    &#125;<br><br>    <span class="hljs-comment">// 将可变参数列表组装成列表容器</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Object&gt; <span class="hljs-title">getParamList</span><span class="hljs-params">(Object... params)</span> </span>&#123;<br>        List&lt;Object&gt; paramList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(params != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                paramList.add(params[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> paramList.size() == <span class="hljs-number">0</span>? Collections.EMPTY_LIST : paramList;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.comm;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询条件的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">QueryBean</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加排序字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldName 用于排序的字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> asc 升序还是降序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询条件对象自身(方便级联编程)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryBean <span class="hljs-title">addOrder</span><span class="hljs-params">(String fieldName, <span class="hljs-keyword">boolean</span> asc)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加排序字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> available 是否添加此排序字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldName 用于排序的字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> asc 升序还是降序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询条件对象自身(方便级联编程)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryBean <span class="hljs-title">addOrder</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> available, String fieldName, <span class="hljs-keyword">boolean</span> asc)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> condition 条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 替换掉条件中参数占位符的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询条件对象自身(方便级联编程)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryBean <span class="hljs-title">addCondition</span><span class="hljs-params">(String condition, Object... params)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> available 是否需要添加此条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> condition 条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 替换掉条件中参数占位符的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询条件对象自身(方便级联编程)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryBean <span class="hljs-title">addCondition</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> available, String condition, Object... params)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询语句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getQueryString</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取查询记录数的查询语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询记录数的查询语句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCountString</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得查询参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询参数的列表容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">getParameters</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.comm;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryResult</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; result;     <span class="hljs-comment">// 持有查询结果的列表容器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> totalRecords;  <span class="hljs-comment">// 查询到的总记录数</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">QueryResult</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> result 持有查询结果的列表容器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> totalRecords 查询到的总记录数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">QueryResult</span><span class="hljs-params">(List&lt;T&gt; result, <span class="hljs-keyword">long</span> totalRecords)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.result = result;<br>        <span class="hljs-keyword">this</span>.totalRecords = totalRecords;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResult</span><span class="hljs-params">(List&lt;T&gt; result)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.result = result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotalRecords</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalRecords;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalRecords</span><span class="hljs-params">(<span class="hljs-keyword">long</span> totalRecords)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalRecords = totalRecords;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.dao;<br><br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryResult;<br><span class="hljs-keyword">import</span> com.jackfrued.entity.Dept;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门数据访问对象接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span>&lt;<span class="hljs-title">Dept</span>, <span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询顶级部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页码大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询结果对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;Dept&gt; <span class="hljs-title">findTopDeptByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.dao.impl;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryResult;<br><span class="hljs-keyword">import</span> com.jackfrued.dao.BaseDaoHibernateImpl;<br><span class="hljs-keyword">import</span> com.jackfrued.dao.DeptDao;<br><span class="hljs-keyword">import</span> com.jackfrued.entity.Dept;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDaoHibernateImpl</span>&lt;<span class="hljs-title">Dept</span>, <span class="hljs-title">Integer</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">DeptDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HQL_FIND_TOP_DEPT = <span class="hljs-string">&quot; from Dept as d where d.superiorDept is null &quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResult&lt;Dept&gt; <span class="hljs-title">findTopDeptByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        List&lt;Dept&gt; list = findByHQLAndPage(HQL_FIND_TOP_DEPT, page, size);<br>        <span class="hljs-keyword">long</span> totalRecords = getCountByHQL(<span class="hljs-string">&quot; select count(*) &quot;</span> + HQL_FIND_TOP_DEPT);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> QueryResult&lt;&gt;(list, totalRecords);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.comm;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 分页数据对象的类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageBean</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAUL_INIT_PAGE = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_PAGE_SIZE = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_PAGE_COUNT = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; data;           <span class="hljs-comment">// 分页数据</span><br>    <span class="hljs-keyword">private</span> PageRange pageRange;    <span class="hljs-comment">// 页码范围</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalPage;          <span class="hljs-comment">// 总页数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;               <span class="hljs-comment">// 页面大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentPage;        <span class="hljs-comment">// 当前页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageCount;          <span class="hljs-comment">// 页码数量</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentPage 当前页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页码大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageCount 页码数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageBean</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> pageCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.currentPage = currentPage &gt; <span class="hljs-number">0</span> ? currentPage : <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.size = size &gt; <span class="hljs-number">0</span> ? size : DEFAULT_PAGE_SIZE;<br>        <span class="hljs-keyword">this</span>.pageCount = pageCount &gt; <span class="hljs-number">0</span> ? size : DEFAULT_PAGE_COUNT;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentPage 当前页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页码大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageBean</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(currentPage, size, DEFAULT_PAGE_COUNT);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentPage 当前页码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageBean</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(currentPage, DEFAULT_PAGE_SIZE, DEFAULT_PAGE_COUNT);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageBean</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(DEFAUL_INIT_PAGE, DEFAULT_PAGE_SIZE, DEFAULT_PAGE_COUNT);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getStartPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageRange != <span class="hljs-keyword">null</span> ? pageRange.getStartPage() : <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getEndPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageRange != <span class="hljs-keyword">null</span> ? pageRange.getEndPage() : <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotalPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalPage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCurrentPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentPage;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将查询结果转换为分页数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queryResult 查询结果对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferQueryResult</span><span class="hljs-params">(QueryResult&lt;T&gt; queryResult)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> totalRecords = queryResult.getTotalRecords();<br><br>        data = queryResult.getResult();<br>        totalPage = (<span class="hljs-keyword">int</span>) ((totalRecords + size - <span class="hljs-number">1</span>) / size); <br>        totalPage = totalPage &gt;= <span class="hljs-number">0</span> ? totalPage : Integer.MAX_VALUE;<br>        <span class="hljs-keyword">this</span>.pageRange = <span class="hljs-keyword">new</span> PageRange(pageCount, currentPage, totalPage);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.comm;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 页码范围</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageRange</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> startPage;  <span class="hljs-comment">// 起始页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> endPage;    <span class="hljs-comment">// 终止页码</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageCount 总共显示几个页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentPage 当前页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> totalPage 总页数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageCount, <span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> totalPage)</span> </span>&#123;<br>        startPage = currentPage - (pageCount - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        endPage = currentPage + pageCount / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(startPage &lt; <span class="hljs-number">1</span>) &#123;<br>            startPage = <span class="hljs-number">1</span>;<br>            endPage = totalPage &gt; pageCount ? pageCount : totalPage;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (endPage &gt; totalPage) &#123;<br>            endPage = totalPage;<br>            startPage = (endPage - pageCount &gt; <span class="hljs-number">0</span>) ? endPage - pageCount + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得起始页页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 起始页页码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getStartPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> startPage;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得终止页页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 终止页页码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getEndPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> endPage;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.biz;<br><br><span class="hljs-keyword">import</span> com.jackfrued.comm.PageBean;<br><span class="hljs-keyword">import</span> com.jackfrued.entity.Dept;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门业务逻辑接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建新的部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> department 部门对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 创建成功返回true否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createNewDepartment</span><span class="hljs-params">(Dept department)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 要删除的部门的编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 删除成功返回true否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteDepartment</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页获取顶级部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页码大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 部门对象的分页器对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageBean&lt;Dept&gt; <span class="hljs-title">getTopDeptByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.biz.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> com.jackfrued.biz.DeptService;<br><span class="hljs-keyword">import</span> com.jackfrued.comm.PageBean;<br><span class="hljs-keyword">import</span> com.jackfrued.comm.QueryResult;<br><span class="hljs-keyword">import</span> com.jackfrued.dao.DeptDao;<br><span class="hljs-keyword">import</span> com.jackfrued.entity.Dept;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span>  <span class="hljs-comment">// 声明式事务的注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DeptService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptDao deptDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createNewDepartment</span><span class="hljs-params">(Dept department)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptDao.save(department) != <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteDepartment</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptDao.deleteById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageBean&lt;Dept&gt; <span class="hljs-title">getTopDeptByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        QueryResult&lt;Dept&gt; queryResult = deptDao.findTopDeptByPage(page, size);<br>        PageBean&lt;Dept&gt; pageBean = <span class="hljs-keyword">new</span> PageBean&lt;&gt;(page, size);<br>        pageBean.transferQueryResult(queryResult);<br>        <span class="hljs-keyword">return</span> pageBean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>154、如何在 Web 项目中配置 Spring 的 IoC 容器？</p></blockquote><p>答：如果需要在 Web 项目中使用 Spring 的 IoC 容器，可以在 Web 项目配置文件 web.xml 中做出如下配置：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>        org.springframework.web.context.ContextLoaderListener<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>155、如何在 Web 项目中配置 Spring MVC？</p></blockquote><p>答：要使用 Spring MVC 需要在 Web 项目配置文件中配置其前端控制器 <code>DispatcherServlet</code>，如下所示：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>example<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span><br>            org.springframework.web.servlet.DispatcherServlet<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>example<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><strong>说明：</strong>上面的配置中使用了 <code>*.html</code> 的后缀映射，这样做一方面不能够通过 URL 推断采用了何种服务器端的技术，另一方面可以欺骗搜索引擎，因为搜索引擎不会搜索动态页面，这种做法称为<strong>伪静态化</strong>。</p><blockquote><p>156、Spring MVC 的工作原理是怎样的？</p></blockquote><p>答：Spring MVC 的工作原理如下图所示：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/156.png" alt></p><ol><li>客户端的所有请求都交给前端控制器 <code>DispatcherServlet</code> 来处理，它会负责调用系统的其他模块来真正处理用户的请求。</li><li><code>DispatcherServlet</code> 收到请求后，将根据请求的信息（包括 URL、HTTP 协议方法、请求头、请求参数、Cookie 等）以及 <code>HandlerMapping</code> 的配置找到处理该请求的 <code>Handler</code>（任何一个对象都可以作为请求的 <code>Handler</code>）。</li><li>在这个地方 Spring 会通过 <code>Controller</code> 对该处理器进行封装。</li><li><code>Controller</code> 是一个适配器，它用统一的接口对各种 <code>Handler</code> 中的方法进行调用。</li><li><code>Handler</code> 完成对用户请求的处理后，会返回一个 <code>ModelAndView</code> 对象给 <code>DispatcherServlet</code>，<code>ModelAndView</code> 顾名思义，包含了数据模型以及相应的视图的信息。</li><li><code>ModelAndView</code> 的视图是逻辑视图，<code>DispatcherServlet</code> 还要借助 <code>ViewResolver</code> 完成从逻辑视图到真实视图对象的解析工作。</li><li>当得到真正的视图对象后，<code>DispatcherServlet</code> 会利用视图对象对模型数据进行渲染。</li><li>客户端得到响应，可能是一个普通的HTML页面，也可以是 XML 或 JSON 字符串，还可以是一张图片或者一个 PDF 文件。</li></ol><blockquote><p>157、如何在 Spring IoC 容器中配置数据源？</p></blockquote><p>答：</p><p>DBCP 配置：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></p><p>C3P0 配置：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></p><p><strong>注意：</strong> DBCP 的详细配置在第 153 题中已经完整的展示过了。</p><blockquote><p>158、如何配置配置事务增强？</p></blockquote><p>答：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/tx</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">     http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- this is the service object that we want to make transactional --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fooService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;x.y.service.DefaultFooService&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the transactional advice --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;txManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- the transactional semantics... --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- all methods starting with &#x27;get&#x27; are read-only --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!-- other methods use the default transaction settings (see below) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ensure that the above transactional advice runs for any execution of </span><br><span class="hljs-comment">        an operation defined by the FooService interface --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fooServiceOperation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* x.y.service.FooService.*(..))&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;fooServiceOperation&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- don&#x27;t forget the DataSource --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;scott&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tiger&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- similarly, don&#x27;t forget the PlatformTransactionManager --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>159、选择使用 Spring 框架的原因（Spring 框架为企业级开发带来的好处有哪些）？</p></blockquote><p>答：可以从以下几个方面作答：</p><ul><li>非侵入式：支持基于 POJO 的编程模式，不强制性的要求实现 Spring 框架中的接口或继承 Spring 框架中的类。</li><li>IoC 容器：IoC 容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构建和完整的回归测试。有了 IoC 容器，程序员再也不需要自己编写工厂、单例，这一点特别符合 Spring 的精神“不要重复的发明轮子”。</li><li>AOP（面向切面编程）：将所有的横切关注功能封装到切面（aspect）中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方面，有了 AOP 程序员可以省去很多自己写代理类的工作。</li><li>MVC：Spring 的 MVC 框架是非常优秀的，从各个方面都可以甩 Struts 2 几条街，为 Web 表示层提供了更好的解决方案。</li><li>事务管理：Spring 以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，在不需要任何一行代码的情况下就能够完成事务管理。</li><li>其他：选择 Spring 框架的原因还远不止于此，Spring 为 Java 企业级开发提供了一站式选择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到 Spring 存在的情况下，在你的项目中使用 Spring 提供的各种优秀的功能。</li></ul><blockquote><p>160、Spring IoC 容器配置 Bean 的方式？</p></blockquote><p>答：</p><ul><li>基于 XML 文件进行配置。</li><li>基于注解进行配置。</li><li>基于 Java 程序进行配置（Spring 3+）</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Car car;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span><span class="hljs-params">(Car car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, car=&quot;</span> + car + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSpeed;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String brand, <span class="hljs-keyword">int</span> maxSpeed)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>        <span class="hljs-keyword">this</span>.maxSpeed = maxSpeed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car [brand=&quot;</span> + brand + <span class="hljs-string">&quot;, maxSpeed=&quot;</span> + maxSpeed + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> com.jackfrued.bean.Car;<br><span class="hljs-keyword">import</span> com.jackfrued.bean.Person;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">car</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;Benz&quot;</span>, <span class="hljs-number">320</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">34</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackfrued.test;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">import</span> com.jackfrued.bean.Person;<br><span class="hljs-keyword">import</span> com.jackfrued.config.AppConfig;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// TWR (Java 7+)</span><br>        <span class="hljs-keyword">try</span>(ConfigurableApplicationContext factory = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class)) &#123;<br>            Person person = factory.getBean(Person.class);<br>            System.out.println(person);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>161、阐述 Spring 框架中 Bean 的生命周期？</p></blockquote><p>答：</p><ol><li>Spring IoC 容器找到关于 Bean 的定义并实例化该 Bean。</li><li>Spring IoC 容器对 Bean 进行依赖注入。</li><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，则将该 Bean 的 <code>id</code> 传给 <code>setBeanName</code> 方法。</li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，则将 <code>BeanFactory</code> 对象传给 <code>setBeanFactory</code> 方法。</li><li>如果 Bean 实现了 <code>BeanPostProcessor</code> 接口，则调用其 <code>postProcessBeforeInitialization</code> 方法。</li><li>如果 Bean 实现了 <code>InitializingBean</code> 接口，则调用其 <code>afterPropertySet</code> 方法。</li><li>如果有和 Bean 关联的 <code>BeanPostProcessors</code> 对象，则这些对象的 <code>postProcessAfterInitialization</code> 方法被调用。</li><li>当销毁 Bean 实例时，如果Bean实现了 <code>DisposableBean</code> 接口，则调用其 <code>destroy</code> 方法。</li></ol><blockquote><p>162、依赖注入时如何注入集合属性？</p></blockquote><p>答：可以在定义 Bean 属性时，通过 <code>&lt;list&gt;</code>/<code>&lt;set&gt;</code>/<code>&lt;map&gt;</code>/<code>&lt;props&gt;</code> 分别为其注入列表、集合、映射和键值都是字符串的映射属性。</p><blockquote><p>163、Spring 中的自动装配有哪些限制？</p></blockquote><p>答：</p><ul><li>如果使用了构造器注入或者 setter 注入，那么将覆盖自动装配的依赖关系。</li><li>基本数据类型的值、字符串字面量、类字面量无法使用自动装配来注入。</li><li>优先考虑使用显式的装配来进行更精确的依赖注入而不是使用自动装配。</li></ul><blockquote><p>164、在 Web 项目中如何获得 Spring 的 IoC 容器？</p></blockquote><p>答：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WebApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);<br></code></pre></td></tr></table></figure></p><blockquote><p>165、大型网站在架构上应当考虑哪些问题？</p></blockquote><p>答：</p><ul><li><p>分层：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI/RM）和 Internet 的 TCP/IP 模型都是分层结构。</p><p>  大型网站的软件系统也可以使用分层的理念将其分为<strong>持久层</strong>（提供数据存储和访问服务）、<strong>业务层</strong>（处理业务逻辑，系统中最核心的部分）和<strong>表示层</strong>（系统交互、视图展示）。需要指出的是：(1)分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；(2)层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。</p></li><li><p>分割：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。</p></li><li><p>分布式：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的 NoSQL 产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用 Hadoop 以及 MapReduce 分布式计算框架来处理。</p></li><li><p>集群：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。</p></li><li><p>缓存：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的 CDN、反向代理、热点数据都是对缓存技术的使用。</p></li><li><p>异步：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用 Ajax 加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。“能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。</p></li><li><p>冗余：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。</p></li></ul><blockquote><p>166、你用过的网站前端优化的技术有哪些？</p></blockquote><p>答：</p><ul><li><p>浏览器访问优化：</p><ul><li>减少 HTTP 请求数量：合并 CSS、合并 JavaScript、合并图片（CSS Sprite）</li><li>使用浏览器缓存：通过设置 HTTP 响应头中的 Cache-Control 和 Expires 属性，将 CSS、JavaScript、图片等在浏览器中缓存，当这些静态资源需要更新时，可以更新 HTML 文件中的引用来让浏览器重新请求新的资源</li><li>启用压缩</li><li>CSS 前置，JavaScript 后置</li><li>减少 Cookie 传输</li></ul></li><li><p>CDN 加速：CDN（Content Distribute Network）的本质仍然是缓存，将数据缓存在离用户最近的地方，CDN 通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少应用服务器的压力。当然，CDN 缓存的通常都是静态资源。</p></li><li><p>反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回给用户浏览器。</p></li></ul><blockquote><p>167、你使用过的应用服务器优化技术有哪些？</p></blockquote><p>答：</p><ul><li><p>分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希表读写的渐近时间复杂度为 O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（Pareto 分布，幂律分布），即 80% 的访问都集中在 20% 的数据上，如果能够将这 20% 的数据缓存起来，那么系统的性能将得到显著的改善。当然，使用缓存需要解决以下几个问题：</p><ul><li>频繁修改的数据；</li><li>数据不一致与脏读；</li><li>缓存雪崩（可以采用分布式缓存服务器集群加以解决，<a href="http://memcached.org/">memcached</a> 是广泛采用的解决方案）；</li><li>缓存预热；</li><li>缓存穿透（恶意持续请求不存在的数据）。</li></ul></li><li><p>异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即便不进行促销活动，订单系统都采用了消息队列来处理。</p></li><li><p>使用集群。</p></li><li><p>代码优化：</p><ul><li>多线程：基于 Java 的 Web 开发基本上都通过多线程的方式响应用户的并发请求，使用多线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：<ul><li>将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。</li><li>在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问同一对象的问题。使用 ThreadLocal 将对象与线程绑定也是很好的做法，这一点在前面已经探讨过了。</li><li>对资源进行并发访问时应当使用合理的锁机制。</li></ul></li><li>非阻塞 I/O： 使用单线程和非阻塞 I/O 是目前公认的比多线程的方式更能充分发挥服务器性能的应用模式，基于 Node.js 构建的服务器就采用了这样的方式。Java 在 JDK 1.4 中就引入了 NIO（Non-blocking I/O）,在 Servlet 3 规范中又引入了异步 Servlet 的概念，这些都为在服务器端采用非阻塞 I/O 提供了必要的基础。</li><li>资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源的复用，从而避免了不必要的创建和释放资源所带来的开销。</li></ul></li></ul><blockquote><p>168、什么是 XSS 攻击？什么是 SQL 注入攻击？什么是 CSRF 攻击？</p></blockquote><p>答：</p><ul><li><p>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的 URL 就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ 邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS 虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范 XSS 主要有两方面：消毒（对危险字符进行转义）和 HttpOnly（防范 XSS 攻击者窃取 Cookie 数据）。</p></li><li><p>SQL 注入攻击是注入攻击最常见的形式（此外还有 OS 注入攻击（Struts 2 的高危漏洞就是通过 OGNL 实施 OS 注入攻击导致的）），当服务器使用请求参数构造 SQL 语句时，恶意的 SQL 被嵌入到 SQL 中交给数据库执行。SQL 注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：(1)如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；(2)错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页面错误从而通过错误信息了解数据库结构，Web 应用应当设置友好的错误页，一方面符合最小惊讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；(3)盲注。防范 SQL 注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，此外，参数绑定也是很好的手段，这样恶意的 SQL 会被当做 SQL 的参数而不是命令被执行，JDBC 中的 <code>PreparedStatement</code> 就是支持参数绑定的语句对象，从性能和安全性上都明显优于 <code>Statement</code>。</p></li><li><p>CSRF 攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF 的原理是利用浏览器的 Cookie 或服务器的 Session，盗取用户身份，其原理如下图所示。防范 CSRF 的主要手段是识别请求者的身份，主要有以下几种方式：(1)在表单中添加令牌（token）；(2)验证码；(3)检查请求头中的 Referer（前面提到防图片盗链接也是用的这种方式）。令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获得较好的用户体验。</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/168.png" alt></p><p><strong>补充：</strong>防火墙的架设是 Web 安全的重要保障，<a href="https://www.modsecurity.org/">ModSecurity</a> 是开源的 Web 防火墙中的佼佼者。企业级防火墙的架设应当有两级防火墙，Web 服务器和部分应用服务器可以架设在两级防火墙之间的 DMZ，而数据和资源服务器应当架设在第二级防火墙之后。</p><blockquote><p>169、什么是领域模型（domain model）？贫血模型（anaemic domain model）和充血模型（rich domain model）有什么区别？</p></blockquote><p>答：领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。贫血模型是指使用的领域对象中只有 <code>setter</code> 和 <code>getter</code> 方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务逻辑），我们这里就不对此加以区分了。充血模型将大多数业务逻辑和持久化放在领域对象中，业务逻辑（业务门面）只是完成对业务逻辑的封装、事务和权限等的处理。下面两张图分别展示了贫血模型和充血模型的分层架构。</p><p>贫血模型</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/169_1.png" alt></p><p>充血模型</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/java_interview/169_2.png" alt></p><p>贫血模型下组织领域逻辑通常使用事务脚本模式，让每个过程对应用户可能要做的一个动作，每个动作由一个过程来驱动。也就是说在设计业务逻辑接口的时候，每个方法对应着用户的一个操作，这种模式有以下几个有点：</p><ul><li>它是一个大多数开发者都能够理解的简单过程模型（适合国内的绝大多数开发者）。</li><li>它能够与一个使用行数据入口或表数据入口的简单数据访问层很好的协作。</li><li>事务边界的显而易见，一个事务开始于脚本的开始，终止于脚本的结束，很容易通过代理（或切面）实现声明式事务。</li></ul><p>然而，事务脚本模式的缺点也是很多的，随着领域逻辑复杂性的增加，系统的复杂性将迅速增加，程序结构将变得极度混乱。开源中国社区上有一篇很好的译文<a href="https://www.oschina.net/translate/how-anaemic-domain-models-cause-bad-software">《贫血领域模型是如何导致糟糕的软件产生》</a>对这个问题做了比较细致的阐述。</p><blockquote><p>170、谈一谈测试驱动开发（TDD）的好处以及你的理解。</p></blockquote><p>答：TDD 是指在编写真正的功能实现代码之前先写测试代码，然后根据需要重构实现代码。在 JUnit 的作者 Kent Beck 的大作《测试驱动开发：实战与模式解析》（Test-Driven Development: by Example）一书中有这么一段内容：“消除恐惧和不确定性是编写测试驱动代码的重要原因”。因为编写代码时的恐惧会让你小心试探，让你回避沟通，让你羞于得到反馈，让你变得焦躁不安，而 TDD 是消除恐惧、让 Java 开发者更加自信更加乐于沟通的重要手段。TDD 会带来的好处可能不会马上呈现，但是你在某个时候一定会发现，这些好处包括：</p><ul><li>更清晰的代码 — 只写需要的代码</li><li>更好的设计</li><li>更出色的灵活性 — 鼓励程序员面向接口编程</li><li>更快速的反馈 — 不会到系统上线时才知道bug的存在</li></ul><p><strong>补充：</strong>敏捷软件开发的概念已经有很多年了，而且也部分的改变了软件开发这个行业，TDD 也是敏捷开发所倡导的。</p><p>TDD 可以在多个层级上应用，包括单元测试（测试一个类中的代码）、集成测试（测试类之间的交互）、系统测试（测试运行的系统）和系统集成测试（测试运行的系统包括使用的第三方组件）。TDD 的实施步骤是：红（失败测试）- 绿（通过测试） - 重构。关于实施 TDD 的详细步骤请参考另一篇文章<a href="https://blog.csdn.net/jackfrued/article/details/44433249">《测试驱动开发之初窥门径》</a>。</p><p>在使用 TDD 开发时，经常会遇到需要被测对象需要依赖其他子系统的情况，但是你希望将测试代码跟依赖项隔离，以保证测试代码仅仅针对当前被测对象或方法展开，这时候你需要的是测试替身。测试替身可以分为四类：</p><ul><li>虚设替身：只传递但是不会使用到的对象，一般用于填充方法的参数列表</li><li>存根替身：总是返回相同的预设响应，其中可能包括一些虚设状态</li><li>伪装替身：可以取代真实版本的可用版本（比真实版本还是会差很多）</li><li>模拟替身：可以表示一系列期望值的对象，并且可以提供预设响应</li></ul><p>Java 世界中实现模拟替身的第三方工具非常多，包括 EasyMock、Mockito、jMock 等。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="post/735e5788.html"/>
      <url>post/735e5788.html</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序是计算机程序设计中的一种重要操作，它的功能是将一个数据元素（或记录）的任意序列，重新排列成一个关键字有序的序列，排序就是把集合中的元素按照一定的次序排序在一起。</p><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 仍然在 b 的前面，则为稳定排序。</li><li>非稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 可能不在 b 的前面，则为非稳定排序。</li><li>原地排序：原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。</li><li>非原地排序：需要利用额外的数组来辅助排序。</li><li>时间复杂度：一个算法执行所消耗的时间。</li><li>空间复杂度：运行完一个算法所需的内存大小。</li></ul><h2 id="时间复杂度对比"><a href="#时间复杂度对比" class="headerlink" title="时间复杂度对比"></a>时间复杂度对比</h2><div class="table-container"><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最坏时间复杂度</th><th>最优时间复杂度</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td><a href="#冒泡排序">冒泡排序</a></td><td>O(n²)</td><td>O(n²)</td><td>O(n)</td><td>O(1)</td><td>In-Place</td><td>稳定</td></tr><tr><td><a href="#选择排序">选择排序</a></td><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td><td>In-Place</td><td>不稳定</td></tr><tr><td><a href="#插入排序">插入排序</a></td><td>O(n²)</td><td>O(n²)</td><td>O(n)</td><td>O(1)</td><td>In-Place</td><td>稳定</td></tr><tr><td><a href="#希尔排序">希尔排序</a></td><td>O(n¹˙³)</td><td>O(n²)</td><td>O(n)</td><td>O(1)</td><td>In-Place</td><td>不稳定</td></tr><tr><td><a href="#归并排序">归并排序</a></td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>Out-Place</td><td>稳定</td></tr><tr><td><a href="#快速排序">快速排序</a></td><td>O(nlogn)</td><td>O(n²)</td><td>O(nlogn)</td><td>O(logn)</td><td>In-Place</td><td>不稳定</td></tr><tr><td><a href="#堆排序">堆排序</a></td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>In-Place</td><td>不稳定</td></tr><tr><td><a href="#计数排序">计数排序</a></td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td><td>Out-Place</td><td>稳定</td></tr><tr><td><a href="#桶排序">桶排序</a></td><td>O(n+k)</td><td>O(n²)</td><td>O(n)</td><td>O(n+k)</td><td>Out-Place</td><td>稳定</td></tr><tr><td><a href="#基数排序">基数排序</a></td><td>O(n×k)</td><td>O(n×k)</td><td>O(n×k)</td><td>O(n+k)</td><td>Out-Place</td><td>稳定</td></tr></tbody></table></div><p><strong>注意：</strong></p><ul><li>n：数据规模</li><li>k：&quot;桶&quot;的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序（Bubble Sort）又称为泡式排序，是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p>冒泡排序对 n 个项目需要 O(n²) 的比较次数，且可以原地排序。尽管这个算法是最简单了解和实现的排序算法之一，但它对于包含大量的元素的数列排序是很没有效率的。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h2 id="动图展示"><a href="#动图展示" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/bubble_sort.gif" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] array) &#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">boolean</span> Flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 是否发生交换。没有交换，提前跳出外层循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>]) &#123;<br>                temp = array[j];<br>                array[j] = array[j + <span class="hljs-number">1</span>];<br>                array[j + <span class="hljs-number">1</span>] = temp;<br>                Flag = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!Flag)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">iterable</span>):</span><br>    new_arr = arr(iterable)<br>    arr_len = <span class="hljs-built_in">len</span>(new_arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(arr_len):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(arr_len - i - <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> new_arr[j] &gt; new_arr[j + <span class="hljs-number">1</span>]:<br>                new_arr[j], new_arr[j + <span class="hljs-number">1</span>] = new_arr[j + <span class="hljs-number">1</span>], new_arr[j]<br>    <span class="hljs-keyword">return</span> new_arr<br></code></pre></td></tr></table></figure></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对 n 个元素的表进行排序总共进行至多 (n-1) 次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><h2 id="动图展示-1"><a href="#动图展示-1" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/selection_sort.gif" alt></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] selectionSort(<span class="hljs-keyword">int</span>[] arr) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 总共要经过 n-1 轮比较</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">int</span> min = i;<br>        <span class="hljs-comment">// 每轮需要比较的次数 N-i</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[min]) &#123;<br>                <span class="hljs-comment">// 记录目前能找到的最小值元素的下标</span><br>                min = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 将找到的最小值和i位置所在的值进行交换</span><br>        <span class="hljs-keyword">if</span> (i != min) &#123;<br>            <span class="hljs-keyword">int</span> tmp = arr[i];<br>            arr[i] = arr[min];<br>            arr[min] = tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selection_sort</span>(<span class="hljs-params">arr</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):<br>        minIndex = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)):<br>            <span class="hljs-keyword">if</span> arr[minIndex] &gt; arr[j]:<br>                minIndex = j<br>        <span class="hljs-keyword">if</span> i == minIndex:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            arr[i], arr[minIndex] = arr[minIndex], arr[i]<br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 In-Place 排序（即只需用到 O(1) 的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤 2~5。</li></ol><h2 id="动图展示-2"><a href="#动图展示-2" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/insertion_sort.gif" alt></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] insertionSort(<span class="hljs-keyword">int</span>[] arr) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 从下标为 1 的元素开始选择合适的位置插入，因为下标为 0 的元素，默认是有序的</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 记录要插入的数据</span><br>        <span class="hljs-keyword">int</span> tmp = arr[i];<br>        <span class="hljs-comment">// 从已经排序的序列最右边的开始比较，找到比其小的数</span><br>        <span class="hljs-keyword">int</span> j = i;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; tmp &lt; arr[j - <span class="hljs-number">1</span>]) &#123;<br>            arr[j] = arr[j - <span class="hljs-number">1</span>];<br>            j--;<br>        &#125;<br>        <span class="hljs-comment">// 存在比其小的数，插入</span><br>        <span class="hljs-keyword">if</span> (j != i) &#123;<br>            arr[j] = tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertion_sort</span>(<span class="hljs-params">arr</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)):<br>        preIndex = i - <span class="hljs-number">1</span><br>        current = arr[i]<br>        <span class="hljs-keyword">while</span> preIndex &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[preIndex] &gt; current:<br>            arr[preIndex + <span class="hljs-number">1</span>] = arr[preIndex]<br>            preIndex -= <span class="hljs-number">1</span><br>        arr[preIndex + <span class="hljs-number">1</span>] = current<br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序（Shellsort），也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录&quot;基本有序&quot;时，再对全体记录进行依次直接插入排序。</p><h2 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>选择一个增量序列 t₁, t₂, ..., tₖ，其中 tᵢ &gt; tⱼ, tₖ = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 tᵢ，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><h2 id="动图展示-3"><a href="#动图展示-3" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/_sort.gif" alt></p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-3"><a href="#Java-3" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> length = arr.length;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-comment">// 动态定义间隔序列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> step = length / <span class="hljs-number">2</span>; step &gt;= <span class="hljs-number">1</span>; step /= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 插入排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = step; i &lt; length; i++) &#123;<br>            temp = arr[i];<br>            <span class="hljs-keyword">int</span> j = i - step;<br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;<br>                arr[j + step] = arr[j];<br>                j -= step;<br>            &#125;<br>            arr[j + step] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell_sort</span>(<span class="hljs-params">arr</span>):</span><br>    n = <span class="hljs-built_in">len</span>(arr)<br>    <span class="hljs-comment"># 初始步長</span><br>    gap = n // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> gap &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(gap, n):<br>            <span class="hljs-comment"># 每个步長進行插入排序</span><br>            temp = arr[i]<br>            j = i<br>            <span class="hljs-comment"># 插入排序</span><br>            <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j-gap &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j - gap] &gt; temp:<br>                arr[j] = arr[j - gap]<br>                j -= gap<br>            arr[j] = temp<br>        <span class="hljs-comment"># 得到新的步長</span><br>        gap = gap // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；自下而上的迭代；</p><h2 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h2><p><strong>递归法（Top-down）</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤3直到某一指针到达序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><p><strong>迭代法（Bottom-up）</strong></p><p>原理如下（假设序列共有 n 个元素）：</p><ol><li>将序列每相邻两个数字进行归并操作，形成 ceil(n/2) 个序列，排序后每个序列包含两/一个元素；</li><li>若此时序列数不是1个则将上述序列再次归并，形成 ceil(n/4) 个序列，每个序列包含四/三个元素；</li><li>重复步骤 2，直到所有元素排序完毕，即序列数为 1。</li></ol><h2 id="动图展示-4"><a href="#动图展示-4" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/merge_sort.gif" alt></p><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-4"><a href="#Java-4" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归版：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort_recursive</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span>[] result, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= end)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> len = end - start, mid = (len &gt;&gt; <span class="hljs-number">1</span>) + start;<br>    <span class="hljs-keyword">int</span> start1 = start, end1 = mid;<br>    <span class="hljs-keyword">int</span> start2 = mid + <span class="hljs-number">1</span>, end2 = end;<br>    merge_sort_recursive(arr, result, start1, end1); <span class="hljs-comment">//左边归并排序，使得左子序列有序</span><br>    merge_sort_recursive(arr, result, start2, end2); <span class="hljs-comment">//右边归并排序，使得右子序列有序</span><br>    <span class="hljs-keyword">int</span> k = start;<br>    <span class="hljs-keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)<br>        result[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];<br>    <span class="hljs-keyword">while</span> (start1 &lt;= end1)<br>        result[k++] = arr[start1++];<br>    <span class="hljs-keyword">while</span> (start2 &lt;= end2)<br>        result[k++] = arr[start2++];<br>    <span class="hljs-keyword">for</span> (k = start; k &lt;= end; k++)<br>        arr[k] = result[k];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = arr.length;<br>    <span class="hljs-keyword">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br>    merge_sort_recursive(arr, result, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 迭代版：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] orderedArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; arr.length * <span class="hljs-number">2</span>; i *= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (arr.length + i - <span class="hljs-number">1</span>) / i; j++) &#123;<br>            <span class="hljs-keyword">int</span> left = i * j;<br>            <span class="hljs-keyword">int</span> mid = left + i / <span class="hljs-number">2</span> &gt;= arr.length ? (arr.length - <span class="hljs-number">1</span>) : (left + i / <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">int</span> right = i * (j + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span> &gt;= arr.length ? (arr.length - <span class="hljs-number">1</span>) : (i * (j + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> start = left, l = left, m = mid;<br>            <span class="hljs-keyword">while</span> (l &lt; mid &amp;&amp; m &lt;= right) &#123;<br>                <span class="hljs-keyword">if</span> (arr[l] &lt; arr[m]) &#123;<br>                    orderedArr[start++] = arr[l++];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    orderedArr[start++] = arr[m++];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (l &lt; mid)<br>                orderedArr[start++] = arr[l++];<br>            <span class="hljs-keyword">while</span> (m &lt;= right)<br>                orderedArr[start++] = arr[m++];<br>            System.arraycopy(orderedArr, left, arr, left, right - left + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-4"><a href="#Python-4" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeSort</span>(<span class="hljs-params">nums</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> nums<br>    mid = <span class="hljs-built_in">len</span>(nums) // <span class="hljs-number">2</span><br>    left = mergeSort(nums[:mid])<br>    right = mergeSort(nums[mid:])<br>    result = []<br>    <span class="hljs-keyword">while</span> left <span class="hljs-keyword">and</span> right:<br>        <span class="hljs-keyword">if</span> left[<span class="hljs-number">0</span>] &lt;= right[<span class="hljs-number">0</span>]:<br>            result.append(left.pop(<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">else</span>:<br>            result.append(right.pop(<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">if</span> left:<br>        result += left<br>    <span class="hljs-keyword">if</span> right:<br>        result += right<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序（Quicksort），又称分区交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序 n 个项目要 O(nlogn) 次比较。在最坏状况下则需要 O(n²)次比较，但这种状况并不常见。事实上，快速排序(nlogn)通常明显比其他算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。</p><h2 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>挑选基准值：从数列中挑出一个元素，称为“基准”（pivot）；</li><li>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成；</li><li>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ol><h2 id="动图展示-5"><a href="#动图展示-5" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/quick_sort.gif" alt></p><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-5"><a href="#Java-5" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] quickSort(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right) &#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = arr.length - <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 当传递的目标数组含有两个以上的元素时，进行递归调用。（即：当传递的目标数组只含有一个元素时，此趟排序结束）</span><br>    <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">int</span> partitionIndex = partition(arr, left, right); <span class="hljs-comment">//获取关键值的下标（快排的核心）</span><br>        quickSort(arr, left, partitionIndex - <span class="hljs-number">1</span>); <span class="hljs-comment">//递归调用，快排划分出来的左区间</span><br>        quickSort(arr, partitionIndex + <span class="hljs-number">1</span>, right); <span class="hljs-comment">//递归调用，快排划分出来的右区间</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-comment">// 设定基准值（pivot）</span><br>    <span class="hljs-keyword">int</span> pivot = left;<br>    <span class="hljs-keyword">int</span> index = pivot + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt;= right; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;<br>            swap(arr, i, index);<br>            index++;<br>        &#125;<br>    &#125;<br>    swap(arr, pivot, index - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> index - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-5"><a href="#Python-5" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">arr, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):</span><br>    left = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(left, (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>)) <span class="hljs-keyword">else</span> left<br>    right = <span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(right, (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>)) <span class="hljs-keyword">else</span> right<br>    <span class="hljs-keyword">if</span> left &lt; right:<br>        partitionIndex = partition(arr, left, right)<br>        quickSort(arr, left, partitionIndex - <span class="hljs-number">1</span>)<br>        quickSort(arr, partitionIndex + <span class="hljs-number">1</span>, right)<br>    <span class="hljs-keyword">return</span> arr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params">arr, left, right</span>):</span><br>    pivot = left<br>    index = pivot + <span class="hljs-number">1</span><br>    i = index<br>    <span class="hljs-keyword">while</span> i &lt;= right:<br>        <span class="hljs-keyword">if</span> arr[i] &lt; arr[pivot]:<br>            swap(arr, i, index)<br>            index += <span class="hljs-number">1</span><br>        i += <span class="hljs-number">1</span><br>    swap(arr, pivot, index - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> index - <span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span>(<span class="hljs-params">arr, i, j</span>):</span><br>    arr[i], arr[j] = arr[j], arr[i]<br></code></pre></td></tr></table></figure></p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><ul><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列。</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列。</li></ul><p>在堆的数据结构中，堆中的最大值总是位于根节点（在优先队列中使用堆的话堆中的最小值位于根节点）。堆中定义以下几种操作：</p><ul><li>最大堆调整（Max Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点。</li><li>创建最大堆（Build Max Heap）：将堆中的所有数据重新排序。</li><li>堆排序（HeapSort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算。</li></ul><h2 id="算法步骤-6"><a href="#算法步骤-6" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>创建一个堆 H[0 ... n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><h2 id="动图展示-6"><a href="#动图展示-6" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/heap_sort.gif" alt></p><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-6"><a href="#Java-6" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 堆排序的主要入口方法，共两步。</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      *  第一步：将数组堆化</span><br><span class="hljs-comment">      *  beginIndex = 第一个非叶子节点。</span><br><span class="hljs-comment">      *  从第一个非叶子节点开始即可。无需从最后一个叶子节点开始。</span><br><span class="hljs-comment">      *  叶子节点可以看作已符合堆要求的节点，根节点就是它自己且自己以下值为最大。</span><br><span class="hljs-comment">      */</span><br>    <span class="hljs-keyword">int</span> len = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> beginIndex = (arr.length &gt;&gt; <span class="hljs-number">1</span>)- <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = beginIndex; i &gt;= <span class="hljs-number">0</span>; i--)<br>        maxHeapify(i, len);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 第二步：对堆化数据排序</span><br><span class="hljs-comment">      * 每次都是移出最顶层的根节点A[0]，与最尾部节点位置调换，同时遍历长度 - 1。</span><br><span class="hljs-comment">      * 然后从新整理被换到根节点的末尾元素，使其符合堆的特性。</span><br><span class="hljs-comment">      * 直至未排序的堆长度为 0。</span><br><span class="hljs-comment">      */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        swap(<span class="hljs-number">0</span>, i);<br>        maxHeapify(<span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = temp;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 调整索引为 index 处的数据，使其符合堆的特性。</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> index 需要堆化处理的数据的索引</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> len 未排序的堆（数组）的长度</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maxHeapify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> li = (index &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">// 左子节点索引</span><br>    <span class="hljs-keyword">int</span> ri = li + <span class="hljs-number">1</span>;           <span class="hljs-comment">// 右子节点索引</span><br>    <span class="hljs-keyword">int</span> cMax = li;             <span class="hljs-comment">// 子节点值最大索引，默认左子节点。</span><br>    <span class="hljs-keyword">if</span> (li &gt; len) <span class="hljs-keyword">return</span>;      <span class="hljs-comment">// 左子节点索引超出计算范围，直接返回。</span><br>    <span class="hljs-keyword">if</span> (ri &lt;= len &amp;&amp; arr[ri] &gt; arr[li]) <span class="hljs-comment">// 先判断左右子节点，哪个较大。</span><br>        cMax = ri;<br>    <span class="hljs-keyword">if</span> (arr[cMax] &gt; arr[index]) &#123;<br>        swap(cMax, index);      <span class="hljs-comment">// 如果父节点被子节点调换，</span><br>        maxHeapify(cMax, len);  <span class="hljs-comment">// 则需要继续判断换下后的父节点是否符合堆的特性。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-6"><a href="#Python-6" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heap_sort</span>(<span class="hljs-params">arr</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sift_down</span>(<span class="hljs-params">start, end</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;最大堆调整&quot;&quot;&quot;</span><br>        root = start<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            child = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> child &gt; end:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> child + <span class="hljs-number">1</span> &lt;= end <span class="hljs-keyword">and</span> arr[child] &lt; arr[child + <span class="hljs-number">1</span>]:<br>                child += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> arr[root] &lt; arr[child]:<br>                arr[root], arr[child] = arr[child], arr[root]<br>                root = child<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 创建最大堆</span><br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> xrange((<span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">2</span>) // <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        sift_down(start, <span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 堆排序</span><br>    <span class="hljs-keyword">for</span> end <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        arr[<span class="hljs-number">0</span>], arr[end] = arr[end], arr[<span class="hljs-number">0</span>]<br>        sift_down(<span class="hljs-number">0</span>, end - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>计数排序（Counting sort）是一种稳定的线性时间排序算法。计数排序使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置。</p><h2 id="算法步骤-7"><a href="#算法步骤-7" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>通俗地理解，例如有 10 个年龄不同的人，统计出有 8 个人的年龄比 A 小，那 A 的年龄就排在第9位，用这个方法可以得到其他每个人的位置，也就排好了序。当然，年龄有重复时需要特殊处理（保证稳定性），这就是为什么最后要反向填充目标数组，以及将每个数字的统计减去 1。</p><ol><li>找出待排序的数组中最大和最小的元素</li><li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项</li><li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素 i 放在新数组的第 C[i] 项，每放一个元素就将 C[i] 减去1</li></ol><h2 id="动图展示-7"><a href="#动图展示-7" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/counting_sort.gif" alt></p><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-7"><a href="#Java-7" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] countingSort(<span class="hljs-keyword">int</span>[] arr) &#123;<br>    <span class="hljs-keyword">int</span> maxValue = getMaxValue(arr)<br>    <span class="hljs-keyword">int</span> bucketLen = maxValue + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span>[] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[bucketLen];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> value : arr) &#123;<br>        bucket[value]++;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> sortedIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; bucketLen; j++) &#123;<br>        <span class="hljs-keyword">while</span> (bucket[j] &gt; <span class="hljs-number">0</span>) &#123;<br>            arr[sortedIndex++] = j;<br>            bucket[j]--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> maxValue = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> value : arr) &#123;<br>        <span class="hljs-keyword">if</span> (maxValue &lt; value) &#123;<br>            maxValue = value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxValue;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-7"><a href="#Python-7" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countingSort</span>(<span class="hljs-params">arr</span>):</span><br>    maxValue = arr[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> arr:<br>        <span class="hljs-keyword">if</span> maxValue &lt; value:<br>            maxValue = value<br><br>    bucketLen = maxValue + <span class="hljs-number">1</span><br>    bucket = [<span class="hljs-number">0</span>] * bucketLen<br>    sortedIndex = <span class="hljs-number">0</span><br>    arrLen = <span class="hljs-built_in">len</span>(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(arrLen):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bucket[arr[i]]:<br>            bucket[arr[i]] = <span class="hljs-number">0</span><br>        bucket[arr[i]] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bucketLen):<br>        <span class="hljs-keyword">while</span> bucket[j] &gt; <span class="hljs-number">0</span>:<br>            arr[sortedIndex] = j<br>            sortedIndex += <span class="hljs-number">1</span><br>            bucket[j] -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>桶排序（Bucket sort）或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶里。每个桶再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。</p><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><p>在额外空间充足的情况下，尽量增大桶的数量使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</p><h2 id="算法步骤-8"><a href="#算法步骤-8" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>设置一个定量的数组当作空桶子。</li><li>寻访序列，并且把项目一个一个放到对应的桶子去。</li><li>对每个不是空的桶子进行排序。</li><li>从不是空的桶子里把项目再放回原来的序列中。</li></ol><h2 id="动图展示-8"><a href="#动图展示-8" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/bucket_sort.gif" alt></p><h2 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> step)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a - min) / step;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bucketSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>], min = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a : arr) &#123;<br>        <span class="hljs-keyword">if</span> (max &lt; a)<br>            max = a;<br>        <span class="hljs-keyword">if</span> (min &gt; a)<br>            min = a;<br>    &#125;<br>    <span class="hljs-comment">// 该值也可根据实际情况选择</span><br>    <span class="hljs-keyword">int</span> bucketNum = max / <span class="hljs-number">10</span> - min / <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br>    List buckList = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>    <span class="hljs-comment">// 创建桶</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= bucketNum; i++) &#123;<br>        buckList.add(<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;());<br>    &#125;<br>    <span class="hljs-comment">// 将数据分配到各个桶中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">int</span> index = indexFor(arr[i], min, <span class="hljs-number">10</span>);<br>        ((ArrayList&lt;Integer&gt;) buckList.get(index)).add(arr[i]);<br>    &#125;<br>    ArrayList&lt;Integer&gt; bucket = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>        bucket = (ArrayList&lt;Integer&gt;) buckList.get(i);<br>        <span class="hljs-comment">// 对每个桶进行排序，这里使用了插入排序</span><br>        insertSort(bucket);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k : bucket) &#123;<br>            arr[index++] = k;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 把桶內元素使用插入排序</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(List&lt;Integer&gt; bucket)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; bucket.size(); i++) &#123;<br>        <span class="hljs-keyword">int</span> temp = bucket.get(i);<br>        <span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; bucket.get(j) &gt; temp; j--) &#123;<br>            bucket.set(j + <span class="hljs-number">1</span>, bucket.get(j));<br>        &#125;<br>        bucket.set(j + <span class="hljs-number">1</span>, temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-8"><a href="#Python-8" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bucket_sort</span>(<span class="hljs-params">arr</span>):</span><br>    max_num = <span class="hljs-built_in">max</span>(arr)<br>    <span class="hljs-comment"># 不能使用[[]]*(max+1)，这样新建的空间中各个[]是共享内存的</span><br>    buf = &#123;i: [] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(max_num) + <span class="hljs-number">1</span>)&#125;<br>    arr_len = <span class="hljs-built_in">len</span>(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(arr_len):<br>        num = arr[i]<br>        <span class="hljs-comment"># 将相应范围内的数据加入到[]中</span><br>        buf[<span class="hljs-built_in">int</span>(num)].append(num)<br>    arr = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buf)):<br>        <span class="hljs-keyword">if</span> buf[i]:<br>            <span class="hljs-comment"># 这里还需要对一个范围内的数据进行排序，然后再进行输出</span><br>            arr.extend(<span class="hljs-built_in">sorted</span>(buf[i]))<br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序（Radix sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p>基数排序有两种方法：基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。</p><h2 id="算法步骤-9"><a href="#算法步骤-9" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零；</li><li>从最低位开始，依次进行一次排序；</li><li>这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</li></ol><h2 id="动图展示-9"><a href="#动图展示-9" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/sort_algorithm/radix_sort.gif" alt></p><h2 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Java-9"><a href="#Java-9" class="headerlink" title="Java"></a>Java</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> max = getMax(array);<br>    <span class="hljs-keyword">int</span> bit = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(max / bit &gt; <span class="hljs-number">0</span>) &#123;<br>        radix(array, bit);<br>        bit *= <span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radix</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> bit)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br>    <span class="hljs-keyword">int</span>[] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        bucket[(array[i] / bit) % <span class="hljs-number">10</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; bucket.length; i++) &#123;<br>        bucket[i] += bucket[i-<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = array.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        temp[bucket[(array[i] / bit) % <span class="hljs-number">10</span>] - <span class="hljs-number">1</span>] = array[i];<br>        bucket[(array[i] / bit) % <span class="hljs-number">10</span>]--;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; temp.length; i++) &#123;<br>        array[i] = temp[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> max = array[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(array[i] &gt; max) &#123;<br>            max = array[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Python-9"><a href="#Python-9" class="headerlink" title="Python"></a>Python</h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">radix_sort</span>(<span class="hljs-params">arr</span>):</span><br>    n = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">max</span>(arr)))  <span class="hljs-comment"># 记录最大值的位数</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <span class="hljs-comment"># n轮排序</span><br>        <span class="hljs-comment"># 每一轮生成10个列表</span><br>        bucket_list = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]  <span class="hljs-comment"># 因为每一位数字都是0~9，故建立10个桶</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>            <span class="hljs-comment"># 按第k位放入到桶中</span><br>            bucket_list[i // (<span class="hljs-number">10</span> ** k) % <span class="hljs-number">10</span>].append(i)<br>        <span class="hljs-comment"># 按当前桶的顺序重排列表</span><br>        arr = [j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bucket_list <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i]<br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💡算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 特殊符号编码对照表</title>
      <link href="post/65795b97.html"/>
      <url>post/65795b97.html</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>符号</th><th>命名实体</th><th>十进制编码</th><th>符号</th><th>命名实体</th><th>十进制编码</th><th>符号</th><th>命名实体</th><th>十进制编码</th></tr></thead><tbody><tr><td><code>Α</code></td><td><code>&amp;Alpha;</code></td><td><code>&amp;#913;</code></td><td><code>Β</code></td><td><code>&amp;Beta;</code></td><td><code>&amp;#914;</code></td><td><code>Γ</code></td><td><code>&amp;Gamma;</code></td><td><code>&amp;#915;</code></td></tr><tr><td><code>Δ</code></td><td><code>&amp;Delta;</code></td><td><code>&amp;#916;</code></td><td><code>Ε</code></td><td><code>&amp;Epsilon;</code></td><td><code>&amp;#917;</code></td><td><code>Ζ</code></td><td><code>&amp;Zeta;</code></td><td><code>&amp;#918;</code></td></tr><tr><td><code>Η</code></td><td><code>&amp;Eta;</code></td><td><code>&amp;#919;</code></td><td><code>Θ</code></td><td><code>&amp;Theta;</code></td><td><code>&amp;#920;</code></td><td><code>Ι</code></td><td><code>&amp;Iota;</code></td><td><code>&amp;#921;</code></td></tr><tr><td><code>Κ</code></td><td><code>&amp;Kappa;</code></td><td><code>&amp;#922;</code></td><td><code>Λ</code></td><td><code>&amp;Lambda;</code></td><td><code>&amp;#923;</code></td><td><code>Μ</code></td><td><code>&amp;Mu;</code></td><td><code>&amp;#924;</code></td></tr><tr><td><code>Ν</code></td><td><code>&amp;Nu;</code></td><td><code>&amp;#925;</code></td><td><code>Ξ</code></td><td><code>&amp;Xi;</code></td><td><code>&amp;#926;</code></td><td><code>Ο</code></td><td><code>&amp;Omicron;</code></td><td><code>&amp;#927;</code></td></tr><tr><td><code>Π</code></td><td><code>&amp;Pi;</code></td><td><code>&amp;#928;</code></td><td><code>Ρ</code></td><td><code>&amp;Rho;</code></td><td><code>&amp;#929;</code></td><td><code>Σ</code></td><td><code>&amp;Sigma;</code></td><td><code>&amp;#931;</code></td></tr><tr><td><code>Τ</code></td><td><code>&amp;Tau;</code></td><td><code>&amp;#932;</code></td><td><code>Υ</code></td><td><code>&amp;Upsilon;</code></td><td><code>&amp;#933;</code></td><td><code>Φ</code></td><td><code>&amp;Phi;</code></td><td><code>&amp;#934;</code></td></tr><tr><td><code>Χ</code></td><td><code>&amp;Chi;</code></td><td><code>&amp;#935;</code></td><td><code>Ψ</code></td><td><code>&amp;Psi;</code></td><td><code>&amp;#936;</code></td><td><code>Ω</code></td><td><code>&amp;Omega;</code></td><td><code>&amp;#937;</code></td></tr><tr><td><code>α</code></td><td><code>&amp;alpha;</code></td><td><code>&amp;#945;</code></td><td><code>β</code></td><td><code>&amp;beta;</code></td><td><code>&amp;#946;</code></td><td><code>γ</code></td><td><code>&amp;gamma;</code></td><td><code>&amp;#947;</code></td></tr><tr><td><code>δ</code></td><td><code>&amp;delta;</code></td><td><code>&amp;#948;</code></td><td><code>ε</code></td><td><code>&amp;epsilon;</code></td><td><code>&amp;#949;</code></td><td><code>ζ</code></td><td><code>&amp;zeta;</code></td><td><code>&amp;#950;</code></td></tr><tr><td><code>η</code></td><td><code>&amp;eta;</code></td><td><code>&amp;#951;</code></td><td><code>θ</code></td><td><code>&amp;theta;</code></td><td><code>&amp;#952;</code></td><td><code>ι</code></td><td><code>&amp;iota;</code></td><td><code>&amp;#953;</code></td></tr><tr><td><code>κ</code></td><td><code>&amp;kappa;</code></td><td><code>&amp;#954;</code></td><td><code>λ</code></td><td><code>&amp;lambda;</code></td><td><code>&amp;#955;</code></td><td><code>μ</code></td><td><code>&amp;mu;</code></td><td><code>&amp;#956;</code></td></tr><tr><td><code>ν</code></td><td><code>&amp;nu;</code></td><td><code>&amp;#957;</code></td><td><code>ξ</code></td><td><code>&amp;xi;</code></td><td><code>&amp;#958;</code></td><td><code>ο</code></td><td><code>&amp;omicron;</code></td><td><code>&amp;#959;</code></td></tr><tr><td><code>π</code></td><td><code>&amp;pi;</code></td><td><code>&amp;#960;</code></td><td><code>ρ</code></td><td><code>&amp;rho;</code></td><td><code>&amp;#961;</code></td><td><code>ς</code></td><td><code>&amp;sigmaf;</code></td><td><code>&amp;#962;</code></td></tr><tr><td><code>σ</code></td><td><code>&amp;sigma;</code></td><td><code>&amp;#963;</code></td><td><code>τ</code></td><td><code>&amp;tau;</code></td><td><code>&amp;#964;</code></td><td><code>υ</code></td><td><code>&amp;upsilon;</code></td><td><code>&amp;#965;</code></td></tr><tr><td><code>φ</code></td><td><code>&amp;phi;</code></td><td><code>&amp;#966;</code></td><td><code>χ</code></td><td><code>&amp;chi;</code></td><td><code>&amp;#967;</code></td><td><code>ψ</code></td><td><code>&amp;psi;</code></td><td><code>&amp;#968;</code></td></tr><tr><td><code>ω</code></td><td><code>&amp;omega;</code></td><td><code>&amp;#969;</code></td><td><code>ϑ</code></td><td><code>&amp;thetasym;</code></td><td><code>&amp;#977;</code></td><td><code>ϒ</code></td><td><code>&amp;upsih;</code></td><td><code>&amp;#978;</code></td></tr><tr><td><code>ϖ</code></td><td><code>&amp;piv;</code></td><td><code>&amp;#982;</code></td><td><code>•</code></td><td><code>&amp;bull;</code></td><td><code>&amp;#8226;</code></td><td><code>…</code></td><td><code>&amp;hellip;</code></td><td><code>&amp;#8230;</code></td></tr><tr><td><code>′</code></td><td><code>&amp;prime;</code></td><td><code>&amp;#8242;</code></td><td><code>″</code></td><td><code>&amp;Prime;</code></td><td><code>&amp;#8243;</code></td><td><code>‾</code></td><td><code>&amp;oline;</code></td><td><code>&amp;#8254;</code></td></tr><tr><td><code>⁄</code></td><td><code>&amp;frasl;</code></td><td><code>&amp;#8260;</code></td><td><code>℘</code></td><td><code>&amp;weierp;</code></td><td><code>&amp;#8472;</code></td><td><code>ℑ</code></td><td><code>&amp;image;</code></td><td><code>&amp;#8465;</code></td></tr><tr><td><code>ℜ</code></td><td><code>&amp;real;</code></td><td><code>&amp;#8476;</code></td><td><code>™</code></td><td><code>&amp;trade;</code></td><td><code>&amp;#8482;</code></td><td><code>ℵ</code></td><td><code>&amp;alefsym;</code></td><td><code>&amp;#8501;</code></td></tr><tr><td><code>←</code></td><td><code>&amp;larr;</code></td><td><code>&amp;#8592;</code></td><td><code>↑</code></td><td><code>&amp;uarr;</code></td><td><code>&amp;#8593;</code></td><td><code>→</code></td><td><code>&amp;rarr;</code></td><td><code>&amp;#8594;</code></td></tr><tr><td><code>↓</code></td><td><code>&amp;darr;</code></td><td><code>&amp;#8595;</code></td><td><code>↔</code></td><td><code>&amp;harr;</code></td><td><code>&amp;#8596;</code></td><td><code>↵</code></td><td><code>&amp;crarr;</code></td><td><code>&amp;#8629;</code></td></tr><tr><td><code>⇐</code></td><td><code>&amp;lArr;</code></td><td><code>&amp;#8656;</code></td><td><code>⇑</code></td><td><code>&amp;uArr;</code></td><td><code>&amp;#8657;</code></td><td><code>⇒</code></td><td><code>&amp;rArr;</code></td><td><code>&amp;#8658;</code></td></tr><tr><td><code>⇓</code></td><td><code>&amp;dArr;</code></td><td><code>&amp;#8659;</code></td><td><code>⇔</code></td><td><code>&amp;hArr;</code></td><td><code>&amp;#8660;</code></td><td><code>∀</code></td><td><code>&amp;forall;</code></td><td><code>&amp;#8704;</code></td></tr><tr><td><code>∂</code></td><td><code>&amp;part;</code></td><td><code>&amp;#8706;</code></td><td><code>∃</code></td><td><code>&amp;exist;</code></td><td><code>&amp;#8707;</code></td><td><code>∅</code></td><td><code>&amp;empty;</code></td><td><code>&amp;#8709;</code></td></tr><tr><td><code>∇</code></td><td><code>&amp;nabla;</code></td><td><code>&amp;#8711;</code></td><td><code>∈</code></td><td><code>&amp;isin;</code></td><td><code>&amp;#8712;</code></td><td><code>∉</code></td><td><code>&amp;notin;</code></td><td><code>&amp;#8713;</code></td></tr><tr><td><code>∋</code></td><td><code>&amp;ni;</code></td><td><code>&amp;#8715;</code></td><td><code>∏</code></td><td><code>&amp;prod;</code></td><td><code>&amp;#8719;</code></td><td><code>∑</code></td><td><code>&amp;sum;</code></td><td><code>&amp;#8722;</code></td></tr><tr><td><code>−</code></td><td><code>&amp;minus;</code></td><td><code>&amp;#8722;</code></td><td><code>∗</code></td><td><code>&amp;lowast;</code></td><td><code>&amp;#8727;</code></td><td><code>√</code></td><td><code>&amp;radic;</code></td><td><code>&amp;#8730;</code></td></tr><tr><td><code>∝</code></td><td><code>&amp;prop;</code></td><td><code>&amp;#8733;</code></td><td><code>∞</code></td><td><code>&amp;infin;</code></td><td><code>&amp;#8734;</code></td><td><code>∠</code></td><td><code>&amp;ang;</code></td><td><code>&amp;#8736;</code></td></tr><tr><td><code>∧</code></td><td><code>&amp;and;</code></td><td><code>&amp;#8869;</code></td><td><code>∨</code></td><td><code>&amp;or;</code></td><td><code>&amp;#8870;</code></td><td><code>∩</code></td><td><code>&amp;cap;</code></td><td><code>&amp;#8745;</code></td></tr><tr><td><code>∪</code></td><td><code>&amp;cup;</code></td><td><code>&amp;#8746;</code></td><td><code>∫</code></td><td><code>&amp;int;</code></td><td><code>&amp;#8747;</code></td><td><code>∴</code></td><td><code>&amp;there4;</code></td><td><code>&amp;#8756;</code></td></tr><tr><td><code>∼</code></td><td><code>&amp;sim;</code></td><td><code>&amp;#8764;</code></td><td><code>≅</code></td><td><code>&amp;cong;</code></td><td><code>&amp;#8773;</code></td><td><code>≈</code></td><td><code>&amp;asymp;</code></td><td><code>&amp;#8773;</code></td></tr><tr><td><code>≠</code></td><td><code>&amp;ne;</code></td><td><code>&amp;#8800;</code></td><td><code>≡</code></td><td><code>&amp;equiv;</code></td><td><code>&amp;#8801;</code></td><td><code>≤</code></td><td><code>&amp;le;</code></td><td><code>&amp;#8804;</code></td></tr><tr><td><code>≥</code></td><td><code>&amp;ge;</code></td><td><code>&amp;#8805;</code></td><td><code>⊂</code></td><td><code>&amp;sub;</code></td><td><code>&amp;#8834;</code></td><td><code>⊃</code></td><td><code>&amp;sup;</code></td><td><code>&amp;#8835;</code></td></tr><tr><td><code>⊄</code></td><td><code>&amp;nsub;</code></td><td><code>&amp;#8836;</code></td><td><code>⊆</code></td><td><code>&amp;sube;</code></td><td><code>&amp;#8838;</code></td><td><code>⊇</code></td><td><code>&amp;supe;</code></td><td><code>&amp;#8839;</code></td></tr><tr><td><code>⊕</code></td><td><code>&amp;oplus;</code></td><td><code>&amp;#8853;</code></td><td><code>⊗</code></td><td><code>&amp;otimes;</code></td><td><code>&amp;#8855;</code></td><td><code>⊥</code></td><td><code>&amp;perp;</code></td><td><code>&amp;#8869;</code></td></tr><tr><td><code>⋅</code></td><td><code>&amp;sdot;</code></td><td><code>&amp;#8901;</code></td><td><code>⌈</code></td><td><code>&amp;lceil;</code></td><td><code>&amp;#8968;</code></td><td><code>⌉</code></td><td><code>&amp;rceil;</code></td><td><code>&amp;#8969;</code></td></tr><tr><td><code>⌊</code></td><td><code>&amp;lfloor;</code></td><td><code>&amp;#8970;</code></td><td><code>⌋</code></td><td><code>&amp;rfloor;</code></td><td><code>&amp;#8971;</code></td><td><code>◊</code></td><td><code>&amp;loz;</code></td><td><code>&amp;#9674;</code></td></tr><tr><td><code>♠</code></td><td><code>&amp;spades;</code></td><td><code>&amp;#9824;</code></td><td><code>♣</code></td><td><code>&amp;clubs;</code></td><td><code>&amp;#9827;</code></td><td><code>♥</code></td><td><code>&amp;hearts;</code></td><td><code>&amp;#9829;</code></td></tr><tr><td><code>♦</code></td><td><code>&amp;diams;</code></td><td><code>&amp;#9830;</code></td><td><code> </code></td><td><code>&amp;nbsp;</code></td><td><code>&amp;#160;</code></td><td><code>¡</code></td><td><code>&amp;iexcl;</code></td><td><code>&amp;#161;</code></td></tr><tr><td><code>¢</code></td><td><code>&amp;cent;</code></td><td><code>&amp;#162;</code></td><td><code>£</code></td><td><code>&amp;pound;</code></td><td><code>&amp;#163;</code></td><td><code>¤</code></td><td><code>&amp;curren;</code></td><td><code>&amp;#164;</code></td></tr><tr><td><code>¥</code></td><td><code>&amp;yen;</code></td><td><code>&amp;#165;</code></td><td><code>¦</code></td><td><code>&amp;brvbar;</code></td><td><code>&amp;#166;</code></td><td><code>§</code></td><td><code>&amp;sect;</code></td><td><code>&amp;#167;</code></td></tr><tr><td><code>¨</code></td><td><code>&amp;uml;</code></td><td><code>&amp;#168;</code></td><td><code>©</code></td><td><code>&amp;copy;</code></td><td><code>&amp;#169;</code></td><td><code>ª</code></td><td><code>&amp;ordf;</code></td><td><code>&amp;#170;</code></td></tr><tr><td><code>«</code></td><td><code>&amp;laquo;</code></td><td><code>&amp;#171;</code></td><td><code>¬</code></td><td><code>&amp;not;</code></td><td><code>&amp;#172;</code></td><td><code>­</code></td><td><code>&amp;shy;</code></td><td><code>&amp;#173;</code></td></tr><tr><td><code>®</code></td><td><code>&amp;reg;</code></td><td><code>&amp;#174;</code></td><td><code>¯</code></td><td><code>&amp;macr;</code></td><td><code>&amp;#175;</code></td><td><code>°</code></td><td><code>&amp;deg;</code></td><td><code>&amp;#176;</code></td></tr><tr><td><code>±</code></td><td><code>&amp;plusmn;</code></td><td><code>&amp;#177;</code></td><td><code>²</code></td><td><code>&amp;sup2;</code></td><td><code>&amp;#178;</code></td><td><code>³</code></td><td><code>&amp;sup3;</code></td><td><code>&amp;#179;</code></td></tr><tr><td><code>´</code></td><td><code>&amp;acute;</code></td><td><code>&amp;#180;</code></td><td><code>µ</code></td><td><code>&amp;micro;</code></td><td><code>&amp;#181;</code></td><td><code>&quot;</code></td><td><code>&amp;quot;</code></td><td><code>&amp;#34;</code></td></tr><tr><td><code>&lt;</code></td><td><code>&amp;lt;</code></td><td><code>&amp;#60;</code></td><td><code>&gt;</code></td><td><code>&amp;gt;</code></td><td><code>&amp;#62;</code></td><td><code>&#39;</code></td><td><code>&amp;apos;</code></td><td><code>&amp;#39;</code></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 📑文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊符号</title>
      <link href="post/73bb9016.html"/>
      <url>post/73bb9016.html</url>
      
        <content type="html"><![CDATA[<h1 id="编号序号"><a href="#编号序号" class="headerlink" title="编号序号"></a>编号序号</h1><p>①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳⓪</p><p>❶❷❸❹❺❻❼❽❾❿⓫⓬⓭⓮⓯⓰⓱⓲⓳⓴</p><p>㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉</p><p>一二三四五六七八九十</p><p>⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇</p><p>⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛</p><p>ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ</p><p>ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ</p><p>ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ</p><p>⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵</p><p>⁰¹²³⁴⁵⁶⁷⁸⁹₀₁₂₃₄₅₆₇₈₉</p><h1 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h1><p>﹢﹣×÷±/≌∽≦≧≒﹤﹥≈≡≠=≤≥&lt;&gt;≮≯≂≃≄≅≆≇≈≉≊≋≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≢≣≨≩⊰⊱⋛⋚∷∶∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙√∟⊿㏒㏑⅟½⅓⅕⅙⅛⅔⅖⅚⅜¾⅗⅝⅞⅘∫∬∭∮∯∰∱∲∳%℅‰‱øØπ</p><h1 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h1><p>。，、&#39;：∶；?‘’“”〝〞ˆˇ﹕︰﹔﹖﹑·¨….¸;！´？！～—ˉ|‖&quot;〃`@﹫¡¿﹏﹋﹌︴々﹟#﹩$﹠&amp;﹪%*﹡﹢﹦﹤‐￣¯―﹨ˆ˜﹍﹎+=&lt;<em>_-\ˇ~﹉﹊（）〈〉‹›﹛﹜『』〖〗[]《》〔〕{}「」【】︵︷^︹︽</em>﹁﹃︻︶︸﹀︺︾ˉ﹂﹄︼❝❞</p><h1 id="上标符号"><a href="#上标符号" class="headerlink" title="上标符号"></a>上标符号</h1><p>ᵃ ᵇ ᶜ ᵈ ᵉ ᵍ ʰ ⁱ ʲ ᵏ ˡ ᵐ ⁿ ᵒ ᵖ ᵒ⃒ ʳ ˢ ᵗ ᵘ ᵛ ʷ ˣ ʸ ᙆ ᴬ ᴮ ᒼ ᴰ ᴱ ᴳ ᴴ ᴵ ᴶ ᴷ ᴸ ᴹ ᴺ ᴼ ᴾ ᴼ̴ ᴿ ˢ ᵀ ᵁ ᵂ ˣ ᵞ ᙆ ꝰ ˀ ˁ ˤ ꟸ ꭜ ʱ ꭝ ꭞ ʴ ʵ ʶ ꭟ ˠ ꟹ ᴭ ᴯ ᴲ ᴻ ᴽ ᵄ ᵅ ᵆ ᵊ ᵋ ᵌ ᵑ ᵓ ᵚ ᵝ ᵞ ᵟ ᵠ ᵡ ᵎ ᵔ ᵕ ᵙ ᵜ ᶛ ᶜ ᶝ ᶞ ᶟ ᶡ ᶣ ᶤ ᶥ ᶦ ᶧ ᶨ ᶩ ᶪ ᶫ ᶬ ᶭ ᶮ ᶯ ᶰ ᶱ ᶲ ᶳ ᶴ ᶵ ᶶ ᶷ ᶸ ᶹ ᶺ ᶼ ᶽ ᶾ ᶿ ꚜ ꚝ ჼ ᒃ ᕻ ᑦ ᒄ ᕪ ᑋ ᑊ ᔿ ᐢ ᣕ ᐤ ᣖ ᣴ ᣗ ᔆ ᙚ ᐡ ᘁ ᐜ ᕽ ᙆ ᙇ ᒼ ᣳ ᒢ ᒻ ᔿ ᐤ ᣖ ᣵ ᙚ ᐪ ᓑ ᘁ ᐜ ᕽ ᙆ ᙇ ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁺ ⁻ ⁼ ˂ ˃ ⁽ ⁾ ˙ * º ㆒㆓㆔㆕㆖㆗㆘㆙㆚㆛㆜㆝㆞</p><h1 id="下标符号"><a href="#下标符号" class="headerlink" title="下标符号"></a>下标符号</h1><p>₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₊ ₋ ₌ ₍ ₎ ₐ ₑ ₒ ₓ ₔ ₕ ₖ ₗ ₘ ₙ ₚ ₛ ₜ ᵤ ᵥ ₓ ᙮ ᵤ ᵩ ᵦ ₗ ˪ ៳ ៷ ₒ ᵨ ₛ ៴ ᵤ ᵪ ᵧ</p><h1 id="单位符号"><a href="#单位符号" class="headerlink" title="单位符号"></a>单位符号</h1><p>°′″%℃℉Å﹪‰㎡㏕㎜㎝㎞㏎m³㎎㎏㏄º○¤%º¹²³⁴⁵⁶⁷⁸⁹⁰⁺⁻⁼⁽⁾ʲʰʳʷʸⁿ</p><h1 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h1><p>↑↓←→↖↗↘↙↔↕➻➼➽➸➳➺➻➴➵➶➷➹▶►▷◁◀◄«»➩➪➫➬➭➮➯➱⏎➲➾➔➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨↚↛↜↝↞↟↠↠↡↢↣↤↤↥↦↧↨⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇖⇗⇘⇙⇜↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹☇☈↼↽↾↿⇀⇁⇂⇃⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪↺↻⇚⇛</p><h1 id="符号图案"><a href="#符号图案" class="headerlink" title="符号图案"></a>符号图案</h1><p>✐✎✏✑✒✉✁✂✃✄✆✉☎☏☑√☐☒✗ㄨ✘✕✖✖☢☠☣✈★☆✡囍㍿☯☰☲☱☴☵☶☳☷☜☞☚☛☟♤♧♡♢♠♣♥♦웃유❖☪✿♂♀✪✯☭➳卍卐√×■□◆●○✙☺☻❀⚘♔♕♖♗♙♚♛♜♝♞♟♂♀♠♣❤☜☞⊙☼▧▨♨▪◊◦▣▤▥▦▩◘◈◇♬♪♩♭♪の→あぃ￡Ю〓§♤¤✲❈✿✲❈➹☀☂☁【】┱┲❣✚✪✣✤✥✦※❉❥❦❧❃❂❁✄☪☣☢☠☭ღ☀☁☂☃☄☇☈⊙☊☋☌☍ⓛⓞⓥⓔ╬『』∴☀♫♬♩♭♪﹌の►◄♨↘▀▄█▌◦☼♪の→▬♦◊◦♠♣▣۰··۰►◄♨▪▫☼♦⊙●○①⊕Θ¤㊣♀◆◇◣◢◥▲▼△▽⊿◤◥✡✓✔✕✖♂♀☜☞⊙◎►◄♨◐◑▪▫☼♦▐░▒▬♦◊◘◙◦☼▣▤▥▦▩◘◙◈♫♬♪♩♭♪✄☪☣☢☠♯♩♪♫♬♭♮☪ºº₪¤큐«»™♂✿｡◕‿◕｡☹⊰⊱❀҉এృةمʚΐɞʚɞﻬ๑ف๓ق͜✿҉͜ღ҉℘ೄζั͡ตԅ️✾ೄ೨Ͽ҉✿ೃ✿҉͜✿ۣζั͡✿يℳ❀͜҉　҉҉͡꧁༺๑๑༻꧂დ﹏⃣ぃ￡</p><h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><p>ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζνξοπρσηθικλμτυφχψω</p><h1 id="俄语字母"><a href="#俄语字母" class="headerlink" title="俄语字母"></a>俄语字母</h1><p>АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя</p><h1 id="汉语拼音"><a href="#汉语拼音" class="headerlink" title="汉语拼音"></a>汉语拼音</h1><p>āáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜüêɑńňɡㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ</p><h1 id="中文字符"><a href="#中文字符" class="headerlink" title="中文字符"></a>中文字符</h1><p>卍卐卄巜朤氺曱甴囍兀々〆のぁ〡〢〣〤〥〦〧〨〩㊎㊍㊌㊋㊏㊚㊛㊐㊊㊣㊤㊥㊦㊧㊨㊒㊫㊑㊓㊔㊕㊖㊗㊘㊜㊝㊞㊟㊠㊡㊢㊩㊪㊬㊭㊮㊯㊰㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉</p><h1 id="韩国符号"><a href="#韩国符号" class="headerlink" title="韩国符号"></a>韩国符号</h1><p>ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊ</p><h1 id="天气符"><a href="#天气符" class="headerlink" title="天气符"></a>天气符</h1><p>ϟ☀☁☂☃☄☉☼☽☾♁♨❄❅❆</p><h1 id="制表符"><a href="#制表符" class="headerlink" title="制表符"></a>制表符</h1><p>─━│┃╌╍╎╏┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╪╫╬═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╳╔╗╝╚╬═╓╩┠┨┯┷┏┓┗┛┳⊥﹃﹄┌╮╭╯╰</p><h1 id="国际象棋符号"><a href="#国际象棋符号" class="headerlink" title="国际象棋符号"></a>国际象棋符号</h1><p>♚　♛　♝　♞　♜　♟　♔　♕　♗　♘　♖　♟</p><h1 id="货币符号"><a href="#货币符号" class="headerlink" title="货币符号"></a>货币符号</h1><p>¥：人民币符号。</p><p>฿：泰铢标志(被使用在泰国)，分标志(美元、欧元和其它货币细分)。</p><p>₡：col3on标志(被使用在哥斯达黎加和在萨尔瓦多)。</p><p>₠：ECU 标志(不广泛被应用, 和历史; 由欧洲替换)。</p><p>₢：克鲁赛罗标志(以前被使用在巴西)。</p><p>€：欧元标志。</p><p>₩：韩元、朝鲜元标志。</p><p>$：美元标志(并且被使用为许多其它货币在美洲, 譬如不同的比索, 和以前为葡萄牙埃斯库多作为 cifr6ao)。</p><p>￡：英磅标志（大不列颠及北爱尔兰联合王国/英国 货币符号）。</p><p>₯：德拉克马标志(以前被使用在希腊)。</p><p>₫：oong 标志(被使用在越南)。</p><p>円：日元的货币符。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 📑文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS Shell 命令</title>
      <link href="post/d1e7dfd3.html"/>
      <url>post/d1e7dfd3.html</url>
      
        <content type="html"><![CDATA[<h1 id="FS-Shell"><a href="#FS-Shell" class="headerlink" title="FS Shell"></a>FS Shell</h1><ul><li><p>调用文件系统（FS）的 Shell 命令应使用 <code>bin/hadoop fs &lt;args&gt;</code> 的形式。</p></li><li><p>所有的 FS shell 命令使用 URI 路径作为参数。</p></li><li><p>URI 格式是 <code>scheme://authority/path</code>。对 HDFS 文件系统，<code>scheme</code> 是 <code>hdfs</code>，对本地文件系统，<code>scheme</code> 是 <code>file</code>。其中 <code>scheme</code> 和 <code>authority</code> 参数都是可选的，如果未加指定，就会使用配置中指定的默认 <code>scheme</code>。</p></li><li><p>一个 HDFS 文件或目录比如 <code>/parent/child</code> 可以表示成 <code>hdfs://namenode:namenodeport/parent/child</code>，或者更简单的 <code>/parent/child</code>（假设你配置文件中的默认值是 <code>namenode:namenodeport</code>）。</p></li><li><p>大多数 FS Shell 命令的行为和对应的 Unix Shell 命令类似，不同之处会在下面介绍各命令使用详情时指出。出错信息会输出到 <code>stderr</code>，其他信息输出到 <code>stdout</code>。</p></li></ul><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cat URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将路径指定文件的内容输出到 <code>stdout</code>。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cat hdfs://host1:port1/file1 hdfs://host2:port2/file2<br>hadoop fs -cat file:///file3 /user/hadoop/file4<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -chgrp [-R] GROUP URI [URI …]`<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：改变文件所属的组。使用 <code>-R</code> 将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。</li></ul><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：改变文件的权限。使用 <code>-R</code> 将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。</li></ul><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -chown [-R] [OWNER][:[GROUP]] URI [URI ]<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：改变文件的拥有者。使用 <code>-R</code> 将使改变在目录结构下递归进行。命令的使用者必须是超级用户。</li></ul><h1 id="copyFromLocal"><a href="#copyFromLocal" class="headerlink" title="copyFromLocal"></a>copyFromLocal</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -copyFromLocal &lt;localsrc&gt; URI<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：除了限定源路径是一个本地文件外，和 <a href="#put">put</a> 命令相似。</li></ul><h1 id="copyToLocal"><a href="#copyToLocal" class="headerlink" title="copyToLocal"></a>copyToLocal</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -copyToLocal [-ignorecrc] [-crc] URI &lt;localdst&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：除了限定目标路径是一个本地文件外，和 <a href="#get">get</a> 命令类似。</li></ul><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cp URI [URI …] &lt;dest&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将文件从源路径复制到目标路径。这个命令允许有多个源路径，此时目标路径必须是一个目录。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -cp /user/hadoop/file1 /user/hadoop/file2<br>hadoop fs -cp /user/hadoop/file1 /user/hadoop/file2 /user/hadoop/dir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -du URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：显示目录中所有文件的大小，或者当只指定一个文件时，显示此文件的大小。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -du /user/hadoop/dir1 /user/hadoop/file1 hdfs://host:port/user/hadoop/dir1<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="dus"><a href="#dus" class="headerlink" title="dus"></a>dus</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -dus &lt;args&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：显示文件的大小。</li></ul><h1 id="expunge"><a href="#expunge" class="headerlink" title="expunge"></a>expunge</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -expunge<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：清空回收站。请参考 <a href="http://hadoop.apache.org/docs/r1.0.4/cn/hdfs_design.html">HDFS 设计文档</a> 以获取更多关于回收站特性的信息。</li></ul><h1 id="get"><a href="#get" class="headerlink" title="get"></a>get</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -get [-ignorecrc] [-crc] &lt;src&gt; &lt;localdst&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：复制文件到本地文件系统。可用 <code>-ignorecrc</code> 选项复制 CRC 校验失败的文件。使用 <code>-crc</code> 选项复制文件以及 CRC 信息。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -get /user/hadoop/file localfile<br>hadoop fs -get hdfs://host:port/user/hadoop/file localfile<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="getmerge"><a href="#getmerge" class="headerlink" title="getmerge"></a>getmerge</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -getmerge &lt;src&gt; &lt;localdst&gt; [addnl]<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：接受一个源目录和一个目标文件作为输入，并且将源目录中所有的文件连接成本地目标文件。<code>addnl</code> 是可选的，用于指定在每个文件结尾添加一个换行符。</li></ul><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -ls &lt;args&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：</p><ul><li><p>如果是文件，则按照如下格式返回文件信息：</p><p>  文件名 | &lt;副本数&gt; | 文件大小 | 修改日期 | 修改时间 | 权限 | 用户ID | 组ID</p></li><li><p>如果是目录，则返回它直接子文件的一个列表，就像在 Unix 中一样。目录返回列表的信息：</p><p>  目录名 | <code>&lt;dir&gt;</code> | 修改日期 | 修改时间 | 权限 | 用户ID | 组ID</p></li></ul></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -ls /user/hadoop/file1 /user/hadoop/file2 hdfs://host:port/user/hadoop/dir1 /nonexistentfile<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="lsr"><a href="#lsr" class="headerlink" title="lsr"></a>lsr</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -lsr &lt;args&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：<a href="#ls">ls</a> 命令的递归版本。类似于 Unix 中的 <code>ls -R</code>。</li></ul><h1 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mkdir &lt;paths&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：接受路径指定的 <code>URI</code> 作为参数，创建这些目录。其行为类似于 Unix 的 <code>mkdir -p</code>，它会创建路径中的各级父目录。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mkdir /user/hadoop/dir1 /user/hadoop/dir2<br>hadoop fs -mkdir hdfs://host1:port1/user/hadoop/dir hdfs://host2:port2/user/hadoop/dir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="movefromLocal"><a href="#movefromLocal" class="headerlink" title="movefromLocal"></a>movefromLocal</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dfs -moveFromLocal &lt;src&gt; &lt;dst&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：输出一个 <code>not implemented</code> 信息。</li></ul><h1 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mv URI [URI …] &lt;dest&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将文件从源路径移动到目标路径。这个命令允许有多个源路径，此时目标路径必须是一个目录。不允许在不同的文件系统间移动文件。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mv /user/hadoop/file1 /user/hadoop/file2<br>hadoop fs -mv hdfs://host:port/file1 hdfs://host:port/file2 hdfs://host:port/file3 hdfs://host:port/dir1<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="put"><a href="#put" class="headerlink" title="put"></a>put</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -put &lt;localsrc&gt; ... &lt;dst&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：从本地文件系统中复制单个或多个源路径到目标文件系统。也支持从标准输入中读取输入写入目标文件系统。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -put localfile /user/hadoop/hadoopfile<br>hadoop fs -put localfile1 localfile2 /user/hadoop/hadoopdir<br>hadoop fs -put localfile hdfs://host:port/hadoop/hadoopfile<br>hadoop fs -put - hdfs://host:port/hadoop/hadoopfile<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rm URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：删除指定的文件。只删除非空目录和文件。请参考 <a href="#rmr">rmr</a> 命令了解递归删除。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rm hdfs://host:port/file /user/hadoop/emptydir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="rmr"><a href="#rmr" class="headerlink" title="rmr"></a>rmr</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rmr URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：<a href="#rm">rm</a> 命令的递归版本。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -rmr /user/hadoop/dir<br>hadoop fs -rmr hdfs://host:port/user/hadoop/dir<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="setrep"><a href="#setrep" class="headerlink" title="setrep"></a>setrep</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -setrep [-R] &lt;path&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：改变一个文件的副本系数。<code>-R</code> 选项用于递归改变目录下所有文件的副本系数。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -setrep -w 3 -R /user/hadoop/dir1<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -stat URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：返回指定路径的统计信息。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -stat path<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -tail [-f] URI<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：将文件尾部 1K 字节的内容输出到 <code>stdout</code>。支持 <code>-f</code> 选项，行为和 Unix 中一致。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -tail pathname<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -test -[ezd] URI<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：</p><ul><li><code>e</code> 检查文件是否存在。如果存在则返回 <code>0</code>。</li><li><code>z</code> 检查文件是否是 0 字节。如果是则返回 <code>0</code>。</li><li><code>d</code> 如果路径是个目录，则返回 <code>1</code>，否则返回 <code>0</code>。</li></ul></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -test -e filename<br></code></pre></td></tr></table></figure></p></li></ul><h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -text &lt;src&gt;<br></code></pre></td></tr></table></figure></p></li><li><strong>说明</strong>：将源文件输出为文本格式。允许的格式是 <code>zip</code> 和 <code>TextRecordInputStream</code>。</li></ul><h1 id="touchz"><a href="#touchz" class="headerlink" title="touchz"></a>touchz</h1><ul><li><p><strong>使用方法</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -touchz URI [URI …]<br></code></pre></td></tr></table></figure></p></li><li><p><strong>说明</strong>：创建一个 0 字节的空文件。</p></li><li><p><strong>示例</strong>：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop -touchz pathname<br></code></pre></td></tr></table></figure></p></li><li><strong>返回值</strong>：成功返回 <code>0</code>，失败返回 <code>-1</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐘Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 使用教程</title>
      <link href="post/c3cf24c7.html"/>
      <url>post/c3cf24c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h1><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS，Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h1 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h1><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。</p><p>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。</p><p>Git 与 SVN 区别点：</p><ol><li>Git 是分布式的，SVN 是集中式的：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li><li>Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</li><li>Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</li><li>Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</li><li>Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><h1 id="Git-的安装和配置"><a href="#Git-的安装和配置" class="headerlink" title="Git 的安装和配置"></a>Git 的安装和配置</h1><p><a href="https://git-scm.com/downloads">Git 下载地址（Linux/Unix，Mac，Windows 等相关平台）</a></p><p><a href="http://git-scm.com/docs">Git 完整命令手册地址</a></p><p><a href="github-git-cheat-sheet.pdf">Git PDF 版命令手册</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">### 配置所有 Git 仓库的 用户名 和 email </span><br>$ git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;youremail@example.com&quot;</span><br><br><span class="hljs-comment">### 配置当前 Git 仓库的 用户名 和 email</span><br>$ git config user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>$ git config user.email <span class="hljs-string">&quot;youremail@example.com&quot;</span><br><br><span class="hljs-comment">### 查看全局配置的 用户名 和 email </span><br>$ git config --global user.name      查看用户名<br>$ git config --global user.email     查看邮箱地址<br><br><span class="hljs-comment">### 查看当前仓库配置的 用户名 和 email </span><br>$ git config user.name      查看用户名<br>$ git config user.email     查看邮箱地址<br><br><span class="hljs-comment"># Git 是分布式版本控制系统，所以，每个机器都配置你的名字和 Email 地址</span><br><span class="hljs-comment"># git config 命令的 --global 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址（不加 --global）。</span><br></code></pre></td></tr></table></figure></p><h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/git/workflow.png" alt></p><p>以上包括一些简单而常用的命令，但是先不关心这些，先来了解下面这 4 个专有名词。</p><ul><li>Workspace：<a href="#工作区">工作区</a></li><li>Index/Stage：<a href="#暂存区">暂存区</a></li><li>Repository：<a href="#本地仓库">仓库区（或本地仓库）</a></li><li>Remote：<a href="#远程仓库">远程仓库</a></li></ul><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p>程序员进行开发改动的地方，是你当前看到的，也是最新的。</p><p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p>.git 目录下的 index 文件，暂存区会记录 <code>git add</code> 添加文件的相关信息（文件名、大小、timestamp...），不保存文件实体，通过 id 指向每个文件实体。可以使用 <code>git status</code> 查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被 git 管理的。</p><p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过 <code>git add</code> 先提交到暂存区，被 git 管理。</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>保存了对象被提交过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p><p><code>git commit</code> 后同步 index 的目录树到本地仓库，方便从下一步通过 <code>git push</code> 同步本地仓库与远程仓库的同步。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>任何对象都是在工作区中诞生和被修改；</li><li>任何修改都是从进入 <code>index</code> 区才开始被版本控制；</li><li>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</li><li>与协作者分享本地的修改，可以把它们 <code>push</code> 到远程仓库来共享。</li></ul><p>下面这幅图更加直接阐述了四个区域之间的关系，可能有些命令不太清楚，下面将会详细介绍。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/git/workflow2.png" alt></p><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/git/command.png" alt></p><h2 id="版本与配置"><a href="#版本与配置" class="headerlink" title="版本与配置"></a>版本与配置</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git                         查看 git 的相关命令（git --<span class="hljs-built_in">help</span>）<br>$ git --version               查看 git 的版本<br>$ git config                  查看 git config 的相关命令<br></code></pre></td></tr></table></figure></p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p>Git 使用 <code>git init</code> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <code>git init</code> 是使用 Git 的第一个命令。</p><p>在执行完成 <code>git init</code> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init                    创建本地仓库<br>$ git <span class="hljs-built_in">clone</span>                   克隆远程仓库<br></code></pre></td></tr></table></figure></p><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add &lt;file&gt;                 如: git add readme.txt<br>$ git commit -m <span class="hljs-string">&quot;description&quot;</span>    如: git commit -m <span class="hljs-string">&quot;add readme.txt&quot;</span><br><br><span class="hljs-comment"># 添加文件到仓库分两步:</span><br><span class="hljs-comment"># 1. add 添加该文件到仓库</span><br><span class="hljs-comment"># 添加许多同种类型的文件，可以使用通配符 *（记得加引号），如: git add &quot;*.txt&quot; 命令就是添加所有 .txt 文件</span><br><span class="hljs-comment"># 2. commit 提交该文件到仓库，description 为你对该次提交的描述说明</span><br><span class="hljs-comment"># 注意: 可以多次 add 不同的文件，commit 可以一次提交多个文件</span><br></code></pre></td></tr></table></figure></p><h2 id="查看仓库目前状态"><a href="#查看仓库目前状态" class="headerlink" title="查看仓库目前状态"></a>查看仓库目前状态</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status                 查看项目是否有修改、添加、未追踪的文件等<br></code></pre></td></tr></table></figure></p><h2 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git diff                   查看工作区（work dict）和暂存区（stage）的区别<br>$ git diff &lt;file&gt;<br>$ git diff --cached          查看暂存区（stage）和分支（master）的区别<br>$ git diff HEAD -- &lt;file&gt;    查看工作区和版本库里面最新版本的区别<br><br><span class="hljs-comment">#如: git diff readme.txt     查看 readme.txt 修改了什么，有什么不同</span><br></code></pre></td></tr></table></figure></p><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br>$ git <span class="hljs-built_in">log</span> --oneline           美化输出信息，每个记录显示为一行，显示 commit_id 前几位数<br>$ git <span class="hljs-built_in">log</span> --pretty=oneline    美化输出信息，每个记录显示为一行，显示完整的 commit_id<br>$ git <span class="hljs-built_in">log</span> --graph --pretty=format:<span class="hljs-string">&#x27;%h -%d %s (%cr)&#x27;</span> --abbrev-commit --<br>$ git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit<br><br><span class="hljs-comment"># 显示从最近到最远的提交日志</span><br><span class="hljs-comment"># 日志输出一大串类似 3628164...882e1e0 的是 commit_id（版本号），和 SVN 不一样，Git 的 commit_id 不是 1，2，3... 递增的数字，而是一个 SHA1 计算出来的一个非常大的数字，用十六进制表示，因为 Git 是分布式的版本控制系统，当多人在同一个版本库里工作，如果大家都用 1，2，3... 作为版本号，那肯定就冲突了</span><br><span class="hljs-comment"># 最后一个会打印出提交的时间等，（HEAD -&gt; master）指向的是当前的版本</span><br><span class="hljs-comment"># 退出查看 log 日志，输入字母 q（英文状态）</span><br></code></pre></td></tr></table></figure></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard HEAD^<br>$ git reset --hard &lt;commit_id&gt;<br><br><span class="hljs-comment"># HEAD        表示当前版本，也就是最新的提交</span><br><span class="hljs-comment"># HEAD^       上一个版本</span><br><span class="hljs-comment"># HEAD^^      上上一个版本</span><br><span class="hljs-comment"># HEAD~100    往上100个版本</span><br><br><span class="hljs-comment"># 回退到 commit_id 对应的那个版本，commit_id 为版本号，只需要前几位就行</span><br></code></pre></td></tr></table></figure></p><h2 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reflog<br><span class="hljs-comment"># 假如我们依次提交了三个版本 a-&gt;b-&gt;c，然后昨天我们从版本 c 回退到了版本 b，今天我们又想要回到版本 c，此时就可以使用 reflog 命令来查找 c 版本的 commit_id，然后使用 reset 命令来进行版本回退</span><br></code></pre></td></tr></table></figure></p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p><strong>丢弃工作区（Working Directory）的修改</strong></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git restore &lt;file&gt;        （建议使用，如: git restore readme.txt）<br>$ git checkout -- &lt;file&gt;<br><span class="hljs-comment"># 命令中 -- 很重要，没有就变成 “切换到另一个分支” 的命令</span><br></code></pre></td></tr></table></figure></p><p><strong>丢弃暂存区（stage/index）的修改</strong></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一步: 把暂存区的修改撤销掉（unstage），重新放回工作区</span><br>$ git restore --staged &lt;file&gt;<br><br><span class="hljs-comment"># 第二步: 撤销工作区的修改</span><br>$ git restore &lt;file&gt;<br></code></pre></td></tr></table></figure></p><p><strong>小结</strong></p><ul><li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git restore &lt;file&gt;</code>。</p></li><li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git restore --staged &lt;file&gt;</code>，就回到了场景 1，第二步按场景 1 操作。</p></li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="#版本回退">版本回退</a>一节，不过前提是没有推送到远程库。</p></li></ul><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git rm &lt;file&gt;<br><br><span class="hljs-comment"># git rm &lt;file&gt; 相当于执行</span><br>- rm &lt;file&gt;<br>- git add &lt;file&gt;<br></code></pre></td></tr></table></figure></p><h1 id="远程仓库-1"><a href="#远程仓库-1" class="headerlink" title="远程仓库"></a>远程仓库</h1><ol><li><p>创建 SSH Key</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br><span class="hljs-comment"># 邮件地址换成你自己的邮件地址，然后一直回车，使用默认值即可，无需设置密码。</span><br></code></pre></td></tr></table></figure></p><p> 在用户主目录下，看看有没有 .ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，创建 SSH Key</p><p> 如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p></li><li><p>登录 GitHub，在 Settings 中找到 SSH 设置项中添加新的 SSH Key，设置任意 title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容</p></li><li><p>关联远程仓库（先有本地仓库）</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add origin git@github.com:username/repo.git<br><span class="hljs-comment"># 后面的地址换成自己的 GitHub 仓库地址</span><br></code></pre></td></tr></table></figure></p></li><li><p>推送到远程仓库</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote       查看远程库信息<br>$ git remote -v    查看远程库详细信息<br>$ git remote rm origin  删除已关联的远程库 origin<br>$ git push -u origin master    <span class="hljs-comment">#第一次推送</span><br>$ git push origin master      推送本地 master 分支到远程库<br>$ git push origin dev         推送本地 dev 分支到远程库<br><span class="hljs-comment">#  除了第一次推送，不需要添加 -u 参数</span><br><br><span class="hljs-comment"># 一个本地库关联多个远程库，例如同时关联 GitHub 和 Gitee:</span><br><span class="hljs-comment"># 1. 先关联GitHub的远程库：（注意:远程库的名称叫 github，不叫 origin）</span><br>$ git remote add github git@github.com:username/repo.git<br><span class="hljs-comment"># 2. 再关联Gitee的远程库：（注意:远程库的名称叫 gitee，不叫 origin）</span><br>$ git remote add gitee git@gitee.com:username/repo.git<br><span class="hljs-comment"># 3. 推送到远程库</span><br>$ git push github master<br>$ git push gitee master<br></code></pre></td></tr></table></figure></p><p> 加上了 <code>-u</code> 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来</p></li><li><p>从远程仓库克隆（先有远程库）</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:username/repo.git<br><span class="hljs-comment"># GitHub 支持多种协议，上面是 ssh 协议，还有 https 协议</span><br></code></pre></td></tr></table></figure></p></li></ol><h1 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch           查看分支列表及当前分支<br>$ git branch dev       创建 dev 分支<br><br>$ git switch dev       切换到 dev 分支（git checkout dev）<br>$ git switch -c dev    创建并切换到新的 dev 分支（git checkout -b dev）<br>$ git switch -c dev origin/dev  创建远程 origin 的 dev 分支到本地并切换到该分支<br><br>$ git branch -d dev    删除 dev 分支<br>$ git branch -D dev    强制删除 dev 分支<br><br>$ git merge dev        合并 dev 分支到当前分支（当有冲突的时候，需要先解决冲突）<br>$ git merge --no-ff -m <span class="hljs-string">&quot;merge with no-ff&quot;</span> dev    合并 dev 分支到当前分支（禁用 Fast forward 合并策略）<br><br>$ git pull  拉取远程分支最新的内容<br>$ git branch --set-upstream-to=origin/dev dev    指定本地 dev 分支与远程 origin/dev 分支的链接<br><br><span class="hljs-comment"># 为本次合并要创建一个新的commit，所以加上 -m 参数，把 commit 描述写进去</span><br><span class="hljs-comment"># 合并分支时，加上 --no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span> --graph    查看分支合并图<br>$ git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit<br><br>$ git stash          保存当前工作区和暂存区的修改状态，切换到其他分支修复 bug 等工作，然后在回来继续工作<br>$ git stash list     查看保存现场的列表<br>$ git stash pop      恢复的同时把 stash 内容也删除<br>$ git stash apply    恢复现场，stash内容并不删除<br>$ git stash drop     删除 stash 内容<br>$ git stash apply stash@&#123;0&#125;    多次 stash，恢复的时候，先用 git stash list 查看，然后恢复指定的 stash<br><span class="hljs-comment"># 通常在 dev 分支开发时，需要有紧急 bug 需要马上处理，保存现在修改的文件等，先修复 bug 后再回来继续工作的情况</span><br><br>$ git cherry-pick &lt;commit&gt;    复制一个特定的提交到当前分支（当前分支的内容需要先 commit，然后冲突的文件需要解决冲突，然后 commit）<br><br>$ git rebase    把本地未 push 的分叉提交历史整理成直线（使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比）<br></code></pre></td></tr></table></figure></p><h1 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到对应的分支 branch 上，查看或者操作对应的标签 tag </span><br>$ git tag                                 查看所有的标签<br>$ git tag &lt;tagname&gt;                       打标签（默认标签是打在最新提交的commit上），如: git tag v1.0<br>$ git tag &lt;tagname&gt; &lt;commit_id&gt;           给对应的 commit_id 打标签<br>$ git tag -a &lt;tagname&gt; -m <span class="hljs-string">&quot;标签说明信息&quot;</span> &lt;commit_id&gt;    创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字<br>$ git tag -d &lt;tagname&gt;                    删除一个本地标签<br>$ git push origin :refs/tags/&lt;tagname&gt;    可以删除一个远程标签<br>$ git show &lt;tagname&gt;                      查看标签信息<br><br>$ git push origin &lt;tagname&gt;               推送一个本地标签到远程<br>$ git push origin --tags                  一次性推送全部尚未推送到远程的本地标签<br><br><span class="hljs-comment"># 删除远程标签，需要先删除本地标签，然后在删除远程标签，如:删除标签 v0.9</span><br>$ git tag -d v0.9<br>$ git push origin :refs/tags/v0.9<br></code></pre></td></tr></table></figure></p><h1 id="Commit-message-格式"><a href="#Commit-message-格式" class="headerlink" title="Commit message 格式"></a>Commit message 格式</h1><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。但是，一般来说，Commit message 应该清晰明了，说明本次提交的目的。</p><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span></span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span></span>): <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">subject</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><p>其中，header 是必需的，body 和 footer 可以省略。</p><p>不管是哪一个部分，任何一行都不得超过 72 个字符（或 100 个字符）。这是为了避免自动换行影响美观。</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>用于说明 commit 的类别，只允许使用下面7个标识。</p><ul><li><code>feat</code>：新功能（feature）</li><li><code>fix</code>：修补 bug</li><li><code>docs</code>：文档（documentation）</li><li><code>style</code>：格式（不影响代码运行的变动）</li><li><code>refactor</code>：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li><code>test</code>：增加测试</li><li><code>chore</code>：构建过程或辅助工具的变动</li></ul><p>如果 type 为 <code>feat</code> 和 <code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p>例如在 Angular，可以是 <code>$location</code>, <code>$browser</code>, <code>$compile</code>, <code>$rootScope</code>, <code>ngHref</code>, <code>ngClick</code>, <code>ngView</code> 等。</p><p>如果你的修改影响了不止一个 <code>scope</code>，你可以使用 <code>*</code> 代替。</p><h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p>subject 是 commit 目的的简短描述，不超过 50 个字符。</p><p>其他注意事项：</p><ul><li>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">More detailed explanatory text, if necessary.  Wrap it to about 72 characters or so. <br><br>Further paragraphs come after blank lines.<br><br><span class="hljs-bullet">-</span> Bullet points are okay, too<br><span class="hljs-bullet">-</span> Use a hanging indent<br></code></pre></td></tr></table></figure></p><p>有三个注意点:</p><ul><li>使用第一人称现在时，比如使用 change 而不是 changed 或 changes。</li><li>永远别忘了第 2 行是空行</li><li>应该说明代码变动的动机，以及与以前行为的对比。</li></ul><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>Footer 部分只用于以下两种情况：</p><h3 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">BREAKING CHANGE: isolate scope bindings definition has changed.<br><br><span class="hljs-code">    To migrate the code follow the example below:</span><br><span class="hljs-code"></span><br><span class="hljs-code">    Before:</span><br><span class="hljs-code"></span><br><span class="hljs-code">    scope: &#123;</span><br><span class="hljs-code">      myAttr: &#x27;attribute&#x27;,</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    After:</span><br><span class="hljs-code"></span><br><span class="hljs-code">    scope: &#123;</span><br><span class="hljs-code">      myAttr: &#x27;@&#x27;,</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></code></pre></td></tr></table></figure></p><h3 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h3><p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Closes #234<br></code></pre></td></tr></table></figure></p><h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">revert: feat(pencil): add &#x27;graphiteWidth&#x27; option<br><br>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.<br></code></pre></td></tr></table></figure></p><p>Body 部分的格式是固定的，必须写成 <code>This reverts commit &amp;lt;hash&gt;.</code>，其中的 hash 是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts 小标题下面。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💠git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26 个字母 26 句话</title>
      <link href="post/32c40e7c.html"/>
      <url>post/32c40e7c.html</url>
      
        <content type="html"><![CDATA[<p><style>#article-container img {width: 50%}</style></p><p>一个字母一张图，一张图一个感悟，一个感悟一份思考，一份思考一个行动。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/a_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/b_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/c_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/d_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/e_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/f_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/g_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/h_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/i_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/j_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/k_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/l_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/m_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/n_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/o_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/p_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/q_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/r_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/s_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/t_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/u_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/v_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/w_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/x_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/y_proverb.png" alt><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/letter/z_proverb.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 💬生活随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💬生活随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作品案例</title>
      <link href="post/8b714264.html"/>
      <url>post/8b714264.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 🖥️作品案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🖥️作品案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言统计分析</title>
      <link href="post/741c153c.html"/>
      <url>post/741c153c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>R 中的统计分析通过使用许多内置函数来执行。这些函数大多数是 R 基础包的一部分。这些函数将 R 向量作为输入和参数，并给出结果。</p><h1 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h1><p>通过求出数据集的和再除以求和数的总量得到平均值</p><p>函数 <code>mean()</code> 用于在 R 语言中计算平均值。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>用于计算 R 中的平均值的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">mean(x, trim = <span class="hljs-number">0</span>, na.rm = <span class="hljs-literal">FALSE</span>, ...)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是输入向量。</li><li><code>trim</code> 用于从排序向量的两端丢弃一些观察结果。</li><li><code>na.rm</code> 用于从输入向量中删除缺失值。</li></ul><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector. </span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Find Mean.</span><br>result.mean &lt;- mean(x)<br>print(result.mean)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8.22</span><br></code></pre></td></tr></table></figure></p><h2 id="应用-trim-选项"><a href="#应用-trim-选项" class="headerlink" title="应用 trim 选项"></a>应用 trim 选项</h2><p>当提供 <code>trim</code> 参数时，向量中的值被排序，然后从计算平均值中减去所需的观察值。</p><p>当 <code>trim = 0.3</code> 时，来自每端的 3 个值将从计算中减去以找到均值。</p><p>在这种情况下，排序的向量是 <code>(-21, -5, 2, 3, 4.2, 7, 8, 12, 18, 54)</code>，并且从用于计算平均值的向量中移除的值是左边的 <code>(-21, -5, 2)</code> 从和右边的 <code>(12, 18, 54)</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Find Mean.</span><br>result.mean &lt;- mean(x, trim = <span class="hljs-number">0.3</span>)<br>print(result.mean)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5.55</span><br></code></pre></td></tr></table></figure></p><h2 id="应用-NA-选项"><a href="#应用-NA-选项" class="headerlink" title="应用 NA 选项"></a>应用 NA 选项</h2><p>如果有缺失值，则平均函数返回 <code>NA</code>。</p><p>要从计算中删除缺少的值，请使用 <code>na.rm = TRUE</code>。这意味着去除 <code>NA</code> 值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector. </span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>, <span class="hljs-literal">NA</span>)<br><br><span class="hljs-comment"># Find mean.</span><br>result.mean &lt;- mean(x)<br>print(result.mean)<br><br><span class="hljs-comment"># Find mean dropping NA values.</span><br>result.mean &lt;- mean(x, na.rm = <span class="hljs-literal">TRUE</span>)<br>print(result.mean)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">NA</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8.22</span><br></code></pre></td></tr></table></figure></p><h1 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h1><p>数据系列中的最中间值称为中位数。在 R 语言中使用 <code>median()</code> 函数来计算此值。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>计算 R 语言中位数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">median(x, na.rm = <span class="hljs-literal">FALSE</span>)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是输入向量。</li><li><code>na.rm</code> 用于从输入向量中删除缺失值。</li></ul><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the vector.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">54</span>, -<span class="hljs-number">21</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Find the median.</span><br>median.result &lt;- median(x)<br>print(median.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5.6</span><br></code></pre></td></tr></table></figure></p><h1 id="众数"><a href="#众数" class="headerlink" title="众数"></a>众数</h1><p>众数是一组数据中出现次数最多的值，不同于平均值和中位数，众数可以同时包含数字和字符数据。R 没有标准的内置函数来计算众数。因此，我们将创建一个用户自定义函数来计算 R 语言中的数据集的众数。该函数将向量作为输入，并将众数值作为输出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the function.</span><br>getmode &lt;- <span class="hljs-keyword">function</span>(v) &#123;<br>   uniqv &lt;- unique(v)<br>   uniqv[which.max(tabulate(match(v, uniqv)))]<br>&#125;<br><br><span class="hljs-comment"># Create the vector with numbers.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Calculate the mode using the user function.</span><br>result &lt;- getmode(v)<br>print(result)<br><br><span class="hljs-comment"># Create the vector with characters.</span><br>charv &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;it&quot;</span>, <span class="hljs-string">&quot;the&quot;</span>, <span class="hljs-string">&quot;it&quot;</span>, <span class="hljs-string">&quot;it&quot;</span>)<br><br><span class="hljs-comment"># Calculate the mode using the user function.</span><br>result &lt;- getmode(charv)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;it&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>回归分析是一种非常广泛使用的统计工具，用于建立两个变量之间的关系模型。这些变量之一称为预测变量，其值通过实验收集。另一个变量称为响应变量，其值从预测变量派生。</p><p>在线性回归中，这两个变量通过方程相关，其中这两个变量的指数（幂）为 1，数学上，线性关系表示当绘制为曲线图时的直线。任何变量的指数不等于1的非线性关系将创建一条曲线。</p><p>线性回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">y = ax + b<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y</code> 是响应变量。</li><li><code>x</code> 是预测变量。</li><li><code>a，b</code> 被称为系数常数。</li></ul><p><strong>建立回归的步骤</strong></p><p>回归的简单例子是当人的身高已知时预测人的体重。为了做到这一点，我们需要有一个人的身高和体重之间的关系。</p><p>创建关系的步骤是：</p><ol><li>进行收集高度和相应重量的观测值的样本的实验。</li><li>使用 R 语言中的 <code>lm()</code> 函数创建关系模型。</li><li>从创建的模型中找到系数，并使用这些创建数学方程</li><li>获得关系模型的摘要以了解预测中的平均误差。也称为残差。</li><li>为了预测新人的体重，使用 R 中的 <code>predict()</code> 函数。</li></ol><p><strong>输入数据</strong></p><p>下面是代表观察的样本数据：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Values of height</span><br>151, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span><br><br><span class="hljs-comment"># Values of weight.</span><br>63, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure></p><h2 id="lm-函数"><a href="#lm-函数" class="headerlink" title="lm()函数"></a>lm()函数</h2><p>此函数创建预测变量和响应变量之间的关系模型。</p><p><strong>语法</strong></p><p>线性回归中 <code>lm()</code> 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">lm(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是表示 <code>x</code> 和 <code>y</code> 之间的关系的符号。</li><li><code>data</code> 是应用公式的向量。</li></ul><p><strong>创建关系模型并获取系数</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-comment"># Apply the lm() function.</span><br>relation &lt;- lm(y ~ x)<br><br>print(relation)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>lm(formula = y ~ x)<br><br>Coefficients:<br>(Intercept)            x<br>   -<span class="hljs-number">38.4551</span>       <span class="hljs-number">0.6746</span><br></code></pre></td></tr></table></figure></p><p><strong>获取相关的摘要</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-comment"># Apply the lm() function.</span><br>relation &lt;- lm(y ~ x)<br><br>print(summary(relation))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>lm(formula = y ~ x)<br><br>Residuals:<br>    Min      <span class="hljs-number">1</span>Q  Median      <span class="hljs-number">3</span>Q     Max <br>-<span class="hljs-number">6.3002</span> -<span class="hljs-number">1.6629</span>  <span class="hljs-number">0.0412</span>  <span class="hljs-number">1.8944</span>  <span class="hljs-number">3.9775</span> <br><br>Coefficients:<br>             Estimate Std. Error t value Pr(&gt;|t|)    <br>(Intercept) -<span class="hljs-number">38.45509</span>    <span class="hljs-number">8.04901</span>  -<span class="hljs-number">4.778</span>  <span class="hljs-number">0.00139</span> ** <br>x             <span class="hljs-number">0.67461</span>    <span class="hljs-number">0.05191</span>  <span class="hljs-number">12.997</span> <span class="hljs-number">1.16e-06</span> ***<br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>Residual standard error: <span class="hljs-number">3.253</span> on <span class="hljs-number">8</span> degrees of freedom<br>Multiple R-squared:  <span class="hljs-number">0.9548</span>,Adjusted R-squared:  <span class="hljs-number">0.9491</span> <br><span class="hljs-built_in">F</span>-statistic: <span class="hljs-number">168.9</span> on <span class="hljs-number">1</span> and <span class="hljs-number">8</span> DF,  p-value: <span class="hljs-number">1.164e-06</span><br></code></pre></td></tr></table></figure></p><h2 id="predict-函数"><a href="#predict-函数" class="headerlink" title="predict() 函数"></a>predict() 函数</h2><p><strong>语法</strong></p><p>线性回归中的 <code>predict()</code> 的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">predict(object, newdata)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>object</code> 是已使用 <code>lm()</code> 函数创建的公式。</li><li><code>newdata</code> 是包含预测变量的新值的向量。</li></ul><p><strong>预测新人的体重</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># The predictor vector.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br><br><span class="hljs-comment"># The resposne vector.</span><br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-comment"># Apply the lm() function.</span><br>relation &lt;- lm(y ~ x)<br><br><span class="hljs-comment"># Find weight of a person with height 170.</span><br>a &lt;- data.frame(x = <span class="hljs-number">170</span>)<br>result &lt;- predict(relation, a)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>       <span class="hljs-number">1</span> <br>76.22869 <br></code></pre></td></tr></table></figure></p><p><strong>以图形方式可视化回归</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the predictor and response variable.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">151</span>, <span class="hljs-number">174</span>, <span class="hljs-number">138</span>, <span class="hljs-number">186</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">152</span>, <span class="hljs-number">131</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">63</span>, <span class="hljs-number">81</span>, <span class="hljs-number">56</span>, <span class="hljs-number">91</span>, <span class="hljs-number">47</span>, <span class="hljs-number">57</span>, <span class="hljs-number">76</span>, <span class="hljs-number">72</span>, <span class="hljs-number">62</span>, <span class="hljs-number">48</span>)<br>relation &lt;- lm(y ~ x)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;linear_regression.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>plot(y, x, col = <span class="hljs-string">&quot;blue&quot;</span>, main = <span class="hljs-string">&quot;Height &amp; Weight Regression&quot;</span>, abline(lm(x ~ y)), cex = <span class="hljs-number">1.3</span>, pch = <span class="hljs-number">16</span>, xlab = <span class="hljs-string">&quot;Weight in Kg&quot;</span>, ylab = <span class="hljs-string">&quot;Height in cm&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/linear_regression.png" alt></p><h1 id="多元回归"><a href="#多元回归" class="headerlink" title="多元回归"></a>多元回归</h1><p>多元回归是线性回归到两个以上变量之间的关系的延伸。在简单线性关系中，我们有一个预测变量和一个响应变量，但在多元回归中，我们有多个预测变量和一个响应变量。</p><p>多元回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">y = a + b1x1 + b2x2 + ... + bnxn<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y</code> 是响应变量。</li><li><code>a, b1, b2, ..., bn</code> 是系数。</li><li><code>x1, x2, ..., xn</code> 是预测变量。</li></ul><p>我们使用 R 语言中的 <code>lm()</code> 函数创建回归模型。模型使用输入数据确定系数的值。接下来，我们可以使用这些系数来预测给定的一组预测变量的响应变量的值。</p><p><code>lm()</code> 函数函数创建预测变量和响应变量之间的关系模型。</p><p><strong>语法</strong></p><p><code>lm()</code> 函数在多元回归中的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">lm(y ~ x1 + x2 + x3 + ..., data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y ~ x1 + x2 + x3...</code> 是表示响应变量和预测变量之间的关系的符号。</li><li><code>data</code> 是应用公式的向量。</li></ul><p><strong>实例</strong></p><p><strong>输入数据</strong></p><p>考虑在R 语言环境中可用的数据集 <code>mtcars</code> 。它给出了每加仑里程 <code>mpg</code>，气缸排量 <code>disp</code>，马力 <code>hp</code>，汽车重量 <code>wt</code> 和一些其他参数的不同汽车模型之间的比较。</p><p>模型的目标是建立 <code>mpg</code> 作为响应变量与 <code>disp</code>，<code>hp</code> 和 <code>wt</code> 作为预测变量之间的关系。为此，我们从 <code>mtcars</code> 数据集中创建这些变量的子集。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;disp&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                   mpg disp  hp    wt<br>Mazda RX4         <span class="hljs-number">21.0</span>  <span class="hljs-number">160</span> <span class="hljs-number">110</span> <span class="hljs-number">2.620</span><br>Mazda RX4 Wag     <span class="hljs-number">21.0</span>  <span class="hljs-number">160</span> <span class="hljs-number">110</span> <span class="hljs-number">2.875</span><br>Datsun <span class="hljs-number">710</span>        <span class="hljs-number">22.8</span>  <span class="hljs-number">108</span>  <span class="hljs-number">93</span> <span class="hljs-number">2.320</span><br>Hornet <span class="hljs-number">4</span> Drive    <span class="hljs-number">21.4</span>  <span class="hljs-number">258</span> <span class="hljs-number">110</span> <span class="hljs-number">3.215</span><br>Hornet Sportabout <span class="hljs-number">18.7</span>  <span class="hljs-number">360</span> <span class="hljs-number">175</span> <span class="hljs-number">3.440</span><br>Valiant           <span class="hljs-number">18.1</span>  <span class="hljs-number">225</span> <span class="hljs-number">105</span> <span class="hljs-number">3.460</span><br></code></pre></td></tr></table></figure></p><p><strong>创建关系模型并获取系数</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;disp&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br><br><span class="hljs-comment"># Create the relationship model.</span><br>model &lt;- lm(mpg ~ disp + hp + wt, data = input)<br><br><span class="hljs-comment"># Show the model.</span><br>print(model)<br><br><span class="hljs-comment"># Get the Intercept and coefficients as vector elements.</span><br>cat(<span class="hljs-string">&quot;# # # # The Coefficient Values # # # #&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>a &lt;- coef(model)[<span class="hljs-number">1</span>]<br>print(a)<br><br>Xdisp &lt;- coef(model)[<span class="hljs-number">2</span>]<br>Xhp &lt;- coef(model)[<span class="hljs-number">3</span>]<br>Xwt &lt;- coef(model)[<span class="hljs-number">4</span>]<br><br>print(Xdisp)<br>print(Xhp)<br>print(Xwt)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>lm(formula = mpg ~ disp + hp + wt, data = input)<br><br>Coefficients:<br>(Intercept)         disp           hp           wt  <br>  <span class="hljs-number">37.105505</span>    -<span class="hljs-number">0.000937</span>    -<span class="hljs-number">0.031157</span>    -<span class="hljs-number">3.800891</span> <br><br><span class="hljs-comment"># # # # The Coefficient Values # # # #</span><br>(Intercept) <br>   <span class="hljs-number">37.10551</span> <br><br>         disp <br>-<span class="hljs-number">0.0009370091</span><br>         hp <br>-<span class="hljs-number">0.03115655</span> <br>       wt <br>-<span class="hljs-number">3.800891</span> <br></code></pre></td></tr></table></figure></p><p><strong>创建回归模型的方程</strong></p><p>基于上述截距和系数值，我们创建了数学方程。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">Y = a + Xdisp*x1 + Xhp*x2 + Xwt*x3<br>or<br>Y = <span class="hljs-number">37.105505</span> + (-<span class="hljs-number">0.000937</span>)*x1 + (-<span class="hljs-number">0.031157</span>)*x2 + (-<span class="hljs-number">3.800891</span>)*x3<br></code></pre></td></tr></table></figure></p><p><strong>应用方程预测新值</strong></p><p>当提供一组新的位移，马力和重量值时，我们可以使用上面创建的回归方程来预测里程数。对于 <code>disp = 221</code>，<code>hp = 102</code> 和 <code>wt = 2.91</code> 的汽车，预测里程为：</p><p><code>Y = 37.105505 + (-0.000937)*221 + (-0.031157)*102 + (-3.800891)*2.91 = 22.65982</code></p><p><strong>使用 <code>predict()</code> 函数预测</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">x = data.frame(disp = <span class="hljs-number">221</span>, hp = <span class="hljs-number">102</span>, wt = <span class="hljs-number">2.91</span>)<br>result = predict(model, x)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>       <span class="hljs-number">1</span> <br>22.65987<br></code></pre></td></tr></table></figure></p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归是回归模型，其中响应变量（因变量）具有诸如 <code>True/False</code> 或 <code>0/1</code> 的分类值。它实际上基于将其与预测变量相关的数学方程测量二元响应的概率作为响应变量的值。</p><p>逻辑回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">y = <span class="hljs-number">1</span>/(<span class="hljs-number">1</span> + e^-(a + b1x1 + b2x2 + b3x3 + ...))<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>y</code> 是响应变量。</li><li><code>x</code> 是预测变量。</li><li><code>a</code> 和 <code>b</code> 是作为数字常数的系数。</li></ul><p>用于创建回归模型的函数是 <code>glm()</code> 函数。</p><p><strong>语法</strong></p><p>逻辑回归中 <code>glm()</code> 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">glm(formula, data, family)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是表示变量之间的关系的符号。</li><li><code>data</code> 是给出这些变量的值的数据集。</li><li><code>family</code> 是 R 语言对象来指定模型的细节。它的值是二项逻辑回归。</li></ul><p><strong>实例</strong></p><p>内置数据集 <code>mtcars</code> 描述具有各种发动机规格的、不同型号的汽车。在 <code>mtcars</code> 数据集中，传输模式（自动或手动）由 <code>am</code> 列描述，它是一个二进制值 <code>0</code> 或 <code>1</code>。我们可以在列 <code>am</code> 和其他 3 列（<code>hp</code>，<code>wt</code> 和 <code>cyl</code>）之间创建逻辑回归模型。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Select some columns form mtcars.</span><br>input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;cyl&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br><br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                  am   cyl  hp    wt<br>Mazda RX4          <span class="hljs-number">1</span>   <span class="hljs-number">6</span>    <span class="hljs-number">110</span>   <span class="hljs-number">2.620</span><br>Mazda RX4 Wag      <span class="hljs-number">1</span>   <span class="hljs-number">6</span>    <span class="hljs-number">110</span>   <span class="hljs-number">2.875</span><br>Datsun <span class="hljs-number">710</span>         <span class="hljs-number">1</span>   <span class="hljs-number">4</span>     <span class="hljs-number">93</span>   <span class="hljs-number">2.320</span><br>Hornet <span class="hljs-number">4</span> Drive     <span class="hljs-number">0</span>   <span class="hljs-number">6</span>    <span class="hljs-number">110</span>   <span class="hljs-number">3.215</span><br>Hornet Sportabout  <span class="hljs-number">0</span>   <span class="hljs-number">8</span>    <span class="hljs-number">175</span>   <span class="hljs-number">3.440</span><br>Valiant            <span class="hljs-number">0</span>   <span class="hljs-number">6</span>    <span class="hljs-number">105</span>   <span class="hljs-number">3.460</span><br></code></pre></td></tr></table></figure></p><p><strong>创建回归模型</strong></p><p>我们使用 <code>glm()</code> 函数创建回归模型，并得到其摘要进行分析。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;cyl&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>)]<br><br>am.data = glm(formula = am ~ cyl + hp + wt, data = input, family = binomial)<br><br>print(summary(am.data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>glm(formula = am ~ cyl + hp + wt, family = binomial, data = input)<br><br>Deviance Residuals: <br>     Min        <span class="hljs-number">1</span>Q    Median        <span class="hljs-number">3</span>Q       Max  <br>-<span class="hljs-number">2.17272</span>  -<span class="hljs-number">0.14907</span>  -<span class="hljs-number">0.01464</span>   <span class="hljs-number">0.14116</span>   <span class="hljs-number">1.27641</span>  <br><br>Coefficients:<br>            Estimate Std. Error z value Pr(&gt;|z|)  <br>(Intercept) <span class="hljs-number">19.70288</span>    <span class="hljs-number">8.11637</span>   <span class="hljs-number">2.428</span>   <span class="hljs-number">0.0152</span> *<br>cyl          <span class="hljs-number">0.48760</span>    <span class="hljs-number">1.07162</span>   <span class="hljs-number">0.455</span>   <span class="hljs-number">0.6491</span>  <br>hp           <span class="hljs-number">0.03259</span>    <span class="hljs-number">0.01886</span>   <span class="hljs-number">1.728</span>   <span class="hljs-number">0.0840</span> .<br>wt          -<span class="hljs-number">9.14947</span>    <span class="hljs-number">4.15332</span>  -<span class="hljs-number">2.203</span>   <span class="hljs-number">0.0276</span> *<br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>(Dispersion parameter <span class="hljs-keyword">for</span> binomial family taken to be <span class="hljs-number">1</span>)<br><br>    Null deviance: <span class="hljs-number">43.2297</span>  on <span class="hljs-number">31</span>  degrees of freedom<br>Residual deviance:  <span class="hljs-number">9.8415</span>  on <span class="hljs-number">28</span>  degrees of freedom<br>AIC: <span class="hljs-number">17.841</span><br><br>Number of Fisher Scoring iterations: <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></p><p><strong>结论</strong></p><p>在 <code>summary</code> 中，对于变量 <code>cyl</code> 和 <code>hp</code> ，最后一列中的 <code>P</code> 值大于 <code>0.05</code>，我们认为它们对变量 <code>am</code> 的值有贡献是无关紧要的。只有重量 <code>wt</code> 影响该回归模型中的 <code>am</code> 值。</p><h1 id="标准分布"><a href="#标准分布" class="headerlink" title="标准分布"></a>标准分布</h1><p>在来自独立源的数据的随机集合中，通常观察到数据的分布是正常的。这意味着，在绘制水平轴上的变量值和垂直轴上的值的计数的图形时，我们得到钟形曲线。曲线的中心表示数据集的平均值。在图中，<code>50%</code> 的值位于平均值的左侧，另外 <code>50%</code> 位于图表的右侧。这在统计学中被称为正态分布。</p><p>R 语言有四个内置函数来产生正态分布。它们描述如下：</p><p><strong>语法</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">dnorm(x, mean, sd)<br>pnorm(x, mean, sd)<br>qnorm(p, mean, sd)<br>rnorm(n, mean, sd)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是数字的向量。</li><li><code>P</code> 是概率的向量。</li><li><code>n</code> 是观察的数量（样本大小）。</li><li><code>mean</code> 是样本数据的平均值。它的默认值为 <code>0</code>。</li><li><code>sd</code> 是标准偏差。它的默认值为 <code>1</code>。</li></ul><h2 id="dnorm"><a href="#dnorm" class="headerlink" title="dnorm()"></a>dnorm()</h2><p>该函数给出给定平均值和标准偏差在每个点的概率分布的高度。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of numbers between -10 and 10 incrementing by 0.1.</span><br>x &lt;- seq(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, by = <span class="hljs-number">.1</span>)<br><br><span class="hljs-comment"># Choose the mean as 2.5 and standard deviation as 0.5.</span><br>y &lt;- dnorm(x, mean = <span class="hljs-number">2.5</span>, sd = <span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;dnorm.png&quot;</span>)<br><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/dnorm.png" alt></p><h2 id="pnorm"><a href="#pnorm" class="headerlink" title="pnorm()"></a>pnorm()</h2><p>该函数给出正态分布随机数的概率小于给定数的值。它也被称为“累积分布函数”。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of numbers between -10 and 10 incrementing by 0.2.</span><br>x &lt;- seq(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, by = <span class="hljs-number">.2</span>)<br> <br><span class="hljs-comment"># Choose the mean as 2.5 and standard deviation as 2. </span><br>y &lt;- pnorm(x, mean = <span class="hljs-number">2.5</span>, sd = <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pnorm.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph.</span><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/pnorm.png" alt></p><h2 id="qnorm"><a href="#qnorm" class="headerlink" title="qnorm()"></a>qnorm()</h2><p>该函数采用概率值，并给出累积值与概率值匹配的数字。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of probability values incrementing by 0.02.</span><br>x &lt;- seq(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, by = <span class="hljs-number">0.02</span>)<br><br><span class="hljs-comment"># Choose the mean as 2 and standard deviation as 3.</span><br>y &lt;- qnorm(x, mean = <span class="hljs-number">2</span>, sd = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;qnorm.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph.</span><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/qnorm.png" alt></p><h2 id="rnorm"><a href="#rnorm" class="headerlink" title="rnorm()"></a>rnorm()</h2><p>此函数用于生成分布正常的随机数。它将样本大小作为输入，并生成许多随机数。我们绘制一个直方图来显示生成的数字的分布。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sample of 50 numbers which are normally distributed.</span><br>y &lt;- rnorm(<span class="hljs-number">50</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;rnorm.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the histogram for this sample.</span><br>hist(y, main = <span class="hljs-string">&quot;Normal DIstribution&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/rnorm.png" alt></p><h1 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h1><p>二项分布模型处理在一系列实验中仅发现两个可能结果的事件的成功概率。例如，掷硬币总是给出正或反。在二项分布期间估计在 <code>10</code> 次重复抛掷硬币中精确找到 <code>3</code> 个正的概率。</p><p>R 语言有四个内置函数来生成二项分布。它们描述如下：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">dbinom(x, size, prob)<br>pbinom(x, size, prob)<br>qbinom(p, size, prob)<br>rbinom(n, size, prob)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是数字的向量。</li><li><code>P</code> 是概率向量。</li><li><code>n</code> 是观察的数量。</li><li><code>size</code> 是试验的数量。</li><li><code>prob</code> 是每个试验成功的概率。</li></ul><h2 id="dbinom"><a href="#dbinom" class="headerlink" title="dbinom()"></a>dbinom()</h2><p>该函数给出每个点的概率密度分布。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sample of 50 numbers which are incremented by 1.</span><br>x &lt;- seq(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>, by = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Create the binomial distribution.</span><br>y &lt;- dbinom(x, <span class="hljs-number">50</span>, <span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;dbinom.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph for this sample.</span><br>plot(x, y)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/dbinom.png" alt></p><h2 id="pbinom"><a href="#pbinom" class="headerlink" title="pbinom()"></a>pbinom()</h2><p>此函数给出事件的累积概率。它是表示概率的单个值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Probability of getting 26 or less heads from a 51 tosses of a coin.</span><br>x &lt;- pbinom(<span class="hljs-number">26</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.5</span>)<br>print(x)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0.610116</span><br></code></pre></td></tr></table></figure></p><h2 id="qbinom"><a href="#qbinom" class="headerlink" title="qbinom()"></a>qbinom()</h2><p>该函数采用概率值，并给出累积值与概率值匹配的数字。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># How many heads will have a probability of 0.25 will come out when a coin is tossed 51 times.</span><br>x &lt;- qbinom(<span class="hljs-number">0.25</span>, <span class="hljs-number">51</span>, <span class="hljs-number">1</span>/<span class="hljs-number">2</span>)<br>print(x)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">23</span><br></code></pre></td></tr></table></figure></p><h2 id="rbinom"><a href="#rbinom" class="headerlink" title="rbinom()"></a>rbinom()</h2><p>该函数从给定样本产生给定概率的所需数量的随机值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Find 8 random values from a sample of 150 with probability of 0.4.</span><br>x &lt;- rbinom(<span class="hljs-number">8</span>, <span class="hljs-number">150</span>, <span class="hljs-number">.4</span>)<br>print(x)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">63</span> <span class="hljs-number">62</span> <span class="hljs-number">64</span> <span class="hljs-number">54</span> <span class="hljs-number">54</span> <span class="hljs-number">47</span> <span class="hljs-number">57</span> <span class="hljs-number">59</span><br></code></pre></td></tr></table></figure></p><h1 id="泊松回归"><a href="#泊松回归" class="headerlink" title="泊松回归"></a>泊松回归</h1><p>泊松回归（Poisson regression）是用来为计数资料和列联表建模的一种回归分析，其中响应变量是计数而不是分数的形式。</p><p>例如，在一个足球系列赛中出线或获胜的次数。此外，响应变量的值遵循泊松分布。</p><p>泊松回归的一般数学方程为：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">log</span>(y) = a + b1x1 + b2x2 + bnxn ...<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code>​ 是预测变量。</li><li><code>y</code> ​是响应变量。</li><li>​<code>a</code> ​和 ​<code>b</code> ​是数字系数。</li></ul><p>用于创建泊松回归模型的函数是​ <code>glm()​</code> 函数。</p><p><strong>语法</strong></p><p>在泊松回归中 ​<code>glm()</code>​ 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">glm(formula, data, family)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> ​是表示变量之间的关系的符号。</li><li><code>​data​</code> 是给出这些变量的值的数据集。</li><li><code>​family​</code> 是 R 语言对象来指定模型的细节。它的值是“泊松”的逻辑回归。</li></ul><p><strong>实例</strong></p><p>我们有内置的数据集 <code>​warpbreaks</code>，其描述了羊毛类型 <code>wool</code>（​A​ 或 ​B​）和张力 <code>tension</code>（低，中或高）对每个织机的经纱断裂数量 <code>breaks</code> 的影响。让我们考虑“断裂”作为响应变量，它是断裂次数的计数。羊毛“类型”和“张力”作为预测变量。</p><p><strong>输入数据</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- warpbreaks<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  breaks wool tension<br>1     <span class="hljs-number">26</span>    A       L<br>2     <span class="hljs-number">30</span>    A       L<br>3     <span class="hljs-number">54</span>    A       L<br>4     <span class="hljs-number">25</span>    A       L<br>5     <span class="hljs-number">70</span>    A       L<br>6     <span class="hljs-number">52</span>    A       L<br></code></pre></td></tr></table></figure></p><p><strong>创建回归模型</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs r">output &lt;-glm(formula = breaks ~ wool + tension, data = warpbreaks, family = poisson)<br>print(summary(output))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br>glm(formula = breaks ~ wool + tension, family = poisson, data = warpbreaks)<br><br>Deviance Residuals: <br>    Min       <span class="hljs-number">1</span>Q   Median       <span class="hljs-number">3</span>Q      Max  <br>-<span class="hljs-number">3.6871</span>  -<span class="hljs-number">1.6503</span>  -<span class="hljs-number">0.4269</span>   <span class="hljs-number">1.1902</span>   <span class="hljs-number">4.2616</span>  <br><br>Coefficients:<br>            Estimate Std. Error z value Pr(&gt;|z|)    <br>(Intercept)  <span class="hljs-number">3.69196</span>    <span class="hljs-number">0.04541</span>  <span class="hljs-number">81.302</span>  &lt; <span class="hljs-number">2e-16</span> ***<br>woolB       -<span class="hljs-number">0.20599</span>    <span class="hljs-number">0.05157</span>  -<span class="hljs-number">3.994</span> <span class="hljs-number">6.49e-05</span> ***<br>tensionM    -<span class="hljs-number">0.32132</span>    <span class="hljs-number">0.06027</span>  -<span class="hljs-number">5.332</span> <span class="hljs-number">9.73e-08</span> ***<br>tensionH    -<span class="hljs-number">0.51849</span>    <span class="hljs-number">0.06396</span>  -<span class="hljs-number">8.107</span> <span class="hljs-number">5.21e-16</span> ***<br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>(Dispersion parameter <span class="hljs-keyword">for</span> poisson family taken to be <span class="hljs-number">1</span>)<br><br>    Null deviance: <span class="hljs-number">297.37</span>  on <span class="hljs-number">53</span>  degrees of freedom<br>Residual deviance: <span class="hljs-number">210.39</span>  on <span class="hljs-number">50</span>  degrees of freedom<br>AIC: <span class="hljs-number">493.06</span><br><br>Number of Fisher Scoring iterations: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></p><p>在 <code>summary</code> 中，我们查找最后一列中的 <code>​p</code> ​值小于​ <code>0.05</code>​，以考虑预测变量对响应变量的影响。如图所示，具有张力类型 <code>​M</code> ​和​ <code>H</code>​ 的羊毛类型 ​<code>B</code> ​对断裂计数有影响。</p><h1 id="协方差分析"><a href="#协方差分析" class="headerlink" title="协方差分析"></a>协方差分析</h1><p>我们使用回归分析创建模型，描述变量在预测变量对响应变量的影响。有时，如果我们有一个类别变量，如 <code>Yes/No</code> 或 <code>Male/Female</code> 等。简单的回归分析为分类变量的每个值提供多个结果。在这种情况下，我们可以通过将分类变量与预测变量一起使用并比较分类变量的每个级别的回归线来研究分类变量的效果。这样的分析被称为协方差分析，也称为 ANCOVA。</p><p><strong>实例</strong></p><p>考虑在 R 语言中内置的数据集 <code>mtcars</code> 。在其中我们观察到字段 <code>am</code> 表示传输的类型（自动或手动）。它是值为 <code>0/1</code> 的分类变量。汽车的每加仑英里数 <code>mpg</code> 也可以取决于马力 <code>hp</code> 的值。</p><p>我们研究 <code>am</code> 的值对 <code>mpg</code> 和 <code>hp</code> 之间回归的影响。它是通过使用 <code>aov()</code> 函数，然后使用 <code>anova()</code> 函数来比较多个回归来完成的。</p><p><strong>输入数据</strong></p><p>从数据集 <code>mtcars</code> 创建一个包含字段 <code>mpg</code>，<code>hp</code> 和 <code>am</code> 的数据框。这里我们取 <code>mpg</code> 作为响应变量，<code>hp</code> 作为预测变量，<code>am</code> 作为分类变量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;hp&quot;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                  am  mpg  hp<br>Mazda RX4          <span class="hljs-number">1</span> <span class="hljs-number">21.0</span> <span class="hljs-number">110</span><br>Mazda RX4 Wag      <span class="hljs-number">1</span> <span class="hljs-number">21.0</span> <span class="hljs-number">110</span><br>Datsun <span class="hljs-number">710</span>         <span class="hljs-number">1</span> <span class="hljs-number">22.8</span>  <span class="hljs-number">93</span><br>Hornet <span class="hljs-number">4</span> Drive     <span class="hljs-number">0</span> <span class="hljs-number">21.4</span> <span class="hljs-number">110</span><br>Hornet Sportabout  <span class="hljs-number">0</span> <span class="hljs-number">18.7</span> <span class="hljs-number">175</span><br>Valiant            <span class="hljs-number">0</span> <span class="hljs-number">18.1</span> <span class="hljs-number">105</span><br></code></pre></td></tr></table></figure></p><p><strong>协方差分析</strong></p><p>我们创建一个回归模型，以 <code>hp</code> 作为预测变量，<code>mpg</code> 作为响应变量，考虑 <code>am</code> 和 <code>hp</code> 之间的相互作用。</p><p><strong>模型与分类变量和预测变量之间的相互作用</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the dataset.</span><br>input &lt;- mtcars<br><br><span class="hljs-comment"># Create the regression model.</span><br>result &lt;- aov(mpg ~ hp * am, data = input)<br>print(summary(result))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>            Df Sum Sq Mean Sq <span class="hljs-built_in">F</span> value   Pr(&gt;<span class="hljs-built_in">F</span>)    <br>hp           <span class="hljs-number">1</span>  <span class="hljs-number">678.4</span>   <span class="hljs-number">678.4</span>  <span class="hljs-number">77.391</span> <span class="hljs-number">1.50e-09</span> ***<br>am           <span class="hljs-number">1</span>  <span class="hljs-number">202.2</span>   <span class="hljs-number">202.2</span>  <span class="hljs-number">23.072</span> <span class="hljs-number">4.75e-05</span> ***<br>hp:am        <span class="hljs-number">1</span>    <span class="hljs-number">0.0</span>     <span class="hljs-number">0.0</span>   <span class="hljs-number">0.001</span>    <span class="hljs-number">0.981</span>    <br>Residuals   <span class="hljs-number">28</span>  <span class="hljs-number">245.4</span>     <span class="hljs-number">8.8</span>                     <br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>这个结果表明，马力 <code>hp</code> 和传输类型 <code>am</code> 对每加仑的英里 <code>mpg</code> 有显着的影响，因为两种情况下的 <code>P</code> 值都小于 <code>0.05</code>。但是这两个变量之间的相互作用不显着，因为 <code>hp:am</code> 的 <code>P</code> 值大于 <code>0.05</code>。</p><p><strong>没有分类变量和预测变量之间相互作用的模型</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the dataset.</span><br>input &lt;- mtcars<br><br><span class="hljs-comment"># Create the regression model.</span><br>result &lt;- aov(mpg ~ hp + am, data = input)<br>print(summary(result))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>            Df Sum Sq Mean Sq <span class="hljs-built_in">F</span> value   Pr(&gt;<span class="hljs-built_in">F</span>)    <br>hp           <span class="hljs-number">1</span>  <span class="hljs-number">678.4</span>   <span class="hljs-number">678.4</span>   <span class="hljs-number">80.15</span> <span class="hljs-number">7.63e-10</span> ***<br>am           <span class="hljs-number">1</span>  <span class="hljs-number">202.2</span>   <span class="hljs-number">202.2</span>   <span class="hljs-number">23.89</span> <span class="hljs-number">3.46e-05</span> ***<br>Residuals   <span class="hljs-number">29</span>  <span class="hljs-number">245.4</span>     <span class="hljs-number">8.5</span>                     <br>---<br>Signif. codes:  <span class="hljs-number">0</span> ‘***’ <span class="hljs-number">0.001</span> ‘**’ <span class="hljs-number">0.01</span> ‘*’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>这个结果表明，马力 <code>hp</code> 和传输类型 <code>am</code> 对每加仑的英里 <code>mpg</code> 有显着的影响，因为两种情况下的 <code>P</code> 值都小于 <code>0.05</code>。</p><p><strong>比较两个模型</strong></p><p>现在我们可以比较两个模型来得出结论，变量的相互作用是否真正重要。为此，我们使用 <code>anova()</code> 函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the dataset.</span><br>input &lt;- mtcars<br><br><span class="hljs-comment"># Create the regression models.</span><br>result1 &lt;- aov(mpg ~ hp * am, data = input)<br>result2 &lt;- aov(mpg ~ hp + am, data = input)<br><br><span class="hljs-comment"># Compare the two models.</span><br>print(anova(result1, result2))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Analysis of Variance Table<br><br>Model <span class="hljs-number">1</span>: mpg ~ hp * am<br>Model <span class="hljs-number">2</span>: mpg ~ hp + am<br>  Res.Df    RSS Df  Sum of Sq     <span class="hljs-built_in">F</span> Pr(&gt;<span class="hljs-built_in">F</span>)<br>1     <span class="hljs-number">28</span> <span class="hljs-number">245.43</span>                           <br>2     <span class="hljs-number">29</span> <span class="hljs-number">245.44</span> -<span class="hljs-number">1</span> -<span class="hljs-number">0.0052515</span> <span class="hljs-number">6e-04</span> <span class="hljs-number">0.9806</span><br></code></pre></td></tr></table></figure></p><p>由于 <code>P</code> 值大于 <code>0.05</code>，我们得出结论，马力 <code>hp</code> 和传播类型 <code>am</code> 之间的相互作用不显着。因此，在汽车和手动变速器模式下，每加仑的里程将以类似的方式取决于汽车的马力。</p><h1 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h1><p>时间序列是将统一统计值按照时间发生的先后顺序来进行排列，时间序列分析的主要目的是根据已有数据对未来进行预测。</p><p>一个稳定的时间序列中常常包含两个部分，那么就是：有规律的时间序列 + 噪声。所以，在以下的方法中，主要的目的就是去过滤噪声值，让我们的时间序列更加的有分析意义。</p><p><strong>语法</strong></p><p>时间序列分析中 <code>ts()</code> 函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">timeseries.object.name &lt;- ts(data, start, end, frequency)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>data</code> 是包含在时间序列中使用的值的向量或矩阵。</li><li><code>start</code> 以时间序列指定第一次观察的开始时间。</li><li><code>end</code> 指定时间序列中最后一次观测的结束时间。</li><li><code>frequency</code> 指定每单位时间的观测数。</li></ul><p>除了参数 <code>data</code>，所有其他参数是可选的。</p><p><strong>时间序列的预处理</strong></p><ol><li><p>平稳性检验</p><p> 拿到一个时间序列之后，我们首先要对其稳定性进行判断，只有非白噪声的稳定性时间序列才有分析的意义以及预测未来数据的价值。</p><p> 所谓平稳，是指统计值在一个常数上下波动并且波动范围是有界限的。如果有明显的趋势或者周期性，那么就是不稳定的。一般判断有三种方法：</p><ul><li>画出时间序列的趋势图，看趋势判断</li><li>画自相关图和偏相关图，平稳时间序列的自相关图和偏相关图，要么拖尾，要么截尾。</li><li><p>检验序列中是否存在单位根，如果存在单位根，就是非平稳时间序列。</p><p>在 R 语言中，<code>DF</code> 检测是一种检测稳定性的方法，如果得出的 <code>P</code> 值小于临界值，则认为是数列是稳定的。</p></li></ul></li><li><p>白噪声检验</p><p> 白噪声序列，又称为纯随机性序列，序列的各个值之间没有任何的相关关系，序列在进行无序的随机波动，可以终止对该序列的分析，因为从白噪声序列中是提取不到任何有价值的信息的。</p></li><li><p>平稳时间序列的参数特点</p><p> 均值和方差为常数，并且具有与时间无关的自协方差。</p></li></ol><p><strong>时间序列建模步骤</strong></p><ol><li><p>拿到被分析的时间序列数据集。</p></li><li><p>对数据绘图，观测其平稳性。若为非平稳时间序列要先进行 <code>d</code> 阶差分运算后化为平稳时间序列，此处的 <code>d</code> 即为 <code>ARIMA(p,d,q)</code> 模型中的 <code>d</code>；若为平稳序列，则用 <code>ARMA(p,q)</code> 模型。所以 <code>ARIMA(p,d,q)</code> 模型区别于 <code>ARMA(p,q)</code> 之处就在于前者的自回归部分的特征多项式含有 <code>d</code> 个单位根。</p></li><li><p>对得到的平稳时间序列分别求得其自相关系数 <code>ACF</code> 和偏自相关系数 <code>PACF</code>，通过对自相关图和偏自相关图的分析，得到最佳的阶层 <code>p</code> 和阶数 <code>q</code>。由以上得到的 <code>d</code>、<code>q</code>、<code>p</code>，得到 <code>ARIMA</code> 模型。</p></li><li><p>模型诊断。进行诊断分析，以证实所得模型确实与所观察到的数据特征相符。若不相符，重新回到第 3 步。</p></li></ol><p><strong>实例</strong></p><p>考虑从 2012 年 1 月开始的一个地方的年降雨量细节。我们创建一个 R 时间序列对象为期 12 个月并绘制它。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the data points in form of a R vector.</span><br>rainfall &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">799</span>, <span class="hljs-number">1174.8</span>, <span class="hljs-number">865.1</span>, <span class="hljs-number">1334.6</span>, <span class="hljs-number">635.4</span>, <span class="hljs-number">918.5</span>, <span class="hljs-number">685.5</span>, <span class="hljs-number">998.6</span>, <span class="hljs-number">784.2</span>, <span class="hljs-number">985</span>, <span class="hljs-number">882.8</span>, <span class="hljs-number">1071</span>)<br><br><span class="hljs-comment"># Convert it to a time series object.</span><br>rainfall.timeseries &lt;- ts(rainfall, start = <span class="hljs-built_in">c</span>(<span class="hljs-number">2012</span>, <span class="hljs-number">1</span>), frequency = <span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># Print the timeseries data.</span><br>print(rainfall.timeseries)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;rainfall.png&quot;</span>)<br><br><span class="hljs-comment"># Plot a graph of the time series.</span><br>plot(rainfall.timeseries)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>        Jan    Feb    Mar    Apr    May    Jun    Jul    Aug    Sep    Oct    Nov    Dec<br>2012  <span class="hljs-number">799.0</span> <span class="hljs-number">1174.8</span>  <span class="hljs-number">865.1</span> <span class="hljs-number">1334.6</span>  <span class="hljs-number">635.4</span>  <span class="hljs-number">918.5</span>  <span class="hljs-number">685.5</span>  <span class="hljs-number">998.6</span>  <span class="hljs-number">784.2</span>  <span class="hljs-number">985.0</span>  <span class="hljs-number">882.8</span> <span class="hljs-number">1071.0</span><br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/rainfall.png" alt></p><p><strong>不同的时间间隔</strong></p><p><code>ts()</code> 函数中的频率参数值决定了测量数据点的时间间隔。值为 12 表示时间序列为 12 个月。其他值及其含义如下：</p><ul><li><code>frequency = 12</code>：指定一年中每个月的数据点。</li><li><code>frequency = 4</code>：每年的每个季度的数据点。</li><li><code>frequency = 6</code>：每小时的 10 分钟的数据点。</li><li><code>frequency = 24 * 6</code>：将一天的每 10 分钟的数据点固定。</li></ul><p><strong>多时间序列</strong></p><p>我们可以通过将两个系列组合成一个矩阵，在一个图表中绘制多个时间序列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the data points in form of a R vector.</span><br>rainfall1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">799</span>, <span class="hljs-number">1174.8</span>, <span class="hljs-number">865.1</span>, <span class="hljs-number">1334.6</span>, <span class="hljs-number">635.4</span>, <span class="hljs-number">918.5</span>, <span class="hljs-number">685.5</span>, <span class="hljs-number">998.6</span>, <span class="hljs-number">784.2</span>, <span class="hljs-number">985</span>, <span class="hljs-number">882.8</span>, <span class="hljs-number">1071</span>)<br>rainfall2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">655</span>, <span class="hljs-number">1306.9</span>, <span class="hljs-number">1323.4</span>, <span class="hljs-number">1172.2</span>, <span class="hljs-number">562.2</span>, <span class="hljs-number">824</span>, <span class="hljs-number">822.4</span>, <span class="hljs-number">1265.5</span>, <span class="hljs-number">799.6</span>, <span class="hljs-number">1105.6</span>, <span class="hljs-number">1106.7</span>, <span class="hljs-number">1337.8</span>)<br><br><span class="hljs-comment"># Convert them to a matrix.</span><br>combined.rainfall &lt;- matrix(<span class="hljs-built_in">c</span>(rainfall1, rainfall2), nrow = <span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># Convert it to a time series object.</span><br>rainfall.timeseries &lt;- ts(combined.rainfall, start = <span class="hljs-built_in">c</span>(<span class="hljs-number">2012</span>, <span class="hljs-number">1</span>), frequency = <span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># Print the timeseries data.</span><br>print(rainfall.timeseries)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;rainfall_combined.png&quot;</span>)<br><br><span class="hljs-comment"># Plot a graph of the time series.</span><br>plot(rainfall.timeseries, main = <span class="hljs-string">&quot;Multiple Time Series&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>         Series <span class="hljs-number">1</span> Series <span class="hljs-number">2</span><br>Jan <span class="hljs-number">2012</span>    <span class="hljs-number">799.0</span>    <span class="hljs-number">655.0</span><br>Feb <span class="hljs-number">2012</span>   <span class="hljs-number">1174.8</span>   <span class="hljs-number">1306.9</span><br>Mar <span class="hljs-number">2012</span>    <span class="hljs-number">865.1</span>   <span class="hljs-number">1323.4</span><br>Apr <span class="hljs-number">2012</span>   <span class="hljs-number">1334.6</span>   <span class="hljs-number">1172.2</span><br>May <span class="hljs-number">2012</span>    <span class="hljs-number">635.4</span>    <span class="hljs-number">562.2</span><br>Jun <span class="hljs-number">2012</span>    <span class="hljs-number">918.5</span>    <span class="hljs-number">824.0</span><br>Jul <span class="hljs-number">2012</span>    <span class="hljs-number">685.5</span>    <span class="hljs-number">822.4</span><br>Aug <span class="hljs-number">2012</span>    <span class="hljs-number">998.6</span>   <span class="hljs-number">1265.5</span><br>Sep <span class="hljs-number">2012</span>    <span class="hljs-number">784.2</span>    <span class="hljs-number">799.6</span><br>Oct <span class="hljs-number">2012</span>    <span class="hljs-number">985.0</span>   <span class="hljs-number">1105.6</span><br>Nov <span class="hljs-number">2012</span>    <span class="hljs-number">882.8</span>   <span class="hljs-number">1106.7</span><br>Dec <span class="hljs-number">2012</span>   <span class="hljs-number">1071.0</span>   <span class="hljs-number">1337.8</span><br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/rainfall_combined.png" alt></p><h1 id="非线性最小二乘"><a href="#非线性最小二乘" class="headerlink" title="非线性最小二乘"></a>非线性最小二乘</h1><p>当模拟真实世界数据用于回归分析时，我们观察到，很少情况下，模型的方程是给出线性图的线性方程。大多数时候，真实世界数据模型的方程涉及更高程度的数学函数，如 <code>3</code> 的指数或 <code>sin</code> 函数。在这种情况下，模型的图给出了曲线而不是线。线性和非线性回归的目的是调整模型参数的值，以找到最接近您的数据的线或曲线。在找到这些值时，我们将能够以良好的精确度估计响应变量。</p><p>在最小二乘回归中，我们建立了一个回归模型，其中来自回归曲线的不同点的垂直距离的平方和被最小化。我们通常从定义的模型开始，并假设系数的一些值。然后我们应用 R 语言的 <code>nls()</code> 函数获得更准确的值以及置信区间。</p><p><strong>语法</strong></p><p>在 R 语言中创建非线性最小二乘测试的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">nls(formula, data, start)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是包括变量和参数的非线性模型公式。</li><li><code>data</code> 是用于计算公式中变量的数据框。</li><li><code>start</code> 是起始估计的命名列表或命名数字向量。</li></ul><p><strong>实例</strong></p><p>我们将考虑一个假设其系数的初始值的非线性模型。接下来，我们将看到这些假设值的置信区间是什么，以便我们可以判断这些值在模型中有多好。</p><p>所以让我们考虑以下的方程 <code>a = b1*x^2 + b2</code>。</p><p>让我们假设初始系数为 <code>b1 = 1</code> 和 <code>b2 = 3</code>，并将这些值拟合到 <code>nls()</code> 函数中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">1.6</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2.23</span>, <span class="hljs-number">3.71</span>, <span class="hljs-number">3.25</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">3.86</span>, <span class="hljs-number">1.19</span>, <span class="hljs-number">2.21</span>)<br>y &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5.19</span>, <span class="hljs-number">7.43</span>, <span class="hljs-number">6.94</span>, <span class="hljs-number">8.11</span>, <span class="hljs-number">18.75</span>, <span class="hljs-number">14.88</span>, <span class="hljs-number">16.06</span>, <span class="hljs-number">19.12</span>, <span class="hljs-number">3.21</span>, <span class="hljs-number">7.58</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;nls.png&quot;</span>)<br><br><span class="hljs-comment"># Plot these values.</span><br>plot(x, y)<br><br><br><span class="hljs-comment"># Take the assumed values and fit into the model.</span><br>model &lt;- nls(y ~ b1*x^<span class="hljs-number">2</span> + b2, start = <span class="hljs-built_in">list</span>(b1 = <span class="hljs-number">1</span>, b2 = <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># Plot the chart with new data by fitting it to a prediction from 100 data points.</span><br>new.data &lt;- data.frame(x = seq(<span class="hljs-built_in">min</span>(x), <span class="hljs-built_in">max</span>(x), len = <span class="hljs-number">100</span>))<br>lines(new.data$x, predict(model, newdata = new.data))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># Get the sum of the squared residuals.</span><br>print(<span class="hljs-built_in">sum</span>(resid(model)^<span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># Get the confidence intervals on the chosen values of the coefficients.</span><br>print(confint(model))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1.081935</span><br><br>Waiting <span class="hljs-keyword">for</span> profiling to be done...<br>       <span class="hljs-number">2.5</span>%    97.5%<br>b1 <span class="hljs-number">1.137708</span> <span class="hljs-number">1.253135</span><br>b2 <span class="hljs-number">1.497364</span> <span class="hljs-number">2.496484</span><br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/nls.png" alt></p><p>我们可以得出结论，<code>b1</code> 的值更接近 <code>1</code>，而 <code>b2</code> 的值更接近 <code>2</code> 而不是 <code>3</code>。</p><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>决策树是以树的形式表示选择及其结果的图。图中的节点表示事件或选择，并且图的边缘表示决策规则或条件。它主要用于使用R的机器学习和数据挖掘应用程序。</p><p>决策树的使用的例子是：预测电子邮件是垃圾邮件或非垃圾邮件，预测肿瘤癌变，或者基于这些因素预测贷款的信用风险。通常，使用观测数据（也称为训练数据）来创建模型。然后使用一组验证数据来验证和改进模型。R 具有用于创建和可视化决策树的包。对于新的预测变量集合，我们使用此模型来确定 R 包 <code>party</code> 用于创建决策树。</p><p><strong>安装 R 语言包</strong></p><p>在 R 语言控制台中使用以下命令安装软件包。您还必须安装相关软件包（如果有）。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;party&quot;</span>)<br></code></pre></td></tr></table></figure></p><p><code>party</code> 包具有用于创建和分析决策树的函数 <code>ctree()</code>。</p><p><strong>语法</strong></p><p>在 R 中创建决策树的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">ctree(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是描述预测变量和响应变量的公式。</li><li><code>data</code> 是所使用的数据集的名称。</li></ul><p><strong>输入数据</strong></p><p>我们将使用名为 <code>readingSkills</code> 的 R 内置数据集来创建决策树。它描述了某人的 <code>readingSkills</code> 的分数，如果我们知道变量 <code>年龄</code>， <code>shoesize</code>，<code>分数</code>，以及<code>该人是否为母语者</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other dependent packages.</span><br>library(party)<br><br><span class="hljs-comment"># Print some records from data set readingSkills.</span><br>print(head(readingSkills))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  nativeSpeaker age shoeSize    score<br>1           yes   <span class="hljs-number">5</span> <span class="hljs-number">24.83189</span> <span class="hljs-number">32.29385</span><br>2           yes   <span class="hljs-number">6</span> <span class="hljs-number">25.95238</span> <span class="hljs-number">36.63105</span><br>3            no  <span class="hljs-number">11</span> <span class="hljs-number">30.42170</span> <span class="hljs-number">49.60593</span><br>4           yes   <span class="hljs-number">7</span> <span class="hljs-number">28.66450</span> <span class="hljs-number">40.28456</span><br>5           yes  <span class="hljs-number">11</span> <span class="hljs-number">31.88207</span> <span class="hljs-number">55.46085</span><br>6           yes  <span class="hljs-number">10</span> <span class="hljs-number">30.07843</span> <span class="hljs-number">52.83124</span><br></code></pre></td></tr></table></figure></p><p><strong>实例</strong></p><p>我们将使用 <code>ctree()</code> 函数创建决策树并查看其图形。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other dependent packages.</span><br>library(party)<br><br><span class="hljs-comment"># Create the input data frame.</span><br>input.dat &lt;- readingSkills[<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">105</span>), ]<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;decision_tree.png&quot;</span>)<br><br><span class="hljs-comment"># Create the tree.</span><br>output.tree &lt;- ctree(nativeSpeaker ~ age + shoeSize + score, data = input.dat)<br><br><span class="hljs-comment"># Plot the tree.</span><br>plot(output.tree)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下图表：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/decision_tree.png" alt></p><p><strong>结论</strong></p><p>从上面显示的决策树，我们可以得出结论，其 <code>readingSkills</code> 分数低于 <code>38.3</code> 和年龄超过 <code>6</code> 的人不是一个母语者。</p><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><p>在随机森林方法中，创建大量的决策树。每个观察被馈入每个决策树。每个观察的最常见的结果被用作最终输出。新的观察结果被馈入所有的树并且对每个分类模型取多数投票。</p><p>对构建树时未使用的情况进行错误估计。这称为 <code>OOB（袋外）</code> 误差估计，其被提及为百分比。</p><p>R 语言包 <code>randomForest</code> 用于创建随机森林。</p><p><strong>安装 R 包</strong></p><p>在 R 语言控制台中使用以下命令安装软件包。您还必须安装相关软件包（如果有）。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;randomForest&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>包 <code>randomForest</code> 具有函数 <code>randomForest()</code>，用于创建和分析随机森林。</p><p><strong>语法</strong></p><p>在 R 语言中创建随机森林的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">randomForest(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 是描述预测变量和响应变量的公式。</li><li><code>data</code> 是所使用的数据集的名称。</li></ul><p><strong>输入数据</strong></p><p>我们将使用名为 <code>readingSkills</code> 的 R 语言内置数据集来创建决策树。它描述了某人的 <code>readingSkills</code> 的分数，如果我们知道变量 <code>age</code>，<code>shoesize</code>，<code>score</code>，以及<code>该人是否是母语者</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other required packages.</span><br>library(party)<br><br><span class="hljs-comment"># Print some records from data set readingSkills.</span><br>print(head(readingSkills))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  nativeSpeaker age shoeSize    score<br>1           yes   <span class="hljs-number">5</span> <span class="hljs-number">24.83189</span> <span class="hljs-number">32.29385</span><br>2           yes   <span class="hljs-number">6</span> <span class="hljs-number">25.95238</span> <span class="hljs-number">36.63105</span><br>3            no  <span class="hljs-number">11</span> <span class="hljs-number">30.42170</span> <span class="hljs-number">49.60593</span><br>4           yes   <span class="hljs-number">7</span> <span class="hljs-number">28.66450</span> <span class="hljs-number">40.28456</span><br>5           yes  <span class="hljs-number">11</span> <span class="hljs-number">31.88207</span> <span class="hljs-number">55.46085</span><br>6           yes  <span class="hljs-number">10</span> <span class="hljs-number">30.07843</span> <span class="hljs-number">52.83124</span><br></code></pre></td></tr></table></figure></p><p><strong>实例</strong></p><p>我们将使用 <code>randomForest()</code> 函数来创建决策树并查看它的图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the party package. It will automatically load other required packages.</span><br>library(party)<br>library(randomForest)<br><br><span class="hljs-comment"># Create the forest.</span><br>output.forest &lt;- randomForest(nativeSpeaker ~ age + shoeSize + score, data = readingSkills)<br><br><span class="hljs-comment"># View the forest results.</span><br>print(output.forest)<br><br><span class="hljs-comment"># Importance of each predictor.</span><br>print(importance(fit, type = <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>Call:<br> randomForest(formula = nativeSpeaker ~ age + shoeSize + score, data = readingSkills) <br>               Type of random forest: classification<br>                     Number of trees: <span class="hljs-number">500</span><br>No. of variables tried at each split: <span class="hljs-number">1</span><br><br>        OOB estimate of  error rate: <span class="hljs-number">1.5</span>%<br>Confusion matrix:<br>    no yes class.error<br>no  99   1        0.01<br>yes  2  98        0.02<br><br>         MeanDecreaseGini<br>age              13.95406<br>shoeSize         18.91006<br>score            56.73051<br></code></pre></td></tr></table></figure></p><p>结论从上面显示的随机森林，我们可以得出结论，鞋码 <code>shoeSize</code> 和成绩 <code>score</code> 是决定如果某人是母语者或不是母语的重要因素。此外，该模型只有 <code>1%</code> 的误差，这意味着我们可以预测精度为 <code>99%</code>。</p><h1 id="生存分析"><a href="#生存分析" class="headerlink" title="生存分析"></a>生存分析</h1><p>生存分析处理预测特定事件将要发生的时间。它也被称为故障时间分析或分析死亡时间。例如，预测患有癌症的人将存活的天数或预测机械系统将失败的时间。</p><p>命名为 <code>survival</code> 的 R 语言包用于进行生存分析。此包包含函数 <code>Surv()</code>，它将输入数据作为 R 语言公式，并在选择的变量中创建一个生存对象用于分析。然后我们使用函数 <code>survfit()</code> 创建一个分析图。</p><p><strong>安装软件包</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;survival&quot;</span>)<br></code></pre></td></tr></table></figure></p><p><strong>语法</strong></p><p>在 R 语言中创建生存分析的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">Surv(time, event)<br>survfit(formula)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>time</code> 是直到事件发生的跟踪时间。</li><li><code>event</code> 指示预期事件的发生的状态。</li><li><code>formula</code> 是预测变量之间的关系。</li></ul><p><strong>实例</strong></p><p>我们将考虑在上面安装的 <code>survival</code> 包中存在的名为 <code>pbc</code> 的数据集。它描述了关于受肝原发性胆汁性肝硬化 <code>PBC</code> 影响的人的生存数据点。在数据集中存在的许多列中，我们主要关注字段 <code>time</code> 和 <code>status</code>。时间表示在接受肝移植或患者死亡的患者的登记和事件的较早之间的天数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the library.</span><br>library(<span class="hljs-string">&quot;survival&quot;</span>)<br><br><span class="hljs-comment"># Print first few rows.</span><br>print(head(pbc))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id time status trt      age sex ascites hepato spiders edema bili chol albumin copper alk.phos    ast trig platelet protime stage<br>1  <span class="hljs-number">1</span>  <span class="hljs-number">400</span>      <span class="hljs-number">2</span>   <span class="hljs-number">1</span> <span class="hljs-number">58.76523</span>   f       <span class="hljs-number">1</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">1.0</span> <span class="hljs-number">14.5</span>  <span class="hljs-number">261</span>    <span class="hljs-number">2.60</span>    <span class="hljs-number">156</span>   <span class="hljs-number">1718.0</span> <span class="hljs-number">137.95</span>  <span class="hljs-number">172</span>      <span class="hljs-number">190</span>    <span class="hljs-number">12.2</span>     <span class="hljs-number">4</span><br>2  <span class="hljs-number">2</span> <span class="hljs-number">4500</span>      <span class="hljs-number">0</span>   <span class="hljs-number">1</span> <span class="hljs-number">56.44627</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">1.1</span>  <span class="hljs-number">302</span>    <span class="hljs-number">4.14</span>     <span class="hljs-number">54</span>   <span class="hljs-number">7394.8</span> <span class="hljs-number">113.52</span>   <span class="hljs-number">88</span>      <span class="hljs-number">221</span>    <span class="hljs-number">10.6</span>     <span class="hljs-number">3</span><br>3  <span class="hljs-number">3</span> <span class="hljs-number">1012</span>      <span class="hljs-number">2</span>   <span class="hljs-number">1</span> <span class="hljs-number">70.07255</span>   m       <span class="hljs-number">0</span>      <span class="hljs-number">0</span>       <span class="hljs-number">0</span>   <span class="hljs-number">0.5</span>  <span class="hljs-number">1.4</span>  <span class="hljs-number">176</span>    <span class="hljs-number">3.48</span>    <span class="hljs-number">210</span>    <span class="hljs-number">516.0</span>  <span class="hljs-number">96.10</span>   <span class="hljs-number">55</span>      <span class="hljs-number">151</span>    <span class="hljs-number">12.0</span>     <span class="hljs-number">4</span><br>4  <span class="hljs-number">4</span> <span class="hljs-number">1925</span>      <span class="hljs-number">2</span>   <span class="hljs-number">1</span> <span class="hljs-number">54.74059</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">0.5</span>  <span class="hljs-number">1.8</span>  <span class="hljs-number">244</span>    <span class="hljs-number">2.54</span>     <span class="hljs-number">64</span>   <span class="hljs-number">6121.8</span>  <span class="hljs-number">60.63</span>   <span class="hljs-number">92</span>      <span class="hljs-number">183</span>    <span class="hljs-number">10.3</span>     <span class="hljs-number">4</span><br>5  <span class="hljs-number">5</span> <span class="hljs-number">1504</span>      <span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">38.10541</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">3.4</span>  <span class="hljs-number">279</span>    <span class="hljs-number">3.53</span>    <span class="hljs-number">143</span>    <span class="hljs-number">671.0</span> <span class="hljs-number">113.15</span>   <span class="hljs-number">72</span>      <span class="hljs-number">136</span>    <span class="hljs-number">10.9</span>     <span class="hljs-number">3</span><br>6  <span class="hljs-number">6</span> <span class="hljs-number">2503</span>      <span class="hljs-number">2</span>   <span class="hljs-number">2</span> <span class="hljs-number">66.25873</span>   f       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>       <span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>  <span class="hljs-number">0.8</span>  <span class="hljs-number">248</span>    <span class="hljs-number">3.98</span>     <span class="hljs-number">50</span>    <span class="hljs-number">944.0</span>  <span class="hljs-number">93.00</span>   <span class="hljs-number">63</span>       <span class="hljs-literal">NA</span>    <span class="hljs-number">11.0</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><p>从上述数据，我们正在考虑分析的时间和状态。</p><p><strong>应用 <code>Surv()</code> 和 <code>survfit()</code> 函数</strong></p><p>现在我们继续应用 <code>Surv()</code> 函数到上面的数据集，并创建一个将显示趋势图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the library.</span><br>library(<span class="hljs-string">&quot;survival&quot;</span>)<br><br><span class="hljs-comment"># Create the survival object. </span><br>survfit(Surv(pbc$time, pbc$status == <span class="hljs-number">2</span>) ~ <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;survival.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the graph. </span><br>plot(survfit(Surv(pbc$time, pbc$status == <span class="hljs-number">2</span>) ~ <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果及图表：</span><br><br>Call: survfit(formula = Surv(pbc$time, pbc$status == <span class="hljs-number">2</span>) ~ <span class="hljs-number">1</span>)<br><br>      n  events  median <span class="hljs-number">0.95L</span>CL <span class="hljs-number">0.95</span>UCL <br>    <span class="hljs-number">418</span>     <span class="hljs-number">161</span>    <span class="hljs-number">3395</span>    <span class="hljs-number">3090</span>    <span class="hljs-number">3853</span> <br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_statistics/survival.png" alt></p><p>上图中的趋势有助于我们预测在特定天数结束时的生存概率。</p><h1 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a>卡方检验</h1><p>卡方检验是一种确定两个分类变量之间是否存在显着相关性的统计方法。这两个变量应该来自相同的人口，他们应该是类似：<code>是/否</code>，<code>男/女</code>，<code>红/绿</code> 等。</p><p>例如，我们可以建立一个观察人们的冰淇淋购买模式的数据集，并尝试将一个人的性别与他们喜欢的冰淇淋的味道相关联。如果发现相关性，我们可以通过了解访问的人的性别的数量来计划适当的味道库存。</p><p><strong>语法</strong></p><p>用于执行卡方检验的函数是 <code>chisq.test()</code>。</p><p>在 R 语言中创建卡方检验的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">chisq.test(data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>data</code> 是以包含观察中变量的计数值的表的形式的数据。</li></ul><p><strong>实例</strong></p><p>我们将在 <code>MASS</code> 包中获取 <code>Cars93</code> 数据，代表 1993 年不同型号汽车的销售额。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&quot;MASS&quot;</span>)<br>print(str(Cars93))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br><span class="hljs-string">&#x27;data.frame&#x27;</span>:<span class="hljs-number">93</span> obs. of  <span class="hljs-number">27</span> variables:<br> $ Manufacturer      : Factor w/ <span class="hljs-number">32</span> levels <span class="hljs-string">&quot;Acura&quot;</span>,<span class="hljs-string">&quot;Audi&quot;</span>,..: <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> ...<br> $ Model             : Factor w/ <span class="hljs-number">93</span> levels <span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;190E&quot;</span>,<span class="hljs-string">&quot;240&quot;</span>,..: <span class="hljs-number">49</span> <span class="hljs-number">56</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">24</span> <span class="hljs-number">54</span> <span class="hljs-number">74</span> <span class="hljs-number">73</span> <span class="hljs-number">35</span> ...<br> $ Type              : Factor w/ <span class="hljs-number">6</span> levels <span class="hljs-string">&quot;Compact&quot;</span>,<span class="hljs-string">&quot;Large&quot;</span>,..: <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> ...<br> $ Min.Price         : num  <span class="hljs-number">12.9</span> <span class="hljs-number">29.2</span> <span class="hljs-number">25.9</span> <span class="hljs-number">30.8</span> <span class="hljs-number">23.7</span> <span class="hljs-number">14.2</span> <span class="hljs-number">19.9</span> <span class="hljs-number">22.6</span> <span class="hljs-number">26.3</span> <span class="hljs-number">33</span> ...<br> $ Price             : num  <span class="hljs-number">15.9</span> <span class="hljs-number">33.9</span> <span class="hljs-number">29.1</span> <span class="hljs-number">37.7</span> <span class="hljs-number">30</span> <span class="hljs-number">15.7</span> <span class="hljs-number">20.8</span> <span class="hljs-number">23.7</span> <span class="hljs-number">26.3</span> <span class="hljs-number">34.7</span> ...<br> $ Max.Price         : num  <span class="hljs-number">18.8</span> <span class="hljs-number">38.7</span> <span class="hljs-number">32.3</span> <span class="hljs-number">44.6</span> <span class="hljs-number">36.2</span> <span class="hljs-number">17.3</span> <span class="hljs-number">21.7</span> <span class="hljs-number">24.9</span> <span class="hljs-number">26.3</span> <span class="hljs-number">36.3</span> ...<br> $ MPG.city          : int  <span class="hljs-number">25</span> <span class="hljs-number">18</span> <span class="hljs-number">20</span> <span class="hljs-number">19</span> <span class="hljs-number">22</span> <span class="hljs-number">22</span> <span class="hljs-number">19</span> <span class="hljs-number">16</span> <span class="hljs-number">19</span> <span class="hljs-number">16</span> ...<br> $ MPG.highway       : int  <span class="hljs-number">31</span> <span class="hljs-number">25</span> <span class="hljs-number">26</span> <span class="hljs-number">26</span> <span class="hljs-number">30</span> <span class="hljs-number">31</span> <span class="hljs-number">28</span> <span class="hljs-number">25</span> <span class="hljs-number">27</span> <span class="hljs-number">25</span> ...<br> $ AirBags           : Factor w/ <span class="hljs-number">3</span> levels <span class="hljs-string">&quot;Driver &amp; Passenger&quot;</span>,..: <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> ...<br> $ DriveTrain        : Factor w/ <span class="hljs-number">3</span> levels <span class="hljs-string">&quot;4WD&quot;</span>,<span class="hljs-string">&quot;Front&quot;</span>,..: <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> ...<br> $ Cylinders         : Factor w/ <span class="hljs-number">6</span> levels <span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,..: <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> ...<br> $ EngineSize        : num  <span class="hljs-number">1.8</span> <span class="hljs-number">3.2</span> <span class="hljs-number">2.8</span> <span class="hljs-number">2.8</span> <span class="hljs-number">3.5</span> <span class="hljs-number">2.2</span> <span class="hljs-number">3.8</span> <span class="hljs-number">5.7</span> <span class="hljs-number">3.8</span> <span class="hljs-number">4.9</span> ...<br> $ Horsepower        : int  <span class="hljs-number">140</span> <span class="hljs-number">200</span> <span class="hljs-number">172</span> <span class="hljs-number">172</span> <span class="hljs-number">208</span> <span class="hljs-number">110</span> <span class="hljs-number">170</span> <span class="hljs-number">180</span> <span class="hljs-number">170</span> <span class="hljs-number">200</span> ...<br> $ RPM               : int  <span class="hljs-number">6300</span> <span class="hljs-number">5500</span> <span class="hljs-number">5500</span> <span class="hljs-number">5500</span> <span class="hljs-number">5700</span> <span class="hljs-number">5200</span> <span class="hljs-number">4800</span> <span class="hljs-number">4000</span> <span class="hljs-number">4800</span> <span class="hljs-number">4100</span> ...<br> $ Rev.per.mile      : int  <span class="hljs-number">2890</span> <span class="hljs-number">2335</span> <span class="hljs-number">2280</span> <span class="hljs-number">2535</span> <span class="hljs-number">2545</span> <span class="hljs-number">2565</span> <span class="hljs-number">1570</span> <span class="hljs-number">1320</span> <span class="hljs-number">1690</span> <span class="hljs-number">1510</span> ...<br> $ Man.trans.avail   : Factor w/ <span class="hljs-number">2</span> levels <span class="hljs-string">&quot;No&quot;</span>,<span class="hljs-string">&quot;Yes&quot;</span>: <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> ...<br> $ Fuel.tank.capacity: num  <span class="hljs-number">13.2</span> <span class="hljs-number">18</span> <span class="hljs-number">16.9</span> <span class="hljs-number">21.1</span> <span class="hljs-number">21.1</span> <span class="hljs-number">16.4</span> <span class="hljs-number">18</span> <span class="hljs-number">23</span> <span class="hljs-number">18.8</span> <span class="hljs-number">18</span> ...<br> $ Passengers        : int  <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> ...<br> $ Length            : int  <span class="hljs-number">177</span> <span class="hljs-number">195</span> <span class="hljs-number">180</span> <span class="hljs-number">193</span> <span class="hljs-number">186</span> <span class="hljs-number">189</span> <span class="hljs-number">200</span> <span class="hljs-number">216</span> <span class="hljs-number">198</span> <span class="hljs-number">206</span> ...<br> $ Wheelbase         : int  <span class="hljs-number">102</span> <span class="hljs-number">115</span> <span class="hljs-number">102</span> <span class="hljs-number">106</span> <span class="hljs-number">109</span> <span class="hljs-number">105</span> <span class="hljs-number">111</span> <span class="hljs-number">116</span> <span class="hljs-number">108</span> <span class="hljs-number">114</span> ...<br> $ Width             : int  <span class="hljs-number">68</span> <span class="hljs-number">71</span> <span class="hljs-number">67</span> <span class="hljs-number">70</span> <span class="hljs-number">69</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">78</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> ...<br> $ Turn.circle       : int  <span class="hljs-number">37</span> <span class="hljs-number">38</span> <span class="hljs-number">37</span> <span class="hljs-number">37</span> <span class="hljs-number">39</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">45</span> <span class="hljs-number">41</span> <span class="hljs-number">43</span> ...<br> $ Rear.seat.room    : num  <span class="hljs-number">26.5</span> <span class="hljs-number">30</span> <span class="hljs-number">28</span> <span class="hljs-number">31</span> <span class="hljs-number">27</span> <span class="hljs-number">28</span> <span class="hljs-number">30.5</span> <span class="hljs-number">30.5</span> <span class="hljs-number">26.5</span> <span class="hljs-number">35</span> ...<br> $ Luggage.room      : int  <span class="hljs-number">11</span> <span class="hljs-number">15</span> <span class="hljs-number">14</span> <span class="hljs-number">17</span> <span class="hljs-number">13</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">21</span> <span class="hljs-number">14</span> <span class="hljs-number">18</span> ...<br> $ Weight            : int  <span class="hljs-number">2705</span> <span class="hljs-number">3560</span> <span class="hljs-number">3375</span> <span class="hljs-number">3405</span> <span class="hljs-number">3640</span> <span class="hljs-number">2880</span> <span class="hljs-number">3470</span> <span class="hljs-number">4105</span> <span class="hljs-number">3495</span> <span class="hljs-number">3620</span> ...<br> $ Origin            : Factor w/ <span class="hljs-number">2</span> levels <span class="hljs-string">&quot;USA&quot;</span>,<span class="hljs-string">&quot;non-USA&quot;</span>: <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> ...<br> $ Make              : Factor w/ <span class="hljs-number">93</span> levels <span class="hljs-string">&quot;Acura Integra&quot;</span>,..: <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> ...<br></code></pre></td></tr></table></figure></p><p>上述结果表明数据集有很多因素变量，可以被认为是分类变量。对于我们的模型，我们将考虑变量 <code>AirBags</code> 和 <code>Type</code>。在这里，我们的目标是找出所售的汽车类型和安全气囊类型之间的任何显着的相关性。如果观察到相关性，我们可以估计哪种类型的汽车可以更好地卖什么类型的气囊。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the library.</span><br>library(<span class="hljs-string">&quot;MASS&quot;</span>)<br><br><span class="hljs-comment"># Create a data frame from the main data set.</span><br>car.data &lt;- data.frame(Cars93$AirBags, Cars93$Type)<br><br><span class="hljs-comment"># Create a table with the needed variables.</span><br>car.data = table(Cars93$AirBags, Cars93$Type) <br>print(car.data)<br><br><span class="hljs-comment"># Perform the Chi-Square test.</span><br>print(chisq.test(car.data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                     Compact Large Midsize Small Sporty Van<br>  Driver &amp; Passenger       <span class="hljs-number">2</span>     <span class="hljs-number">4</span>       <span class="hljs-number">7</span>     <span class="hljs-number">0</span>      <span class="hljs-number">3</span>   <span class="hljs-number">0</span><br>  Driver only              <span class="hljs-number">9</span>     <span class="hljs-number">7</span>      <span class="hljs-number">11</span>     <span class="hljs-number">5</span>      <span class="hljs-number">8</span>   <span class="hljs-number">3</span><br>  None                     <span class="hljs-number">5</span>     <span class="hljs-number">0</span>       <span class="hljs-number">4</span>    <span class="hljs-number">16</span>      <span class="hljs-number">3</span>   <span class="hljs-number">6</span><br><br>Pearson`s Chi-squared test<br><br>data:  car.data<br>X-squared = 33.001, df = 10, p-value = 0.0002723<br><br>Warning message:<br>In chisq.test(car.data) : Chi-squared approximation may be incorrect<br></code></pre></td></tr></table></figure></p><p><strong>结论</strong>结果显示 <code>P</code> 值小于 <code>0.05</code>，这表明汽车类型和安全气囊类型之间具有相关性。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言数据接口</title>
      <link href="post/996a1090.html"/>
      <url>post/996a1090.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>R 语言处理的数据一般从外部导入，因此需要数据接口来读取各种格式化的数据。</p><p>在 R 语言中，我们可以从存储在 R 语言环境外的文件中读取数据。我们还可以将数据写入将被操作系统存储和访问的文件。R 语言可以读取和写入各种文件格式，如​ <code>CSV</code>​，​<code>Excel</code>​，<code>XML</code>，<code>JSON</code> ​等。</p><h1 id="CSV-文件"><a href="#CSV-文件" class="headerlink" title="CSV 文件"></a>CSV 文件</h1><p>本章节学习从​ <code>CSV</code> 文件读取数据，然后将数据写入 <code>CSV</code> ​文件。该文件应该存在于当前工作目录中，以便 R 语言可以读取它。当然我们也可以设置我们自己的目录并从那里读取文件。</p><h2 id="获取和设置工作目录"><a href="#获取和设置工作目录" class="headerlink" title="获取和设置工作目录"></a>获取和设置工作目录</h2><p>您可以使用 ​<code>getwd()</code>​ 函数检查R 语言工作区指向的目录。您还可以使用 <code>setwd()​</code> 函数设置新的工作目录。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get and print current working directory.</span><br>print(getwd())<br><br><span class="hljs-comment"># Set current working directory.</span><br>setwd(<span class="hljs-string">&quot;E:/data&quot;</span>)<br><br><span class="hljs-comment"># Get and print current working directory.</span><br>print(getwd())<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C:/Users/user/Documents&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;E:/data&quot;</span><br></code></pre></td></tr></table></figure></p><p>此结果取决于您的操作系统和您当前工作的目录。</p><h2 id="创建-CSV-文件"><a href="#创建-CSV-文件" class="headerlink" title="创建 CSV 文件"></a>创建 CSV 文件</h2><p><code>CSV</code> 文件是一个文本文件，其中列中的值由逗号分隔。</p><p>通过将以下数据复制到文本编辑器（如记事本）中来创建文件。使用 <code>.csv</code> 扩展名保存使用记事本中的保存为所有文件​（<code>*.*</code>）​选项，将文件保存为 <code>input.csv</code>。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">id,name,salary,start<span class="hljs-emphasis">_date,dept</span><br><span class="hljs-emphasis">1,Rick,623.3,2012-01-01,IT</span><br><span class="hljs-emphasis">2,Dan,515.2,2013-09-23,Operations</span><br><span class="hljs-emphasis">3,Michelle,611,2014-11-15,IT</span><br><span class="hljs-emphasis">4,Ryan,729,2014-05-11,HR</span><br><span class="hljs-emphasis"> ,Gary,843.25,2015-03-27,Finance</span><br><span class="hljs-emphasis">6,Nina,578,2013-05-21,IT</span><br><span class="hljs-emphasis">7,Simon,632.8,2013-07-30,Operations</span><br><span class="hljs-emphasis">8,Guru,722.5,2014-06-17,Finance</span><br></code></pre></td></tr></table></figure></p><h2 id="读取-CSV-文件"><a href="#读取-CSV-文件" class="headerlink" title="读取 CSV 文件"></a>读取 CSV 文件</h2><p>以下是​ <code>read.csv()</code> ​函数的一个简单示例，用于读取当前工作目录中可用的 <code>CSV</code> 文件。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br>print(data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date       dept<br>1  <span class="hljs-number">1</span>     Rick <span class="hljs-number">623.30</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan <span class="hljs-number">515.20</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina <span class="hljs-number">578.00</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon <span class="hljs-number">632.80</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><h2 id="分析-CSV-文件"><a href="#分析-CSV-文件" class="headerlink" title="分析 CSV 文件"></a>分析 CSV 文件</h2><p>默认情况下，<code>​read.csv()​</code> 函数将输出作为数据框。这可以容易地如下检查。此外，我们可以检查列和行的数量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>print(is.data.frame(data))<br>print(ncol(data))<br>print(nrow(data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></p><p>一旦我们读取数据框中的数据，我们可以应用所有适用于数据框的函数。</p><p><strong>获取最高工资</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br><span class="hljs-comment"># Get the max salary from data frame.</span><br>sal &lt;- <span class="hljs-built_in">max</span>(data$salary)<br>print(sal)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">843.25</span><br></code></pre></td></tr></table></figure></p><p><strong>获取具有最高工资的人的详细信息</strong></p><p>我们可以获取满足特定过滤条件的行，类似于 <code>​SQL WHERE</code> 子句。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br><span class="hljs-comment"># Get the person detail having max salary.</span><br>retval &lt;- subset(data, salary == <span class="hljs-built_in">max</span>(salary))<br>print(retval)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id name salary start_date    dept<br>5 <span class="hljs-literal">NA</span> Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br></code></pre></td></tr></table></figure></p><p><strong>获取所有的 IT 部门员工的信息</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>retval &lt;- subset( data, dept == <span class="hljs-string">&quot;IT&quot;</span>)<br>print(retval)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date dept<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>   IT<br>3  <span class="hljs-number">3</span> Michelle  <span class="hljs-number">611.0</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>   IT<br>6  <span class="hljs-number">6</span>     Nina  <span class="hljs-number">578.0</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>   IT<br></code></pre></td></tr></table></figure></p><p><strong>获取工资大于 600 的 IT 部门的人员</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>info &lt;- subset(data, salary &gt; <span class="hljs-number">600</span> &amp; dept == <span class="hljs-string">&quot;IT&quot;</span>)<br>print(info)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date dept<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>   IT<br>3  <span class="hljs-number">3</span> Michelle  <span class="hljs-number">611.0</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>   IT<br></code></pre></td></tr></table></figure></p><p><strong>获取 2014 年或之后加入的人</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br><br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br>print(retval)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date    dept<br>3  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>4  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>5 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>8  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><h2 id="写入-CSV-文件"><a href="#写入-CSV-文件" class="headerlink" title="写入 CSV 文件"></a>写入 CSV 文件</h2><p>R 语言可以创建​ <code>CSV</code> 文件形式的现有数据框。​<code>write.csv()</code> ​函数用于创建​ <code>CSV</code> 文件。此文件在工作目录中创建。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br><br><span class="hljs-comment"># Write filtered data into a new file.</span><br>write.csv(retval, <span class="hljs-string">&quot;output.csv&quot;</span>)<br>newdata &lt;- read.csv(<span class="hljs-string">&quot;output.csv&quot;</span>)<br>print(newdata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  X id     name salary start_date    dept<br>1 <span class="hljs-number">3</span>  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>2 <span class="hljs-number">4</span>  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>3 <span class="hljs-number">5</span> <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>4 <span class="hljs-number">8</span>  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><p>这里列 <code>X</code> 来自数据集 ​<code>newper</code>​。这可以在写入文件时使用附加参数 <code>row.names = FALSE</code> 删除。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a data frame.</span><br>data &lt;- read.csv(<span class="hljs-string">&quot;input.csv&quot;</span>)<br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br><br><span class="hljs-comment"># Write filtered data into a new file.</span><br>write.csv(retval, <span class="hljs-string">&quot;output.csv&quot;</span>, row.names = <span class="hljs-literal">FALSE</span>)<br>newdata &lt;- read.csv(<span class="hljs-string">&quot;output.csv&quot;</span>)<br>print(newdata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date    dept<br>1  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>2  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>3 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>4  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><h1 id="Excel-文件"><a href="#Excel-文件" class="headerlink" title="Excel 文件"></a>Excel 文件</h1><p>Microsoft Excel 是最广泛使用的电子表格程序，以 <code>.xls</code> 或 <code>.xlsx</code> 格式存储数据。R 语言可以直接从这些文件使用一些 <code>Excel</code> 特定的包获取数据，如<code>XLConnect</code>，<code>xlsx</code>，<code>gdata</code> 等。</p><p>下面我们将使用 <code>xlsx</code> 包。R 语言也可以使用这个包写入 <code>Excel</code> 文件。</p><h2 id="安装-xlsx-软件包"><a href="#安装-xlsx-软件包" class="headerlink" title="安装 xlsx 软件包"></a>安装 xlsx 软件包</h2><p>您可以在R控制台中使用以下命令来安装 <code>xlsx</code> 软件包。它可能会要求安装一些额外的软件包这个软件包依赖。按照具有所需软件包名称的同一命令安装其他软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;xlsx&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="验证并加载-xlsx-软件包"><a href="#验证并加载-xlsx-软件包" class="headerlink" title="验证并加载 xlsx 软件包"></a>验证并加载 xlsx 软件包</h2><p>使用以下命令验证并加载 <code>xlsx</code> 软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Verify the package is installed.</span><br><span class="hljs-built_in">any</span>(grepl(<span class="hljs-string">&quot;xlsx&quot;</span>, installed.packages()))<br><br><span class="hljs-comment"># Load the library into R workspace.</span><br>library(<span class="hljs-string">&quot;xlsx&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>Loading required package: rJava<br>Loading required package: methods<br>Loading required package: xlsxjars<br></code></pre></td></tr></table></figure></p><h2 id="创建-xlsx-文件"><a href="#创建-xlsx-文件" class="headerlink" title="创建 xlsx 文件"></a>创建 xlsx 文件</h2><p>打开 Microsoft Excel，将以下数据复制并粘贴到名为 <code>sheet1</code> 的工作表中。</p><div class="table-container"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">salary</th><th style="text-align:center">start_date</th><th style="text-align:center">dept</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Rick</td><td style="text-align:center">623.3</td><td style="text-align:center">2012-01-01</td><td style="text-align:center">IT</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Dan</td><td style="text-align:center">515.2</td><td style="text-align:center">2013-09-23</td><td style="text-align:center">Operations</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Michelle</td><td style="text-align:center">611</td><td style="text-align:center">2014-11-15</td><td style="text-align:center">IT</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Ryan</td><td style="text-align:center">729</td><td style="text-align:center">2014-05-11</td><td style="text-align:center">HR</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Gary</td><td style="text-align:center">843.25</td><td style="text-align:center">2015-03-27</td><td style="text-align:center">Finance</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">Nina</td><td style="text-align:center">578</td><td style="text-align:center">2013-05-21</td><td style="text-align:center">IT</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">Simon</td><td style="text-align:center">632.8</td><td style="text-align:center">2013-07-30</td><td style="text-align:center">Operations</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Guru</td><td style="text-align:center">722.5</td><td style="text-align:center">2014-06-17</td><td style="text-align:center">Finance</td></tr></tbody></table></div><p>还要将以下数据复制并粘贴到另一个工作表，并将此工作表重命名为 <code>city</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">city</th></tr></thead><tbody><tr><td style="text-align:center">Rick</td><td style="text-align:center">Seattle</td></tr><tr><td style="text-align:center">Dan</td><td style="text-align:center">Tampa</td></tr><tr><td style="text-align:center">Michelle</td><td style="text-align:center">Chicago</td></tr><tr><td style="text-align:center">Ryan</td><td style="text-align:center">Seattle</td></tr><tr><td style="text-align:center">Gary</td><td style="text-align:center">Houston</td></tr><tr><td style="text-align:center">Nina</td><td style="text-align:center">Boston</td></tr><tr><td style="text-align:center">Simon</td><td style="text-align:center">Mumbai</td></tr><tr><td style="text-align:center">Guru</td><td style="text-align:center">Dallas</td></tr></tbody></table></div><p>将 Excel 文件另存为 <code>input.xlsx</code>。应将其保存在 R 工作区的当前工作目录中。</p><h2 id="读取-Excel-文件"><a href="#读取-Excel-文件" class="headerlink" title="读取 Excel 文件"></a>读取 Excel 文件</h2><p>通过使用 <code>read.xlsx()</code> 函数读取 <code>input.xlsx</code>，以下脚本读取第一个工作表的数据。结果作为数据框存储在 R 语言环境中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the first worksheet in the file input.xlsx.</span><br>data &lt;- read.xlsx(<span class="hljs-string">&quot;input.xlsx&quot;</span>, sheetIndex = <span class="hljs-number">1</span>)<br>print(data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date       dept<br>1  <span class="hljs-number">1</span>     Rick <span class="hljs-number">623.30</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan <span class="hljs-number">515.20</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina <span class="hljs-number">578.00</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon <span class="hljs-number">632.80</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><p>我们可以通过设置 <code>sheetIndex</code> 参数读取指定的工作表。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the worksheet named by city in the file input.xlsx.</span><br>data &lt;- read.xlsx(<span class="hljs-string">&quot;input.xlsx&quot;</span>, sheetIndex = <span class="hljs-string">&quot;city&quot;</span>)<br>print(data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>      name    city<br>1     Rick Seattle<br>2      Dan   Tampa<br>3 Michelle Chicago<br>4     Ryan Seattle<br>5     Gary Houston<br>6     Nina  Boston<br>7    Simon  Mumbai<br>8     Guru  Dallas<br></code></pre></td></tr></table></figure></p><h2 id="写入-Excel-文件"><a href="#写入-Excel-文件" class="headerlink" title="写入 Excel 文件"></a>写入 Excel 文件</h2><p>R 语言中的 <code>write.xlsx()</code> 函数用于创建 <code>Excel</code> 文件，此文件在工作目录中创建。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the first worksheet in the file input.xlsx.</span><br>data &lt;- read.xlsx(<span class="hljs-string">&quot;input.xlsx&quot;</span>, sheetIndex = <span class="hljs-number">1</span>)<br>retval &lt;- subset(data, as.Date(start_date) &gt; as.Date(<span class="hljs-string">&quot;2014-01-01&quot;</span>))<br><br><span class="hljs-comment"># Write the data into a new file.</span><br>write.xlsx(retval, file = <span class="hljs-string">&quot;output.xlsx&quot;</span>, row.names = <span class="hljs-literal">FALSE</span>, sheetName = <span class="hljs-string">&quot;salary&quot;</span>)<br>newdata &lt;- read.xlsx(<span class="hljs-string">&quot;output.xlsx&quot;</span>, sheetIndex = <span class="hljs-string">&quot;salary&quot;</span>)<br>print(newdata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id     name salary start_date    dept<br>1  <span class="hljs-number">3</span> Michelle <span class="hljs-number">611.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>      IT<br>2  <span class="hljs-number">4</span>     Ryan <span class="hljs-number">729.00</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>      HR<br>3 <span class="hljs-literal">NA</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span> Finance<br>4  <span class="hljs-number">8</span>     Guru <span class="hljs-number">722.50</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span> Finance<br></code></pre></td></tr></table></figure></p><h1 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h1><p>二进制文件是包含仅以位和字节（<code>0</code> 和 <code>1</code>）的形式存储的信息的文件。它们不是人类可读的，因为它中的字节转换为包含许多其他不可打印字符的字符和符号。尝试使用任何文本编辑器读取二进制文件将显示如 <code>Ø</code> 和 <code>ð</code> 的字符。</p><p>二进制文件必须由特定程序读取才能使用。例如，Microsoft Word 程序的二进制文件只能通过 Word 程序读取到人类可读的形式。这表示，除了人类可读的文本之外，还有更多的信息，例如字符和页码等的格式化，它们也与字母数字字符一起存储。最后一个二进制文件是一个连续的字节序列。我们在文本文件中看到的换行符是连接第一行到下一行的字符。</p><p>有时，由其他程序生成的数据需要由 R 作为二进制文件处理。另外，R 语言是创建可以与其他程序共享的二进制文件所必需的。</p><p>R 语言有两个函数 <code>WriteBin()</code> 和 <code>readBin()</code> 来创建和读取二进制文件。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">writeBin(object, con)<br>readBin(con, what, n)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>con</code> 是读取或写入二进制文件的连接对象。</li><li><code>object</code> 是要写入的二进制文件。</li><li><code>what</code> 是像字符，整数等代表字节模式被读取。</li><li><code>n</code> 是从二进制文件读取的字节数。</li></ul><h2 id="写入二进制文件"><a href="#写入二进制文件" class="headerlink" title="写入二进制文件"></a>写入二进制文件</h2><p>我们考虑 R 语言内置数据 <code>mtcars</code>。首先，我们从它创建一个 <code>CSV</code> 文件，并将其转换为二进制文件，并将其存储为操作系统文件。接下来我们读取这个创建的二进制文件。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Read the &quot;mtcars&quot; data frame as a csv file and store only the columns &quot;cyl&quot;, &quot;am&quot; and &quot;gear&quot;.</span><br>write.table(mtcars, file = <span class="hljs-string">&quot;mtcars.csv&quot;</span>, row.names = <span class="hljs-literal">FALSE</span>, na = <span class="hljs-string">&quot;&quot;</span>, col.names = <span class="hljs-literal">TRUE</span>, sep = <span class="hljs-string">&quot;,&quot;</span>)<br><br><span class="hljs-comment"># Store 5 records from the csv file as a new data frame.</span><br>new.mtcars &lt;- read.table(<span class="hljs-string">&quot;mtcars.csv&quot;</span>, sep = <span class="hljs-string">&quot;,&quot;</span>, header = <span class="hljs-literal">TRUE</span>, nrows = <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Create a connection object to write the binary file using mode &quot;wb&quot;.</span><br>write.filename = file(<span class="hljs-string">&quot;binmtcars.dat&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br><br><span class="hljs-comment"># Write the column names of the data frame to the connection object.</span><br>writeBin(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;cyl&quot;</span>, <span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;gear&quot;</span>), write.filename)<br><br><span class="hljs-comment"># Write the records in each of the column to the file.</span><br>writeBin(<span class="hljs-built_in">c</span>(new.mtcars$cyl, new.mtcars$am, new.mtcars$gear), write.filename)<br><br><span class="hljs-comment"># Close the file for writing so that it can be read by other program.</span><br>close(write.filename)<br></code></pre></td></tr></table></figure></p><h2 id="读取二进制文件"><a href="#读取二进制文件" class="headerlink" title="读取二进制文件"></a>读取二进制文件</h2><p>上面创建的二进制文件将所有数据存储为连续字节。因此，我们将通过选择适当的列名称值和列值来读取它。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a connection object to read the file in binary mode using &quot;rb&quot;.</span><br>read.filename &lt;- file(<span class="hljs-string">&quot;binmtcars.dat&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br><br><span class="hljs-comment"># First read the column names. n = 3 as we have 3 columns.</span><br>column.names &lt;- readBin(read.filename, character(),  n = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Next read the column values. n = 18 as we have 3 column names and 15 values.</span><br>read.filename &lt;- file(<span class="hljs-string">&quot;binmtcars.dat&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>bindata &lt;- readBin(read.filename, integer(), n = <span class="hljs-number">18</span>)<br><br><span class="hljs-comment"># Print the data.</span><br>print(bindata)<br><br><span class="hljs-comment"># Read the values from 4th byte to 8th byte which represents &quot;cyl&quot;.</span><br>cyldata = bindata[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]<br>print(cyldata)<br><br><span class="hljs-comment"># Read the values form 9th byte to 13th byte which represents &quot;am&quot;.</span><br>amdata = bindata[<span class="hljs-number">9</span>:<span class="hljs-number">13</span>]<br>print(amdata)<br><br><span class="hljs-comment"># Read the values form 9th byte to 13th byte which represents &quot;gear&quot;.</span><br>geardata = bindata[<span class="hljs-number">14</span>:<span class="hljs-number">18</span>]<br>print(geardata)<br><br><span class="hljs-comment"># Combine all the read values to a dat frame.</span><br>finaldata = cbind(cyldata, amdata, geardata)<br>colnames(finaldata) = column.names<br>print(finaldata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果和图表 -</span><br><br>[<span class="hljs-number">1</span>]    <span class="hljs-number">7108963</span> <span class="hljs-number">1728081249</span>    <span class="hljs-number">7496037</span>          <span class="hljs-number">6</span>          <span class="hljs-number">6</span>          <span class="hljs-number">4</span><br>[<span class="hljs-number">7</span>]          <span class="hljs-number">6</span>          <span class="hljs-number">8</span>          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>          <span class="hljs-number">0</span><br>[<span class="hljs-number">13</span>]         <span class="hljs-number">0</span>          <span class="hljs-number">4</span>          <span class="hljs-number">4</span>          <span class="hljs-number">4</span>          <span class="hljs-number">3</span>          <span class="hljs-number">3</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br><br>     cyl am gear<br>[<span class="hljs-number">1</span>,]   <span class="hljs-number">6</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">6</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span><br>[<span class="hljs-number">3</span>,]   <span class="hljs-number">4</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span><br>[<span class="hljs-number">4</span>,]   <span class="hljs-number">6</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br>[<span class="hljs-number">5</span>,]   <span class="hljs-number">8</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><p>正如我们所看到的，我们通过读取 R 中的二进制文件得到原始数据。</p><h1 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h1><p><code>XML</code> 是一种文件格式，它使用标准 <code>ASCII</code> 文本共享万维网，内部网和其他地方的文件格式和数据。它代表可扩展标记语言 <code>XML</code>。类似于 <code>HTML</code>，它包含标记标签。但是与 <code>HTML</code> 中的标记标记描述页面的结构不同，在 <code>XML</code> 中，标记描述了包含在文件中的数据的含义。</p><p>您可以使用 <code>XML</code> 包读取 R 语言中的 <code>XML</code> 文件。此软件包可以使用以下命令安装。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;XML&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="创建-XML-文件"><a href="#创建-XML-文件" class="headerlink" title="创建 XML 文件"></a>创建 XML 文件</h2><p>通过将以下数据复制到文本编辑器（如记事本）中来创建文件。使用 <code>.xml</code> 扩展名保存使用记事本中的保存为所有文件​（<code>*.*</code>）​选项，将文件保存为 <code>input.xml</code>。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RECORDS</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Rick<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>623.3<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2012-01-01<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>IT<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Dan<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>515.2<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2013-09-23<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Operations<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Michelle<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>611<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2014-11-15<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>IT<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Ryan<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>729<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2014-05-11<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>HR<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Gary<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>843.25<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2015-03-27<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Finance<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Nina<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>578<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2013-05-21<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>IT<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Simon<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>632.8<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2013-07-30<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Operations<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EMPLOYEE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">NAME</span>&gt;</span>Guru<span class="hljs-tag">&lt;/<span class="hljs-name">NAME</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SALARY</span>&gt;</span>722.5<span class="hljs-tag">&lt;/<span class="hljs-name">SALARY</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">STARTDATE</span>&gt;</span>2014-06-17<span class="hljs-tag">&lt;/<span class="hljs-name">STARTDATE</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DEPT</span>&gt;</span>Finance<span class="hljs-tag">&lt;/<span class="hljs-name">DEPT</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">EMPLOYEE</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECORDS</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="读取-XML-文件"><a href="#读取-XML-文件" class="headerlink" title="读取 XML 文件"></a>读取 XML 文件</h2><p><code>XML</code> 文件由 R 语言使用函数 <code>xmlParse()</code> 读取。它作为列表存储在 R 语言中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br><br><span class="hljs-comment"># Also load the other required package.</span><br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Print the result.</span><br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>1<br>Rick<br>623.3<br>2012-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>IT<br><br>2<br>Dan<br>515.2<br>2013-<span class="hljs-number">09</span>-<span class="hljs-number">23</span><br>Operations<br><br>3<br>Michelle<br>611<br>2014-<span class="hljs-number">11</span>-<span class="hljs-number">15</span><br>IT<br><br>4<br>Ryan<br>729<br>2014-<span class="hljs-number">05</span>-<span class="hljs-number">11</span><br>HR<br><br>5<br>Gary<br>843.25<br>2015-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br>Finance<br><br>6<br>Nina<br>578<br>2013-<span class="hljs-number">05</span>-<span class="hljs-number">21</span><br>IT<br><br>7<br>Simon<br>632.8<br>2013-<span class="hljs-number">07</span>-<span class="hljs-number">30</span><br>Operations<br><br>8<br>Guru<br>722.5<br>2014-<span class="hljs-number">06</span>-<span class="hljs-number">17</span><br>Finance<br></code></pre></td></tr></table></figure></p><p><strong>获取 XML 文件中存在的节点数</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Exract the root node form the xml file.</span><br>rootnode &lt;- xmlRoot(result)<br><br><span class="hljs-comment"># Find number of nodes in the root.</span><br>rootsize &lt;- xmlSize(rootnode)<br><br><span class="hljs-comment"># Print the result.</span><br>print(rootsize)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></p><p><strong>第一个节点的详细信息</strong></p><p>让我们看看解析文件的第一条记录。它将给我们一个关于存在于顶层节点中的各种元素的想法。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Exract the root node form the xml file.</span><br>rootnode &lt;- xmlRoot(result)<br><br><span class="hljs-comment"># Print the result.</span><br>print(rootnode[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$EMPLOYEE<br>  <span class="hljs-number">1</span><br>  Rick<br>  <span class="hljs-number">623.3</span><br>  <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>  IT<br><br><span class="hljs-built_in">attr</span>(,<span class="hljs-string">&quot;class&quot;</span>)<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;XMLInternalNodeList&quot;</span> <span class="hljs-string">&quot;XMLNodeList&quot;</span><br></code></pre></td></tr></table></figure></p><p><strong>获取节点的不同元素</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- xmlParse(file = <span class="hljs-string">&quot;input.xml&quot;</span>)<br><br><span class="hljs-comment"># Exract the root node form the xml file.</span><br>rootnode &lt;- xmlRoot(result)<br><br><span class="hljs-comment"># Get the first element of the first node.</span><br>print(rootnode[[<span class="hljs-number">1</span>]][[<span class="hljs-number">1</span>]])<br><br><span class="hljs-comment"># Get the fifth element of the first node.</span><br>print(rootnode[[<span class="hljs-number">1</span>]][[<span class="hljs-number">5</span>]])<br><br><span class="hljs-comment"># Get the second element of the third node.</span><br>print(rootnode[[<span class="hljs-number">3</span>]][[<span class="hljs-number">2</span>]])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>1<br>IT<br>Michelle<br></code></pre></td></tr></table></figure></p><h2 id="XML-到数据框"><a href="#XML-到数据框" class="headerlink" title="XML 到数据框"></a>XML 到数据框</h2><p>为了在大文件中有效地处理数据，我们将 <code>XML</code> 文件中的数据作为数据框读取。然后处理数据框以进行数据分析。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the packages required to read XML files.</span><br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;methods&quot;</span>)<br><br><span class="hljs-comment"># Convert the input xml file to a data frame.</span><br>xmldataframe &lt;- xmlToDataFrame(<span class="hljs-string">&quot;input.xml&quot;</span>)<br>print(xmldataframe)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  ID     NAME SALARY  STARTDATE       DEPT<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan  <span class="hljs-number">515.2</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle    <span class="hljs-number">611</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan    <span class="hljs-number">729</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5  <span class="hljs-number">5</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina    <span class="hljs-number">578</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon  <span class="hljs-number">632.8</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru  <span class="hljs-number">722.5</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><p>由于数据现在可以作为数据框，我们可以使用数据框相关函数来读取和操作文件。</p><h1 id="JSON-文件"><a href="#JSON-文件" class="headerlink" title="JSON 文件"></a>JSON 文件</h1><p><code>JSON</code> 文件以人类可读格式将数据存储为文本。<code>JSON</code> 代表 <code>JavaScript Object Notation</code>。R 可以使用 <code>rjson</code> 包读取 <code>JSON</code> 文件。</p><p>在 R 语言控制台中，您可以发出以下命令来安装 <code>rjson</code> 包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;rjson&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="创建-JSON-文件"><a href="#创建-JSON-文件" class="headerlink" title="创建 JSON 文件"></a>创建 JSON 文件</h2><p>通过将以下数据复制到文本编辑器（如记事本）中来创建文件。使用 <code>.json</code> 扩展名保存使用记事本中的保存为所有文件​（<code>*.*</code>）选项，将文件保存为 <code>input.json</code>。</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;ID&quot;</span>: [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>],<br><span class="hljs-attr">&quot;Name&quot;</span>: [<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>, <span class="hljs-string">&quot;Nina&quot;</span>, <span class="hljs-string">&quot;Simon&quot;</span>, <span class="hljs-string">&quot;Guru&quot;</span>],<br><span class="hljs-attr">&quot;Salary&quot;</span>: [<span class="hljs-string">&quot;623.3&quot;</span>, <span class="hljs-string">&quot;515.2&quot;</span>, <span class="hljs-string">&quot;611&quot;</span>, <span class="hljs-string">&quot;729&quot;</span>, <span class="hljs-string">&quot;843.25&quot;</span>, <span class="hljs-string">&quot;578&quot;</span>, <span class="hljs-string">&quot;632.8&quot;</span>, <span class="hljs-string">&quot;722.5&quot;</span>],<br><br><span class="hljs-attr">&quot;StartDate&quot;</span>: [<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>, <span class="hljs-string">&quot;2013-05-21&quot;</span>,<br><span class="hljs-string">&quot;2013-07-30&quot;</span>, <span class="hljs-string">&quot;2014-06-17&quot;</span><br>],<br><span class="hljs-attr">&quot;Dept&quot;</span>: [<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;HR&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="读取-JSON-文件"><a href="#读取-JSON-文件" class="headerlink" title="读取 JSON 文件"></a>读取 JSON 文件</h2><p><code>JSON</code> 文件由 R 使用来自 <code>fromJSON()</code> 的函数读取。它作为列表存储在 R 中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required to read JSON files.</span><br>library(<span class="hljs-string">&quot;rjson&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- fromJSON(file = <span class="hljs-string">&quot;input.json&quot;</span>)<br><br><span class="hljs-comment"># Print the result.</span><br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$ID<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-string">&quot;3&quot;</span> <span class="hljs-string">&quot;4&quot;</span> <span class="hljs-string">&quot;5&quot;</span> <span class="hljs-string">&quot;6&quot;</span> <span class="hljs-string">&quot;7&quot;</span> <span class="hljs-string">&quot;8&quot;</span><br><br>$Name<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Rick&quot;</span>     <span class="hljs-string">&quot;Dan&quot;</span>      <span class="hljs-string">&quot;Michelle&quot;</span> <span class="hljs-string">&quot;Ryan&quot;</span>     <span class="hljs-string">&quot;Gary&quot;</span>     <span class="hljs-string">&quot;Nina&quot;</span>     <span class="hljs-string">&quot;Simon&quot;</span>    <span class="hljs-string">&quot;Guru&quot;</span>    <br><br>$Salary<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;623.3&quot;</span>  <span class="hljs-string">&quot;515.2&quot;</span>  <span class="hljs-string">&quot;611&quot;</span>    <span class="hljs-string">&quot;729&quot;</span>    <span class="hljs-string">&quot;843.25&quot;</span> <span class="hljs-string">&quot;578&quot;</span>    <span class="hljs-string">&quot;632.8&quot;</span>  <span class="hljs-string">&quot;722.5&quot;</span> <br><br>$StartDate<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;2012-01-01&quot;</span> <span class="hljs-string">&quot;2013-09-23&quot;</span> <span class="hljs-string">&quot;2014-11-15&quot;</span> <span class="hljs-string">&quot;2014-05-11&quot;</span> <span class="hljs-string">&quot;2015-03-27&quot;</span> <span class="hljs-string">&quot;2013-05-21&quot;</span> <span class="hljs-string">&quot;2013-07-30&quot;</span> <span class="hljs-string">&quot;2014-06-17&quot;</span><br><br>$Dept<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;IT&quot;</span>         <span class="hljs-string">&quot;Operations&quot;</span> <span class="hljs-string">&quot;IT&quot;</span>         <span class="hljs-string">&quot;HR&quot;</span>         <span class="hljs-string">&quot;Finance&quot;</span>    <span class="hljs-string">&quot;IT&quot;</span>         <span class="hljs-string">&quot;Operations&quot;</span> <span class="hljs-string">&quot;Finance&quot;</span>   <br></code></pre></td></tr></table></figure></p><h2 id="将-JSON-转换为数据框"><a href="#将-JSON-转换为数据框" class="headerlink" title="将 JSON 转换为数据框"></a>将 JSON 转换为数据框</h2><p>我们可以使用 <code>as.data.frame()</code> 函数将上面提取的数据转换为 R 语言数据框以进行进一步分析。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required to read JSON files.</span><br>library(<span class="hljs-string">&quot;rjson&quot;</span>)<br><br><span class="hljs-comment"># Give the input file name to the function.</span><br>result &lt;- fromJSON(file = <span class="hljs-string">&quot;input.json&quot;</span>)<br><br><span class="hljs-comment"># Convert JSON file to a data frame.</span><br>json_data_frame &lt;- as.data.frame(result)<br><br>print(json_data_frame)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  ID     Name Salary  StartDate       Dept<br>1  <span class="hljs-number">1</span>     Rick  <span class="hljs-number">623.3</span> <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>         IT<br>2  <span class="hljs-number">2</span>      Dan  <span class="hljs-number">515.2</span> <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span> Operations<br>3  <span class="hljs-number">3</span> Michelle    <span class="hljs-number">611</span> <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>         IT<br>4  <span class="hljs-number">4</span>     Ryan    <span class="hljs-number">729</span> <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>         HR<br>5  <span class="hljs-number">5</span>     Gary <span class="hljs-number">843.25</span> <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>    Finance<br>6  <span class="hljs-number">6</span>     Nina    <span class="hljs-number">578</span> <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>         IT<br>7  <span class="hljs-number">7</span>    Simon  <span class="hljs-number">632.8</span> <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span> Operations<br>8  <span class="hljs-number">8</span>     Guru  <span class="hljs-number">722.5</span> <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>    Finance<br></code></pre></td></tr></table></figure></p><h1 id="Web-数据"><a href="#Web-数据" class="headerlink" title="Web 数据"></a>Web 数据</h1><p>许多网站提供数据供其用户使用。例如，世界卫生组织（WHO）以 <code>CSV</code>，<code>txt</code> 和 <code>XML</code> 文件的形式提供健康和医疗信息的报告。使用 R 语言程序，我们可以从这些网站以编程方式提取特定数据。R 语言中用于从网站中提取数据的一些包是 <code>RCurl</code>，<code>XML</code> 和 <code>stringr</code>，它们用于连接到 URL，识别文件所需的链接并将它们下载到本地环境。</p><p>安装 R 语言的包处理URL和链接到文件需要以下的包。如果它们在R 语言环境中不可用，您可以使用以下命令安装它们。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;RCurl&quot;</span>)<br>install.packages(<span class="hljs-string">&quot;XML&quot;</span>)<br>install.packages(<span class="hljs-string">&quot;stringr&quot;</span>)<br>install.packages(<span class="hljs-string">&quot;plyr&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="读取-Web-数据"><a href="#读取-Web-数据" class="headerlink" title="读取 Web 数据"></a>读取 Web 数据</h2><p>我们将访问 <code>URL</code> 天气数据，并使用 R 下载 2015 年的 <code>CSV</code> 文件。</p><p>我们将使用函数 <code>getHTMLLinks()</code> 来收集文件的 <code>URL</code>。然后我们将使用函数<code>downlaod.file()</code> 将文件保存到本地系统。由于我们将对多个文件一次又一次地应用相同的代码，因此我们将创建一个被多次调用的函数。文件名作为参数以 R 列表对象的形式传递到此函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Load the package required.</span><br>library(<span class="hljs-string">&quot;RCurl&quot;</span>)<br>library(<span class="hljs-string">&quot;XML&quot;</span>)<br>library(<span class="hljs-string">&quot;stringr&quot;</span>)<br>library(<span class="hljs-string">&quot;plyr&quot;</span>)<br><br><span class="hljs-comment"># Read the URL.</span><br>url &lt;- <span class="hljs-string">&quot;https://www.geos.ed.ac.uk/~weather/jcmb_ws/&quot;</span><br><br><span class="hljs-comment"># Gather the html links present in the webpage.</span><br>links &lt;- getHTMLLinks(url)<br><br><span class="hljs-comment"># Identify only the links which point to the JCMB 2015 files. </span><br>filenames &lt;- links[str_detect(links, <span class="hljs-string">&quot;JCMB_2015&quot;</span>)]<br><br><span class="hljs-comment"># Store the file names as a list.</span><br>filenames_list &lt;- as.list(filenames)<br><br><span class="hljs-comment"># Create a function to download the files by passing the URL and filename list.</span><br>downloadcsv &lt;- <span class="hljs-keyword">function</span> (mainurl, filename) &#123;<br>   filedetails &lt;- str_c(mainurl, filename)<br>   download.file(filedetails, filename)<br>&#125;<br><br><span class="hljs-comment"># Now apply the l_ply function and save the files into the current R working directory.</span><br>l_ply(filenames, downloadcsv, mainurl = <span class="hljs-string">&quot;https://www.geos.ed.ac.uk/~weather/jcmb_ws/&quot;</span>)<br></code></pre></td></tr></table></figure></p><p><strong>验证文件下载</strong></p><p>运行上述代码后，您可以在当前 R 语言工作目录中找到以下文件。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">JCMB<span class="hljs-emphasis">_2015.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Apr.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Aug.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Dec.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Feb.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Jan.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Jul.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Jun.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Mar.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_May.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Nov.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Oct.csv</span><br><span class="hljs-emphasis">JCMB_</span>2015<span class="hljs-emphasis">_Sep.csv</span><br></code></pre></td></tr></table></figure></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据是关系数据库系统以规范化格式存储。因此，要进行统计计算，我们将需要非常先进和复杂的 <code>SQL</code> 查询。但 R 语言可以轻松地连接到许多关系数据库，如 <code>MySQL</code>，<code>Oracle</code>，<code>SQL Server</code> 等，并从它们获取记录作为数据框。一旦数据在 R 语言环境中可用，它就变成正常的 R 语言数据集，并且可以使用所有强大的包和函数来操作或分析。</p><p>在本教程中，我们将使用 MySQL 作为连接到 R 语言的参考数据库。</p><p>R 语言有一个名为 <code>RMySQL</code> 的内置包，它提供与 MySQL 数据库之间的本地连接。您可以使用以下命令在 R 语言环境中安装此软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;RMySQL&quot;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="连接到-MySQL"><a href="#连接到-MySQL" class="headerlink" title="连接到 MySQL"></a>连接到 MySQL</h2><p>一旦安装了包，我们在 R 中创建一个连接对象以连接到数据库。它使用用户名，密码，数据库名称和主机名作为输入。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a connection Object to MySQL database.</span><br><span class="hljs-comment"># We will connect to the sampel database named &quot;testdb&quot; that comes with MySQL installation.</span><br>library(<span class="hljs-string">&quot;RMySQL&quot;</span>)<br>conn = dbConnect(MySQL(), user = <span class="hljs-string">&#x27;root&#x27;</span>, password = <span class="hljs-string">&#x27;root&#x27;</span>, dbname = <span class="hljs-string">&#x27;testdb&#x27;</span>, host = <span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>)<br><br><span class="hljs-comment"># Set the encoding method to gbk</span><br>dbSendQuery(conn, <span class="hljs-string">&#x27;SET NAMES gbk&#x27;</span>)<br><br><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>    <span class="hljs-string">&quot;tbl&quot;</span>    <span class="hljs-string">&quot;tcount_tbl&quot;</span>    <span class="hljs-string">&quot;transaction_test&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="查询表数据"><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h2><p>我们可以使用函数 <code>dbSendQuery()</code> 查询 MySQL 中的数据库表。查询在 MySQL 中执行，并使用 R 语言 <code>fetch()</code> 函数返回结果集。最后，它被存储为 R 语言中的数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get all the rows.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl&quot;</span>)<br><br><span class="hljs-comment"># Store the result in a R data frame object. n = 6 is used to fetch first 6 rows.</span><br>data.frame = fetch(result, n = <span class="hljs-number">6</span>)<br>print(data.frame)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id       title author submission_date<br>1  <span class="hljs-number">1</span>    学习 PHP    PHP      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>2  <span class="hljs-number">2</span>  学习 MySQL  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>3  <span class="hljs-number">3</span>    学习 C++    C++      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>4  <span class="hljs-number">4</span> 学习 Python Python      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>5  <span class="hljs-number">5</span>  MySQL 教程  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>6  <span class="hljs-number">6</span>   JAVA 教程   JAVA      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><p><strong>带过滤条件的查询</strong></p><p>我们可以传递任何有效的 <code>SELECT</code> 查询来获取结果。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get all the rows with author equal to &#x27;MySQL&#x27;.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl WHERE author = &#x27;MySQL&#x27;&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  id      title author submission_date<br>1  <span class="hljs-number">2</span> 学习 MySQL  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>2  <span class="hljs-number">5</span> MySQL 教程  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><h2 id="更新表数据"><a href="#更新表数据" class="headerlink" title="更新表数据"></a>更新表数据</h2><p>我们可以通过将更新查询传递给 <code>dbSendQuery()</code> 函数来更新 MySQL 表中的行。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get the rows with id equal to 1.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl WHERE id = 1&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># Update the record with id equal to 1.</span><br>dbSendQuery(conn, <span class="hljs-string">&quot;UPDATE tbl SET submission_date = &#x27;2000-01-12&#x27; WHERE id = 1&quot;</span>)<br><br><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get the rows with id equal to 1.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl WHERE id = 1&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 在执行上面的代码后，我们可以看到在 MySQL 环境中更新的表。</span><br><br>  id    title author submission_date<br>1  <span class="hljs-number">1</span> 学习 PHP    PHP      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br><br>  id    title author submission_date<br>1  <span class="hljs-number">1</span> 学习 PHP    PHP      <span class="hljs-number">2000</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><h2 id="向表插入数据"><a href="#向表插入数据" class="headerlink" title="向表插入数据"></a>向表插入数据</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Insert data to the &quot;tbl&quot; tables</span><br>dbSendQuery(conn,<br>   <span class="hljs-string">&quot;INSERT INTO tbl (title, author, submission_date) VALUES(&#x27;学习 R&#x27;, &#x27;R&#x27;, &#x27;2021-01-22&#x27;)&quot;</span><br>)<br><br><span class="hljs-comment"># Query the &quot;tbl&quot; tables to get all the rows.</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM tbl&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 在执行上面的代码后，我们可以看到插入到 MySQL 环境中的表中的行。</span><br><br>  id       title author submission_date<br>1  <span class="hljs-number">1</span>    学习 PHP    PHP      <span class="hljs-number">2000</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>2  <span class="hljs-number">2</span>  学习 MySQL  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>3  <span class="hljs-number">3</span>    学习 C++    C++      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>4  <span class="hljs-number">4</span> 学习 Python Python      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>5  <span class="hljs-number">5</span>  MySQL 教程  MySQL      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>6  <span class="hljs-number">6</span>   JAVA 教程   JAVA      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">12</span><br>7  <span class="hljs-number">7</span>      学习 R      R      <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>我们可以在 MySQL 中使用函数 <code>dbWriteTable()</code> 创建表。如果表已经存在，它将覆盖该表，并将数据框用作输入。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the connection object to the database where we want to create the table.</span><br>conn = dbConnect(MySQL(), user = <span class="hljs-string">&#x27;root&#x27;</span>, password = <span class="hljs-string">&#x27;root&#x27;</span>, dbname = <span class="hljs-string">&#x27;testdb&#x27;</span>, host = <span class="hljs-string">&#x27;localhost&#x27;</span>, port = <span class="hljs-string">&#x27;3306&#x27;</span>)<br><br><span class="hljs-comment"># Use the R data frame &quot;mtcars&quot; to create the table in MySQL.</span><br><span class="hljs-comment"># All the rows of mtcars are taken inot MySQL.</span><br>dbWriteTable(conn, <span class="hljs-string">&quot;mtcars&quot;</span>, mtcars[, ], overwrite = <span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># Query the &quot;mtcars&quot; tables to get the rows</span><br>result = dbSendQuery(conn, <span class="hljs-string">&quot;SELECT * FROM mtcars&quot;</span>)<br><br><span class="hljs-comment"># Fetch all the records and store it as a data frame.</span><br>data.frame = fetch(result)<br>print(data.frame)<br><br><span class="hljs-comment"># 执行上面的代码后，我们可以看到在 MySQL 环境中创建的表。</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>    <span class="hljs-string">&quot;tbl&quot;</span>    <span class="hljs-string">&quot;tcount_tbl&quot;</span>    <span class="hljs-string">&quot;transaction_test&quot;</span><br><br>             row_names  mpg cyl  disp  hp drat    wt  qsec vs am gear carb<br>1            Mazda RX4 <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span> <span class="hljs-number">160.0</span> <span class="hljs-number">110</span> <span class="hljs-number">3.90</span> <span class="hljs-number">2.620</span> <span class="hljs-number">16.46</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>2        Mazda RX4 Wag <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span> <span class="hljs-number">160.0</span> <span class="hljs-number">110</span> <span class="hljs-number">3.90</span> <span class="hljs-number">2.875</span> <span class="hljs-number">17.02</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>3           Datsun <span class="hljs-number">710</span> <span class="hljs-number">22.8</span>   <span class="hljs-number">4</span> <span class="hljs-number">108.0</span>  <span class="hljs-number">93</span> <span class="hljs-number">3.85</span> <span class="hljs-number">2.320</span> <span class="hljs-number">18.61</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>4       Hornet <span class="hljs-number">4</span> Drive <span class="hljs-number">21.4</span>   <span class="hljs-number">6</span> <span class="hljs-number">258.0</span> <span class="hljs-number">110</span> <span class="hljs-number">3.08</span> <span class="hljs-number">3.215</span> <span class="hljs-number">19.44</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">1</span><br>5    Hornet Sportabout <span class="hljs-number">18.7</span>   <span class="hljs-number">8</span> <span class="hljs-number">360.0</span> <span class="hljs-number">175</span> <span class="hljs-number">3.15</span> <span class="hljs-number">3.440</span> <span class="hljs-number">17.02</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>6              Valiant <span class="hljs-number">18.1</span>   <span class="hljs-number">6</span> <span class="hljs-number">225.0</span> <span class="hljs-number">105</span> <span class="hljs-number">2.76</span> <span class="hljs-number">3.460</span> <span class="hljs-number">20.22</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">1</span><br>7           Duster <span class="hljs-number">360</span> <span class="hljs-number">14.3</span>   <span class="hljs-number">8</span> <span class="hljs-number">360.0</span> <span class="hljs-number">245</span> <span class="hljs-number">3.21</span> <span class="hljs-number">3.570</span> <span class="hljs-number">15.84</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>8            Merc <span class="hljs-number">240</span>D <span class="hljs-number">24.4</span>   <span class="hljs-number">4</span> <span class="hljs-number">146.7</span>  <span class="hljs-number">62</span> <span class="hljs-number">3.69</span> <span class="hljs-number">3.190</span> <span class="hljs-number">20.00</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br>9             Merc <span class="hljs-number">230</span> <span class="hljs-number">22.8</span>   <span class="hljs-number">4</span> <span class="hljs-number">140.8</span>  <span class="hljs-number">95</span> <span class="hljs-number">3.92</span> <span class="hljs-number">3.150</span> <span class="hljs-number">22.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br>10            Merc <span class="hljs-number">280</span> <span class="hljs-number">19.2</span>   <span class="hljs-number">6</span> <span class="hljs-number">167.6</span> <span class="hljs-number">123</span> <span class="hljs-number">3.92</span> <span class="hljs-number">3.440</span> <span class="hljs-number">18.30</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>11           Merc <span class="hljs-number">280</span>C <span class="hljs-number">17.8</span>   <span class="hljs-number">6</span> <span class="hljs-number">167.6</span> <span class="hljs-number">123</span> <span class="hljs-number">3.92</span> <span class="hljs-number">3.440</span> <span class="hljs-number">18.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span><br>12          Merc <span class="hljs-number">450</span>SE <span class="hljs-number">16.4</span>   <span class="hljs-number">8</span> <span class="hljs-number">275.8</span> <span class="hljs-number">180</span> <span class="hljs-number">3.07</span> <span class="hljs-number">4.070</span> <span class="hljs-number">17.40</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">3</span><br>13          Merc <span class="hljs-number">450</span>SL <span class="hljs-number">17.3</span>   <span class="hljs-number">8</span> <span class="hljs-number">275.8</span> <span class="hljs-number">180</span> <span class="hljs-number">3.07</span> <span class="hljs-number">3.730</span> <span class="hljs-number">17.60</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">3</span><br>14         Merc <span class="hljs-number">450</span>SLC <span class="hljs-number">15.2</span>   <span class="hljs-number">8</span> <span class="hljs-number">275.8</span> <span class="hljs-number">180</span> <span class="hljs-number">3.07</span> <span class="hljs-number">3.780</span> <span class="hljs-number">18.00</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">3</span><br>15  Cadillac Fleetwood <span class="hljs-number">10.4</span>   <span class="hljs-number">8</span> <span class="hljs-number">472.0</span> <span class="hljs-number">205</span> <span class="hljs-number">2.93</span> <span class="hljs-number">5.250</span> <span class="hljs-number">17.98</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>16 Lincoln Continental <span class="hljs-number">10.4</span>   <span class="hljs-number">8</span> <span class="hljs-number">460.0</span> <span class="hljs-number">215</span> <span class="hljs-number">3.00</span> <span class="hljs-number">5.424</span> <span class="hljs-number">17.82</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>17   Chrysler Imperial <span class="hljs-number">14.7</span>   <span class="hljs-number">8</span> <span class="hljs-number">440.0</span> <span class="hljs-number">230</span> <span class="hljs-number">3.23</span> <span class="hljs-number">5.345</span> <span class="hljs-number">17.42</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>18            Fiat <span class="hljs-number">128</span> <span class="hljs-number">32.4</span>   <span class="hljs-number">4</span>  <span class="hljs-number">78.7</span>  <span class="hljs-number">66</span> <span class="hljs-number">4.08</span> <span class="hljs-number">2.200</span> <span class="hljs-number">19.47</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>19         Honda Civic <span class="hljs-number">30.4</span>   <span class="hljs-number">4</span>  <span class="hljs-number">75.7</span>  <span class="hljs-number">52</span> <span class="hljs-number">4.93</span> <span class="hljs-number">1.615</span> <span class="hljs-number">18.52</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br>20      Toyota Corolla <span class="hljs-number">33.9</span>   <span class="hljs-number">4</span>  <span class="hljs-number">71.1</span>  <span class="hljs-number">65</span> <span class="hljs-number">4.22</span> <span class="hljs-number">1.835</span> <span class="hljs-number">19.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>21       Toyota Corona <span class="hljs-number">21.5</span>   <span class="hljs-number">4</span> <span class="hljs-number">120.1</span>  <span class="hljs-number">97</span> <span class="hljs-number">3.70</span> <span class="hljs-number">2.465</span> <span class="hljs-number">20.01</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">1</span><br>22    Dodge Challenger <span class="hljs-number">15.5</span>   <span class="hljs-number">8</span> <span class="hljs-number">318.0</span> <span class="hljs-number">150</span> <span class="hljs-number">2.76</span> <span class="hljs-number">3.520</span> <span class="hljs-number">16.87</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>23         AMC Javelin <span class="hljs-number">15.2</span>   <span class="hljs-number">8</span> <span class="hljs-number">304.0</span> <span class="hljs-number">150</span> <span class="hljs-number">3.15</span> <span class="hljs-number">3.435</span> <span class="hljs-number">17.30</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>24          Camaro Z28 <span class="hljs-number">13.3</span>   <span class="hljs-number">8</span> <span class="hljs-number">350.0</span> <span class="hljs-number">245</span> <span class="hljs-number">3.73</span> <span class="hljs-number">3.840</span> <span class="hljs-number">15.41</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>25    Pontiac Firebird <span class="hljs-number">19.2</span>   <span class="hljs-number">8</span> <span class="hljs-number">400.0</span> <span class="hljs-number">175</span> <span class="hljs-number">3.08</span> <span class="hljs-number">3.845</span> <span class="hljs-number">17.05</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br>26           Fiat X1-<span class="hljs-number">9</span> <span class="hljs-number">27.3</span>   <span class="hljs-number">4</span>  <span class="hljs-number">79.0</span>  <span class="hljs-number">66</span> <span class="hljs-number">4.08</span> <span class="hljs-number">1.935</span> <span class="hljs-number">18.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">1</span><br>27       Porsche <span class="hljs-number">914</span>-<span class="hljs-number">2</span> <span class="hljs-number">26.0</span>   <span class="hljs-number">4</span> <span class="hljs-number">120.3</span>  <span class="hljs-number">91</span> <span class="hljs-number">4.43</span> <span class="hljs-number">2.140</span> <span class="hljs-number">16.70</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">2</span><br>28        Lotus Europa <span class="hljs-number">30.4</span>   <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span> <span class="hljs-number">113</span> <span class="hljs-number">3.77</span> <span class="hljs-number">1.513</span> <span class="hljs-number">16.90</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">2</span><br>29      Ford Pantera L <span class="hljs-number">15.8</span>   <span class="hljs-number">8</span> <span class="hljs-number">351.0</span> <span class="hljs-number">264</span> <span class="hljs-number">4.22</span> <span class="hljs-number">3.170</span> <span class="hljs-number">14.50</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">4</span><br>30        Ferrari Dino <span class="hljs-number">19.7</span>   <span class="hljs-number">6</span> <span class="hljs-number">145.0</span> <span class="hljs-number">175</span> <span class="hljs-number">3.62</span> <span class="hljs-number">2.770</span> <span class="hljs-number">15.50</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span><br>31       Maserati Bora <span class="hljs-number">15.0</span>   <span class="hljs-number">8</span> <span class="hljs-number">301.0</span> <span class="hljs-number">335</span> <span class="hljs-number">3.54</span> <span class="hljs-number">3.570</span> <span class="hljs-number">14.60</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-number">5</span>    <span class="hljs-number">8</span><br>32          Volvo <span class="hljs-number">142</span>E <span class="hljs-number">21.4</span>   <span class="hljs-number">4</span> <span class="hljs-number">121.0</span> <span class="hljs-number">109</span> <span class="hljs-number">4.11</span> <span class="hljs-number">2.780</span> <span class="hljs-number">18.60</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>我们可以删除 MySQL 数据库中的表，将 <code>DROP TABLE</code> 语句传递到 <code>dbSendQuery()</code> 中，就像我们使用它查询表中的数据一样。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># Delete the &quot;mtcars&quot; table.</span><br>dbSendQuery(conn, <span class="hljs-string">&#x27;DROP TABLE IF EXISTS mtcars&#x27;</span>)<br><br><span class="hljs-comment"># List the tables available in this database.</span><br>dbListTables(conn)<br><br><span class="hljs-comment"># 执行上面的代码后，我们可以看到表在MySQL环境中被删除。</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>     <span class="hljs-string">&quot;mtcars&quot;</span>           <span class="hljs-string">&quot;tbl&quot;</span>              <span class="hljs-string">&quot;tcount_tbl&quot;</span>       <span class="hljs-string">&quot;transaction_test&quot;</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;employee_tbl&quot;</span>     <span class="hljs-string">&quot;tbl&quot;</span>              <span class="hljs-string">&quot;tcount_tbl&quot;</span>       <span class="hljs-string">&quot;transaction_test&quot;</span><br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言图表</title>
      <link href="post/b35ac98a.html"/>
      <url>post/b35ac98a.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>R 提供了非常丰富的绘图功能，可以通过命令：<code>demo(graphics)</code>（二维图表） 或者 <code>demo(persp)</code>（三维图表）来体验 R 绘图功能的强大。</p><p>图形工具是 R 环境的一个重要组成部分。R 提供了多种绘图相关的命令，分成三类：</p><ul><li><strong>高级绘图命令</strong>：在图形设备上产生一个新的图区，它可能包括坐标轴，标签，标题等等。</li><li><strong>低级绘图命令</strong>：在一个已经存在的图上加上更多的图形元素，如额外的点，线和标签。</li><li><strong>交互式图形命令</strong>：允许交互式地用鼠标在一个已经存在的图上添加图形信息或者提取图形信息。</li></ul><p>下面介绍 R 的常用图表。</p><h1 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h1><p>条形图表示矩形条中的数据，条的长度与变量的值成比例。R 语言使用函数 <code>barplot()</code> 创建条形图。R 语言可以在条形图中绘制垂直和水平条。在条形图中，每个条可以给予不同的颜色。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建条形图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">barplot(H, xlab, ylab, main, names.arg, col)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>H</code> 是包含在条形图中使用的数值的向量或矩阵。</li><li><code>xlab</code> 是 <code>x</code> 轴的标签。</li><li><code>ylab</code> 是 <code>y</code> 轴的标签。</li><li><code>main</code> 是条形图的标题。</li><li><code>names.arg</code> 是在每个条下出现的名称的向量。</li><li><code>col</code> 用于向图中的条形提供颜色。</li></ul><h2 id="创建条形图"><a href="#创建条形图" class="headerlink" title="创建条形图"></a>创建条形图</h2><p>使用输入向量和每个条的名称创建一个简单的条形图。</p><p>以下脚本将创建并保存当前 R 语言工作目录中的条形图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>H &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;barchart.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>barplot(H)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/barchart.png" alt></p><h2 id="条形图标签，标题和颜色"><a href="#条形图标签，标题和颜色" class="headerlink" title="条形图标签，标题和颜色"></a>条形图标签，标题和颜色</h2><p>可以通过添加更多参数来扩展条形图的功能。主要参数用于添加标题。<code>col</code> 参数用于向条形添加颜色。<code>name.args</code> 是具有与输入向量相同数量的值的向量，以描述每个条的含义。</p><p>以下脚本将在当前 R 语言工作目录中创建并保存条形图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>H &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br>M &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;Jul&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;barchart_months_revenue.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>barplot(H, names.arg = M, xlab = <span class="hljs-string">&quot;Month&quot;</span>, ylab = <span class="hljs-string">&quot;Revenue&quot;</span>, col = <span class="hljs-string">&quot;blue&quot;</span>, main = <span class="hljs-string">&quot;Revenue chart&quot;</span>, border = <span class="hljs-string">&quot;red&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/barchart_months_revenue.png" alt></p><h2 id="组合条形图和堆积条形图"><a href="#组合条形图和堆积条形图" class="headerlink" title="组合条形图和堆积条形图"></a>组合条形图和堆积条形图</h2><p>我们可以使用矩阵作为输入值，在每个条中创建条形图和堆叠组的条形图。</p><p>超过两个变量表示为用于创建组合条形图和堆叠条形图的矩阵。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the input vectors.</span><br>colors &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>)<br>months &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;Jul&quot;</span>)<br>regions &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>)<br><br><span class="hljs-comment"># Create the matrix of the values.</span><br>Values &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>), nrow = <span class="hljs-number">3</span>, ncol = <span class="hljs-number">5</span>, byrow = <span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;barchart_stacked.png&quot;</span>)<br><br><span class="hljs-comment"># Create the bar chart.</span><br>barplot(Values, main = <span class="hljs-string">&quot;total revenue&quot;</span>, names.arg = months, xlab = <span class="hljs-string">&quot;month&quot;</span>, ylab = <span class="hljs-string">&quot;revenue&quot;</span>, col = colors)<br><br><span class="hljs-comment"># Add the legend to the chart.</span><br>legend(<span class="hljs-string">&quot;topleft&quot;</span>, regions, cex = <span class="hljs-number">1.3</span>, fill = colors)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/barchart_stacked.png" alt></p><h1 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h1><p>箱线图是数据集中的数据分布良好的度量。它将数据集分成三个四分位数。此图表表示数据集中的最小值，最大值，中值，第一四分位数和第三四分位数。它还可用于通过绘制每个数据集的箱线图来比较数据集之间的数据分布。</p><p>R 语言中使用 <code>boxplot()</code> 函数来创建箱线图。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建箱线图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">boxplot(x, data, notch, varwidth, <span class="hljs-built_in">names</span>, main)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量或公式。</li><li><code>data</code> 是数据框。</li><li><code>notch</code> 是逻辑值。设置为 <code>TRUE</code> 以绘制凹口。</li><li><code>varwidth</code> 是一个逻辑值。设置为 <code>TRUE</code> 以绘制与样本大小成比例的框的宽度。</li><li><code>names</code> 是将打印在每个箱线图下的组标签。</li><li><code>main</code> 用于给图表标题。</li></ul><p>我们使用 R 语言环境中可用的数据集 <code>mtcars</code> 来创建基本箱线图。让我们看看 <code>mtcars</code> 中的列 <code>mpg</code> 和 <code>cyl</code>。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;mpg&#x27;</span>, <span class="hljs-string">&#x27;cyl&#x27;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                   mpg  cyl<br>Mazda RX4         <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span><br>Mazda RX4 Wag     <span class="hljs-number">21.0</span>   <span class="hljs-number">6</span><br>Datsun <span class="hljs-number">710</span>        <span class="hljs-number">22.8</span>   <span class="hljs-number">4</span><br>Hornet <span class="hljs-number">4</span> Drive    <span class="hljs-number">21.4</span>   <span class="hljs-number">6</span><br>Hornet Sportabout <span class="hljs-number">18.7</span>   <span class="hljs-number">8</span><br>Valiant           <span class="hljs-number">18.1</span>   <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></p><h2 id="创建箱线图"><a href="#创建箱线图" class="headerlink" title="创建箱线图"></a>创建箱线图</h2><p>以下脚本将为 <code>mpg</code>（英里 / 加仑）和 <code>cyl</code>（气缸数）之间的关系创建箱线图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;boxplot.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>boxplot(mpg ~ cyl, data = mtcars, xlab = <span class="hljs-string">&quot;Number of Cylinders&quot;</span>, ylab = <span class="hljs-string">&quot;Miles Per Gallon&quot;</span>, main = <span class="hljs-string">&quot;Mileage Data&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/boxplot.png" alt></p><h2 id="带槽的箱线图"><a href="#带槽的箱线图" class="headerlink" title="带槽的箱线图"></a>带槽的箱线图</h2><p>我们可以绘制带槽的箱线图，以了解不同数据组的中值如何相互匹配。以下脚本将为每个数据组创建一个带缺口的箱线图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;boxplot_with_notch.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>boxplot(mpg ~ cyl, data = mtcars, xlab = <span class="hljs-string">&quot;Number of Cylinders&quot;</span>, ylab = <span class="hljs-string">&quot;Miles Per Gallon&quot;</span>, main = <span class="hljs-string">&quot;Mileage Data&quot;</span>, notch = <span class="hljs-literal">TRUE</span>, varwidth = <span class="hljs-literal">TRUE</span>, col = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>), <span class="hljs-built_in">names</span> = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;High&quot;</span>, <span class="hljs-string">&quot;Medium&quot;</span>, <span class="hljs-string">&quot;Low&quot;</span>))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/boxplot_with_notch.png" alt></p><h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><p>直方图表示被存储到范围中的变量的值的频率。直方图类似于条形图，但不同之处在于将值分组为连续范围。直方图中的每个柱表示该范围中存在的值的数量的高度。</p><p>R 语言使用 <code>hist()</code> 函数创建直方图。此函数使用向量作为输入，并使用一些更多的参数来绘制直方图。</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>使用 R 语言创建直方图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">hist(v, main, xlab, xlim, ylim, breaks, col, border)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>v</code> 是包含直方图中使用的数值的向量。</li><li><code>main</code> 表示图表的标题。</li><li><code>col</code> 用于设置条的颜色。</li><li><code>border</code> 用于设置每个条的边框颜色。</li><li><code>xlab</code> 用于给出 <code>x</code> 轴的描述。</li><li><code>xlim</code> 用于指定 <code>x</code> 轴上的值的范围。</li><li><code>ylim</code> 用于指定 <code>y</code> 轴上的值的范围。</li><li><code>break</code> 用于提及每个条的宽度。</li></ul><h2 id="创建直方图"><a href="#创建直方图" class="headerlink" title="创建直方图"></a>创建直方图</h2><p>使用输入 <code>vector</code>，<code>label</code>，<code>col</code> 和边界参数创建一个简单的直方图。</p><p>下面给出的脚本将创建并保存当前R 语言工作目录中的直方图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">8</span>, <span class="hljs-number">36</span>, <span class="hljs-number">22</span>, <span class="hljs-number">12</span>, <span class="hljs-number">41</span>, <span class="hljs-number">31</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;histogram.png&quot;</span>)<br><br><span class="hljs-comment"># Create the histogram.</span><br>hist(v, xlab = <span class="hljs-string">&quot;Weight&quot;</span>, col = <span class="hljs-string">&quot;yellow&quot;</span>, border = <span class="hljs-string">&quot;blue&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/histogram.png" alt></p><h2 id="X-和-Y-值的范围"><a href="#X-和-Y-值的范围" class="headerlink" title="X 和 Y 值的范围"></a>X 和 Y 值的范围</h2><p>要指定 X 轴和 Y 轴允许的值的范围，我们可以使用 <code>xlim</code> 和 <code>ylim</code> 参数。</p><p>每个条的宽度可以通过使用间隔来确定。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">8</span>, <span class="hljs-number">36</span>, <span class="hljs-number">22</span>, <span class="hljs-number">12</span>, <span class="hljs-number">41</span>, <span class="hljs-number">31</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;histogram_lim_breaks.png&quot;</span>)<br><br><span class="hljs-comment"># Create the histogram.</span><br>hist(v, xlab = <span class="hljs-string">&quot;Weight&quot;</span>, col = <span class="hljs-string">&quot;green&quot;</span>, border = <span class="hljs-string">&quot;red&quot;</span>, xlim = <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>), ylim = <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>), breaks = <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/histogram_lim_breaks.png" alt></p><h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><p>折线图是通过在它们之间绘制线段来连接一系列点的图。这些点在它们的坐标（通常是 X 坐标）值之一中排序。折线图通常用于识别数据中的趋势。</p><p>R 语言中的 <code>plot()</code> 函数用于创建折线图。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建折线图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">plot(v, type, col, xlab, ylab)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>v</code> 是包含数值的向量。</li><li><code>type</code> 采用值 <code>p</code> 仅绘制点，<code>l</code> 仅绘制线和 <code>o</code> 绘制点和线。</li><li><code>xlab</code> 是x轴的标签。</li><li><code>ylab</code> 是y轴的标签。</li><li><code>main</code> 是图表的标题。</li><li><code>col</code> 用于给点和线的颜色。</li></ul><h2 id="创建折线图"><a href="#创建折线图" class="headerlink" title="创建折线图"></a>创建折线图</h2><p>使用输入向量和类型参数 <code>o</code> 创建简单的折线图。以下脚本将在当前 R 工作目录中创建并保存折线图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;line_chart.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart. </span><br>plot(v, type = <span class="hljs-string">&quot;o&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/line_chart.png" alt></p><h2 id="折线图标题，颜色和标签"><a href="#折线图标题，颜色和标签" class="headerlink" title="折线图标题，颜色和标签"></a>折线图标题，颜色和标签</h2><p>线图的特征可以通过使用附加参数来扩展。我们向点和线添加颜色，为图表添加标题，并向轴添加标签。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;line_chart_label_colored.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>plot(v, type = <span class="hljs-string">&quot;o&quot;</span>, col = <span class="hljs-string">&quot;red&quot;</span>, xlab = <span class="hljs-string">&quot;Month&quot;</span>, ylab = <span class="hljs-string">&quot;Rain fall&quot;</span>, main = <span class="hljs-string">&quot;Rain fall chart&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/line_chart_label_colored.png" alt></p><h2 id="多线型折线图"><a href="#多线型折线图" class="headerlink" title="多线型折线图"></a>多线型折线图</h2><p>通过使用 <code>lines()</code> 函数，可以在同一个图表上绘制多条线。</p><p>在绘制第一行之后，<code>lines()</code> 函数可以使用一个额外的向量作为输入来绘制图表中的第二行。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data for the chart.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>, <span class="hljs-number">41</span>)<br>t &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;line_chart_2_lines.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the bar chart.</span><br>plot(v, type = <span class="hljs-string">&quot;o&quot;</span>, col = <span class="hljs-string">&quot;red&quot;</span>, xlab = <span class="hljs-string">&quot;Month&quot;</span>, ylab = <span class="hljs-string">&quot;Rain fall&quot;</span>, main = <span class="hljs-string">&quot;Rain fall chart&quot;</span>)<br><br>lines(t, type = <span class="hljs-string">&quot;o&quot;</span>, col = <span class="hljs-string">&quot;blue&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/line_chart_2_lines.png" alt></p><h1 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h1><p>散点图显示在笛卡尔平面中绘制的许多点。每个点表示两个变量的值。在水平轴上选择一个变量，在垂直轴上选择另一个变量。</p><p>R 语言使用 <code>plot()</code> 函数创建简单散点图。</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><p>在 R 语言中创建散点图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">plot(x, y, main, xlab, ylab, xlim, ylim, axes)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是其值为水平坐标的数据集。</li><li><code>y</code> 是其值是垂直坐标的数据集。</li><li><code>main</code> 要是图形的图块。</li><li><code>xlab</code> 是水平轴上的标签。</li><li><code>ylab</code> 是垂直轴上的标签。</li><li><code>xlim</code> 是用于绘图的 <code>x</code> 的值的极限。</li><li><code>ylim</code> 是用于绘图的 <code>y</code> 的值的极限。</li><li><code>axes</code> 指示是否应在绘图上绘制两个轴。</li></ul><h2 id="创建散点图"><a href="#创建散点图" class="headerlink" title="创建散点图"></a>创建散点图</h2><p>我们使用 R 语言环境中可用的数据集 <code>mtcars</code> 来创建基本散点图。让我们使用 <code>mtcars</code> 中的 <code>wt</code> 和 <code>mpg</code> 列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;wt&#x27;</span>, <span class="hljs-string">&#x27;mpg&#x27;</span>)]<br>print(head(input))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>                    wt      mpg<br>Mazda RX4           <span class="hljs-number">2.620</span>   <span class="hljs-number">21.0</span><br>Mazda RX4 Wag       <span class="hljs-number">2.875</span>   <span class="hljs-number">21.0</span><br>Datsun <span class="hljs-number">710</span>          <span class="hljs-number">2.320</span>   <span class="hljs-number">22.8</span><br>Hornet <span class="hljs-number">4</span> Drive      <span class="hljs-number">3.215</span>   <span class="hljs-number">21.4</span><br>Hornet Sportabout   <span class="hljs-number">3.440</span>   <span class="hljs-number">18.7</span><br>Valiant             <span class="hljs-number">3.460</span>   <span class="hljs-number">18.1</span><br></code></pre></td></tr></table></figure></p><p>以下脚本将为 <code>wt</code>（重量）和 <code>mpg</code>（英里/加仑）之间的关系创建一个散点图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the input values.</span><br>input &lt;- mtcars[, <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;wt&#x27;</span>, <span class="hljs-string">&#x27;mpg&#x27;</span>)]<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;scatterplot.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.</span><br>plot(x = input$wt, y = input$mpg, xlab = <span class="hljs-string">&quot;Weight&quot;</span>, ylab = <span class="hljs-string">&quot;Milage&quot;</span>, xlim = <span class="hljs-built_in">c</span>(<span class="hljs-number">2.5</span>, <span class="hljs-number">5</span>), ylim = <span class="hljs-built_in">c</span>(<span class="hljs-number">15</span>, <span class="hljs-number">30</span>), main = <span class="hljs-string">&quot;Weight vs Milage&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/scatterplot.png" alt></p><h2 id="散点图矩阵"><a href="#散点图矩阵" class="headerlink" title="散点图矩阵"></a>散点图矩阵</h2><p>当我们有两个以上的变量，我们想找到一个变量和其余变量之间的相关性，我们使用散点图矩阵。我们使用 <code>pairs()</code> 函数创建散点图的矩阵。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>在 R 中创建散点图矩阵的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">pairs(formula, data)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>formula</code> 表示成对使用的一系列变量。</li><li><code>data</code> 表示将从其获取变量的数据集。</li></ul><h3 id="创建散点图矩阵"><a href="#创建散点图矩阵" class="headerlink" title="创建散点图矩阵"></a>创建散点图矩阵</h3><p>每个变量与每个剩余变量配对。为每对绘制散点图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;scatterplot_matrices.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the matrices between 4 variables giving 12 plots.</span><br><br><span class="hljs-comment"># One variable with 3 others and total 4 variables.</span><br><br>pairs(~wt + mpg + disp + cyl, data = mtcars, main = <span class="hljs-string">&quot;Scatterplot Matrix&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当执行上面的代码中，我们得到以下输出。</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/scatterplot_matrices.png" alt></p><h1 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h1><p>R 编程语言有许多库来创建图表和图表。饼图是将值表示为具有不同颜色的圆的切片。切片被标记，并且对应于每个片的数字也在图表中表示。</p><p>在 R 语言中，饼图是使用 <code>pie()</code> 函数创建的，它使用正数作为向量输入。附加参数用于控制标签，颜色，标题等。</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><p>使用 R 语言创建饼图的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">pie(x, labels, radius, main, col, clockwise)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是包含饼图中使用的数值的向量。</li><li><code>labels</code> 用于给出切片的描述。</li><li><code>radius</code> 表示饼图圆的半径（值 <code>-1</code> 和 <code>+1</code> 之间）。</li><li><code>main</code> 表示图表的标题。</li><li><code>col</code> 表示调色板。</li><li><code>clockwise</code> 是指示片段是顺时针还是逆时针绘制的逻辑值。</li></ul><h2 id="创建饼状图"><a href="#创建饼状图" class="headerlink" title="创建饼状图"></a>创建饼状图</h2><p>使用输入向量和标签创建一个非常简单的饼图。以下脚本将创建并保存当前 R 语言工作目录中的饼图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>labels &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pie.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>pie(x, labels)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/pie.png" alt></p><h2 id="饼图标题和颜色"><a href="#饼图标题和颜色" class="headerlink" title="饼图标题和颜色"></a>饼图标题和颜色</h2><p>我们可以通过向函数中添加更多参数来扩展图表的功能。我们将使用参数 <code>main</code> 向图表添加标题，另一个参数是 <code>col</code>，它将在绘制图表时使用彩虹色板。托盘的长度应与图表中的值的数量相同。因此，我们使用 <code>length(x)</code>。</p><p>以下脚本将创建并保存当前 R 语言工作目录中的饼图。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>labels &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pie_title_colours.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart with title and rainbow color pallet.</span><br>pie(x, labels, main = <span class="hljs-string">&quot;City pie chart&quot;</span>, col = rainbow(<span class="hljs-built_in">length</span>(x)))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/pie_title_colours.png" alt></p><h2 id="切片百分比和图表图例"><a href="#切片百分比和图表图例" class="headerlink" title="切片百分比和图表图例"></a>切片百分比和图表图例</h2><p>我们可以通过创建其他图表变量来添加切片百分比和图表图例。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>labels &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br>piepercent&lt;- <span class="hljs-built_in">round</span>(<span class="hljs-number">100</span>*x/<span class="hljs-built_in">sum</span>(x), <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;pie_percentage_legends.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>pie(x, labels = piepercent, main = <span class="hljs-string">&quot;City pie chart&quot;</span>, col = rainbow(<span class="hljs-built_in">length</span>(x))), legend(<span class="hljs-string">&quot;topright&quot;</span>, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>), cex = <span class="hljs-number">0.8</span>, fill = rainbow(<span class="hljs-built_in">length</span>(x)))<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/pie_percentage_legends.png" alt></p><h2 id="3D饼图"><a href="#3D饼图" class="headerlink" title="3D饼图"></a>3D饼图</h2><p>可以使用其他软件包绘制具有 3 个维度的饼图。软件包 <code>plotrix</code> 有一个名为 <code>pie3D()</code> 的函数，用于此。</p><p>如果没有安装 <code>plotrix</code> 包可以使用 <code>install.packages(&quot;plotrix&quot;)</code> 语句安装。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Get the library.</span><br>library(plotrix)<br><br><span class="hljs-comment"># Create data for the graph.</span><br>x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">62</span>, <span class="hljs-number">10</span>, <span class="hljs-number">53</span>)<br>lbl &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;London&quot;</span>, <span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Singapore&quot;</span>, <span class="hljs-string">&quot;Mumbai&quot;</span>)<br><br><span class="hljs-comment"># Give the chart file a name.</span><br>png(file = <span class="hljs-string">&quot;3d_pie_chart.png&quot;</span>)<br><br><span class="hljs-comment"># Plot the chart.</span><br>pie3D(x, labels = lbl, explode = <span class="hljs-number">0.1</span>, main = <span class="hljs-string">&quot;Pie Chart of Countries&quot;</span>)<br><br><span class="hljs-comment"># Save the file.</span><br>dev.off()<br></code></pre></td></tr></table></figure></p><p>当我们执行上面的代码，它产生以下结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_chart/3d_pie_chart.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 语言教程</title>
      <link href="post/de0e67e.html"/>
      <url>post/de0e67e.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="R-的简介"><a href="#R-的简介" class="headerlink" title="R 的简介"></a>R 的简介</h2><ul><li>R 语言是用于统计分析，图形表示和报告的编程语言和软件环境。R 语言由 Ross Ihaka 和 Robert Gentleman 在新西兰奥克兰大学创建，目前由 R 语言开发核心团队开发。</li><li>R 语言的核心是解释计算机语言，其允许分支和循环以及使用函数的模块化编程。R 语言允许与以 C，C ++，.Net，Python 或 FORTRAN 语言编写的过程集成以提高效率。</li><li>R 语言在 GNU 通用公共许可证下免费提供，并为各种操作系统（如 Linux，Windows 和 Mac）提供预编译的二进制版本。</li><li>R 是一个在 GNU 风格的副本左侧的自由软件，GNU 项目的官方部分叫做 GNU S.</li></ul><h2 id="R-的演变"><a href="#R-的演变" class="headerlink" title="R 的演变"></a>R 的演变</h2><p>R 语言最初是由新西兰奥克兰奥克兰大学统计系的 Ross Ihaka 和 Robert Gentleman 写的。R 语言于 1993 年首次亮相。</p><ul><li>一大群人通过发送代码和错误报告对 R 做出了贡献。</li><li>自 1997 年年中以来，已经有一个核心组（R 核心团队）可以修改 R 源代码归档。</li></ul><h2 id="R-的特点"><a href="#R-的特点" class="headerlink" title="R 的特点"></a>R 的特点</h2><p>如前所述，R 语言是用于统计分析，图形表示和报告的编程语言和软件环境。以下是 R 语言的重要特点：</p><ul><li>R 语言是一种开发良好，简单有效的编程语言，包括条件，循环，用户定义的递归函数以及输入和输出设施。</li><li>R 语言具有有效的数据处理和存储设施，</li><li>R 语言提供了一套用于数组，列表，向量和矩阵计算的运算符。</li><li>R 语言为数据分析提供了大型，一致和集成的工具集合。</li><li>R 语言提供直接在计算机上或在纸张上打印的图形设施用于数据分析和显示。</li></ul><p>R 语言是世界上最广泛使用的统计编程语言。它是数据科学家的第一选择，并由一个充满活力和有才华的贡献者社区支持。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>根据需要，您可以在 R 语言命令提示符处编程，也可以使用 R 语言脚本文件编写程序。</p><h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><p>如果你已经配置好 R 语言环境，那么你只需要按一下的命令便可轻易开启命令提示符</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ R<br></code></pre></td></tr></table></figure></p><p>这将启动 R 语言解释器，你会得到一个提示 <code>&gt;</code> 在那里你可以开始输入你的程序，具体如下。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; myString &lt;- <span class="hljs-string">&quot;Hello, World!&quot;</span><br>&gt; <span class="hljs-built_in">print</span>(myString)<br>[1] <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure></p><p>在这里，第一个语句先定义一个字符串变量 <code>myString</code>，并将 <code>Hello，World！</code> 赋值其中，第二句则使用 <code>print()</code> 语句将变量 <code>myString</code> 的内容进行打印。</p><h2 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h2><p>通常，您将通过在脚本文件中编写程序来执行编程，然后在命令提示符下使用 R 解释器（称为 <code>Rscript</code>）来执行这些脚本。所以让我们开始在一个命名为 <code>test.R</code> 的文本文件中编写下面的代码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># My first program in R Programming</span><br>myString &lt;- <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(myString)<br></code></pre></td></tr></table></figure></p><p>将上述代码保存在 <code>test.R</code> 文件中，并在 Linux 命令提示符下执行，如下所示。即使您使用的是 Windows 或其他系统，语法也将保持不变。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ Rscript test.R <br></code></pre></td></tr></table></figure></p><p>当我们运行上面的程序，它产生以下结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[1] <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释能帮助您解释 R 语言程序中的脚本，它们在实际执行程序时会被解释器忽略。单个注释使用 <code>#</code> 在语句的开头写入，如下所示</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># My first program in R Programming</span><br></code></pre></td></tr></table></figure></p><p>R 语言不支持多行注释，但你可以使用一个小技巧，如下</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(<span class="hljs-literal">FALSE</span>) &#123;<br>   <span class="hljs-string">&quot;This is a demo for multi-line comments and it should be put inside either a single</span><br><span class="hljs-string">      OR double quote&quot;</span><br>&#125;<br><br>myString &lt;- <span class="hljs-string">&quot;Hello, World!&quot;</span><br>print(myString)<br></code></pre></td></tr></table></figure></p><p>虽然上面的注释将由 R 解释器执行，但它们不会干扰您的实际程序。但是你必须为内容加上单引号或双引号。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>通常，在使用任何编程语言进行编程时，您需要使用各种变量来存储各种信息。变量只是保留值的存储位置。这意味着，当你创建一个变量，你必须在内存中保留一些空间来存储它们。</p><p>您可能想存储各种数据类型的信息，如字符，宽字符，整数，浮点，双浮点，布尔等。基于变量的数据类型，操作系统分配内存并决定什么可以存储在保留内存中。</p><p>与其他编程语言（如 C 中的 C 和 Java）相反，变量不会声明为某种数据类型。变量分配有 R 对象，R 对象的数据类型变为变量的数据类型。尽管有很多类型的 R 对象，但经常使用的是：</p><ul><li><a href="#Vectors-向量">Vectors 向量</a></li><li><a href="#Lists-列表">Lists 列表</a></li><li><a href="#Matrices-矩阵">Matrices 矩阵</a></li><li><a href="#Arrays-数组">Arrays 数组</a></li><li><a href="#Factors-因子">Factors 因子</a></li><li><a href="#Data-Frames-数据框">Data Frames 数据框</a></li></ul><p>这些对象中最简单的是向量对象，并且这些原子向量有六种数据类型，也称为六类向量。其他 R 对象建立在原子向量之上。</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">取值</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">Logical（逻辑型）</td><td style="text-align:center">TRUE, FALSE</td><td style="text-align:left"><code>v &lt;- TRUE</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;logical&quot;</code></td></tr><tr><td style="text-align:center">Numeric（数字）</td><td style="text-align:center">12.3，5，999</td><td style="text-align:left"><code>v &lt;- 23.5</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;numeric&quot;</code></td></tr><tr><td style="text-align:center">Integer（整型）</td><td style="text-align:center">2L，34L，0L</td><td style="text-align:left"><code>v &lt;- 2L</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;integer&quot;</code></td></tr><tr><td style="text-align:center">Complex（复合型）</td><td style="text-align:center">3 + 2i</td><td style="text-align:left"><code>v &lt;- 2+5i</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;complex&quot;</code></td></tr><tr><td style="text-align:center">Character（字符）</td><td style="text-align:center">&#39;a&#39; , &quot;good&quot;, &quot;TRUE&quot;, &#39;23.4&#39;</td><td style="text-align:left"><code>v &lt;- &quot;TRUE&quot;</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;character&quot;</code></td></tr><tr><td style="text-align:center">Raw（原型）</td><td style="text-align:center">&quot;Hello&quot; 被存储为 48 65 6c 6c 6f</td><td style="text-align:left"><code>v &lt;- charToRaw(&quot;Hello&quot;)</code> <br> <code>print(class(v))</code> <br> <code>[1] &quot;raw&quot;</code></td></tr></tbody></table></div><p>在 R 编程中，非常基本的数据类型是称为向量的 R 对象，其保存如上所示的不同类的元素。请注意，在 R 中，类的数量不仅限于上述六种类型。例如，我们可以使用许多原子向量并创建一个数组，其类将成为数组。</p><h2 id="Vectors-向量"><a href="#Vectors-向量" class="headerlink" title="Vectors 向量"></a>Vectors 向量</h2><p>当你想用多个元素创建向量时，你应该使用 <code>c()</code> 函数，这意味着将元素组合成一个向量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector.</span><br>apple &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>)<br>print(apple)<br><br><span class="hljs-comment"># Get the class of the vector.</span><br>print(<span class="hljs-built_in">class</span>(apple))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;red&quot;</span>    <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;character&quot;</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#向量">向量</a>章节。</p><h2 id="Lists-列表"><a href="#Lists-列表" class="headerlink" title="Lists 列表"></a>Lists 列表</h2><p>列表是一个 R 对象，它可以在其中包含许多不同类型的元素，如向量，函数甚至其中的另一个列表。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list.</span><br>list1 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>), <span class="hljs-number">21.3</span>, <span class="hljs-built_in">sin</span>)<br><br><span class="hljs-comment"># Print the list.</span><br>print(list1)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><br>[[<span class="hljs-number">2</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">21.3</span><br><br>[[<span class="hljs-number">3</span>]]<br><span class="hljs-keyword">function</span> (x)  .Primitive(<span class="hljs-string">&quot;sin&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#列表">列表</a>章节。</p><h2 id="Matrices-矩阵"><a href="#Matrices-矩阵" class="headerlink" title="Matrices 矩阵"></a>Matrices 矩阵</h2><p>矩阵是二维矩形数据集。它可以使用矩阵函数的向量输入创建。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a matrix.</span><br>M = matrix( <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>), nrow = <span class="hljs-number">2</span>, ncol = <span class="hljs-number">3</span>, byrow = <span class="hljs-literal">TRUE</span>)<br>print(M)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-string">&quot;b&quot;</span> <br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;c&quot;</span>  <span class="hljs-string">&quot;b&quot;</span>  <span class="hljs-string">&quot;a&quot;</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#矩阵">矩阵</a>章节。</p><h2 id="Arrays-数组"><a href="#Arrays-数组" class="headerlink" title="Arrays 数组"></a>Arrays 数组</h2><p>虽然矩阵被限制为二维，但阵列可以具有任何数量的维度。数组函数使用一个 <code>dim</code> 属性创建所需的维数。在下面的例子中，我们创建了一个包含两个元素的数组，每个元素为 <code>3x3</code> 个矩阵。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create an array.</span><br>a &lt;- array(<span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br>print(a)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , <span class="hljs-number">1</span><br><br>     [,<span class="hljs-number">1</span>]     [,<span class="hljs-number">2</span>]     [,<span class="hljs-number">3</span>]    <br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span> <br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">3</span>,] <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span> <br><br>, , <span class="hljs-number">2</span><br><br>     [,<span class="hljs-number">1</span>]     [,<span class="hljs-number">2</span>]     [,<span class="hljs-number">3</span>]    <br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span> <br>[<span class="hljs-number">3</span>,] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;green&quot;</span>  <span class="hljs-string">&quot;yellow&quot;</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#数组">数组</a>章节。</p><h2 id="Factors-因子"><a href="#Factors-因子" class="headerlink" title="Factors 因子"></a>Factors 因子</h2><p>因子是使用向量创建的 R 对象。它将向量与向量中元素的不同值一起存储为标签。标签总是字符，不管它在输入向量中是数字还是字符或布尔等。它们在统计建模中非常有用。使用 <code>factor()</code> 函数创建因子。<code>nlevels</code> 函数给出级别计数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector.</span><br>apple_colors &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br><br><span class="hljs-comment"># Create a factor object.</span><br>factor_apple &lt;- factor(apple_colors)<br><br><span class="hljs-comment"># Print the factor.</span><br>print(factor_apple)<br>print(nlevels(factor_apple))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] green  green  yellow  red   red   red   green <br>Levels: green red yellow<br><span class="hljs-comment"># applying the nlevels function we can know the number of distinct values</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#因子">因子</a>章节。</p><h2 id="Data-Frames-数据框"><a href="#Data-Frames-数据框" class="headerlink" title="Data Frames 数据框"></a>Data Frames 数据框</h2><p>数据框是表格数据对象。与数据框中的矩阵不同，每列可以包含不同的数据模式。第一列可以是数字，而第二列可以是字符，第三列可以是逻辑的。它是等长度的向量的列表。使用 <code>data.frame()</code> 函数创建数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>BMI &lt;-  | data.frame(<br>   gender = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;Female&quot;</span>),<br>   height = <span class="hljs-built_in">c</span>(<span class="hljs-number">152</span>, <span class="hljs-number">171.5</span>, <span class="hljs-number">165</span>),<br>   weight = <span class="hljs-built_in">c</span>(<span class="hljs-number">81</span>, <span class="hljs-number">93</span>, <span class="hljs-number">78</span>),<br>   Age = <span class="hljs-built_in">c</span>(<span class="hljs-number">42</span>, <span class="hljs-number">38</span>, <span class="hljs-number">26</span>)<br>)<br>print(BMI)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  gender height weight Age<br>1   Male  <span class="hljs-number">152.0</span>     <span class="hljs-number">81</span>  <span class="hljs-number">42</span><br>2   Male  <span class="hljs-number">171.5</span>     <span class="hljs-number">93</span>  <span class="hljs-number">38</span><br>3 Female  <span class="hljs-number">165.0</span>     <span class="hljs-number">78</span>  <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure></p><p>更多方法实例请点击查看 R 语言<a href="#数据框">数据框</a>章节。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量为我们提供了我们的程序可以操作的命名存储。R 语言中的变量可以存储原子向量，原子向量组或许多 <code>Robject</code> 的组合。有效的变量名称由字母，数字和点或下划线字符组成。变量名以字母或不以数字后跟的点开头。</p><div class="table-container"><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">合法性</th><th style="text-align:center">原因</th></tr></thead><tbody><tr><td style="text-align:center">var_name2.</td><td style="text-align:center">有效</td><td style="text-align:center">有字母，数字，点和下划线</td></tr><tr><td style="text-align:center">VAR_NAME％</td><td style="text-align:center">无效</td><td style="text-align:center">有字符&#39;％&#39;。只有点(.)和下划线允许的。</td></tr><tr><td style="text-align:center">2var_name</td><td style="text-align:center">无效</td><td style="text-align:center">以数字开头</td></tr><tr><td style="text-align:center">.var_name, var.name</td><td style="text-align:center">有效</td><td style="text-align:center">可以用一个点(.)，但启动点(.)，不应该后跟一个数字。</td></tr><tr><td style="text-align:center">.2var_name</td><td style="text-align:center">无效</td><td style="text-align:center">起始点后面是数字使其无效。</td></tr><tr><td style="text-align:center">_var_name</td><td style="text-align:center">无效</td><td style="text-align:center">开头_这是无效的</td></tr></tbody></table></div><p>可以使用向左，向右和等于运算符来为变量分配值。可以使用 <code>print()</code> 或 <code>cat()</code> 函数打印变量的值。<code>cat()</code> 函数将多个项目组合成连续打印输出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Assignment using equal operator.</span><br>var.1 = <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Assignment using leftward operator.</span><br>var.2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;learn&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>)<br><br><span class="hljs-comment"># Assignment using rightward operator.</span><br>c(TRUE, 1) -&gt; var.3<br><br>print(var.1)<br>cat (<span class="hljs-string">&quot;var.1 is &quot;</span>, var.1 , <span class="hljs-string">&quot;&quot;</span>)<br>cat (<span class="hljs-string">&quot;var.2 is &quot;</span>, var.2 , <span class="hljs-string">&quot;&quot;</span>)<br>cat (<span class="hljs-string">&quot;var.3 is &quot;</span>, var.3 , <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>var.1 is  <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <br>var.2 is  learn R <br>var.3 is  <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure></p><p>变量的数据类型在 R 语言中，变量本身没有声明任何数据类型，而是获取分配给它的 R 对象的数据类型。所以 R 称为动态类型语言，这意味着我们可以在程序中使用同一个变量时，一次又一次地更改变量的数据类型。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">var_x &lt;- <span class="hljs-string">&quot;Hello&quot;</span><br>cat(<span class="hljs-string">&quot;The class of var_x is &quot;</span>, <span class="hljs-built_in">class</span>(var_x), <span class="hljs-string">&quot;&quot;</span>)<br><br>var_x &lt;- 34.5<br>cat(<span class="hljs-string">&quot;  Now the class of var_x is &quot;</span>, <span class="hljs-built_in">class</span>(var_x), <span class="hljs-string">&quot;&quot;</span>)<br><br>var_x &lt;- 27L<br>cat(<span class="hljs-string">&quot;   Next the class of var_x becomes &quot;</span>, <span class="hljs-built_in">class</span>(var_x), <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>The <span class="hljs-built_in">class</span> of var_x is  character <br>   Now the <span class="hljs-built_in">class</span> of var_x is  numeric <br>      Next the <span class="hljs-built_in">class</span> of var_x becomes  integer<br></code></pre></td></tr></table></figure></p><h2 id="查找变量"><a href="#查找变量" class="headerlink" title="查找变量"></a>查找变量</h2><p>要知道工作空间中当前可用的所有变量，我们使用 <code>ls()</code> 函数。<code>ls()</code> 函数也可以使用模式来匹配变量名。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">print(ls())<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;my var&quot;</span>     <span class="hljs-string">&quot;my_new_var&quot;</span> <span class="hljs-string">&quot;my_var&quot;</span>     <span class="hljs-string">&quot;var.1&quot;</span>      <br>[<span class="hljs-number">5</span>] <span class="hljs-string">&quot;var.2&quot;</span>      <span class="hljs-string">&quot;var.3&quot;</span>      <span class="hljs-string">&quot;var.name&quot;</span>   <span class="hljs-string">&quot;var_name2.&quot;</span><br>[<span class="hljs-number">9</span>] <span class="hljs-string">&quot;var_x&quot;</span>      <span class="hljs-string">&quot;varname&quot;</span> <br></code></pre></td></tr></table></figure></p><p><strong>注意</strong> ：它是一个示例输出，取决于在您的环境中声明的变量。</p><p><code>ls()</code> 函数可以使用模式来匹配变量名。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># List the variables starting with the pattern &quot;var&quot;.</span><br>print(ls(pattern = <span class="hljs-string">&quot;var&quot;</span>))   <br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;my var&quot;</span>     <span class="hljs-string">&quot;my_new_var&quot;</span> <span class="hljs-string">&quot;my_var&quot;</span>     <span class="hljs-string">&quot;var.1&quot;</span>      <br>[<span class="hljs-number">5</span>] <span class="hljs-string">&quot;var.2&quot;</span>      <span class="hljs-string">&quot;var.3&quot;</span>      <span class="hljs-string">&quot;var.name&quot;</span>   <span class="hljs-string">&quot;var_name2.&quot;</span><br>[<span class="hljs-number">9</span>] <span class="hljs-string">&quot;var_x&quot;</span>      <span class="hljs-string">&quot;varname&quot;</span>    <br></code></pre></td></tr></table></figure></p><p>以点 <code>.</code> 开头的变量被隐藏，它们可以使用 <code>ls()</code> 函数的 <code>all.names = TRUE</code> 参数列出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">print(ls(all.name = <span class="hljs-literal">TRUE</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.cars&quot;</span>        <span class="hljs-string">&quot;.Random.seed&quot;</span> <span class="hljs-string">&quot;.var_name&quot;</span>    <span class="hljs-string">&quot;.varname&quot;</span>     <span class="hljs-string">&quot;.varname2&quot;</span>   <br>[<span class="hljs-number">6</span>] <span class="hljs-string">&quot;my var&quot;</span>       <span class="hljs-string">&quot;my_new_var&quot;</span>   <span class="hljs-string">&quot;my_var&quot;</span>       <span class="hljs-string">&quot;var.1&quot;</span>        <span class="hljs-string">&quot;var.2&quot;</span>        <br>[<span class="hljs-number">11</span>]<span class="hljs-string">&quot;var.3&quot;</span>        <span class="hljs-string">&quot;var.name&quot;</span>     <span class="hljs-string">&quot;var_name2.&quot;</span>   <span class="hljs-string">&quot;var_x&quot;</span>  <br></code></pre></td></tr></table></figure></p><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p>可以使用 <code>rm()</code> 函数删除变量。下面我们删除变量 <code>var.3</code>。打印时，抛出变量错误的值。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">rm(var.3)<br>print(var.3)<br> <br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;var.3&quot;</span><br>Error <span class="hljs-keyword">in</span> print(var.3) : object <span class="hljs-string">&#x27;var.3&#x27;</span> not found<br></code></pre></td></tr></table></figure></p><p>所有的变量可以通过使用 <code>rm()</code> 和 <code>ls()</code> 函数一起删除。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">rm(<span class="hljs-built_in">list</span> = ls())<br>print(ls())<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>character(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符是一个符号，通知编译器执行特定的数学或逻辑操作。R 语言具有丰富的内置运算符，并提供以下类型的运算符。</p><h2 id="运算符的类型"><a href="#运算符的类型" class="headerlink" title="运算符的类型"></a>运算符的类型</h2><p>R 语言中拥有如下几种运算符类型：</p><ul><li><a href="#算术运算符">算术运算符</a></li><li><a href="#关系运算符">关系运算符</a></li><li><a href="#逻辑运算符">逻辑运算符</a></li><li><a href="#赋值运算符">赋值运算符</a></li><li><a href="#其他运算符">其他运算符</a></li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表显示了 R 语言支持的算术运算符。操作符对向量的每个元素起作用。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">两个向量相加</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v+t)</code> <br> 它产生以下结果： <br> <code>[1] 10.0  8.5  10.0</code></td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">两个向量相减</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v-t)</code> <br> 它产生以下结果： <br> <code>[1] -6.0  2.5  2.0</code></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">两个向量相乘</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v*t)</code> <br> 它产生以下结果： <br> <code>[1] 16.0 16.5 24.0</code></td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">将第一个向量与第二个向量相除</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v/t)</code> <br> 它产生以下结果： <br> <code>[1] 0.250000 1.833333 1.500000</code></td></tr><tr><td style="text-align:center">%%</td><td style="text-align:center">两个向量求余</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v%%t)</code> <br> 它产生以下结果： <br> <code>[1] 2.0 2.5 2.0</code></td></tr><tr><td style="text-align:center">%/%</td><td style="text-align:center">两个向量相除求商</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v%/%t)</code> <br> 它产生以下结果： <br> <code>[1] 0 1 1</code></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">将第二向量作为第一向量的指数</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6)</code> <br> <code>t &lt;- c(8, 3, 4)</code> <br> <code>print(v^t)</code> <br> 它产生以下结果： <br> <code>[1]  256.000  166.375 1296.000</code></td></tr></tbody></table></div><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表显示了 R 语言支持的关系运算符。将第一向量的每个元素与第二向量的相应元素进行比较。比较的结果是布尔值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&gt;</td><td style="text-align:center">检查第一向量的每个元素是否大于第二向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v&gt;t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE TRUE FALSE FALSE</code></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">检查第一个向量的每个元素是否小于第二个向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v &lt; t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE FALSE TRUE FALSE</code></td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">检查第一个向量的每个元素是否等于第二个向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v == t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE FALSE FALSE TRUE</code></td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">检查第一向量的每个元素是否小于或等于第二向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v&lt;=t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE FALSE TRUE TRUE</code></td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">检查第一向量的每个元素是否大于或等于第二向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9)</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v&gt;=t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE  TRUE FALSE  TRUE</code></td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">检查第一个向量的每个元素是否不等于第二个向量的相应元素。</td><td style="text-align:left"><code>v &lt;- c(2, 5.5, 6, 9</code> <br> <code>t &lt;- c(8, 2.5, 14, 9)</code> <br> <code>print(v!=t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE TRUE TRUE FALSE</code></td></tr></tbody></table></div><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表显示了 R 语言支持的逻辑运算符。它只适用于逻辑，数字或复杂类型的向量。所有大于 1 的数字被认为是逻辑值 <code>TRUE</code>。</p><p>将第一向量的每个元素与第二向量的相应元素进行比较。比较的结果是布尔值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">它被称为元素逻辑 AND 运算符。<br> 它将第一向量的每个元素与第二向量的相应元素组合， <br> 并且如果两个元素都为 TRUE，则给出输出 TRUE。</td><td style="text-align:left"><code>v &lt;- c(3, 1, TRUE, 2+3i)</code> <br> <code>t &lt;- c(4, 1, FALSE, 2+3i)</code> <br> <code>print(v&amp;t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE TRUE FALSE TRUE</code></td></tr><tr><td style="text-align:center">&amp;vert；</td><td style="text-align:center">它被称为元素逻辑或运算符。<br> 它将第一向量的每个元素与第二向量的相应元素组合， <br> 并且如果元素为真，则给出输出 TRUE。</td><td style="text-align:left"><code>v &lt;- c(3, 0, TRUE, 2+2i)</code> <br> <code>t &lt;- c(4, 0, FALSE, 2+3i)</code> <br> <code>print(v</code>&vert;<code>t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE FALSE TRUE TRUE</code></td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">它被称为逻辑非运算符。取得向量的每个元素，并给出相反的逻辑值。</td><td style="text-align:left"><code>v &lt;- c(3, 0, TRUE, 2+2i)</code> <br> <code>print(!v)</code> <br> 它产生以下结果： <br> <code>[1] FALSE TRUE FALSE FALSE</code></td></tr></tbody></table></div><p>逻辑运算符 <code>&amp;&amp;</code> 和 <code>||</code> 只考虑向量的第一个元素，给出单个元素的向量作为输出。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">称为逻辑 AND 运算符。取两个向量的第一个元素， <br> 并且只有两个都为TRUE时才给出TRUE。</td><td style="text-align:left"><code>v &lt;- c(3, 0, TRUE, 2+2i)</code> <br> <code>t &lt;- c(1, 3, TRUE, 2+3i)</code> <br> <code>print(v&amp;&amp;t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE</code></td></tr><tr><td style="text-align:center">&vert;&amp;vert；</td><td style="text-align:center">称为逻辑 OR 运算符。取两个向量的第一个元素， <br> 如果其中一个为 TRUE，则给出 TRUE。</td><td style="text-align:left"><code>v &lt;- c(0, 0, TRUE, 2+2i)</code> <br> <code>t &lt;- c(0, 3, TRUE, 2+3i)</code> <br> <code>print(v</code>&vert;&vert;<code>t)</code> <br> 它产生以下结果： <br> <code>[1] FALSE</code></td></tr></tbody></table></div><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>这些运算符用于向向量赋值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&lt;− <br> = <br> &lt;&lt;− <br></td><td style="text-align:center">称为左分配</td><td style="text-align:left"><code>v1 &lt;- c(3, 1, TRUE, 2+3i)</code> <br> <code>v2 &lt;&lt;- c(3, 1, TRUE, 2+3i)</code> <br> <code>v3 = c(3, 1, TRUE, 2+3i)</code> <br> <code>print(v1)</code> <br> <code>print(v2)</code> <br> <code>print(v3)</code> <br> 它产生以下结果： <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code> <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code> <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code></td></tr><tr><td style="text-align:center">-&gt; <br> -&gt;&gt;</td><td style="text-align:center">称为右分配</td><td style="text-align:left"><code>c(3, 1, TRUE, 2+3i) -&gt; v1</code> <br> <code>c(3, 1, TRUE, 2+3i) -&gt;&gt; v2</code> <br> <code>print(v1)</code> <br> <code>print(v2)</code> <br> 它产生以下结果： <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code> <br> <code>[1] 3+0i 1+0i 1+0i 2+3i</code></td></tr></tbody></table></div><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p>这些运算符用于特定目的，而不是一般的数学或逻辑计算。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">:</td><td style="text-align:center">冒号运算符。它为向量按顺序创建一系列数字。</td><td style="text-align:left"><code>v &lt;- 2:8</code> <br> <code>print(v)</code> <br> 它产生以下结果： <br> <code>[1] 2 3 4 5 6 7 8</code></td></tr><tr><td style="text-align:center">%in%</td><td style="text-align:center">此运算符用于标识元素是否属于向量。</td><td style="text-align:left"><code>v1 &lt;- 8</code> <br> <code>v2 &lt;- 12</code> <br> <code>t &lt;- 1:10</code> <br> <code>print(v1 %in% t)</code> <br> <code>print(v2 %in% t)</code> <br> 它产生以下结果： <br> <code>[1] TRUE</code> <br> <code>[1] FALSE</code></td></tr><tr><td style="text-align:center">%*%</td><td style="text-align:center">此运算符用于将矩阵与其转置相乘。</td><td style="text-align:left"><code>M = matrix(c(2, 6, 5, 1, 10, 4),</code> <br> <code>nrow = 2, ncol = 3, byrow = TRUE)</code> <br> <code>t = M %*% t(M)</code> <br> <code>print(t)</code> <br> 它产生以下结果： <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>[,1] [,2]</code> <br> <code>[1,]</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>65</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>82</code> <br> <code>[2,]</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>82</code>&nbsp;&nbsp;&nbsp;&nbsp;<code>117</code></td></tr></tbody></table></div><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>R 语言的包是 R 函数，编译代码和样本数据的集合。它们存储在 R 语言环境中名为 <code>library</code> 的目录下。默认情况下，R 语言在安装期间安装一组软件包。随后添加更多包，当它们用于某些特定目的时。当我们启动 R 语言控制台时，默认情况下只有默认包可用。已经安装的其他软件包必须显式加载以供将要使用它们的 R 语言程序使用。</p><p>所有可用的 R 语言包都列在 <a href="https://cran.r-project.org/web/packages/available_packages_by_name.html">R 语言的包</a>。</p><p>下面是用于检查，验证和使用 R 包的命令列表。</p><h2 id="检查可用-R-语言的包"><a href="#检查可用-R-语言的包" class="headerlink" title="检查可用 R 语言的包"></a>检查可用 R 语言的包</h2><p>获取包含 R 包的库位置<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">.libPaths()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果。它可能会根据您的电脑的本地设置而有所不同。</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C:/Program Files/R/R-3.2.2/library&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="获取已安装的所有软件包列表"><a href="#获取已安装的所有软件包列表" class="headerlink" title="获取已安装的所有软件包列表"></a>获取已安装的所有软件包列表</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">library()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果。它可能会根据您的电脑的本地设置而有所不同。</span><br><br>Packages <span class="hljs-keyword">in</span> library ‘C:/Program Files/R/R-<span class="hljs-number">3.2</span>.2/library’:<br><br>base                    The R Base Package<br>boot                    Bootstrap Functions (Originally by Angelo Canty<br>                        <span class="hljs-keyword">for</span> S)<br><span class="hljs-built_in">class</span>                   Functions <span class="hljs-keyword">for</span> Classification<br>cluster                 <span class="hljs-string">&quot;Finding Groups in Data&quot;</span>: Cluster Analysis<br>                        Extended Rousseeuw et al.<br>codetools               Code Analysis Tools <span class="hljs-keyword">for</span> R<br>compiler                The R Compiler Package<br></code></pre></td></tr></table></figure></p><p>获取当前在 R 环境中加载的所有包</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">search()<br>当我们执行上述代码时，它产生了以下结果。它会根据你的个人电脑的本地设置而异。<br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.GlobalEnv&quot;</span>        <span class="hljs-string">&quot;package:stats&quot;</span>     <span class="hljs-string">&quot;package:graphics&quot;</span><br>[<span class="hljs-number">4</span>] <span class="hljs-string">&quot;package:grDevices&quot;</span> <span class="hljs-string">&quot;package:utils&quot;</span>     <span class="hljs-string">&quot;package:datasets&quot;</span><br>[<span class="hljs-number">7</span>] <span class="hljs-string">&quot;package:methods&quot;</span>   <span class="hljs-string">&quot;Autoloads&quot;</span>         <span class="hljs-string">&quot;package:base&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="安装一个新的软件包"><a href="#安装一个新的软件包" class="headerlink" title="安装一个新的软件包"></a>安装一个新的软件包</h2><p>有两种方法来添加新的 R 包。一个是直接从 CRAN 目录安装，另一个是将软件包下载到本地系统并手动安装它。</p><h3 id="直接从-CRAN-安装"><a href="#直接从-CRAN-安装" class="headerlink" title="直接从 CRAN 安装"></a>直接从 CRAN 安装</h3><p>以下命令直接从 CRAN 网页获取软件包，并将软件包安装在 R 环境中。可能会提示您选择最近的镜像。根据您的位置选择一个。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(<span class="hljs-string">&quot;Package Name&quot;</span>)<br><br><span class="hljs-comment"># Install the package named &quot;XML&quot;.</span><br>install.packages(<span class="hljs-string">&quot;XML&quot;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="手动安装包"><a href="#手动安装包" class="headerlink" title="手动安装包"></a>手动安装包</h3><p>转到链接 <a href="https://cran.r-project.org/web/packages/available_packages_by_name.html">R Packages</a> 下载所需的包。将包作为 .zip 文件保存在本地系统中的适当位置。</p><p>现在您可以运行以下命令在 R 环境中安装此软件包。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages(file_name_with_path, repos = <span class="hljs-literal">NULL</span>, type = <span class="hljs-string">&quot;source&quot;</span>)<br><br><span class="hljs-comment"># Install the package named &quot;XML&quot;</span><br>install.packages(<span class="hljs-string">&quot;E:/XML_3.98-1.3.zip&quot;</span>, repos = <span class="hljs-literal">NULL</span>, type = <span class="hljs-string">&quot;source&quot;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="装载包到库中"><a href="#装载包到库中" class="headerlink" title="装载包到库中"></a>装载包到库中</h3><p>在包可以在代码中使用之前，必须将其加载到当前 R 环境中。您还需要加载先前已安装但在当前环境中不可用的软件包。</p><p>使用以下命令加载包：<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&quot;package Name&quot;</span>, lib.loc = <span class="hljs-string">&quot;path to library&quot;</span>)<br><br><span class="hljs-comment"># Load the package named &quot;XML&quot;</span><br>install.packages(<span class="hljs-string">&quot;E:/XML_3.98-1.3.zip&quot;</span>, repos = <span class="hljs-literal">NULL</span>, type = <span class="hljs-string">&quot;source&quot;</span>)<br></code></pre></td></tr></table></figure></p><h1 id="决策"><a href="#决策" class="headerlink" title="决策"></a>决策</h1><p>决策结构要求程序员指定要由程序评估或测试的一个或多个条件，以及如果条件被确定为真则要执行的一个或多个语句，如果条件为假则执行其他语句。</p><p>R 提供以下类型的决策语句。</p><ul><li>if 语句</li><li>if ... else 语句</li><li>switch 语句</li></ul><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if 语句由一个布尔表达式后跟一个或多个语句组成。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>if</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(boolean_expression) &#123;<br>   <span class="hljs-comment"># statement(s) will execute if the boolean expression is true.</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果布尔表达式的计算结果为 <code>true</code>，那么 <code>if</code> 语句中的代码块将被执行。如果布尔表达式的计算结果为 <code>false</code>，那么第一组代码在if语句结束之后（在结束大括号之后）将被执行。</p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/if.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- 30L<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">is.integer</span>(x)) &#123;<br>   print(<span class="hljs-string">&quot;X is an Integer&quot;</span>)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;X is an Integer&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if...else 语句"></a>if...else 语句</h2><p><code>if</code> 语句后面可以是一个可选的 <code>else</code> 语句，当布尔表达式为 <code>false</code> 时执行。</p><p><strong>语法</strong></p><p>在 R 中创建 if ... else 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(boolean_expression) &#123;<br>   <span class="hljs-comment"># statement(s) will execute if the boolean expression is true.</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment"># statement(s) will execute if the boolean expression is false.</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果布尔表达式的计算结果为真，则将执行if代码块，否则将执行代码块。</p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/if_else.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;what&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;truth&quot;</span>)<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Truth&quot;</span> %in% x) &#123;<br>   print(<span class="hljs-string">&quot;Truth is found&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   print(<span class="hljs-string">&quot;Truth is not found&quot;</span>)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Truth is not found&quot;</span><br></code></pre></td></tr></table></figure></p><p>这里 <code>Truth</code> 和 <code>truth</code> 是两个不同的字符串。</p><p><strong>if ... else if ... else 语句</strong></p><p><code>if</code> 语句后面可以跟一个可选的 <code>else if ... else</code> 语句，这对于使用 <code>single if ... else if</code> 语句测试各种条件非常有用。</p><p>当使用 <code>if</code>，<code>else if</code>，<code>else</code> 语句有几点要记住：</p><ul><li>如果可以有零个或一个 <code>else</code>，它必须在任何其他 <code>if</code> 之后。</li><li>一个 <code>if</code> 可以有零个到许多个 <code>else if</code> 和它们必须在 <code>else</code> 之前。</li><li>一旦一个 <code>else</code> 如果成功，没有任何剩余的 <code>else if</code> 或 <code>else</code> 将被测试。</li></ul><p><strong>语法</strong></p><p>在 R 中创建 <code>if ... else if ... else</code>语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(boolean_expression <span class="hljs-number">1</span>) &#123;<br>   // Executes when the boolean <span class="hljs-built_in">expression</span> <span class="hljs-number">1</span> is true.<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( boolean_expression <span class="hljs-number">2</span>) &#123;<br>   // Executes when the boolean <span class="hljs-built_in">expression</span> <span class="hljs-number">2</span> is true.<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( boolean_expression <span class="hljs-number">3</span>) &#123;<br>   // Executes when the boolean <span class="hljs-built_in">expression</span> <span class="hljs-number">3</span> is true.<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   // executes when none of the above condition is true.<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;what&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;truth&quot;</span>)<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Truth&quot;</span> %in% x) &#123;<br>   print(<span class="hljs-string">&quot;Truth is found the first time&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;truth&quot;</span> %in% x) &#123;<br>   print(<span class="hljs-string">&quot;truth is found the second time&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   print(<span class="hljs-string">&quot;No truth found&quot;</span>)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;truth is found the second time&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="switch-​语句"><a href="#switch-​语句" class="headerlink" title="switch ​语句"></a>switch ​语句</h2><p><code>switch</code> ​语句允许根据值列表测试变量的相等性。每个值都称为大小写，并且针对每种情况检查打开的变量。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>​switch​</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span>(<span class="hljs-built_in">expression</span>, case1, case2, case3....)<br></code></pre></td></tr></table></figure></p><p>以下规则适用于 <code>​switch</code> ​语句：</p><ul><li>如果 <code>​expression​</code> 的值不是字符串，那么它被强制为整数。</li><li>在交换机中可以有任意数量的 <code>​case</code> ​语句。每个案例后面都跟要比较的值和冒号。</li><li>如果整数的值在 ​<code>1</code> ​和 ​<code>nargs() - 1</code>​（参数的最大数目）之间，则对 ​case ​条件的相应元素求值并返回结果。</li><li>如果表达式求值为字符串，那么该字符串与元素的名称匹配。</li><li>如果有多个匹配，则返回第一个匹配元素。</li><li>无默认参数可用。</li><li>在没有匹配的情况下，如果有一个未命名的元素...它的值被返回。（如果有多个这样的参数，则返回错误。）</li></ul><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/switch.jpg" alt></p><p><strong>实例 1</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- <span class="hljs-built_in">switch</span>(<br>   <span class="hljs-number">3</span>,<br>   <span class="hljs-string">&quot;first&quot;</span>,<br>   <span class="hljs-string">&quot;second&quot;</span>,<br>   <span class="hljs-string">&quot;third&quot;</span>,<br>   <span class="hljs-string">&quot;fourth&quot;</span><br>)<br>print(x)<br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;third&quot;</span><br></code></pre></td></tr></table></figure></p><p><strong>实例 2</strong></p><p><code>​runif()​</code> 函数用于生成从 ​<code>0</code> ​到 ​<code>1</code> ​区间范围内的服从正态分布的随机数：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*<span class="hljs-number">3</span>, sd(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), runif(<span class="hljs-number">3</span>))  <span class="hljs-comment">#返回（2*3, sd(1:5), runif(3)）list中的第一个成分 </span><br><span class="hljs-built_in">switch</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>*<span class="hljs-number">3</span>, sd(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), runif(<span class="hljs-number">3</span>))  <span class="hljs-comment">#返回第二个成分</span><br><span class="hljs-built_in">switch</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>*<span class="hljs-number">3</span>, sd(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), runif(<span class="hljs-number">3</span>))  <span class="hljs-comment">#返回第三个成分</span><br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">6</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1.581139</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0.31508117</span> <span class="hljs-number">0.04610938</span> <span class="hljs-number">0.19489747</span><br></code></pre></td></tr></table></figure></p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>可能有一种情况，当你需要执行一段代码几次。通常，顺序执行语句。首先执行函数中的第一个语句，然后执行第二个语句，依此类推。</p><p>编程语言提供允许更复杂的执行路径的各种控制结构。</p><p>循环语句允许我们多次执行一个语句或一组语句，以下是大多数编程语言中循环语句的一般形式</p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/loop.jpg" alt></p><p><strong>循环控制语句</strong></p><p>循环控制语句从其正常序列改变执行。当执行离开作用域时，在该作用域中创建的所有自动对象都将被销毁。</p><p>R 语言支持以下控制语句。</p><ul><li>break</li><li>next</li></ul><h2 id="Repeat-语句"><a href="#Repeat-语句" class="headerlink" title="Repeat 语句"></a>Repeat 语句</h2><p><code>repeat</code> 循环重复执行相同的代码，直到满足停止条件。</p><p><strong>语法</strong></p><p>在R中创建Repeat循环的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">repeat</span> &#123; <br>   commands <br>   <span class="hljs-keyword">if</span>(condition) &#123;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/repeat.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;loop&quot;</span>)<br>cnt &lt;- 2<br><br><span class="hljs-keyword">repeat</span> &#123;<br>   print(v)<br>   cnt &lt;- cnt+<span class="hljs-number">1</span><br>   <br>   <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p><code>while</code> 循环一次又一次地执行相同的代码，直到满足停止条件。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>while</code> 循环的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">while</span> (test_expression) &#123;<br>   statement<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/while.jpg" alt></p><p><code>while</code> 循环的关键点是循环可能永远不会运行。当条件被测试并且结果为 <code>false</code> 时，循环体将被跳过，<code>while</code> 循环之后的第一条语句将被执行。</p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;while loop&quot;</span>)<br>cnt &lt;- 2<br><br><span class="hljs-keyword">while</span> (cnt &lt; <span class="hljs-number">7</span>) &#123;<br>   print(v)<br>   cnt = cnt + <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-string">&quot;while loop&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><p><code>for</code> 循环是一种重复控制结构，允许您有效地编写需要执行特定次数的循环。</p><p>R 的 <code>for</code> 循环是特别灵活的，因为它们不限于整数，或者输入中的偶数。我们可以传递字符向量，逻辑向量，列表或表达式。</p><p><strong>语法</strong></p><p>在 R 中创建一个 <code>for</code> 循环语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 条件) &#123;<br>   循环体<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/for.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">LETTERS</span>[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> ( i <span class="hljs-keyword">in</span> v) &#123;<br>   print(i)<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果 </span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;A&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;B&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;D&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>R 语言中的 <code>break</code> 语句有以下两种用法：</p><p>当在循环中遇到 <code>break</code> 语句时，循环立即终止，并且程序控制在循环之后的下一语句处恢复。它可以用于终止 <code>switch</code> 语句中的情况。语法在 R 中创建 <code>break</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/break.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;loop&quot;</span>)<br>cnt &lt;- 2<br><br><span class="hljs-keyword">repeat</span> &#123;<br>   print(v)<br>   cnt &lt;- cnt + <span class="hljs-number">1</span><br><br>   <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># 当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-string">&quot;loop&quot;</span> <br></code></pre></td></tr></table></figure></p><h2 id="next-语句"><a href="#next-语句" class="headerlink" title="next 语句"></a>next 语句</h2><p>R 语言存在 <code>next</code> 语句，当我们想跳过循环的当前迭代而不终止它时便可使用 <code>next</code>。遇到 <code>next</code> 时，R 解析器跳过本次迭代，并开始循环的下一次迭代。</p><p><strong>语法</strong></p><p>在 R 中创建 <code>next</code> 语句的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure></p><p><strong>流程图</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/r_course/next.jpg" alt></p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">LETTERS</span>[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>]<br><span class="hljs-keyword">for</span> ( i <span class="hljs-keyword">in</span> v) &#123;<br>   <br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&quot;D&quot;</span>) &#123;<br>      <span class="hljs-keyword">next</span><br>   &#125;<br>   print(i)<br>&#125;<br><br><span class="hljs-comment">#当上面的代码被编译和执行时，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;A&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;B&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;C&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;E&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;F&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h1><p>R 语言中的数据重塑是关于改变数据被组织成行和列的方式。</p><p>大多数时间 R 语言中的数据处理是通过将输入数据作为数据框来完成的。很容易从数据框的行和列中提取数据，但是在某些情况下，我们需要的数据框格式与我们接收数据框的格式不同。R 语言具有许多函数，可以在数据框中拆分，合并和将行更改为列，反之亦然。</p><h2 id="数据框中加入列和行"><a href="#数据框中加入列和行" class="headerlink" title="数据框中加入列和行"></a>数据框中加入列和行</h2><p>我们可以使用 <code>cbind()</code> 函数连接多个向量来创建数据框。此外，我们可以使用 <code>rbind()</code> 函数合并两个数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create vector objects.</span><br>city &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Tampa&quot;</span>, <span class="hljs-string">&quot;Seattle&quot;</span>, <span class="hljs-string">&quot;Hartford&quot;</span>, <span class="hljs-string">&quot;Denver&quot;</span>)<br>state &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;FL&quot;</span>, <span class="hljs-string">&quot;WA&quot;</span>, <span class="hljs-string">&quot;CT&quot;</span>, <span class="hljs-string">&quot;CO&quot;</span>)<br>zipcode &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">33602</span>, <span class="hljs-number">98104</span>, <span class="hljs-number">06161</span>, <span class="hljs-number">80294</span>)<br><br><span class="hljs-comment"># Combine above three vectors into one data frame.</span><br>addresses &lt;- cbind(city, state, zipcode)<br><br><span class="hljs-comment"># Print a header.</span><br>cat(<span class="hljs-string">&quot;# # # # The First data frame&quot;</span>)<br><br><span class="hljs-comment"># Print the data frame.</span><br>print(addresses)<br><br><span class="hljs-comment"># Create another data frame with similar columns</span><br>new.address &lt;- data.frame(<br>   city = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Lowry&quot;</span>, <span class="hljs-string">&quot;Charlotte&quot;</span>),<br>   state = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;CO&quot;</span>, <span class="hljs-string">&quot;FL&quot;</span>),<br>   zipcode = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;80230&quot;</span>, <span class="hljs-string">&quot;33949&quot;</span>),<br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Print a header.</span><br>cat(<span class="hljs-string">&quot;# # # The Second data frame&quot;</span>)<br><br><span class="hljs-comment"># Print the data frame.</span><br>print(new.address)<br><br><span class="hljs-comment"># Combine rows form both the data frames.</span><br>all.addresses &lt;- rbind(addresses, new.address)<br><br><span class="hljs-comment"># Print a header.</span><br>cat(<span class="hljs-string">&quot;# # # The combined data frame&quot;</span>)<br><br><span class="hljs-comment"># Print the result.</span><br>print(all.addresses)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br><span class="hljs-comment"># # # # The First data frame</span><br>     city       state zipcode<br>[<span class="hljs-number">1</span>,] <span class="hljs-string">&quot;Tampa&quot;</span>    <span class="hljs-string">&quot;FL&quot;</span>  <span class="hljs-string">&quot;33602&quot;</span><br>[<span class="hljs-number">2</span>,] <span class="hljs-string">&quot;Seattle&quot;</span>  <span class="hljs-string">&quot;WA&quot;</span>  <span class="hljs-string">&quot;98104&quot;</span><br>[<span class="hljs-number">3</span>,] <span class="hljs-string">&quot;Hartford&quot;</span> <span class="hljs-string">&quot;CT&quot;</span>  <span class="hljs-string">&quot;6161&quot;</span> <br>[<span class="hljs-number">4</span>,] <span class="hljs-string">&quot;Denver&quot;</span>   <span class="hljs-string">&quot;CO&quot;</span>  <span class="hljs-string">&quot;80294&quot;</span><br><br><span class="hljs-comment"># # # The Second data frame</span><br>       city state zipcode<br>1     Lowry    CO   <span class="hljs-number">80230</span><br>2 Charlotte    FL   <span class="hljs-number">33949</span><br><br><span class="hljs-comment"># # # The combined data frame</span><br>       city state zipcode<br>1     Tampa    FL   <span class="hljs-number">33602</span><br>2   Seattle    WA   <span class="hljs-number">98104</span><br>3  Hartford    CT    <span class="hljs-number">6161</span><br>4    Denver    CO   <span class="hljs-number">80294</span><br>5     Lowry    CO   <span class="hljs-number">80230</span><br>6 Charlotte    FL   <span class="hljs-number">33949</span><br></code></pre></td></tr></table></figure></p><h2 id="合并数据框"><a href="#合并数据框" class="headerlink" title="合并数据框"></a>合并数据框</h2><p>我们可以使用 <code>merge()</code> 函数合并两个数据框。数据框必须具有相同的列名称，在其上进行合并。</p><p>在下面的例子中，我们考虑使用 <code>library()</code> 函数加载 <code>MASS</code> 第三方包，使用 <code>MASS</code> 中有关 <code>Pima Indian Women</code> 的糖尿病的数据集。我们基于血压（bp）和体重指数（bmi）的值合并两个数据集。在选择这两列用于合并时，其中这两个变量的值在两个数据集中匹配的记录被组合在一起以形成单个数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r">library(MASS)<br>merged.Pima &lt;- merge(x = Pima.te, y = Pima.tr,<br>   by.x = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;bp&quot;</span>, <span class="hljs-string">&quot;bmi&quot;</span>),<br>   by.y = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;bp&quot;</span>, <span class="hljs-string">&quot;bmi&quot;</span>)<br>)<br>print(merged.Pima)<br>nrow(merged.Pima)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>   bp  bmi npreg.x glu.x skin.x ped.x age.x type.x npreg.y glu.y skin.y ped.y age.y type.y<br>1  <span class="hljs-number">60</span> <span class="hljs-number">33.8</span>       <span class="hljs-number">1</span>   <span class="hljs-number">117</span>     <span class="hljs-number">23</span> <span class="hljs-number">0.466</span>    <span class="hljs-number">27</span>     No       <span class="hljs-number">2</span>   <span class="hljs-number">125</span>     <span class="hljs-number">20</span> <span class="hljs-number">0.088</span>    <span class="hljs-number">31</span>     No<br>2  <span class="hljs-number">64</span> <span class="hljs-number">29.7</span>       <span class="hljs-number">2</span>    <span class="hljs-number">75</span>     <span class="hljs-number">24</span> <span class="hljs-number">0.370</span>    <span class="hljs-number">33</span>     No       <span class="hljs-number">2</span>   <span class="hljs-number">100</span>     <span class="hljs-number">23</span> <span class="hljs-number">0.368</span>    <span class="hljs-number">21</span>     No<br>3  <span class="hljs-number">64</span> <span class="hljs-number">31.2</span>       <span class="hljs-number">5</span>   <span class="hljs-number">189</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.583</span>    <span class="hljs-number">29</span>    Yes       <span class="hljs-number">3</span>   <span class="hljs-number">158</span>     <span class="hljs-number">13</span> <span class="hljs-number">0.295</span>    <span class="hljs-number">24</span>     No<br>4  <span class="hljs-number">64</span> <span class="hljs-number">33.2</span>       <span class="hljs-number">4</span>   <span class="hljs-number">117</span>     <span class="hljs-number">27</span> <span class="hljs-number">0.230</span>    <span class="hljs-number">24</span>     No       <span class="hljs-number">1</span>    <span class="hljs-number">96</span>     <span class="hljs-number">27</span> <span class="hljs-number">0.289</span>    <span class="hljs-number">21</span>     No<br>5  <span class="hljs-number">66</span> <span class="hljs-number">38.1</span>       <span class="hljs-number">3</span>   <span class="hljs-number">115</span>     <span class="hljs-number">39</span> <span class="hljs-number">0.150</span>    <span class="hljs-number">28</span>     No       <span class="hljs-number">1</span>   <span class="hljs-number">114</span>     <span class="hljs-number">36</span> <span class="hljs-number">0.289</span>    <span class="hljs-number">21</span>     No<br>6  <span class="hljs-number">68</span> <span class="hljs-number">38.5</span>       <span class="hljs-number">2</span>   <span class="hljs-number">100</span>     <span class="hljs-number">25</span> <span class="hljs-number">0.324</span>    <span class="hljs-number">26</span>     No       <span class="hljs-number">7</span>   <span class="hljs-number">129</span>     <span class="hljs-number">49</span> <span class="hljs-number">0.439</span>    <span class="hljs-number">43</span>    Yes<br>7  <span class="hljs-number">70</span> <span class="hljs-number">27.4</span>       <span class="hljs-number">1</span>   <span class="hljs-number">116</span>     <span class="hljs-number">28</span> <span class="hljs-number">0.204</span>    <span class="hljs-number">21</span>     No       <span class="hljs-number">0</span>   <span class="hljs-number">124</span>     <span class="hljs-number">20</span> <span class="hljs-number">0.254</span>    <span class="hljs-number">36</span>    Yes<br>8  <span class="hljs-number">70</span> <span class="hljs-number">33.1</span>       <span class="hljs-number">4</span>    <span class="hljs-number">91</span>     <span class="hljs-number">32</span> <span class="hljs-number">0.446</span>    <span class="hljs-number">22</span>     No       <span class="hljs-number">9</span>   <span class="hljs-number">123</span>     <span class="hljs-number">44</span> <span class="hljs-number">0.374</span>    <span class="hljs-number">40</span>     No<br>9  <span class="hljs-number">70</span> <span class="hljs-number">35.4</span>       <span class="hljs-number">9</span>   <span class="hljs-number">124</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.282</span>    <span class="hljs-number">34</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">134</span>     <span class="hljs-number">23</span> <span class="hljs-number">0.542</span>    <span class="hljs-number">29</span>    Yes<br>10 <span class="hljs-number">72</span> <span class="hljs-number">25.6</span>       <span class="hljs-number">1</span>   <span class="hljs-number">157</span>     <span class="hljs-number">21</span> <span class="hljs-number">0.123</span>    <span class="hljs-number">24</span>     No       <span class="hljs-number">4</span>    <span class="hljs-number">99</span>     <span class="hljs-number">17</span> <span class="hljs-number">0.294</span>    <span class="hljs-number">28</span>     No<br>11 <span class="hljs-number">72</span> <span class="hljs-number">37.7</span>       <span class="hljs-number">5</span>    <span class="hljs-number">95</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.370</span>    <span class="hljs-number">27</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">103</span>     <span class="hljs-number">32</span> <span class="hljs-number">0.324</span>    <span class="hljs-number">55</span>     No<br>12 <span class="hljs-number">74</span> <span class="hljs-number">25.9</span>       <span class="hljs-number">9</span>   <span class="hljs-number">134</span>     <span class="hljs-number">33</span> <span class="hljs-number">0.460</span>    <span class="hljs-number">81</span>     No       <span class="hljs-number">8</span>   <span class="hljs-number">126</span>     <span class="hljs-number">38</span> <span class="hljs-number">0.162</span>    <span class="hljs-number">39</span>     No<br>13 <span class="hljs-number">74</span> <span class="hljs-number">25.9</span>       <span class="hljs-number">1</span>    <span class="hljs-number">95</span>     <span class="hljs-number">21</span> <span class="hljs-number">0.673</span>    <span class="hljs-number">36</span>     No       <span class="hljs-number">8</span>   <span class="hljs-number">126</span>     <span class="hljs-number">38</span> <span class="hljs-number">0.162</span>    <span class="hljs-number">39</span>     No<br>14 <span class="hljs-number">78</span> <span class="hljs-number">27.6</span>       <span class="hljs-number">5</span>    <span class="hljs-number">88</span>     <span class="hljs-number">30</span> <span class="hljs-number">0.258</span>    <span class="hljs-number">37</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">125</span>     <span class="hljs-number">31</span> <span class="hljs-number">0.565</span>    <span class="hljs-number">49</span>    Yes<br>15 <span class="hljs-number">78</span> <span class="hljs-number">27.6</span>      <span class="hljs-number">10</span>   <span class="hljs-number">122</span>     <span class="hljs-number">31</span> <span class="hljs-number">0.512</span>    <span class="hljs-number">45</span>     No       <span class="hljs-number">6</span>   <span class="hljs-number">125</span>     <span class="hljs-number">31</span> <span class="hljs-number">0.565</span>    <span class="hljs-number">49</span>    Yes<br>16 <span class="hljs-number">78</span> <span class="hljs-number">39.4</span>       <span class="hljs-number">2</span>   <span class="hljs-number">112</span>     <span class="hljs-number">50</span> <span class="hljs-number">0.175</span>    <span class="hljs-number">24</span>     No       <span class="hljs-number">4</span>   <span class="hljs-number">112</span>     <span class="hljs-number">40</span> <span class="hljs-number">0.236</span>    <span class="hljs-number">38</span>     No<br>17 <span class="hljs-number">88</span> <span class="hljs-number">34.5</span>       <span class="hljs-number">1</span>   <span class="hljs-number">117</span>     <span class="hljs-number">24</span> <span class="hljs-number">0.403</span>    <span class="hljs-number">40</span>    Yes       <span class="hljs-number">4</span>   <span class="hljs-number">127</span>     <span class="hljs-number">11</span> <span class="hljs-number">0.598</span>    <span class="hljs-number">28</span>     No<br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">17</span><br></code></pre></td></tr></table></figure></p><p>有时，电子表格数据的格式很紧凑，可以给出每个主题的协变量，然后是该主题的所有观测值。R 的建函数需要在单个列中进行观察。考虑以下来自重复 <code>MRI</code> 脑测量的数据样本：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">Status   Age    V1     V2     V3    V4<br>     P <span class="hljs-number">23646</span> <span class="hljs-number">45190</span>  <span class="hljs-number">50333</span>  <span class="hljs-number">55166</span> <span class="hljs-number">56271</span><br>    CC <span class="hljs-number">26174</span> <span class="hljs-number">35535</span>  <span class="hljs-number">38227</span>  <span class="hljs-number">37911</span> <span class="hljs-number">41184</span><br>    CC <span class="hljs-number">27723</span> <span class="hljs-number">25691</span>  <span class="hljs-number">25712</span>  <span class="hljs-number">26144</span> <span class="hljs-number">26398</span><br>    CC <span class="hljs-number">27193</span> <span class="hljs-number">30949</span>  <span class="hljs-number">29693</span>  <span class="hljs-number">29754</span> <span class="hljs-number">30772</span><br>    CC <span class="hljs-number">24370</span> <span class="hljs-number">50542</span>  <span class="hljs-number">51966</span>  <span class="hljs-number">54341</span> <span class="hljs-number">54273</span><br>    CC <span class="hljs-number">28359</span> <span class="hljs-number">58591</span>  <span class="hljs-number">58803</span>  <span class="hljs-number">59435</span> <span class="hljs-number">61292</span><br>    CC <span class="hljs-number">25136</span> <span class="hljs-number">45801</span>  <span class="hljs-number">45389</span>  <span class="hljs-number">47197</span> <span class="hljs-number">47126</span><br></code></pre></td></tr></table></figure></p><p>在每个主题上有两个协变量和多达四个测量值。数据从 Excel 导出为 <code>mr.csv</code> 文件。</p><p>我们可以使用堆栈来帮助操纵这些数据以给出单个响应。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">zz &lt;- read.csv(<span class="hljs-string">&quot;mr.csv&quot;</span>, strip.white = <span class="hljs-literal">TRUE</span>)<br>zzz &lt;- cbind(zz[gl(nrow(zz), <span class="hljs-number">1</span>, <span class="hljs-number">4</span>*nrow(zz)), <span class="hljs-number">1</span>:<span class="hljs-number">2</span>], stack(zz[, <span class="hljs-number">3</span>:<span class="hljs-number">6</span>]))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>      Status   Age values ind<br>X1         P <span class="hljs-number">23646</span>  <span class="hljs-number">45190</span>  V1<br>X2        CC <span class="hljs-number">26174</span>  <span class="hljs-number">35535</span>  V1<br>X3        CC <span class="hljs-number">27723</span>  <span class="hljs-number">25691</span>  V1<br>X4        CC <span class="hljs-number">27193</span>  <span class="hljs-number">30949</span>  V1<br>X5        CC <span class="hljs-number">24370</span>  <span class="hljs-number">50542</span>  V1<br>X6        CC <span class="hljs-number">28359</span>  <span class="hljs-number">58591</span>  V1<br>X7        CC <span class="hljs-number">25136</span>  <span class="hljs-number">45801</span>  V1<br>X11        P <span class="hljs-number">23646</span>  <span class="hljs-number">50333</span>  V2<br>...<br></code></pre></td></tr></table></figure></p><p>函数 <code>unstack</code> 的方向相反，可能对导出数据很有用。</p><p>另一种方法是使用函数重塑</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">reshape(zz, idvar=<span class="hljs-string">&quot;id&quot;</span>, timevar=<span class="hljs-string">&quot;var&quot;</span>, varying=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;V1&quot;</span>, <span class="hljs-string">&quot;V2&quot;</span>, <span class="hljs-string">&quot;V3&quot;</span>, <span class="hljs-string">&quot;V4&quot;</span>)), direction=<span class="hljs-string">&quot;long&quot;</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>    Status   Age var    V1 id<br>1.1      P <span class="hljs-number">23646</span>   <span class="hljs-number">1</span> <span class="hljs-number">45190</span>  <span class="hljs-number">1</span><br>2.1     CC <span class="hljs-number">26174</span>   <span class="hljs-number">1</span> <span class="hljs-number">35535</span>  <span class="hljs-number">2</span><br>3.1     CC <span class="hljs-number">27723</span>   <span class="hljs-number">1</span> <span class="hljs-number">25691</span>  <span class="hljs-number">3</span><br>4.1     CC <span class="hljs-number">27193</span>   <span class="hljs-number">1</span> <span class="hljs-number">30949</span>  <span class="hljs-number">4</span><br>5.1     CC <span class="hljs-number">24370</span>   <span class="hljs-number">1</span> <span class="hljs-number">50542</span>  <span class="hljs-number">5</span><br>6.1     CC <span class="hljs-number">28359</span>   <span class="hljs-number">1</span> <span class="hljs-number">58591</span>  <span class="hljs-number">6</span><br>7.1     CC <span class="hljs-number">25136</span>   <span class="hljs-number">1</span> <span class="hljs-number">45801</span>  <span class="hljs-number">7</span><br>1.2      P <span class="hljs-number">23646</span>   <span class="hljs-number">2</span> <span class="hljs-number">50333</span>  <span class="hljs-number">1</span><br>2.2     CC <span class="hljs-number">26174</span>   <span class="hljs-number">2</span> <span class="hljs-number">38227</span>  <span class="hljs-number">2</span><br>...<br></code></pre></td></tr></table></figure></p><p>重塑函数的语法比堆栈更复杂，但可以用于 <code>long</code> 表单中不止一列的数据。如果 <code>direction=&quot;width&quot;</code>，重塑还可以执行相反的转换。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是一组组合在一起以执行特定任务的语句。R 语言具有大量内置函数，用户可以创建自己的函数。</p><p>在 R 语言中，函数是一个对象，因此 R 语言解释器能够将控制传递给函数，以及函数完成动作所需的参数。</p><p>该函数依次执行其任务并将控制返回到解释器以及可以存储在其他对象中的任何结果。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>使用关键字函数创建 R 语言的函数。R 语言的函数定义的基本语法如下</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">function_name &lt;- <span class="hljs-keyword">function</span>(arg_1, arg_2, ...) &#123;<br>   Function body<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>函数的不同部分：</p><ul><li><strong>函数名称</strong>：这是函数的实际名称。它作为具有此名称的对象存储在 R 环境中。</li><li><strong>参数</strong>：参数是一个占位符。当函数被调用时，你传递一个值到参数。参数是可选的，也就是说，一个函数可能不包含参数。参数也可以有默认值。</li><li><strong>函数体</strong>：函数体包含定义函数的语句集合。</li><li><strong>返回值</strong>：函数的返回值是要评估的函数体中的最后一个表达式。</li></ul><p>R 语言有许多内置函数，可以在程序中直接调用而无需先定义它们。我们还可以创建和使用我们自己的函数，称为用户定义的函数。</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>内置函数的简单示例是 <code>seq()</code>，<code>mean()</code>，<code>max()</code>，<code>sum(x)</code> 和 <code>paste(...)</code> 等。它们由用户编写的程序直接调用。您可以参考最广泛使用的 R 函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a sequence of numbers from 32 to 44.</span><br>print(seq(<span class="hljs-number">32</span>, <span class="hljs-number">44</span>))<br><br><span class="hljs-comment"># Find mean of numbers from 25 to 82.</span><br>print(mean(<span class="hljs-number">25</span>:<span class="hljs-number">82</span>))<br><br><span class="hljs-comment"># Find sum of numbers frm 41 to 68.</span><br>print(<span class="hljs-built_in">sum</span>(<span class="hljs-number">41</span>:<span class="hljs-number">68</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">32</span> <span class="hljs-number">33</span> <span class="hljs-number">34</span> <span class="hljs-number">35</span> <span class="hljs-number">36</span> <span class="hljs-number">37</span> <span class="hljs-number">38</span> <span class="hljs-number">39</span> <span class="hljs-number">40</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">43</span> <span class="hljs-number">44</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">53.5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1526</span><br></code></pre></td></tr></table></figure></p><h2 id="用户定义的函数"><a href="#用户定义的函数" class="headerlink" title="用户定义的函数"></a>用户定义的函数</h2><p>我们可以在 R 语言中创建用户定义的函数。它们特定于用户想要的，一旦创建，它们就可以像内置函数一样使用。下面是一个创建和使用函数的例子。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function to print squares of numbers in sequence.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a) &#123;<br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:a) &#123;<br>      b &lt;- i^<span class="hljs-number">2</span><br>      print(b)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function to print squares of numbers in sequence.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a) &#123;<br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:a) &#123;<br>      b &lt;- i^<span class="hljs-number">2</span><br>      print(b)<br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># Call the function new.function supplying 6 as an argument.</span><br>new.function(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">4</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure></p><h2 id="调用没有参数的函数"><a href="#调用没有参数的函数" class="headerlink" title="调用没有参数的函数"></a>调用没有参数的函数</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function without an argument.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>() &#123;<br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:<span class="hljs-number">5</span>) &#123;<br>      print(i^<span class="hljs-number">2</span>)<br>   &#125;<br>&#125;<br><br><span class="hljs-comment"># Call the function without supplying an argument.</span><br>new.function()<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">4</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">16</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure></p><h2 id="使用参数值调用函数（按位置和名称）"><a href="#使用参数值调用函数（按位置和名称）" class="headerlink" title="使用参数值调用函数（按位置和名称）"></a>使用参数值调用函数（按位置和名称）</h2><p>函数调用的参数可以按照函数中定义的顺序提供，也可以以不同的顺序提供，但分配给参数的名称。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function with arguments.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a, b, <span class="hljs-built_in">c</span>) &#123;<br>   result &lt;- a * b + <span class="hljs-built_in">c</span><br>   print(result)<br>&#125;<br><br><span class="hljs-comment"># Call the function by position of arguments.</span><br>new.function(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>)<br><br><span class="hljs-comment"># Call the function by names of the arguments.</span><br>new.function(a = <span class="hljs-number">11</span>, b = <span class="hljs-number">5</span>, <span class="hljs-built_in">c</span> = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">26</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">58</span><br></code></pre></td></tr></table></figure></p><h2 id="使用默认参数调用函数"><a href="#使用默认参数调用函数" class="headerlink" title="使用默认参数调用函数"></a>使用默认参数调用函数</h2><p>我们可以在函数定义中定义参数的值，并调用函数而不提供任何参数以获取默认结果。但是我们也可以通过提供参数的新值来获得非默认结果来调用这样的函数。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function with arguments.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a = <span class="hljs-number">3</span>, b = <span class="hljs-number">6</span>) &#123;<br>   result &lt;- a * b<br>   print(result)<br>&#125;<br><br><span class="hljs-comment"># Call the function without giving any argument.</span><br>new.function()<br><br><span class="hljs-comment"># Call the function with giving new values of the argument.</span><br>new.function(<span class="hljs-number">9</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">18</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure></p><h2 id="函数的延迟计算"><a href="#函数的延迟计算" class="headerlink" title="函数的延迟计算"></a>函数的延迟计算</h2><p>对函数的参数进行延迟评估，这意味着它们只有在函数体需要时才进行评估。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a function with arguments.</span><br>new.function &lt;- <span class="hljs-keyword">function</span>(a, b) &#123;<br>   print(a^<span class="hljs-number">2</span>)<br>   print(a)<br>   print(b)<br>&#125;<br><br><span class="hljs-comment"># Evaluate the function without supplying one of the arguments.</span><br>new.function(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">36</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">6</span><br>Error <span class="hljs-keyword">in</span> print(b) : argument <span class="hljs-string">&quot;b&quot;</span> is <span class="hljs-built_in">missing</span>, with no default<br></code></pre></td></tr></table></figure></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>在 R 语言中的单引号或双引号对中写入的任何值都被视为字符串。R 语言存储的每个字符串都在双引号内，即使是使用单引号创建的依旧如此。</p><h2 id="字符串构造规则"><a href="#字符串构造规则" class="headerlink" title="字符串构造规则"></a>字符串构造规则</h2><p>在字符串的开头和结尾的引号应该是两个双引号或两个单引号。它们不能被混合。</p><ul><li>双引号可以插入以单引号开头和结尾的字符串中。</li><li>单引号可以插入以双引号开头和结尾的字符串中。</li><li>双引号不能插入以双引号开头和结尾的字符串中。</li><li>单引号不能插入以单引号开头和结尾的字符串中。</li></ul><p><strong>有效字符串的示例</strong></p><p>以下示例阐明了在 R 语言中创建字符串的规则。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">a &lt;- <span class="hljs-string">&#x27;Start and end with single quote&#x27;</span><br>print(a)<br><br>b &lt;- <span class="hljs-string">&quot;Start and end with double quotes&quot;</span><br>print(b)<br><br>c &lt;- <span class="hljs-string">&quot;single quote &#x27; in between double quotes&quot;</span><br>print(<span class="hljs-built_in">c</span>)<br><br>d &lt;- <span class="hljs-string">&#x27;Double quotes &quot; in between single quote&#x27;</span><br>print(d)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Start and end with single quote&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Start and end with double quotes&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;single quote &#x27; in between double quote&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Double quote &quot;</span> <span class="hljs-keyword">in</span> between single <span class="hljs-built_in">quote</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></p><p><strong>无效字符串的示例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">e &lt;- <span class="hljs-string">&#x27;Mixed quotes&quot;</span><br><span class="hljs-string">print(e)</span><br><span class="hljs-string"></span><br><span class="hljs-string">f &lt;- &#x27;</span>Single <span class="hljs-built_in">quote</span> <span class="hljs-string">&#x27; inside single quote&#x27;</span><br>print(f)<br><br>g &lt;- <span class="hljs-string">&quot;Double quotes &quot;</span> inside double quotes<span class="hljs-string">&quot;</span><br><span class="hljs-string">print(g)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 当我们运行脚本失败给下面的结果：</span><br><span class="hljs-string"></span><br><span class="hljs-string">...: unexpected INCOMPLETE_STRING</span><br><span class="hljs-string"></span><br><span class="hljs-string">.... unexpected symbol </span><br><span class="hljs-string">1: f &lt;- &#x27;Single quote &#x27; inside</span><br><span class="hljs-string"></span><br><span class="hljs-string">unexpected symbol</span><br><span class="hljs-string">1: g &lt;- &quot;</span>Double quotes <span class="hljs-string">&quot; inside</span><br></code></pre></td></tr></table></figure></p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><p>R 语言中的许多字符串使用 <code>paste()</code> 函数组合。它可以采取任何数量的参数组合在一起。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">paste(..., sep = <span class="hljs-string">&quot; &quot;</span>, collapse = <span class="hljs-literal">NULL</span>)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>...</code>表示要组合的任意数量的自变量。</li><li><code>sep</code> 表示参数之间的任何分隔符。它是可选的。</li><li><code>collapse</code> 用于消除两个字符串之间的空格。但不是一个字符串的两个字内的空间。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">a &lt;- <span class="hljs-string">&quot;Hello&quot;</span><br>b &lt;- <span class="hljs-string">&#x27;How&#x27;</span><br>c &lt;- <span class="hljs-string">&quot;are you? &quot;</span><br><br>print(paste(a, b, <span class="hljs-built_in">c</span>))<br>print(paste(a, b, <span class="hljs-built_in">c</span>, sep = <span class="hljs-string">&quot;-&quot;</span>))<br>print(paste(a, b, <span class="hljs-built_in">c</span>, sep = <span class="hljs-string">&quot;&quot;</span>, collapse = <span class="hljs-string">&quot;&quot;</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello How are you? &quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello-How-are you? &quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;HelloHoware you? &quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="格式化数字和字符串"><a href="#格式化数字和字符串" class="headerlink" title="格式化数字和字符串"></a>格式化数字和字符串</h3><p>可以使用 <code>format()</code> 函数将数字和字符串格式化为特定样式。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">format(x, digits, nsmall, scientific, width, justify = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;left&quot;</span>, <span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-string">&quot;centre&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>))<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量输入。</li><li><code>digits</code> 是显示的总位数。</li><li><code>nsmall</code> 是小数点右边的最小位数。</li><li><code>scientific</code> 设置为 <code>TRUE</code> 以科学记数法显示。</li><li><code>width</code> 指示通过在开始处填充空白来显示的最小宽度。</li><li><code>justify</code> 是字符串向左，右或中心的显示。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Total number of digits displayed. Last digit rounded off.</span><br>result &lt;- format(<span class="hljs-number">23.123456789</span>, digits = <span class="hljs-number">9</span>)<br>print(result)<br><br><span class="hljs-comment"># Display numbers in scientific notation.</span><br>result &lt;- format(<span class="hljs-built_in">c</span>(<span class="hljs-number">6</span>, <span class="hljs-number">13.14521</span>), scientific = <span class="hljs-literal">TRUE</span>)<br>print(result)<br><br><span class="hljs-comment"># The minimum number of digits to the right of the decimal point.</span><br>result &lt;- format(<span class="hljs-number">23.47</span>, nsmall = <span class="hljs-number">5</span>)<br>print(result)<br><br><span class="hljs-comment"># Format treats everything as a string.</span><br>result &lt;- format(<span class="hljs-number">6</span>)<br>print(result)<br><br><span class="hljs-comment"># Numbers are padded with blank in the beginning for width.</span><br>result &lt;- format(<span class="hljs-number">13.7</span>, width = <span class="hljs-number">6</span>)<br>print(result)<br><br><span class="hljs-comment"># Left justify strings.</span><br>result &lt;- format(<span class="hljs-string">&quot;Hello&quot;</span>, width = <span class="hljs-number">8</span>, justify = <span class="hljs-string">&quot;l&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Justfy string with center.</span><br>result &lt;- format(<span class="hljs-string">&quot;Hello&quot;</span>, width = <span class="hljs-number">8</span>, justify = <span class="hljs-string">&quot;c&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;23.1234568&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;6.000000e+00&quot;</span> <span class="hljs-string">&quot;1.314521e+01&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;23.47000&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;6&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;  13.7&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Hello   &quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot; Hello  &quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="计算字符串中的字符数"><a href="#计算字符串中的字符数" class="headerlink" title="计算字符串中的字符数"></a>计算字符串中的字符数</h3><p><code>nchar()</code> 函数可以计算字符串中包含空格的字符数。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">nchar(x)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量输入。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">result &lt;- nchar(<span class="hljs-string">&quot;Count the number of characters&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure></p><h3 id="更改大小写"><a href="#更改大小写" class="headerlink" title="更改大小写"></a>更改大小写</h3><p>使用 <code>toupper()</code> 和 <code>tolower()</code> 函数可以改变字符串的字符的大小写。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">toupper(x)<br>tolower(x)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是向量输入。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Changing to Upper case.</span><br>result &lt;- toupper(<span class="hljs-string">&quot;Changing To Upper&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Changing to lower case.</span><br>result &lt;- tolower(<span class="hljs-string">&quot;Changing To Lower&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;CHANGING TO UPPER&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;changing to lower&quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h3><p><code>substring()</code> 函数可以用于提取字符串的部分。</p><p><strong>语法</strong></p><p>函数的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">substring(x, first, last)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是字符向量输入。</li><li><code>first</code> 是要提取的第一个字符的位置。</li><li><code>last</code> 是要提取的最后一个字符的位置。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Extract characters from 5th to 7th position.</span><br>result &lt;- substring(<span class="hljs-string">&quot;Extract&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;act&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p>向量是最基本的 R 语言数据对象，有六种类型的原子向量。它们是逻辑，整数，双精度，复杂，字符和原始。</p><h2 id="创建向量"><a href="#创建向量" class="headerlink" title="创建向量"></a>创建向量</h2><h3 id="单元素向量"><a href="#单元素向量" class="headerlink" title="单元素向量"></a>单元素向量</h3><p>即使在 R 语言中只写入一个值，它也将成为长度为 <code>1</code> 的向量，并且属于上述向量类型之一。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Atomic vector of type character.</span><br>print(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><span class="hljs-comment"># Atomic vector of type double.</span><br>print(<span class="hljs-number">12.5</span>)<br><br><span class="hljs-comment"># Atomic vector of type integer.</span><br>print(<span class="hljs-number">63L</span>)<br><br><span class="hljs-comment"># Atomic vector of type logical.</span><br>print(<span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># Atomic vector of type complex.</span><br>print(<span class="hljs-number">2</span>+<span class="hljs-number">3i</span>)<br><br><span class="hljs-comment"># Atomic vector of type raw.</span><br>print(charToRaw(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;abc&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">12.5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">63</span><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span>+<span class="hljs-number">3i</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">68</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span><span class="hljs-built_in">c</span> <span class="hljs-number">6</span><span class="hljs-built_in">c</span> <span class="hljs-number">6</span>f<br></code></pre></td></tr></table></figure></p><h3 id="多元素向量"><a href="#多元素向量" class="headerlink" title="多元素向量"></a>多元素向量</h3><p>对数值数据使用冒号运算符</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Creating a sequence from 5 to 13.</span><br>v &lt;- 5:<span class="hljs-number">13</span><br>print(v)<br><br><span class="hljs-comment"># Creating a sequence from 6.6 to 12.6.</span><br>v &lt;- 6.6:<span class="hljs-number">12.6</span><br>print(v)<br><br><span class="hljs-comment"># If the final element specified does not belong to the sequence then it is discarded.</span><br>v &lt;- 3.8:<span class="hljs-number">11.4</span><br>print(v)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">6.6</span>  <span class="hljs-number">7.6</span>  <span class="hljs-number">8.6</span>  <span class="hljs-number">9.6</span> <span class="hljs-number">10.6</span> <span class="hljs-number">11.6</span> <span class="hljs-number">12.6</span><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">3.8</span>  <span class="hljs-number">4.8</span>  <span class="hljs-number">5.8</span>  <span class="hljs-number">6.8</span>  <span class="hljs-number">7.8</span>  <span class="hljs-number">8.8</span>  <span class="hljs-number">9.8</span> <span class="hljs-number">10.8</span><br></code></pre></td></tr></table></figure></p><p><strong>使用 <code>sequence (Seq.)</code> 序列运算符</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create vector with elements from 5 to 9 incrementing by 0.4.</span><br>print(seq(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, by = <span class="hljs-number">0.4</span>))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5.0</span> <span class="hljs-number">5.4</span> <span class="hljs-number">5.8</span> <span class="hljs-number">6.2</span> <span class="hljs-number">6.6</span> <span class="hljs-number">7.0</span> <span class="hljs-number">7.4</span> <span class="hljs-number">7.8</span> <span class="hljs-number">8.2</span> <span class="hljs-number">8.6</span> <span class="hljs-number">9.0</span><br></code></pre></td></tr></table></figure></p><p><strong>使用 <code>C()</code> 函数</strong></p><p>如果其中一个元素是字符，则非字符值被强制转换为字符类型。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># The logical and numeric values are converted to characters.</span><br>s &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">TRUE</span>)<br>print(s)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-string">&quot;red&quot;</span>  <span class="hljs-string">&quot;5&quot;</span>  <span class="hljs-string">&quot;TRUE&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="访问向量元素"><a href="#访问向量元素" class="headerlink" title="访问向量元素"></a>访问向量元素</h2><p>使用索引访问向量的元素。<code>[]</code> 括号用于建立索引。索引从位置 <code>1</code> 开始。在索引中给出负值会丢弃，<code>TRUE</code>，<code>FALSE</code> 或 <code>0</code> 和 <code>1</code> 的元素，也可用于索引。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Accessing vector elements using position.</span><br>t &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Sun&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>, <span class="hljs-string">&quot;Wed&quot;</span>, <span class="hljs-string">&quot;Thurs&quot;</span>, <span class="hljs-string">&quot;Fri&quot;</span>, <span class="hljs-string">&quot;Sat&quot;</span>)<br>u &lt;- t[<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>)]<br>print(u)<br><br><span class="hljs-comment"># Accessing vector elements using logical indexing.</span><br>v &lt;- t[<span class="hljs-built_in">c</span>(<span class="hljs-literal">TRUE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">FALSE</span>, <span class="hljs-literal">TRUE</span>, <span class="hljs-literal">FALSE</span>)]<br>print(v)<br><br><span class="hljs-comment"># Accessing vector elements using negative indexing.</span><br>x &lt;- t[<span class="hljs-built_in">c</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">5</span>)]<br>print(x)<br><br><span class="hljs-comment"># Accessing vector elements using 0/1 indexing.</span><br>y &lt;- t[<span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)]<br>print(y)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Mon&quot;</span> <span class="hljs-string">&quot;Tue&quot;</span> <span class="hljs-string">&quot;Fri&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span> <span class="hljs-string">&quot;Fri&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span> <span class="hljs-string">&quot;Tue&quot;</span> <span class="hljs-string">&quot;Wed&quot;</span> <span class="hljs-string">&quot;Fri&quot;</span> <span class="hljs-string">&quot;Sat&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="向量操作"><a href="#向量操作" class="headerlink" title="向量操作"></a>向量操作</h2><h3 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h3><p>可以加，减，乘，除两个相同长度的向量，将结果作为向量输出。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors.</span><br>v1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>)<br>v2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Vector addition.</span><br>add.result &lt;- v1 + v2<br>print(add.result)<br><br><span class="hljs-comment"># Vector substraction.</span><br>sub.result &lt;- v1 - v2<br>print(sub.result)<br><br><span class="hljs-comment"># Vector multiplication.</span><br>multi.result &lt;- v1 * v2<br>print(multi.result)<br><br><span class="hljs-comment"># Vector division.</span><br>divi.result &lt;- v1 / v2<br>print(divi.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">7</span> <span class="hljs-number">19</span>  <span class="hljs-number">4</span> <span class="hljs-number">13</span>  <span class="hljs-number">1</span> <span class="hljs-number">13</span><br>[<span class="hljs-number">1</span>] -<span class="hljs-number">1</span> -<span class="hljs-number">3</span>  <span class="hljs-number">4</span> -<span class="hljs-number">3</span> -<span class="hljs-number">1</span>  <span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">12</span> <span class="hljs-number">88</span>  <span class="hljs-number">0</span> <span class="hljs-number">40</span>  <span class="hljs-number">0</span> <span class="hljs-number">22</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">0.7500000</span> <span class="hljs-number">0.7272727</span>       <span class="hljs-literal">Inf</span> <span class="hljs-number">0.6250000</span> <span class="hljs-number">0.0000000</span> <span class="hljs-number">5.5000000</span><br></code></pre></td></tr></table></figure></p><h3 id="向量元素回收"><a href="#向量元素回收" class="headerlink" title="向量元素回收"></a>向量元素回收</h3><p>如果我们对不等长的两个向量应用算术运算，则较短向量的元素被循环以完成操作。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">v1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>)<br>v2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>)<br><span class="hljs-comment"># V2 becomes c(4, 11, 4, 11, 4, 11)</span><br><br>add.result &lt;- v1 + v2<br>print(add.result)<br><br>sub.result &lt;- v1 - v2<br>print(sub.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  <span class="hljs-number">7</span> <span class="hljs-number">19</span>  <span class="hljs-number">8</span> <span class="hljs-number">16</span>  <span class="hljs-number">4</span> <span class="hljs-number">22</span><br>[<span class="hljs-number">1</span>] -<span class="hljs-number">1</span> -<span class="hljs-number">3</span>  <span class="hljs-number">0</span> -<span class="hljs-number">6</span> -<span class="hljs-number">4</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></p><h3 id="向量元素排序"><a href="#向量元素排序" class="headerlink" title="向量元素排序"></a>向量元素排序</h3><p>向量中的元素可以使用 <code>sort()</code> 函数排序。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">9</span>, <span class="hljs-number">304</span>)<br><br><span class="hljs-comment"># Sort the elements of the vector.</span><br>sort.result &lt;- sort(v)<br>print(sort.result)<br><br><span class="hljs-comment"># Sort the elements in the reverse order.</span><br>revsort.result &lt;- sort(v, decreasing = <span class="hljs-literal">TRUE</span>)<br>print(revsort.result)<br><br><span class="hljs-comment"># Sorting character vectors.</span><br>v &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;violet&quot;</span>)<br>sort.result &lt;- sort(v)<br>print(sort.result)<br><br><span class="hljs-comment"># Sorting character vectors in reverse order.</span><br>revsort.result &lt;- sort(v, decreasing = <span class="hljs-literal">TRUE</span>)<br>print(revsort.result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>]  -<span class="hljs-number">9</span>   <span class="hljs-number">0</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">8</span>  <span class="hljs-number">11</span> <span class="hljs-number">304</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">304</span>  <span class="hljs-number">11</span>   <span class="hljs-number">8</span>   <span class="hljs-number">5</span>   <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">0</span>  -<span class="hljs-number">9</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Blue&quot;</span>   <span class="hljs-string">&quot;Red&quot;</span>    <span class="hljs-string">&quot;violet&quot;</span> <span class="hljs-string">&quot;yellow&quot;</span><br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-string">&quot;violet&quot;</span> <span class="hljs-string">&quot;Red&quot;</span>    <span class="hljs-string">&quot;Blue&quot;</span> <br></code></pre></td></tr></table></figure></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表是 R 语言对象，它包含不同类型的元素，如数字，字符串，向量和其中的另一个列表。列表还可以包含矩阵或函数作为其元素。列表是使用 <code>list()</code> 函数创建的。</p><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><p>以下是创建包含字符串，数字，向量和逻辑值的列表的示例</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing strings, numbers, vectors and a logical values.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-built_in">c</span>(<span class="hljs-number">21</span>, <span class="hljs-number">32</span>, <span class="hljs-number">11</span>), <span class="hljs-literal">TRUE</span>, <span class="hljs-number">51.23</span>, <span class="hljs-number">119.1</span>)<br>print(list_data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Red&quot;</span><br><br>[[<span class="hljs-number">2</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Green&quot;</span><br><br>[[<span class="hljs-number">3</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">21</span> <span class="hljs-number">32</span> <span class="hljs-number">11</span><br><br>[[<span class="hljs-number">4</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>[[<span class="hljs-number">5</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">51.23</span><br><br>[[<span class="hljs-number">6</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">119.1</span><br></code></pre></td></tr></table></figure></p><h2 id="命名列表元素"><a href="#命名列表元素" class="headerlink" title="命名列表元素"></a>命名列表元素</h2><p>列表元素可以给出名称，并且可以使用这些名称访问它们。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing a vector, a matrix and a list.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>), matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">8</span>), nrow = <span class="hljs-number">2</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-number">12.3</span>))<br><br><span class="hljs-comment"># Give names to the elements in the list.</span><br><span class="hljs-built_in">names</span>(list_data) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;1st Quarter&quot;</span>, <span class="hljs-string">&quot;A_Matrix&quot;</span>, <span class="hljs-string">&quot;A Inner list&quot;</span>)<br><br><span class="hljs-comment"># Show the list.</span><br>print(list_data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$`<span class="hljs-number">1</span>st_Quarter`<br>[1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot;<br><br>$A_Matrix<br>     [,1] [,2] [,3]<br>[1,]    3    5   -2<br>[2,]    9    1    8<br><br>$A_Inner_list<br>$A_Inner_list[[1]]<br>[1] &quot;green&quot;<br><br>$A_Inner_list[[2]]<br>[1] 12.3<br></code></pre></td></tr></table></figure></p><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>列表的元素可以通过列表中元素的索引访问。在命名列表的情况下，它也可以使用名称来访问。</p><p>我们继续使用在上面的例子：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing a vector, a matrix and a list.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>), matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">8</span>), nrow = <span class="hljs-number">2</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-number">12.3</span>))<br><br><span class="hljs-comment"># Give names to the elements in the list.</span><br><span class="hljs-built_in">names</span>(list_data) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;1st Quarter&quot;</span>, <span class="hljs-string">&quot;A_Matrix&quot;</span>, <span class="hljs-string">&quot;A Inner list&quot;</span>)<br><br><span class="hljs-comment"># Access the first element of the list.</span><br>print(list_data[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># Access the thrid element. As it is also a list, all its elements will be printed.</span><br>print(list_data[<span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># Access the list element using the name of the element.</span><br>print(list_data$A_Matrix)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>$`<span class="hljs-number">1</span>st_Quarter`<br>[1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot;<br><br>$A_Inner_list<br>$A_Inner_list[[1]]<br>[1] &quot;green&quot;<br><br>$A_Inner_list[[2]]<br>[1] 12.3<br><br>     [,1] [,2] [,3]<br>[1,]    3    5   -2<br>[2,]    9    1    8<br></code></pre></td></tr></table></figure></p><h2 id="操作列表元素"><a href="#操作列表元素" class="headerlink" title="操作列表元素"></a>操作列表元素</h2><p>我们可以添加，删除和更新列表元素，如下所示。我们只能在列表的末尾添加和删除元素。但我们可以更新任何元素。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a list containing a vector, a matrix and a list.</span><br>list_data &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>), matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">8</span>), nrow = <span class="hljs-number">2</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-number">12.3</span>))<br><br><span class="hljs-comment"># Give names to the elements in the list.</span><br><span class="hljs-built_in">names</span>(list_data) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;1st Quarter&quot;</span>, <span class="hljs-string">&quot;A_Matrix&quot;</span>, <span class="hljs-string">&quot;A Inner list&quot;</span>)<br><br><span class="hljs-comment"># Add element at the end of the list.</span><br>list_data[<span class="hljs-number">4</span>] &lt;- <span class="hljs-string">&quot;New element&quot;</span><br>print(list_data[<span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># Remove the last element.</span><br>list_data[<span class="hljs-number">4</span>] &lt;- <span class="hljs-literal">NULL</span><br><br><span class="hljs-comment"># Print the 4th Element.</span><br>print(list_data[<span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># Update the 3rd Element.</span><br>list_data[<span class="hljs-number">3</span>] &lt;- <span class="hljs-string">&quot;updated element&quot;</span><br>print(list_data[<span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;New element&quot;</span><br><br>$<br><span class="hljs-literal">NULL</span><br><br>$`A Inner list`<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;updated element&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="合并列表"><a href="#合并列表" class="headerlink" title="合并列表"></a>合并列表</h2><p>通过将所有列表放在一个 <code>list()</code> 函数中，您可以将许多列表合并到一个列表中。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two lists.</span><br>list1 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>list2 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;Sun&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>)<br><br><span class="hljs-comment"># Merge the two lists.</span><br>merged.list &lt;- <span class="hljs-built_in">c</span>(list1, list2)<br><br><span class="hljs-comment"># Print the merged list.</span><br>print(merged.list)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br><br>[[<span class="hljs-number">2</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>[[<span class="hljs-number">3</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">3</span><br><br>[[<span class="hljs-number">4</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Sun&quot;</span><br><br>[[<span class="hljs-number">5</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Mon&quot;</span><br><br>[[<span class="hljs-number">6</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-string">&quot;Tue&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="将列表转换为向量"><a href="#将列表转换为向量" class="headerlink" title="将列表转换为向量"></a>将列表转换为向量</h2><p>列表可以转换为向量，使得向量的元素可以用于进一步的操作。可以在将列表转换为向量之后应用对向量的所有算术运算。我们可以使用 <code>unlist()</code> 函数完成这个转换。它将列表作为输入并生成向量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create lists.</span><br>list1 &lt;- <span class="hljs-built_in">list</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>)<br>print(list1)<br><br>list2 &lt;-<span class="hljs-built_in">list</span>(<span class="hljs-number">10</span>:<span class="hljs-number">14</span>)<br>print(list2)<br><br><span class="hljs-comment"># Convert the lists to vectors.</span><br>v1 &lt;- unlist(list1)<br>v2 &lt;- unlist(list2)<br><br>print(v1)<br>print(v2)<br><br><span class="hljs-comment"># Now add the vectors</span><br>result &lt;- v1 + v2<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br>[[<span class="hljs-number">1</span>]]<br>[<span class="hljs-number">1</span>] <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure></p><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p>矩阵是其中元素以二维矩形布局布置的 R 对象。它们包含相同原子类型的元素。虽然我们可以创建一个只包含字符或只包含逻辑值的矩阵，但它们没有太多用处。我们使用包含数字元素的矩阵用于数学计算。</p><h2 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h2><p>R 语言中使用 <code>matrix()</code> 函数创建一个矩阵。</p><p><strong>语法</strong></p><p>在 R 语言中创建矩阵的基本语法是：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">matrix(data, nrow, ncol, byrow, <span class="hljs-built_in">dimnames</span>)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>data</code> 是成为矩阵的数据元素的输入向量。</li><li><code>nrow</code> 是要创建的行数。</li><li><code>ncol</code> 是要创建的列数。</li><li><code>byrow</code> 是一个逻辑线索。如果为 <code>TRUE</code>，则输入向量元素按行排列。</li><li><code>dimname</code> 是分配给行和列的名称。</li></ul><p><strong>实例</strong></p><p>创建一个以数字向量作为输入的矩阵</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Elements are arranged sequentially by row.</span><br>M &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">TRUE</span>)<br>print(M)<br><br><span class="hljs-comment"># Elements are arranged sequentially by column.</span><br>N &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">FALSE</span>)<br>print(N)<br><br><span class="hljs-comment"># Define the column and row names.</span><br>rownames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;row1&quot;</span>, <span class="hljs-string">&quot;row2&quot;</span>, <span class="hljs-string">&quot;row3&quot;</span>, <span class="hljs-string">&quot;row4&quot;</span>)<br>colnames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;col1&quot;</span>, <span class="hljs-string">&quot;col2&quot;</span>, <span class="hljs-string">&quot;col3&quot;</span>)<br><br>P &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">TRUE</span>, <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(rownames, colnames))<br>print(P)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span><br>[<span class="hljs-number">4</span>,]   <span class="hljs-number">12</span>   <span class="hljs-number">13</span>   <span class="hljs-number">14</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">11</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">4</span>    <span class="hljs-number">8</span>   <span class="hljs-number">12</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">5</span>    <span class="hljs-number">9</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">4</span>,]    <span class="hljs-number">6</span>   <span class="hljs-number">10</span>   <span class="hljs-number">14</span><br><br>     col1 col2 col3<br>row1    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span><br>row2    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span><br>row3    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span><br>row4   <span class="hljs-number">12</span>   <span class="hljs-number">13</span>   <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure></p><h2 id="访问矩阵的元素"><a href="#访问矩阵的元素" class="headerlink" title="访问矩阵的元素"></a>访问矩阵的元素</h2><p>可以通过使用元素的列和行索引来访问矩阵的元素。我们考虑上面的矩阵 <code>P</code> 找到下面的具体元素。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Define the column and row names.</span><br>rownames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;row1&quot;</span>, <span class="hljs-string">&quot;row2&quot;</span>, <span class="hljs-string">&quot;row3&quot;</span>, <span class="hljs-string">&quot;row4&quot;</span>)<br>colnames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;col1&quot;</span>, <span class="hljs-string">&quot;col2&quot;</span>, <span class="hljs-string">&quot;col3&quot;</span>)<br><br><span class="hljs-comment"># Create the matrix.</span><br>P &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>:<span class="hljs-number">14</span>), nrow = <span class="hljs-number">4</span>, byrow = <span class="hljs-literal">TRUE</span>, <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(rownames, colnames))<br><br><span class="hljs-comment"># Access the element at 3rd column and 1st row.</span><br>print(P[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># Access the element at 2nd column and 4th row.</span><br>print(P[<span class="hljs-number">4</span>, <span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># Access only the  2nd row.</span><br>print(P[<span class="hljs-number">2</span>, ])<br><br><span class="hljs-comment"># Access only the 3rd column.</span><br>print(P[, <span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">13</span><br>col1 col2 col3 <br>   <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span> <br>row1 row2 row3 row4 <br>   <span class="hljs-number">5</span>    <span class="hljs-number">8</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span> <br></code></pre></td></tr></table></figure></p><h2 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h2><p>使用 R 运算符对矩阵执行各种数学运算。操作的结果也是一个矩阵。</p><p>对于操作中涉及的矩阵，维度（行数和列数）应该相同。</p><h3 id="加法和减法"><a href="#加法和减法" class="headerlink" title="加法和减法"></a>加法和减法</h3><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two 2x3 matrices.</span><br>matrix1 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix1)<br><br>matrix2 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix2)<br><br><span class="hljs-comment"># Add the matrices.</span><br>result &lt;- matrix1 + matrix2<br>cat(<span class="hljs-string">&quot;Result of addition&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Subtract the matrices</span><br>result &lt;- matrix1 - matrix2<br>cat(<span class="hljs-string">&quot;Result of subtraction&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>   -<span class="hljs-number">1</span>    <span class="hljs-number">2</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>    <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">2</span>    <span class="hljs-number">9</span>    <span class="hljs-number">4</span><br><br>Result of addition<br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">8</span>   -<span class="hljs-number">1</span>    <span class="hljs-number">5</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">11</span>   <span class="hljs-number">13</span>   <span class="hljs-number">10</span><br><br>Result of subtraction<br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]   -<span class="hljs-number">2</span>   -<span class="hljs-number">1</span>   -<span class="hljs-number">1</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">7</span>   -<span class="hljs-number">5</span>    <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><h3 id="乘法和除法"><a href="#乘法和除法" class="headerlink" title="乘法和除法"></a>乘法和除法</h3><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two 2x3 matrices.</span><br>matrix1 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix1)<br><br>matrix2 &lt;- matrix(<span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), nrow = <span class="hljs-number">2</span>)<br>print(matrix2)<br><br><span class="hljs-comment"># Multiply the matrices.</span><br>result &lt;- matrix1 * matrix2<br>cat(<span class="hljs-string">&quot;Result of multiplication&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># Divide the matrices</span><br>result &lt;- matrix1 / matrix2<br>cat(<span class="hljs-string">&quot;Result of division&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">3</span>   -<span class="hljs-number">1</span>    <span class="hljs-number">2</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>    <span class="hljs-number">0</span>    <span class="hljs-number">3</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">2</span>    <span class="hljs-number">9</span>    <span class="hljs-number">4</span><br>Result of multiplication <br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]   <span class="hljs-number">15</span>    <span class="hljs-number">0</span>    <span class="hljs-number">6</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">18</span>   <span class="hljs-number">36</span>   <span class="hljs-number">24</span><br>Result of division <br>     [,<span class="hljs-number">1</span>]      [,<span class="hljs-number">2</span>]      [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]  <span class="hljs-number">0.6</span>      -<span class="hljs-literal">Inf</span> <span class="hljs-number">0.6666667</span><br>[<span class="hljs-number">2</span>,]  <span class="hljs-number">4.5</span> <span class="hljs-number">0.4444444</span> <span class="hljs-number">1.5000000</span><br></code></pre></td></tr></table></figure></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是可以在两个以上维度中存储数据的 R 数据对象。</p><p>例如：如果我们创建一个维度 <code>(2，3，4)</code> 的数组，则它创建 <code>4</code> 个矩形矩阵，每个矩阵具有 <code>2</code> 行和 <code>3</code> 列。数组只能存储数据类型。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>使用 <code>array()</code> 函数创建数组。它使用向量作为输入，并使用 <code>dim</code> 参数中的值创建数组。</p><p><strong>实例</strong></p><p>以下示例创建一个由两个 <code>3x3</code> 矩阵组成的数组，每个矩阵具有 <code>3</code> 行和 <code>3</code> 列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>result &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , <span class="hljs-number">1</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>, , <span class="hljs-number">2</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h2 id="命名列和行"><a href="#命名列和行" class="headerlink" title="命名列和行"></a>命名列和行</h2><p>我们可以使用 <code>dimnames</code> 参数给数组中的行，列和矩阵命名。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br>column.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;COL1&quot;</span>, <span class="hljs-string">&quot;COL2&quot;</span>, <span class="hljs-string">&quot;COL3&quot;</span>)<br>row.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;ROW1&quot;</span>, <span class="hljs-string">&quot;ROW2&quot;</span>, <span class="hljs-string">&quot;ROW3&quot;</span>)<br>matrix.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Matrix1&quot;</span>, <span class="hljs-string">&quot;Matrix2&quot;</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>result &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>), <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(row.names, column.names, matrix.names))<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , Matrix1<br><br>     COL1 COL2 COL3<br>ROW1    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>ROW2    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>ROW3    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>, , Matrix2<br><br>     COL1 COL2 COL3<br>ROW1    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>ROW2    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>ROW3    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br>column.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;COL1&quot;</span>, <span class="hljs-string">&quot;COL2&quot;</span>, <span class="hljs-string">&quot;COL3&quot;</span>)<br>row.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;ROW1&quot;</span>, <span class="hljs-string">&quot;ROW2&quot;</span>, <span class="hljs-string">&quot;ROW3&quot;</span>)<br>matrix.names &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Matrix1&quot;</span>, <span class="hljs-string">&quot;Matrix2&quot;</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>result &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>), <span class="hljs-built_in">dimnames</span> = <span class="hljs-built_in">list</span>(row.names, column.names, matrix.names))<br><br><span class="hljs-comment"># Print the third row of the second matrix of the array.</span><br>print(result[<span class="hljs-number">3</span>, , <span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># Print the element in the 1st row and 3rd column of the 1st matrix.</span><br>print(result[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># Print the 2nd Matrix.</span><br>print(result[, , <span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>COL1 COL2 COL3 <br>   <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span> <br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">13</span><br><br>     COL1 COL2 COL3<br>ROW1    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>ROW2    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>ROW3    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></p><h2 id="操作数组元素"><a href="#操作数组元素" class="headerlink" title="操作数组元素"></a>操作数组元素</h2><p>由于数组由多维构成矩阵，所以对数组元素的操作通过访问矩阵的元素来执行。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>array1 &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector3 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>vector4 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>)<br>array2 &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># create matrices from these arrays.</span><br>matrix1 &lt;- array1[, , <span class="hljs-number">2</span>]<br>matrix2 &lt;- array2[, , <span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># Add the matrices.</span><br>result &lt;- matrix1 + matrix2<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]   <span class="hljs-number">10</span>   <span class="hljs-number">20</span>   <span class="hljs-number">26</span><br>[<span class="hljs-number">2</span>,]   <span class="hljs-number">18</span>   <span class="hljs-number">22</span>   <span class="hljs-number">28</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">6</span>   <span class="hljs-number">24</span>   <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure></p><h2 id="跨数组元素的计算"><a href="#跨数组元素的计算" class="headerlink" title="跨数组元素的计算"></a>跨数组元素的计算</h2><p>我们可以使用 <code>apply()</code> 函数在数组中的元素上进行计算。</p><p><strong>语法</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">apply(x, margin, fun)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>x</code> 是一个数组。</li><li><code>margin</code> 是所使用的数据集的名称。</li><li><code>fun</code> 是要应用于数组元素的函数。</li></ul><p><strong>实例</strong></p><p>我们下面使用 <code>apply()</code> 函数计算所有矩阵中数组行中元素的总和。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create two vectors of different lengths.</span><br>vector1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<br>vector2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># Take these vectors as input to the array.</span><br>new.array &lt;- array(<span class="hljs-built_in">c</span>(vector1, vector2), <span class="hljs-built_in">dim</span> = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>))<br>print(new.array)<br><br><span class="hljs-comment"># Use apply to calculate the sum of the rows across all the matrices.</span><br>result &lt;- apply(new.array, <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>, , <span class="hljs-number">1</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>, , <span class="hljs-number">2</span><br><br>     [,<span class="hljs-number">1</span>] [,<span class="hljs-number">2</span>] [,<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>,]    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>   <span class="hljs-number">13</span><br>[<span class="hljs-number">2</span>,]    <span class="hljs-number">9</span>   <span class="hljs-number">11</span>   <span class="hljs-number">14</span><br>[<span class="hljs-number">3</span>,]    <span class="hljs-number">3</span>   <span class="hljs-number">12</span>   <span class="hljs-number">15</span><br><br>[<span class="hljs-number">1</span>] <span class="hljs-number">56</span> <span class="hljs-number">68</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure></p><h1 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h1><p>因子是用于对数据进行分类并将其存储为级别的数据对象。它们可以存储字符串和整数。它们在具有有限数量的唯一值的列中很有用。像 <code>男性</code>，<code>女性</code> 和 <code>True</code>，<code>False</code> 等。它们在统计建模的数据分析中很有用。</p><h2 id="创建因子"><a href="#创建因子" class="headerlink" title="创建因子"></a>创建因子</h2><p>使用 <code>factor()</code> 函数通过将向量作为输入创建因子。</p><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create a vector as input.</span><br>data &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>)<br><br>print(data)<br>print(is.factor(data))<br><br><span class="hljs-comment"># Apply the factor function.</span><br>factor_data &lt;- factor(data)<br><br>print(factor_data)<br>print(is.factor(factor_data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;East&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;East&quot;</span>  <span class="hljs-string">&quot;North&quot;</span> <span class="hljs-string">&quot;North&quot;</span> <span class="hljs-string">&quot;East&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;West&quot;</span>  <span class="hljs-string">&quot;East&quot;</span> <span class="hljs-string">&quot;North&quot;</span><br> <br>[<span class="hljs-number">1</span>] <span class="hljs-literal">FALSE</span><br><br> [<span class="hljs-number">1</span>] East  West  East  North North East  West  West  West  East  North<br>Levels: East North West<br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure></p><h2 id="数据框的因子"><a href="#数据框的因子" class="headerlink" title="数据框的因子"></a>数据框的因子</h2><p>在创建具有文本数据列的任何数据框时，R 语言将文本列视为分类数据并在其上创建因子。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the vectors for data frame.</span><br>height &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">132</span>, <span class="hljs-number">151</span>, <span class="hljs-number">162</span>, <span class="hljs-number">139</span>, <span class="hljs-number">166</span>, <span class="hljs-number">147</span>, <span class="hljs-number">122</span>)<br>weight &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">66</span>, <span class="hljs-number">53</span>, <span class="hljs-number">67</span>, <span class="hljs-number">52</span>, <span class="hljs-number">40</span>)<br>gender &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>)<br><br><span class="hljs-comment"># Create the data frame.</span><br>input_data &lt;- data.frame(height, weight, gender)<br>print(input_data)<br><br><span class="hljs-comment"># Test if the gender column is a factor.</span><br>print(is.factor(input_data$gender))<br><br><span class="hljs-comment"># Print the gender column so see the levels.</span><br>print(input_data$gender)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  height weight gender<br>1    <span class="hljs-number">132</span>     <span class="hljs-number">48</span>   male<br>2    <span class="hljs-number">151</span>     <span class="hljs-number">49</span>   male<br>3    <span class="hljs-number">162</span>     <span class="hljs-number">66</span> female<br>4    <span class="hljs-number">139</span>     <span class="hljs-number">53</span> female<br>5    <span class="hljs-number">166</span>     <span class="hljs-number">67</span>   male<br>6    <span class="hljs-number">147</span>     <span class="hljs-number">52</span> female<br>7    <span class="hljs-number">122</span>     <span class="hljs-number">40</span>   male<br><br>[<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>[<span class="hljs-number">1</span>] male   male   female female male   female male  <br>Levels: female male<br></code></pre></td></tr></table></figure></p><h2 id="更改级别顺序"><a href="#更改级别顺序" class="headerlink" title="更改级别顺序"></a>更改级别顺序</h2><p>可以通过使用新的等级次序再次应用因子函数来改变因子中的等级的顺序。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">data &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>)<br><span class="hljs-comment"># Create the factors</span><br>factor_data &lt;- factor(data)<br>print(factor_data)<br><br><span class="hljs-comment"># Apply the factor function with required order of the level.</span><br>new_order_data &lt;- factor(factor_data, levels = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;East&quot;</span>, <span class="hljs-string">&quot;West&quot;</span>, <span class="hljs-string">&quot;North&quot;</span>))<br>print(new_order_data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> [<span class="hljs-number">1</span>] East  West  East  North North East  West  West  West  East  North<br>Levels: East North West<br><br> [<span class="hljs-number">1</span>] East  West  East  North North East  West  West  West  East  North<br>Levels: East West North<br></code></pre></td></tr></table></figure></p><h2 id="生成因子级别"><a href="#生成因子级别" class="headerlink" title="生成因子级别"></a>生成因子级别</h2><p>我们可以使用 <code>gl()</code> 函数生成因子级别。它需要两个整数作为输入，指示每个级别有多少级别和多少次。</p><p><strong>语法</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">gl(n, k, labels)<br></code></pre></td></tr></table></figure></p><p>以下是所使用的参数的说明：</p><ul><li><code>n</code> 是给出级数的整数。</li><li><code>k</code> 是给出复制数目的整数。</li><li><code>labels</code> 是所得因子水平的标签向量。</li></ul><p><strong>实例</strong></p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">v &lt;- gl(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, labels = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Tampa&quot;</span>, <span class="hljs-string">&quot;Seattle&quot;</span>, <span class="hljs-string">&quot;Boston&quot;</span>))<br>print(v)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> [<span class="hljs-number">1</span>] Tampa   Tampa   Tampa   Tampa   Seattle Seattle Seattle Seattle Boston  Boston  Boston  Boston <br>Levels: Tampa Seattle Boston<br></code></pre></td></tr></table></figure></p><h1 id="数据框"><a href="#数据框" class="headerlink" title="数据框"></a>数据框</h1><p>数据框是表或二维阵列状结构，其中每一列包含一个变量的值，并且每一行包含来自每一列的一组值。</p><p>以下是数据框的特性。</p><ul><li>列名称应为非空。</li><li>行名称应该是唯一的。</li><li>存储在数据框中的数据可以是数字，因子或字符类型。</li><li>每个列应包含相同数量的数据项。</li></ul><h2 id="创建数据框"><a href="#创建数据框" class="headerlink" title="创建数据框"></a>创建数据框</h2><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Print the data frame.</span><br>print(emp.data) <br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br> emp_id    emp_name     salary     start_date<br>1     <span class="hljs-number">1</span>     Rick        <span class="hljs-number">623.30</span>     <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>2     <span class="hljs-number">2</span>     Dan         <span class="hljs-number">515.20</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span><br>3     <span class="hljs-number">3</span>     Michelle    <span class="hljs-number">611.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span><br>4     <span class="hljs-number">4</span>     Ryan        <span class="hljs-number">729.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span><br>5     <span class="hljs-number">5</span>     Gary        <span class="hljs-number">843.25</span>     <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure></p><h2 id="获取数据框的结构"><a href="#获取数据框的结构" class="headerlink" title="获取数据框的结构"></a>获取数据框的结构</h2><p>通过使用 <code>str()</code> 函数可以看到数据框的结构。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Get the structure of the data frame.</span><br>str(emp.data)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br><span class="hljs-string">&#x27;data.frame&#x27;</span>:<span class="hljs-number">5</span> obs. of  <span class="hljs-number">4</span> variables:<br> $ emp_id    : int  <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br> $ emp_name  : chr  <span class="hljs-string">&quot;Rick&quot;</span> <span class="hljs-string">&quot;Dan&quot;</span> <span class="hljs-string">&quot;Michelle&quot;</span> <span class="hljs-string">&quot;Ryan&quot;</span> ...<br> $ salary    : num  <span class="hljs-number">623</span> <span class="hljs-number">515</span> <span class="hljs-number">611</span> <span class="hljs-number">729</span> <span class="hljs-number">843</span><br> $ start_date: Date, format: <span class="hljs-string">&quot;2012-01-01&quot;</span> <span class="hljs-string">&quot;2013-09-23&quot;</span> <span class="hljs-string">&quot;2014-11-15&quot;</span> <span class="hljs-string">&quot;2014-05-11&quot;</span> ...<br></code></pre></td></tr></table></figure></p><h2 id="数据框中的数据摘要"><a href="#数据框中的数据摘要" class="headerlink" title="数据框中的数据摘要"></a>数据框中的数据摘要</h2><p>可以通过应用 <code>summary()</code> 函数获取数据的统计摘要和性质。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Print the summary.</span><br>print(summary(emp.data))<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>     emp_id    emp_name             salary        start_date        <br> Min.   :<span class="hljs-number">1</span>   Length:<span class="hljs-number">5</span>           Min.   :<span class="hljs-number">515.2</span>   Min.   :<span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>  <br> <span class="hljs-number">1</span>st Qu.:<span class="hljs-number">2</span>   Class :character   <span class="hljs-number">1</span>st Qu.:<span class="hljs-number">611.0</span>   <span class="hljs-number">1</span>st Qu.:<span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span>  <br> Median :<span class="hljs-number">3</span>   Mode  :character   Median :<span class="hljs-number">623.3</span>   Median :<span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>  <br> Mean   :<span class="hljs-number">3</span>                      Mean   :<span class="hljs-number">664.4</span>   Mean   :<span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">14</span>  <br> <span class="hljs-number">3</span>rd Qu.:<span class="hljs-number">4</span>                      <span class="hljs-number">3</span>rd Qu.:<span class="hljs-number">729.0</span>   <span class="hljs-number">3</span>rd Qu.:<span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>  <br> Max.   :<span class="hljs-number">5</span>                      Max.   :<span class="hljs-number">843.2</span>   Max.   :<span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure></p><h2 id="从数据框提取数据"><a href="#从数据框提取数据" class="headerlink" title="从数据框提取数据"></a>从数据框提取数据</h2><p>使用列名称从数据框中提取特定列。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Extract Specific columns.</span><br>result &lt;- data.frame(emp.data$emp_name, emp.data$salary)<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp.data.emp_name emp.data.salary<br>1              Rick          <span class="hljs-number">623.30</span><br>2               Dan          <span class="hljs-number">515.20</span><br>3          Michelle          <span class="hljs-number">611.00</span><br>4              Ryan          <span class="hljs-number">729.00</span><br>5              Gary          <span class="hljs-number">843.25</span><br></code></pre></td></tr></table></figure></p><p>先提取前两行，然后提取所有列</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Extract first two rows.</span><br>result &lt;- emp.data[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, ]<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_id    emp_name   salary    start_date<br>1      <span class="hljs-number">1</span>     Rick      <span class="hljs-number">623.3</span>     <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br>2      <span class="hljs-number">2</span>     Dan       <span class="hljs-number">515.2</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure></p><p>提取第 2 列和第 4 列，第 3 行和第 5 行</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Extract 3rd and 5th row with 2nd and 4th column.</span><br>result &lt;- emp.data[<span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)]<br>print(result)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_name start_date<br>3 Michelle <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span><br>5     Gary <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure></p><h2 id="扩展数据框"><a href="#扩展数据框" class="headerlink" title="扩展数据框"></a>扩展数据框</h2><p>可以通过添加列和行来扩展数据框。</p><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><p>只需使用新的列名称添加列向量。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Add the &quot;dept&quot; coulmn.</span><br>emp.data$dept &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;HR&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>)<br>v &lt;- emp.data<br>print(v)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_id   emp_name    salary    start_date       dept<br>1     <span class="hljs-number">1</span>    Rick        <span class="hljs-number">623.30</span>    <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>       IT<br>2     <span class="hljs-number">2</span>    Dan         <span class="hljs-number">515.20</span>    <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span>       Operations<br>3     <span class="hljs-number">3</span>    Michelle    <span class="hljs-number">611.00</span>    <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>       IT<br>4     <span class="hljs-number">4</span>    Ryan        <span class="hljs-number">729.00</span>    <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>       HR<br>5     <span class="hljs-number">5</span>    Gary        <span class="hljs-number">843.25</span>    <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>       Finance<br></code></pre></td></tr></table></figure></p><h3 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h3><p>要将更多行永久添加到现有数据框，我们需要引入与现有数据框相同结构的新行，并使用 <code>rbind()</code> 函数。</p><p>在下面的示例中，我们创建一个包含新行的数据框，并将其与现有数据框合并以创建最终数据框。</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Create the first data frame.</span><br>emp.data &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rick&quot;</span>, <span class="hljs-string">&quot;Dan&quot;</span>, <span class="hljs-string">&quot;Michelle&quot;</span>, <span class="hljs-string">&quot;Ryan&quot;</span>, <span class="hljs-string">&quot;Gary&quot;</span>), <br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">623.3</span>, <span class="hljs-number">515.2</span>, <span class="hljs-number">611.0</span>, <span class="hljs-number">729.0</span>, <span class="hljs-number">843.25</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;2013-09-23&quot;</span>, <span class="hljs-string">&quot;2014-11-15&quot;</span>, <span class="hljs-string">&quot;2014-05-11&quot;</span>, <span class="hljs-string">&quot;2015-03-27&quot;</span>)), <br>   dept = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;HR&quot;</span>, <span class="hljs-string">&quot;Finance&quot;</span>),<br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Create the second data frame</span><br>emp.newdata &lt;- data.frame(<br>   emp_id = <span class="hljs-built_in">c</span>(<span class="hljs-number">6</span>:<span class="hljs-number">8</span>), <br>   emp_name = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Rasmi&quot;</span>, <span class="hljs-string">&quot;Pranab&quot;</span>, <span class="hljs-string">&quot;Tusar&quot;</span>),<br>   salary = <span class="hljs-built_in">c</span>(<span class="hljs-number">578.0</span>, <span class="hljs-number">722.5</span>, <span class="hljs-number">632.8</span>), <br>   start_date = as.Date(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;2013-05-21&quot;</span>, <span class="hljs-string">&quot;2013-07-30&quot;</span>, <span class="hljs-string">&quot;2014-06-17&quot;</span>)),<br>   dept = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;IT&quot;</span>, <span class="hljs-string">&quot;Operations&quot;</span>, <span class="hljs-string">&quot;Fianance&quot;</span>),<br>   stringsAsFactors = <span class="hljs-literal">FALSE</span><br>)<br><br><span class="hljs-comment"># Bind the two data frames.</span><br>emp.finaldata &lt;- rbind(emp.data, emp.newdata)<br>print(emp.finaldata)<br><br><span class="hljs-comment"># 当我们执行上面的代码，它产生以下结果：</span><br><br>  emp_id     emp_name    salary     start_date       dept<br>1      <span class="hljs-number">1</span>     Rick        <span class="hljs-number">623.30</span>     <span class="hljs-number">2012</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>       IT<br>2      <span class="hljs-number">2</span>     Dan         <span class="hljs-number">515.20</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">09</span>-<span class="hljs-number">23</span>       Operations<br>3      <span class="hljs-number">3</span>     Michelle    <span class="hljs-number">611.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">15</span>       IT<br>4      <span class="hljs-number">4</span>     Ryan        <span class="hljs-number">729.00</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">05</span>-<span class="hljs-number">11</span>       HR<br>5      <span class="hljs-number">5</span>     Gary        <span class="hljs-number">843.25</span>     <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">27</span>       Finance<br>6      <span class="hljs-number">6</span>     Rasmi       <span class="hljs-number">578.00</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span>       IT<br>7      <span class="hljs-number">7</span>     Pranab      <span class="hljs-number">722.50</span>     <span class="hljs-number">2013</span>-<span class="hljs-number">07</span>-<span class="hljs-number">30</span>       Operations<br>8      <span class="hljs-number">8</span>     Tusar       <span class="hljs-number">632.80</span>     <span class="hljs-number">2014</span>-<span class="hljs-number">06</span>-<span class="hljs-number">17</span>       Fianance<br></code></pre></td></tr></table></figure></p><h1 id="自带数据集"><a href="#自带数据集" class="headerlink" title="自带数据集"></a>自带数据集</h1><p>使用以下命令可以查询 R 语言自带的数据集：</p><p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">data()<br></code></pre></td></tr></table></figure></p><h2 id="向量数据集"><a href="#向量数据集" class="headerlink" title="向量数据集"></a>向量数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">euro</td><td style="text-align:center">欧元汇率，长度为 11，每个元素都有命名</td></tr><tr><td style="text-align:center">landmasses</td><td style="text-align:center">48 个陆地的面积，每个都有命名</td></tr><tr><td style="text-align:center">precip</td><td style="text-align:center">长度为 70 的命名向量</td></tr><tr><td style="text-align:center">rivers</td><td style="text-align:center">北美 141 条河流长度</td></tr><tr><td style="text-align:center">state.abb</td><td style="text-align:center">美国 50 个州的双字母缩写</td></tr><tr><td style="text-align:center">state.area</td><td style="text-align:center">美国 50 个州的面积</td></tr><tr><td style="text-align:center">state.name</td><td style="text-align:center">美国 50 个州的全称</td></tr></tbody></table></div><h2 id="因子数据集"><a href="#因子数据集" class="headerlink" title="因子数据集"></a>因子数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">state.division</td><td style="text-align:center">美国 50 个州的分类，9 个类别</td></tr><tr><td style="text-align:center">state.region</td><td style="text-align:center">美国 50 个州的地理分类</td></tr></tbody></table></div><h2 id="矩阵、数组数据集"><a href="#矩阵、数组数据集" class="headerlink" title="矩阵、数组数据集"></a>矩阵、数组数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">euro.cross</td><td style="text-align:center">11 种货币的汇率矩阵</td></tr><tr><td style="text-align:center">freeny</td><td style="text-align:center">每个季度影响收入四个因素的记录</td></tr><tr><td style="text-align:center">state.x77</td><td style="text-align:center">美国 50 个州的八个指标</td></tr><tr><td style="text-align:center">USPersonalExpenditure</td><td style="text-align:center">5 个年份在 5 个消费方向的数据</td></tr><tr><td style="text-align:center">VADeaths</td><td style="text-align:center">1940 年弗吉尼亚州死亡率（每千人）</td></tr><tr><td style="text-align:center">volcano</td><td style="text-align:center">某火山区的地理信息（10 米 × 10 米的网格）</td></tr><tr><td style="text-align:center">WorldPhones</td><td style="text-align:center">8 个区域在 7 个年份的电话总数</td></tr><tr><td style="text-align:center">iris3</td><td style="text-align:center">3 种鸢尾花形态数据</td></tr><tr><td style="text-align:center">Titanic</td><td style="text-align:center">泰坦尼克乘员统计</td></tr><tr><td style="text-align:center">UCBAdmissions</td><td style="text-align:center">伯克利分校 1973 年院系、录取和性别的频数</td></tr><tr><td style="text-align:center">crimtab</td><td style="text-align:center">3000 个男性罪犯左手中指长度和身高关系</td></tr><tr><td style="text-align:center">HairEyeColor</td><td style="text-align:center">592 人头发颜色、眼睛颜色和性别的频数</td></tr><tr><td style="text-align:center">occupationalStatus</td><td style="text-align:center">英国男性父子职业联系</td></tr></tbody></table></div><h2 id="类矩阵数据集"><a href="#类矩阵数据集" class="headerlink" title="类矩阵数据集"></a>类矩阵数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">eurodist</td><td style="text-align:center">欧洲 12 个城市的距离矩阵，只有下三角部分</td></tr><tr><td style="text-align:center">Harman23.cor</td><td style="text-align:center">305 个女孩 8 个形态指标的相关系数矩阵</td></tr><tr><td style="text-align:center">Harman74.cor</td><td style="text-align:center">145 个儿童 24 个心理指标的相关系数矩阵</td></tr></tbody></table></div><h2 id="数据框数据集"><a href="#数据框数据集" class="headerlink" title="数据框数据集"></a>数据框数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">airquality</td><td style="text-align:center">纽约 1973 年 5-9 月每日空气质量</td></tr><tr><td style="text-align:center">anscombe</td><td style="text-align:center">四组 x-y 数据，虽有相似的统计量，但实际数据差别较大</td></tr><tr><td style="text-align:center">attenu</td><td style="text-align:center">多个观测站对加利福尼亚 23 次地震的观测数据</td></tr><tr><td style="text-align:center">attitude</td><td style="text-align:center">30 个部门在七个方面的调查结果，调查结果是同一部门 35 个职员赞成的百分比</td></tr><tr><td style="text-align:center">beaver1</td><td style="text-align:center">一只海狸每 10 分钟的体温数据，共 114 条数据</td></tr><tr><td style="text-align:center">beaver2</td><td style="text-align:center">另一只海狸每 10 分钟的体温数据，共 100 条数据</td></tr><tr><td style="text-align:center">BOD</td><td style="text-align:center">随水质的提高，生化反应对氧的需求（mg/l）随时间（天）的变化</td></tr><tr><td style="text-align:center">cars</td><td style="text-align:center">1920 年代汽车速度对刹车距离的影响</td></tr><tr><td style="text-align:center">chickwts</td><td style="text-align:center">不同饮食种类对小鸡生长速度的影响</td></tr><tr><td style="text-align:center">esoph</td><td style="text-align:center">法国的一个食管癌病例对照研究</td></tr><tr><td style="text-align:center">faithful</td><td style="text-align:center">一个间歇泉的爆发时间和持续时间</td></tr><tr><td style="text-align:center">Formaldehyde</td><td style="text-align:center">两种方法测定甲醛浓度时分光光度计的读数</td></tr><tr><td style="text-align:center">Freeny</td><td style="text-align:center">每季度收入和其他四因素的记录</td></tr><tr><td style="text-align:center">dating from</td><td style="text-align:center">配对的病例对照数据，用于条件 logistic 回归</td></tr><tr><td style="text-align:center">InsectSprays</td><td style="text-align:center">使用不同杀虫剂时昆虫数目</td></tr><tr><td style="text-align:center">iris</td><td style="text-align:center">3 种鸢尾花形态数据</td></tr><tr><td style="text-align:center">LifeCycleSavings</td><td style="text-align:center">50 个国家的存款率</td></tr><tr><td style="text-align:center">longley</td><td style="text-align:center">强共线性的宏观经济数据</td></tr><tr><td style="text-align:center">morley</td><td style="text-align:center">光速测量试验数据</td></tr><tr><td style="text-align:center">mtcars</td><td style="text-align:center">32 辆汽车在 11 个指标上的数据</td></tr><tr><td style="text-align:center">OrchardSprays</td><td style="text-align:center">使用拉丁方设计研究不同喷雾剂对蜜蜂的影响</td></tr><tr><td style="text-align:center">PlantGrowth</td><td style="text-align:center">三种处理方式对植物产量的影响</td></tr><tr><td style="text-align:center">pressure</td><td style="text-align:center">温度和气压</td></tr><tr><td style="text-align:center">Puromycin</td><td style="text-align:center">两种细胞中辅因子浓度对酶促反应的影响</td></tr><tr><td style="text-align:center">quakes</td><td style="text-align:center">1000 次地震观测数据（震级 4）</td></tr><tr><td style="text-align:center">randu</td><td style="text-align:center">使用 FORTRAN 中的 RANDU 三个一组生成随机数字，共 400 组。</td></tr><tr><td style="text-align:center">rock</td><td style="text-align:center">48 块石头的形态数据</td></tr><tr><td style="text-align:center">sleep</td><td style="text-align:center">两药物的催眠效果</td></tr><tr><td style="text-align:center">stackloss</td><td style="text-align:center">化工厂将氨转为硝酸的数据</td></tr><tr><td style="text-align:center">swiss</td><td style="text-align:center">瑞士生育率和社会经济指标</td></tr><tr><td style="text-align:center">ToothGrowth</td><td style="text-align:center">VC 剂量和摄入方式对豚鼠牙齿的影响</td></tr><tr><td style="text-align:center">trees</td><td style="text-align:center">树木形态指标</td></tr><tr><td style="text-align:center">USArrests</td><td style="text-align:center">美国 50 个州的四个犯罪率指标</td></tr><tr><td style="text-align:center">USJudgeRatings</td><td style="text-align:center">43 名律师的 12 个评价指标</td></tr><tr><td style="text-align:center">warpbreaks</td><td style="text-align:center">织布机异常数据</td></tr><tr><td style="text-align:center">women</td><td style="text-align:center">15 名女性的身高和体重</td></tr></tbody></table></div><h2 id="列表数据集"><a href="#列表数据集" class="headerlink" title="列表数据集"></a>列表数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">state.center</td><td style="text-align:center">美国 50 个州中心的经度和纬度</td></tr></tbody></table></div><h2 id="类数据框数据集"><a href="#类数据框数据集" class="headerlink" title="类数据框数据集"></a>类数据框数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">ChickWeight</td><td style="text-align:center">饮食对鸡生长的影响</td></tr><tr><td style="text-align:center">CO2</td><td style="text-align:center">耐寒植物 CO2 摄取的差异</td></tr><tr><td style="text-align:center">DNase</td><td style="text-align:center">若干次试验中，DNase 浓度和光密度的关系</td></tr><tr><td style="text-align:center">Indometh</td><td style="text-align:center">某药物的药物动力学数据</td></tr><tr><td style="text-align:center">Loblolly</td><td style="text-align:center">火炬松的高度、年龄和种源</td></tr><tr><td style="text-align:center">Orange</td><td style="text-align:center">桔子树生长数据</td></tr><tr><td style="text-align:center">Theoph</td><td style="text-align:center">茶碱药动学数据</td></tr></tbody></table></div><h2 id="时间序列数据集"><a href="#时间序列数据集" class="headerlink" title="时间序列数据集"></a>时间序列数据集</h2><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">airmiles</td><td style="text-align:center">美国 1937-1960 年客运里程营收（实际售出机位乘以飞行哩数）</td></tr><tr><td style="text-align:center">AirPassengers</td><td style="text-align:center">Box &amp; Jenkins 航空公司 1949-1960 年每月国际航线乘客数</td></tr><tr><td style="text-align:center">austres</td><td style="text-align:center">澳大利亚 1971-1994 每季度人口数（以千为单位）</td></tr><tr><td style="text-align:center">BJsales</td><td style="text-align:center">有关销售的一个时间序列</td></tr><tr><td style="text-align:center">BJsales.lead</td><td style="text-align:center">前一指标的先行指标（leading indicator）</td></tr><tr><td style="text-align:center">co2</td><td style="text-align:center">1959-1997 年每月大气 co2 浓度（ppm）</td></tr><tr><td style="text-align:center">discoveries</td><td style="text-align:center">1860-1959 年每年巨大发现或发明的个数</td></tr><tr><td style="text-align:center">ldeaths</td><td style="text-align:center">1974-1979 年英国每月支气管炎、肺气肿和哮喘的死亡率</td></tr><tr><td style="text-align:center">fdeaths</td><td style="text-align:center">前述死亡率的女性部分</td></tr><tr><td style="text-align:center">mdeaths</td><td style="text-align:center">前述死亡率的男性部分</td></tr><tr><td style="text-align:center">freeny.y</td><td style="text-align:center">每季度收入</td></tr><tr><td style="text-align:center">JohnsonJohnson</td><td style="text-align:center">1960-1980 年每季度 Johnson &amp; Johnson 股票的红利</td></tr><tr><td style="text-align:center">LakeHuron</td><td style="text-align:center">1875-1972 年某一湖泊水位的记录</td></tr><tr><td style="text-align:center">lh</td><td style="text-align:center">黄体生成素水平，10 分钟测量一次</td></tr><tr><td style="text-align:center">lynx</td><td style="text-align:center">1821-1934 年加拿大猞猁数据</td></tr><tr><td style="text-align:center">nhtemp</td><td style="text-align:center">1912-1971 年每年平均温度</td></tr><tr><td style="text-align:center">Nile</td><td style="text-align:center">1871-1970 尼罗河流量</td></tr><tr><td style="text-align:center">nottem</td><td style="text-align:center">1920-1939 每月大气温度</td></tr><tr><td style="text-align:center">presidents</td><td style="text-align:center">1945-1974 年每季度美国总统支持率</td></tr><tr><td style="text-align:center">UKDriverDeaths</td><td style="text-align:center">1969-1984 年每月英国司机死亡或严重伤害的数目</td></tr><tr><td style="text-align:center">sunspot.month</td><td style="text-align:center">1749-1997 每月太阳黑子数</td></tr><tr><td style="text-align:center">sunspot.year</td><td style="text-align:center">1700-1988 每年太阳黑子数</td></tr><tr><td style="text-align:center">sunspots</td><td style="text-align:center">1749-1983 每月太阳黑子数</td></tr><tr><td style="text-align:center">treering</td><td style="text-align:center">归一化的树木年轮数据</td></tr><tr><td style="text-align:center">UKgas</td><td style="text-align:center">1960-1986 每月英国天然气消耗</td></tr><tr><td style="text-align:center">USAccDeaths</td><td style="text-align:center">1973-1978 美国每月意外死亡人数</td></tr><tr><td style="text-align:center">uspop</td><td style="text-align:center">1790–1970 美国每十年一次的人口总数（百万为单位）</td></tr><tr><td style="text-align:center">WWWusage</td><td style="text-align:center">每分钟网络连接数</td></tr><tr><td style="text-align:center">Seatbelts</td><td style="text-align:center">多变量时间序列。和 UKDriverDeaths 时间段相同，反映更多因素。</td></tr><tr><td style="text-align:center">EuStockMarkets</td><td style="text-align:center">多变量时间序列。欧洲股市四个主要指标的每个工作日记录，共 1860 条记录。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🧮R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 优化</title>
      <link href="post/d7961cf0.html"/>
      <url>post/d7961cf0.html</url>
      
        <content type="html"><![CDATA[<h1 id="优化三大方向"><a href="#优化三大方向" class="headerlink" title="优化三大方向"></a>优化三大方向</h1><ul><li>优化 MySQL 所在服务器内核（此优化一般由运维人员完成）。</li><li>对 MySQL 配置参数进行优化（my.cnf）此优化需要进行压力测试来进行参数调整。</li><li>对 SQL 语句以及表优化。</li></ul><h1 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h1><ol><li><p>MySQL 默认的最大连接数为 100，可以在 <code>mysql</code> 命令提示窗口使用以下命令查看</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW variables LIKE &#x27;max_connections&#x27;;<br></code></pre></td></tr></table></figure></p></li><li><p>查看当前访问 MySQL 的线程</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW processlist;<br></code></pre></td></tr></table></figure></p></li><li><p>设置最大连接数</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SET globle max_connections = 5000;<br></code></pre></td></tr></table></figure></p><p> 最大可设置 <code>16384</code>，超过没用</p></li></ol><ol><li><p>查看当前被使用的 connections</p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW GLOBAL STATUS LIKE &#x27;max_user_connections&#x27;<br></code></pre></td></tr></table></figure></p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ul><li><a href="#使用查询缓存优化查询">使用查询缓存优化查询</a></li><li><a href="#使用-EXPLAIN-关键字检测查询">使用 EXPLAIN 关键字检测查询</a></li><li><a href="#只要一行数据时使用-LIMIT-1">只要一行数据时使用 LIMIT 1</a></li><li><a href="#为搜索字段建立索引">为搜索字段建立索引</a></li><li><a href="#在-JOIN-表的时候使用相当类型的列并将其索引">在 JOIN 表的时候使用相当类型的列并将其索引</a></li><li><a href="#切记不要使用-ORDER-BY-RAND">切记不要使用 ORDER BY RAND()</a></li><li><a href="#避免使用-SELECT">避免使用 SELECT *</a></li><li><a href="#永远为每张表设置一个-ID-主键">永远为每张表设置一个 ID 主键</a></li><li><a href="#可以使用-ENUM-则不用-VARCHAR">可以使用 ENUM 则不用 VARCHAR</a></li><li><a href="#尽可能的不要赋值为-NULL">尽可能的不要赋值为 NULL</a></li><li><a href="#固定长度的表会更快">固定长度的表会更快</a></li><li><a href="#垂直分割">垂直分割</a></li><li><a href="#拆分大的-DELETE-或-INSERT-语句">拆分大的 DELETE 或 INSERT 语句</a></li><li><a href="#越小的列会越快">越小的列会越快</a></li><li><a href="#选择正确的存储引擎">选择正确的存储引擎</a></li><li><a href="#小心永久链接">小心永久链接</a></li></ul></li></ol><h2 id="使用查询缓存优化查询"><a href="#使用查询缓存优化查询" class="headerlink" title="使用查询缓存优化查询"></a>使用查询缓存优化查询</h2><p>大多数的 MySQL 服务器都开启了查询缓存。这是提高性能最有效的方法之一，而且这是被 MySQL 引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放入一个缓存中，这样后续的相同查询就不用操作而直接访问缓存结果了。</p><p>这里最主要的问题是，对于我们程序员来说，这个事情是很容易被忽略的。因为我们某些查询语句会让 MySQL 不使用缓存，示例如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> signup_date &gt;= <span class="hljs-keyword">CURDATE</span>()<br><span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> signup_date &gt;= <span class="hljs-string">&#x27;2014-06-24&#x27;</span><br></code></pre></td></tr></table></figure></p><p>上面两条 SQL 语句的差别就是 <code>CURDATE()</code> ，MySQL 的查询缓存对这个函数不起作用。所以，像 <code>NOW()</code> 和 <code>RAND()</code> 或是其它的诸如此类的 SQL 函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替 MySQL 的函数，从而开启缓存。</p><h2 id="使用-EXPLAIN-关键字检测查询"><a href="#使用-EXPLAIN-关键字检测查询" class="headerlink" title="使用 EXPLAIN 关键字检测查询"></a>使用 EXPLAIN 关键字检测查询</h2><p>使用 <code>EXPLAIN</code> 关键字可以使我们知道 MySQL 是如何处理 SQL 语句的，这样可以帮助我们分析我们的查询语句或是表结构的性能瓶颈；<code>EXPLAIN</code> 的查询结果还会告诉我们索引主键是如何被利用的，数据表是如何被被搜索或排序的等等。语法格式是 <code>EXPLAIN + SELECT</code> 语句：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> &lt;字段名&gt; <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;<br></code></pre></td></tr></table></figure></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/mysql_optimization/explain_1.png" alt></p><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="/images/post/mysql_optimization/explain_2.png" alt></p><p>我们可以看到，前一个结果显示搜索了 <code>7883</code> 行，而后一个只是搜索了两个表的 <code>9</code> 和 <code>16</code> 行。查看 <code>rows</code> 列可以让我们找到潜在的性能问题。 </p><h2 id="只要一行数据时使用-LIMIT-1"><a href="#只要一行数据时使用-LIMIT-1" class="headerlink" title="只要一行数据时使用 LIMIT 1"></a>只要一行数据时使用 LIMIT 1</h2><p>加上 <code>LIMIT 1</code> 可以增加性能。MySQL 数据库引擎会在查找到一条数据后停止搜索，而不是继续往后查询下一条符合条件的数据记录。</p><h2 id="为搜索字段建立索引"><a href="#为搜索字段建立索引" class="headerlink" title="为搜索字段建立索引"></a>为搜索字段建立索引</h2><p>索引不一定就是给主键或者是唯一的字段，如果在表中，有某个字段经常用来做搜索，需要将其建立索引。</p><p><strong>索引的有关操作如下：</strong></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>在执行 <code>CREATE TABLE</code> 语句时可以创建索引，也可以单独用 <code>CREATE INDEX</code> 或 <code>ALTER TABLE</code> 来为表增加索引。</p><ol><li><p>ALTER TABLE</p><p> ALTER TABLE 用来创建普通索引、唯一索引、主键索引和全文索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> index_name (column_list);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> (column_list);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> (column_list);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> FULLTEXT (column_list);<br></code></pre></td></tr></table></figure></p><p> 其中 <code>table_name</code> 是要增加索引名的表名，<code>column_list</code> 指出对哪些列进行索引，多列时各列之间使用半角逗号隔开。索引名 <code>index_name</code> 是可选的，如果不指定索引名称，MySQL 将根据第一个索引列自动指定索引名称，另外，<code>ALTER TABLE</code> 允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p></li><li><p>CREATE INDEX</p><p> <code>CREATE INDEX</code> 可对表增加普通索引或唯一索引以及全文索引，但是不可以对表增加主键索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> table_name (column_list);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> index_name <span class="hljs-keyword">ON</span> table_name (column_list);<br><span class="hljs-keyword">CREATE</span> FULLTEXT index_name <span class="hljs-keyword">ON</span> table_name (column_list);<br></code></pre></td></tr></table></figure></p><p> <code>table_name</code>、<code>index_name</code> 和 <code>column_list</code> 具有与 <code>ALTER TABLE</code> 语句中相同的含义，索引名必须指定。另外，不能用 <code>CREATE INDEX</code> 语句创建 <code>PRIMARY KEY</code> 索引。</p></li></ol><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul><li>普通索引（INDEX）：适用于 name、email 等一般属性</li><li>唯一索引（UNIQUE）：与普通索引类似，不同的是唯一索引要求索引字段值在表中是唯一的，这一点和主键索引类似，但是不同的是，唯一索引允许有空值。唯一索引一般适用于身份证号码、用户账号等不允许有重复的属性字段上。</li><li>主键索引（PRIMARY KEY）：其实就是主键，一般在建表时就指定了，不需要额外添加。</li><li>全文检索（FULLTEXT）：只适用于 <code>VARCHAR</code> 和 <code>TEXT</code> 类型的字段。</li></ul><p><strong>注意</strong>：全文索引和普通索引是有很大区别的，如果建立的是普通索引，一般会使用like进行模糊查询，只会对查询内容前一部分有效，即只对前面不使用通配符的查询有效，如果前后都有通配符，普通索引将不会起作用。对于全文索引而言在查询时有自己独特的匹配方式，例如我们在对一篇文章的标题和内容进行全文索引时：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> article <span class="hljs-keyword">ADD</span> FULLTEXT (<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>); <br><span class="hljs-comment"># 在进行检索时就需要使用如下的语法进行检索：</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> article <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">MATCH</span>(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>) AGAINST (<span class="hljs-string">&#x27;查询字符串&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p><strong>在使用全文检索时的注意事项：</strong></p><p>MySQL 自带的全文索引只能用于数据库引擎为 <code>MYISAM</code> 的数据表，如果是其他数据引擎，则全文索引不会生效。此外，MySQL 自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。如果需要对包含中文在内的文本数据进行全文检索，我们需要采用 Sphinx/Coreseek 技术来处理中文。另外使用 MySQL 自带的全文索引时，如果查询字符串的长度过短将无法得到期望的搜索结果。MySQL 全文索引所能找到的词默认最小长度为 4 个字符。另外，如果查询的字符串包含停止词，那么该停止词将会被忽略。</p><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><p>组合索引又称多列索引，就是建立索引时指定多个字段属性。有点类似于字典目录，比如查询 <code>guo</code> 这个拼音的字时，首先查找 <code>g</code> 字母，然后在 <code>g</code> 的检索范围内查询第二个字母为 <code>u</code> 的列表，最后在 <code>u</code> 的范围内查找最后一个字母为 <code>o</code> 的字。比如组合索引 <code>(a,b,c)</code>，<code>abc</code> 都是排好序的，在任意一段 <code>a</code> 的下面 <code>b</code> 都是排好序的，任何一段 <code>b</code> 下面 <code>c</code> 都是排好序的。</p><p>组合索引的生效原则是：从前往后依次使用生效，如果中间某个索引没有使用，那么断点前面的索引部分起作用，断点后面的索引没有起作用。</p><p>造成断点的原因：</p><ul><li>前边的任意一个索引没有参与查询，后边的全部不生效。</li><li>前边的任意一个索引字段参与的是范围查询，后面的不会生效。</li><li>断点跟索引字字段在SQL语句中的位置前后无关，只与是否存在有关。</li></ul><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">(0) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">45</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">5</span> ...<br><span class="hljs-comment"># 这种三个索引顺序使用中间没有断点，全部发挥作用</span><br>(<span class="hljs-number">1</span>) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">5</span> ...<br><span class="hljs-comment"># 这种情况下 b 就是断点，a 发挥了效果，c 没有效果</span><br>(<span class="hljs-number">2</span>) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">4</span> ...<br><span class="hljs-comment"># 这种情况下 a 就是断点，在 a 后面的索引都没有发挥作用，这种写法联合索引没有发挥任何效果</span><br>(<span class="hljs-number">3</span>) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">45</span> <span class="hljs-keyword">AND</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">5</span> ...<br><span class="hljs-comment"># 这个跟第一个一样，全部发挥作用，abc 只要用上了就行，跟写的顺序无关</span><br></code></pre></td></tr></table></figure></p><p><code>(a,b,c)</code> 三个列上加了联合索引（是联合索引，不是在每个列上单独加索引）而是建立了 <code>a</code>, <code>(a,b)</code>, <code>(a,b,c)</code>三个索引，另外 <code>(a,b,c)</code> 多列索引和 <code>(a,c,b)</code> 是不一样的。</p><p>具体实例可以说明：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">(0) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">5</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">4</span>;<br><span class="hljs-comment"># abc三个索引都在where条件里面用到了，而且都发挥了作用</span><br>(1) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> c=<span class="hljs-number">4</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">6</span> <span class="hljs-keyword">AND</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-comment"># 这条语句为了说明 组合索引与在 SQL 中的位置先后无关，WHERE 里面的条件顺序在查询之前会被 MySQL 自动优化，效果跟上一句一样</span><br>(2) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">7</span>;<br><span class="hljs-comment"># a 用到索引，b 没有用，所以 c 是没有用到索引效果的</span><br>(3) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> b&gt;<span class="hljs-number">7</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">3</span>;<br><span class="hljs-comment"># a 用到了，b 也用到了，c 没有用到，这个地方 b 是范围值，也算断点，只不过自身用到了索引</span><br>(4) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">4</span>;<br><span class="hljs-comment"># 因为 a 索引没有使用，所以这里 bc 都没有用上索引效果</span><br>(5) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a&gt;<span class="hljs-number">4</span> <span class="hljs-keyword">AND</span> b=<span class="hljs-number">7</span> <span class="hljs-keyword">AND</span> c=<span class="hljs-number">9</span>;<br><span class="hljs-comment"># a 用到了 b 没有使用，c 没有使用</span><br>(6) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> b;<br><span class="hljs-comment"># a 用到了索引，b 在结果排序中也用到了索引的效果，前面说了，a 下面任意一段的 b 是排好序的</span><br>(7) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> a=<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c;<br><span class="hljs-comment"># a 用到了索引，但是这个地方 c 没有发挥排序效果，因为中间断点了，使用 EXPLAIN 可以看到 filesort</span><br>(8) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mytable <span class="hljs-keyword">WHERE</span> b=<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> a;<br><span class="hljs-comment"># b 没有用到索引，排序中 a 也没有发挥索引效果</span><br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：在查询时，MySQL 只能使用一个索引，如果建立的是多个单列的普通索引，在查询时会根据查询的索引字段，从中选择一个限制最严格的单例索引进行查询。别的索引都不会生效。</p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> tblname;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">KEYS</span> <span class="hljs-keyword">FROM</span> tblname;<br></code></pre></td></tr></table></figure></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DORP INDEX IndexName ON tab_name；<br></code></pre></td></tr></table></figure></p><p><strong>注意：不能使用索引的情况</strong></p><p>对于普通索引而言在使用 <code>LIKE</code> 进行通配符模糊查询时，如果首尾之间都使用了通配符，索引时无效的。</p><p>假设查询内容的关键词为 <code>abc</code>：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_name <span class="hljs-keyword">WHERE</span> index_column <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;abc%&#x27;</span>; <span class="hljs-comment"># 索引是有效的</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_name <span class="hljs-keyword">WHERE</span> index_column <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%abc&#x27;</span>; <span class="hljs-comment"># 索引是无效的</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_name <span class="hljs-keyword">WHERE</span> index_column <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%abc%&#x27;</span>; <span class="hljs-comment"># 索引是无效的</span><br></code></pre></td></tr></table></figure></p><p>当检索的字段内容比较大而且检索内容前后部分都不确定的情况下，可以改为全文索引，并使用特定的检索方式。</p><h2 id="在-JOIN-表的时候使用相当类型的列并将其索引"><a href="#在-JOIN-表的时候使用相当类型的列并将其索引" class="headerlink" title="在 JOIN 表的时候使用相当类型的列并将其索引"></a>在 JOIN 表的时候使用相当类型的列并将其索引</h2><p>如果在程序中有很多 <code>JOIN</code> 查询，应该保证两个表中 <code>JOIN</code> 的字段时被建立过索引的。这样 MySQL 内部会启动优化 <code>JOIN</code> 的 SQL 语句的机制。</p><p><strong>注意</strong>：这些被用来 <code>JOIN</code> 的字段，应该是相同类型的。例如：如果要把 <code>DECIMAL</code> 字段和一个 <code>INT</code> 字段 <code>JOIN</code> 在一起，MySQL 就无法使用它们的索引。对于那些 <code>STRING</code> 类型，还需要有相同的字符集才行（两个表的字符集有可能不一样）。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> company_name<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> companies<br><span class="hljs-keyword">ON</span> (users.state = companies.state)<br><span class="hljs-keyword">WHERE</span> users.id = <span class="hljs-string">&quot;user_id&quot;</span><br></code></pre></td></tr></table></figure></p><p>两个 <code>state</code> 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。</p><h2 id="切记不要使用-ORDER-BY-RAND"><a href="#切记不要使用-ORDER-BY-RAND" class="headerlink" title="切记不要使用 ORDER BY RAND()"></a>切记不要使用 ORDER BY RAND()</h2><p>如果你真的想把返回的数据行打乱了，你有 N 种方法可以达到这个目的。这样使用只让你的数据库的性能呈指数级的下降。这里的问题是：MySQL 会不得不去执行 <code>RAND()</code> 函数（很耗 CPU 时间），而且这是为了每一行记录去记行，然后再对其排序。就算是你用了 <code>Limit 1</code> 也无济于事（因为要排序） </p><h2 id="避免使用-SELECT"><a href="#避免使用-SELECT" class="headerlink" title="避免使用 SELECT *"></a>避免使用 SELECT *</h2><p>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果我们的数据库服务器和 web 服务器是两台独立的服务器的话，这还会增加网络传输的负载。所以，我们应该养成一个需要什么就取什么的好的习惯。</p><p><code>Hibernate</code> 性能方面就会差，它不用 <code>*</code>，但它将整个表的所有字段全查出来 </p><p>优点：开发速度快</p><h2 id="永远为每张表设置一个-ID-主键"><a href="#永远为每张表设置一个-ID-主键" class="headerlink" title="永远为每张表设置一个 ID 主键"></a>永远为每张表设置一个 ID 主键</h2><p>我们应该为数据库里的每张表都设置一个 <code>ID</code> 做为其主键，而且最好的是一个 <code>INT</code> 型的（推荐使用 <code>UNSIGNED</code>），并设置上自动增加的 <code>AUTO_INCREMENT</code> 标志。就算是我们 <code>users</code> 表有一个主键叫 <code>email</code> 的字段，我们也别让它成为主键。使用 <code>VARCHAR</code> 类型来当主键会使用得性能下降。</p><p>另外，在我们的程序中，我们应该使用表的 <code>ID</code> 来构造我们的数据结构。而且，在 MySQL 数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区 ...。在这里，只有一个情况是例外，那就是“关联表”的“外键”，也就是说，这个表的主键，通过若干个别的表的主键构成。我们把这个情况叫做“外键”。比如：有一个“学生表”有学生的 <code>ID</code>，有一个“课程表”有课程 <code>ID</code>，那么，“成绩表”就是“关联表”了，其关联了学生表和课程表，在成绩表中，学生 <code>ID</code> 和课程 <code>ID</code> 叫“外键”其共同组成主键。 </p><h2 id="可以使用-ENUM-则不用-VARCHAR"><a href="#可以使用-ENUM-则不用-VARCHAR" class="headerlink" title="可以使用 ENUM 则不用 VARCHAR"></a>可以使用 ENUM 则不用 VARCHAR</h2><p><code>ENUM</code> 类型是非常快和紧凑的。在实际上，其保存的是 <code>TINYINT</code>，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。如果我们有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，我们知道这些字段的取值是有限而且固定的，那么，我们应该使用 <code>ENUM</code> 而不是 <code>VARCHAR</code>。</p><h2 id="尽可能的不要赋值为-NULL"><a href="#尽可能的不要赋值为-NULL" class="headerlink" title="尽可能的不要赋值为 NULL"></a>尽可能的不要赋值为 NULL</h2><p>如果不是特殊情况，尽可能的不要使用 <code>NULL</code>。在 MySQL 中对于 INT 类型而言，<code>EMPTY</code> 是 <code>0</code>，而 <code>NULL</code> 是空值。而在 Oracle 中 <code>NULL</code> 和 <code>EMPTY</code> 的字符串是一样的。<code>NULL</code> 也需要占用存储空间，并且会使我们的程序判断时更加复杂。现实情况是很复杂的，依然会有些情况下，我们需要使用 <code>NULL</code> 值。</p><p>下面摘自MySQL 的文档：</p><blockquote><p>NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.</p></blockquote><h2 id="固定长度的表会更快"><a href="#固定长度的表会更快" class="headerlink" title="固定长度的表会更快"></a>固定长度的表会更快</h2><p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 <code>static</code> 或 <code>fixed-length</code>。例如，表中没有如下类型的字段：<code>VARCHAR</code>，<code>TEXT</code>，<code>BLOB</code>。只要我们包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</p><p>固定长度的表会提高性能，因为 MySQL 搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论我们用不用，他都是要分配那么多的空间。另外在取出值的时候要使用 <code>trim</code> 去除空格。</p><h2 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h2><p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。</p><h2 id="拆分大的-DELETE-或-INSERT-语句"><a href="#拆分大的-DELETE-或-INSERT-语句" class="headerlink" title="拆分大的 DELETE 或 INSERT 语句"></a>拆分大的 DELETE 或 INSERT 语句</h2><p>如果我们需要在一个在线的网站上去执行一个大的 <code>DELETE</code> 或 <code>INSERT</code> 查询，我们需要非常小心，要避免我们的操作让我们的整个网站停止响应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。</p><p>Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。如果我们把我们的表锁上一段时间，比如 30 秒钟，那么对于一个有很高访问量的站点来说，这 30 秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让我们的 web 服务 Crash，还可能会让我们的整台服务器马上挂了。所以在使用时使用 <code>LIMIT</code> 控制数量操作记录的数量。</p><h2 id="越小的列会越快"><a href="#越小的列会越快" class="headerlink" title="越小的列会越快"></a>越小的列会越快</h2><p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把我们的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。</p><p>如果一个表只会有几列（比如说字典表，配置表），那么，我们就没有理由使用 <code>INT</code> 来做主键，使用 <code>MEDIUMINT</code>, <code>SMALLINT</code> 或是更小的 <code>TINYINT</code> 会更经济一些。如果我们不需要记录时间，使用 <code>DATE</code> 要比 <code>DATETIME</code> 好得多。</p><h2 id="选择正确的存储引擎"><a href="#选择正确的存储引擎" class="headerlink" title="选择正确的存储引擎"></a>选择正确的存储引擎</h2><p>在 MySQL 中有两个存储引擎 <code>MyISAM</code> 和 <code>InnoDB</code>,每个引擎都有利有弊。</p><p><code>MyISAM</code> 适合于一些需要大量查询的应用，但是对于大量写操作的支持不是很好。甚至一个 <code>UPDATE</code> 语句就会进行锁表操作，这时读取这张表的所有进程都无法进行操作直至写操作完成。另外 <code>MyISAM</code> 对于 <code>SELECT COUNT(*)</code> 这类的计算是超快无比的。<code>InnoDB</code> 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 <code>MyISAM</code> 还慢。它支持“行锁”，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p><p><code>MyISAM</code> 是 MySQL5.5 版本以前默认的存储引擎，基于传统的 <code>ISAM</code> 类型，支持 <code>B-Tree</code>，全文检索，但是不是事务安全的，而且不支持外键。不具有原子性。支持锁表。</p><p><code>InnoDB</code> 是事务型引擎，支持 <code>ACID</code> 事务（实现 4 种事务隔离机制）、回滚、崩溃恢复能力、行锁。以及提供与 Oracle 一致的不加锁的读取方式。<code>InnoDB</code> 存储表和索引在一个表空间中，表空间可以包含多个文件。</p><p><code>MyISAM</code> 和 <code>InnoDB</code> 比较，如下表格所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">MyISAM</th><th style="text-align:center">InnoDB</th></tr></thead><tbody><tr><td style="text-align:center">事务</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">数据行锁定</td><td style="text-align:center">不支持，只有表锁定</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">外键约束</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">表空间大小</td><td style="text-align:center">相对小</td><td style="text-align:center">相对大</td></tr><tr><td style="text-align:center">全文索引</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">关注点</td><td style="text-align:center">性能（SELECT）</td><td style="text-align:center">事务</td></tr></tbody></table></div><p><strong>注意：</strong></p><ul><li>对于 Linux 版本的 MySQL 配置文件在 <code>/etc/my.cnf</code> 中</li><li>在5.5之后默认的存储引擎是 <code>INNODB</code></li><li>可以单独进行修改也可以在创建表时设置<p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tab_name <span class="hljs-keyword">ENGINE</span> <span class="hljs-keyword">INNODB</span>;<br></code></pre></td></tr></table></figure></p><p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> tab_name(<br>  <br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br></code></pre></td></tr></table></figure></p><h2 id="小心永久链接"><a href="#小心永久链接" class="headerlink" title="小心永久链接"></a>小心永久链接</h2></li></ul><p>“永久链接”的目的是用来减少重新创建 MySQL 链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。而且，自从我们的 Apache开始重用它的子进程后——也就是说，下一次的 HTTP 请求会重用 Apache 的子进程，并重用相同的 MySQL 链接。 </p><p>而且，Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种“永久链接”的机制工作不好的原因。在我们决定要使用“永久链接”之前，我们需要好好地考虑一下我们的整个系统的架构。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐬MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 常用命令行</title>
      <link href="post/4bd4f98e.html"/>
      <url>post/4bd4f98e.html</url>
      
        <content type="html"><![CDATA[<h1 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -h主机地址 -u用户名 -p用户密码<br></code></pre></td></tr></table></figure></p><h2 id="连接到本机上的MySQL"><a href="#连接到本机上的MySQL" class="headerlink" title="连接到本机上的MySQL"></a>连接到本机上的MySQL</h2><p>首先打开 <code>DOS</code> 窗口，然后进入目录 <code>mysql\bin</code> ，再键入命令 <code>mysql -u root -p</code> 回车后提示你输密码。注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。</p><p>如果刚安装好 MySQL，超级用户 <code>root</code> 是没有密码的。直接回车即可进入到 MySQL 中了，MySQL 的提示符是： <code>mysql&gt;</code></p><h2 id="连接到远程主机上的MySQL"><a href="#连接到远程主机上的MySQL" class="headerlink" title="连接到远程主机上的MySQL"></a>连接到远程主机上的MySQL</h2><p>假设远程主机的 IP 为：<code>110.110.110.110</code>，用户名为 <code>root</code>，密码为 <code>abcd123</code>。则键入以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -h 110.110.110.110 -u root -p abcd123;<br></code></pre></td></tr></table></figure></p><p><strong>注</strong>：<code>u</code> 与 <code>root</code> 之间可以不用加空格，其它也一样。</p><h2 id="退出MySQL命令。"><a href="#退出MySQL命令。" class="headerlink" title="退出MySQL命令。"></a>退出MySQL命令。</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exit<br></code></pre></td></tr></table></figure></p><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqladmin -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure></p><ol><li><p>给 root 加个密码 ab12。</p><p> 首先在 <code>DOS</code> 下进入目录 <code>mysql\bin</code>。然后键入以下命令 <code>mysqladmin -u root -password ab12</code></p><p> <strong>注</strong>：因为开始时 <code>root</code> 没有密码，所以 <code>-p旧密码</code> 一项就可以省略了。</p></li></ol><ol><li><p>再将 root 的密码改为 def345。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqladmin -u root -p ab12 password def345<br></code></pre></td></tr></table></figure></p></li><li><p>增加新用户</p><p> <strong>注意</strong>：和上面不同，下面的因为是 MySQL 环境中的命令，所以后面都带一个分号作为命令结束符。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> 数据库.* <span class="hljs-keyword">TO</span> 用户名@登录主机 <span class="hljs-keyword">identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;密码&quot;</span><br></code></pre></td></tr></table></figure></p><ol><li>增加一个用户 <code>test1</code> 密码为 <code>abc</code>，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用 <code>root</code> 用户连入 MySQL，然后键入以下命令：</li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> test1@<span class="hljs-string">&quot;%&quot;</span> <span class="hljs-keyword">Identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>但增加的用户是十分危险的，你想如某个人知道 <code>test1</code> 的密码，那么他就可以在 internet 上的任何一台电脑上登录你的 MySQL 数据库并对你的数据可以为所欲为了，解决办法见 2。</p><ol><li>增加一个用户 <code>test2</code> 密码为 <code>abc</code>，让他只可以在 <code>localhost</code> 上登录，并可以对数据库 <code>mydb</code> 进行查询、插入、修改、删除的操作（localhost 指本地主机，即 MySQL 数据库所在的那台主机）。</li></ol><p>这样用户即使用知道 <code>test2</code> 的密码，他也无法从 internet 上直接访问数据库，只能通过MySQL 主机上的 web 页来访问了。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> mydb.* <span class="hljs-keyword">TO</span> test2@localhost test2@localhost <span class="hljs-keyword">identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>如果你不想 <code>test2</code> 有密码，可以再打一个命令将密码消掉。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> mydb.* <span class="hljs-keyword">TO</span> test2@localhost test2@localhost <span class="hljs-keyword">identified</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1></li></ol><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ol><li><p>建立一个数据库</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p></li><li><p>创建数据库并分配用户</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span>, <span class="hljs-keyword">CREATE</span>, <span class="hljs-keyword">DROP</span>, <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">ON</span> 数据库名.* <span class="hljs-keyword">TO</span> 数据库名@登录主机 <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;数据库名&#x27;</span>@<span class="hljs-string">&#x27;登录主机&#x27;</span> = <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure></p><p> 依次执行 3 个命令完成数据库创建。</p><p> <strong>注意</strong>：“密码”和“数据库”是用户自己需要设置的。</p></li></ol><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">DATABASES</span>;<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：为了不再显示的时候乱码，要修改数据库默认编码。以下以 <code>GBK</code> 编码页面为例进行说明：</p><ol><li><p>修改 MySQL 的配置文件。</p><p> <code>my.ini</code> 文件里面修改 <code>default-character-set=gbk</code>。</p></li><li><p>代码运行时修改。</p></li></ol><ul><li><p>Java代码：</p><p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk</span><br></code></pre></td></tr></table></figure></p></li><li><p>PHP代码：</p><p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">header(<span class="hljs-string">&quot;Content-Type:text/html;charset=gb2312&quot;</span>);<br></code></pre></td></tr></table></figure></p></li><li><p>C语言代码：</p><p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">int mysql_set_character_set( MySQL * mysql, char * csname)；<br></code></pre></td></tr></table></figure></p><p>  该函数用于为当前连接设置默认的字符集。字符串 <code>csname</code> 指定了 1 个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与 <code>SET NAMES</code> 语句类似，但它还能设置 <code>charset</code> 的值，从而影响了由 <code>mysql_real_escape_string()</code> 设置的字符集。</p></li></ul><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p><ol><li><p>删除一个已经确定存在的数据库</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP DATABASE drop_database;<br>  Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure></p></li><li><p>删除一个不确定存在的数据库</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP DATABASE drop_database;<br>ERROR 1008 (HY000): Can&#x27;t <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-string">&#x27;drop_database&#x27;</span>; database doesn&#x27;t exist<br>//发生错误，不能删除&#x27;drop_database&#x27;数据库，该数据库不存在。<br><br>mysql&gt; DROP DATABASE IF EXISTS drop_database;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br>//产生一个警告说明此数据库不存在<br><br>mysql&gt; CREATE DATABASE drop_database;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; DROP DATABASE IF EXISTS drop_database;<br>Query OK, 0 rows affected (0.00 sec)<br>//IF EXISTS 判断数据库是否存在，不存在也不产生错误<br></code></pre></td></tr></table></figure></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2></li></ol><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; USE &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p><p>屏幕提示：<code>Database changed</code></p><p><code>USE</code> 语句可以通告 MySQL 把 <code>db_name</code> 数据库作为默认（当前）数据库使用，用于后续语句。</p><p>该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的 USE 语句：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; USE db1;<br>mysql&gt; SELECT COUNT(*) FROM mytable;   # SELECT COUNT(*) FROM db1.mytable<br>mysql&gt; USE db2;<br>mysql&gt; SELECT COUNT(*) FROM mytable;   # SELECT COUNT(*) FROM db2.mytable<br></code></pre></td></tr></table></figure></p><p>使用 <code>USE</code> 语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。</p><p>下面的例子可以从 <code>db1</code> 数据库访问作者表，并从 <code>db2</code> 数据库访问编辑表：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; USE db1;<br>mysql&gt; SELECT author_name, editor_name FROM author, db2.editor WHERE author.editor_id = db2.editor.editor_id;<br></code></pre></td></tr></table></figure></p><h2 id="当前选择的数据库"><a href="#当前选择的数据库" class="headerlink" title="当前选择的数据库"></a>当前选择的数据库</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT DATABASE();<br>+<span class="hljs-comment">------------+</span><br>| DATABASE() |<br>+<span class="hljs-comment">------------+</span><br>| db1        |<br>+<span class="hljs-comment">------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>MySQL 中 <code>SELECT</code> 命令类似于其他编程语言里的 <code>print</code> 或者 <code>write</code>，你可以用它来显示一个字符串、数字、数学表达式的结果等等。</p><ol><li><p>显示MySQL的版本</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT VERSION();<br>+<span class="hljs-comment">------------+</span><br>| VERSION()  |<br>+<span class="hljs-comment">------------+</span><br>| 5.6.45-log |<br>+<span class="hljs-comment">------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>显示当前时间</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NOW(); <br>+<span class="hljs-comment">---------------------+</span><br>| NOW()               |<br>+<span class="hljs-comment">---------------------+</span><br>+<span class="hljs-comment">---------------------+</span><br>| 2021-01-13 20:05:07 |<br>+<span class="hljs-comment">---------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>显示年月日</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT DAYOFMONTH(CURRENT_DATE);<br>+<span class="hljs-comment">--------------------------+</span><br>| DAYOFMONTH(CURRENT_DATE) |<br>+<span class="hljs-comment">--------------------------+</span><br>|                       13 |<br>+<span class="hljs-comment">--------------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(<span class="hljs-keyword">CURRENT_DATE</span>);<br>+<span class="hljs-comment">---------------------+</span><br>| MONTH(CURRENT_DATE) |<br>+<span class="hljs-comment">---------------------+</span><br>|                   1 |<br>+<span class="hljs-comment">---------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(<span class="hljs-keyword">CURRENT_DATE</span>);<br>+<span class="hljs-comment">--------------------+</span><br>| YEAR(CURRENT_DATE) |<br>+<span class="hljs-comment">--------------------+</span><br>|               2021 |<br>+<span class="hljs-comment">--------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>显示字符串</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT &quot;welcome to my blog!&quot;; <br>+<span class="hljs-comment">---------------------+</span><br>| welcome to my blog! |<br>+<span class="hljs-comment">---------------------+</span><br>| welcome to my blog! |<br>+<span class="hljs-comment">---------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>当计算器用</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ((<span class="hljs-number">4</span> * <span class="hljs-number">4</span>) / <span class="hljs-number">10</span> ) + <span class="hljs-number">25</span>; <br>+<span class="hljs-comment">----------------------+</span><br>| ((4 * 4) / 10 ) + 25 |<br>+<span class="hljs-comment">----------------------+</span><br>|              26.6000 |<br>+<span class="hljs-comment">----------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>串接字符串</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT</span>(f_name, <span class="hljs-string">&quot; &quot;</span>, l_name) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">Name</span> <br><span class="hljs-keyword">FROM</span> employee_data <br><span class="hljs-keyword">WHERE</span> title = <span class="hljs-string">&#x27;Marketing Executive&#x27;</span>; <br>+<span class="hljs-comment">---------------+</span><br>| Name          |<br>+<span class="hljs-comment">---------------+</span><br>| Monica Sehgal |<br>| Hal Simlai    |<br>| Joseph Irvine |<br>+<span class="hljs-comment">---------------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p> <strong>注意</strong>：这里用到 <code>CONCAT()</code> 函数，用来把字符串连接起来。另外，我们还用到 <code>AS</code> 给结果列 <code>CONCAT(f_name, &quot; &quot;, l_name)</code> 起了个假名。</p></li></ol><h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; (&lt;字段名<span class="hljs-number">1</span>&gt; &lt;类型<span class="hljs-number">1</span>&gt; , ... , &lt;字段名n&gt; &lt;类型n&gt;);<br></code></pre></td></tr></table></figure></p><p>以下为数据表的字段：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">数字类型</th><th style="text-align:center">数据宽度</th><th style="text-align:center">是否为空</th><th style="text-align:center">是否主键</th><th style="text-align:center">自动增加</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">否</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">AUTO_INCREMENT</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">char</td><td style="text-align:center">20</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sex</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">degree</td><td style="text-align:center">double</td><td style="text-align:center">16</td><td style="text-align:center">是</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>执行的 SQL 语句为：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE MyClass(<br>     &gt; id int(4) NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>     &gt; name char(20) NOT NULL,<br>     &gt; sex int(4) NOT NULL DEFAULT &#x27;0&#x27;,<br>     &gt; degree double(16, 2));<br></code></pre></td></tr></table></figure></p><h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt;;<br></code></pre></td></tr></table></figure></p><p>例如：删除表名为 MyClass 的表</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> MyClass;<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：</p><ul><li><code>DROP TABLE</code> 用于取消一个或多个表。但必须有表的 <code>DROP</code> 权限。所有的表数据和表定义会被取消，所以使用本语句要小心。</li><li>对于一个带分区的表，<code>DROP TABLE</code> 会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。<code>DROP TABLE</code> 还会取消与被取消的表有关联的分区定义（<code>.par</code>）文件。</li><li>对于不存在的表，使用 <code>IF EXISTS</code> 用于防止错误发生。当使用 <code>IF EXISTS</code> 时，对于每个不存在的表，会生成一个 <code>NOTE</code>。</li><li><code>RESTRICT</code> 和 <code>CASCADE</code> 可以使分区更容易。但目前，<code>RESTRICT</code> 和 <code>CASCADE</code> 不起作用。</li></ul><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> &lt;表名&gt; (&lt;字段名<span class="hljs-number">1</span>&gt;, ..., &lt;字段名n &gt;) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, ...,  值n );<br></code></pre></td></tr></table></figure></p><p>例如：往表 <code>MyClass</code> 中插入二条记录, 这二条记录表示：编号为 <code>1</code> 的名为 <code>Tom</code> 的成绩为 <code>96.45</code>, 编号为 <code>2</code> 的名为 <code>Joan</code> 的成绩为 <code>82.99</code>，编号为 <code>3</code> 的名为 <code>Wang</code> 的成绩为 <code>96.5</code>。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT INTO MyClass(id, name, degree) VALUES (1, &#x27;Tom&#x27;, 96.45),(2, &#x27;Joan&#x27;, 82.99), (3, &#x27;Wang&#x27;, 96.59);<br></code></pre></td></tr></table></figure></p><h2 id="查询表中的数据"><a href="#查询表中的数据" class="headerlink" title="查询表中的数据"></a>查询表中的数据</h2><ol><li><p>查询所有行命令：</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> &lt;字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...&gt; <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;;<br></code></pre></td></tr></table></figure></p><p> <code>SELECT</code> 一般配合 <code>WHERE</code> 使用，以查询更精确更复杂的数据。</p><p> 例如：查看表 <code>MyClass</code> 中 <code>degree</code> 大于 <code>90</code> 的数据。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM MyClass WHERE degree &gt; 90;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  1 | Tom  |   0 |  96.45 |<br>|  3 | Wang |   0 |  96.59 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p></li><li><p>查询前几行数据 </p><p> 例如：查看表 <code>MyClass</code> 中前 <code>2</code> 行数据</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM MyClass ORDER BY id LIMIT 0, 2;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  1 | Tom  |   0 |  96.45 |<br>|  2 | Joan |   0 |  82.99 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h2></li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;<br></code></pre></td></tr></table></figure></p><p>例如：删除表 <code>MyClass</code> 中编号为 <code>1</code> 的记录</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM MyClass;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  1 | Tom  |   0 |  96.45 |<br>|  2 | Joan |   0 |  82.99 |<br>|  3 | Wang |   0 |  96.59 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> MyClass <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; SELECT * FROM MyClass;<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>| id | name | sex | degree |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>|  2 | Joan |   0 |  82.99 |<br>|  3 | Wang |   0 |  96.59 |<br>+<span class="hljs-comment">----+------+-----+--------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="修改表中数据"><a href="#修改表中数据" class="headerlink" title="修改表中数据"></a>修改表中数据</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> &lt;表名&gt; <span class="hljs-keyword">SET</span> &lt;字段&gt; = &lt;新值&gt;, ... <span class="hljs-keyword">WHERE</span> &lt;表达式&gt;<br></code></pre></td></tr></table></figure></p><p>例如：修改表 <code>MyClass</code> 中 <code>id</code> 为 <code>2</code> 的 <code>name</code> 为 <code>Mary</code>。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; UPDATE MyClass SET name = &#x27;Mary&#x27; WHERE id = 2;<br></code></pre></td></tr></table></figure></p><ol><li><p>单表的 UPDATE 语句：</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> [<span class="hljs-keyword">LOW_PRIORITY</span>] [<span class="hljs-keyword">IGNORE</span>] tbl_name <br><span class="hljs-keyword">SET</span> col_name1=expr1 [, col_name2=expr2 ...] <br>[<span class="hljs-keyword">WHERE</span> where_definition] <br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...] <br>[<span class="hljs-keyword">LIMIT</span> <span class="hljs-keyword">row_count</span>]<br></code></pre></td></tr></table></figure></p></li><li><p>多表的 UPDATE 语句：</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> [<span class="hljs-keyword">LOW_PRIORITY</span>] [<span class="hljs-keyword">IGNORE</span>] table_references <br><span class="hljs-keyword">SET</span> col_name1=expr1 [, col_name2=expr2 ...] <br>[<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：<code>UPDATE</code> 语法可以用新值更新原有表行中的各列。SET 子句指示要修改哪些列和要给予哪些值。<code>WHERE</code> 子句指定应更新哪些行。如果没有 <code>WHERE</code> 子句，则更新所有的行。如果指定了 <code>ORDER BY</code> 子句，则按照被指定的顺序对行进行更新。<code>LIMIT</code> 子句用于给定一个限值，限制可以被更新的行的数目。</p></li></ol><h2 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h2><ol><li><p>增加字段</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> &lt;字段&gt; &lt;类型&gt; &lt;其他&gt;; <br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE MyClass ADD passtest int(4) default &#x27;0&#x27;<br></code></pre></td></tr></table></figure></p></li><li><p>增加索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> &lt;索引名&gt;(&lt;字段名<span class="hljs-number">1</span>&gt;, &lt;字段名<span class="hljs-number">2</span>&gt;, ...)<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD INDEX emp_name(name);<br></code></pre></td></tr></table></figure></p></li><li><p>增加主关键字的索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> (&lt;字段名&gt;);<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD PRIMARY KEY (id);<br></code></pre></td></tr></table></figure></p></li><li><p>增加唯一索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> &lt;索引名&gt;(&lt;字段名&gt;);<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD UNIQUE emp_name2(cardnumber);<br></code></pre></td></tr></table></figure></p></li><li><p>增加全文索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">ADD</span> FULLTEXT &lt;索引名&gt;(&lt;字段名&gt;);<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE employee ADD FULLTEXT emp_name3(name);<br></code></pre></td></tr></table></figure></p><p> <strong>注意</strong>：全文索引只能用于数据库引擎为 <code>MYISAM</code> 的数据表，只适用于 <code>VARCHAR</code> 和 <code>TEXT</code> 类型的字段，此外，MySQL 自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。</p></li><li><p>删除某个索引</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> &lt;索引名&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt;ALTER TABLE employee DROP INDEX emp_name;<br></code></pre></td></tr></table></figure></p></li><li><p>修改原字段名称及类型</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">CHANGE</span> &lt;旧字段名&gt; &lt;新字段名&gt; &lt;新字段类型&gt; &lt;其他&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <span class="hljs-keyword">CHANGE</span> <span class="hljs-keyword">name</span> full_name <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure></p></li><li><p>删除字段</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;表名&gt; <span class="hljs-keyword">DROP</span> &lt;字段名&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <span class="hljs-keyword">DROP</span> address;<br></code></pre></td></tr></table></figure></p></li><li><p>修改表名</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> &lt;原表名&gt; <span class="hljs-keyword">TO</span> &lt;新表名&gt;;<br></code></pre></td></tr></table></figure></p><p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; RENAME TABLE MyClass TO YouClass;<br></code></pre></td></tr></table></figure></p><p> <strong>注意</strong>：</p><ul><li>当你执行 <code>RENAME</code> 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 <code>ALTER</code> 和 <code>DROP</code> 权限，以及对新表的 <code>CREATE</code> 和 <code>INSERT</code> 权限。</li><li>如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事务退回到最初状态。</li><li><code>RENAME TABLE</code> 在 MySQL 3.23.23 中被加入。</li></ul></li></ol><h1 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h1><p>命令在 <code>DOS</code> 的 <code>\mysql\bin</code> 目录下执行，导出文件默认是存在 <code>mysql\bin</code> 目录下。</p><h2 id="导出整个数据库"><a href="#导出整个数据库" class="headerlink" title="导出整个数据库"></a>导出整个数据库</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u 用户名 -p<span class="hljs-string">&#x27;密码&#x27;</span> 数据库名 &gt; 导出的文件名.sql<br><br>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名.sql<br>Enter password: ******<br><br>mysqldump -u root -p database_name &gt; outfile.sql<br>Enter password: ******<br></code></pre></td></tr></table></figure></p><h2 id="导出所有数据库"><a href="#导出所有数据库" class="headerlink" title="导出所有数据库"></a>导出所有数据库</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump  -uroot -p --all-databases &gt; outfile.sql<br>mysqldump  -uroot -p -A &gt; outfile.sql<br></code></pre></td></tr></table></figure></p><h2 id="导出一个数据库结构"><a href="#导出一个数据库结构" class="headerlink" title="导出一个数据库结构"></a>导出一个数据库结构</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -p -d –add-drop-table database_name &gt; outfile.sql<br></code></pre></td></tr></table></figure></p><p><code>-d</code> 没有数据, <code>–add-drop-table</code>在每个 <code>CREATE</code> 语句之前增加一个 <code>DROP TABLE</code></p><h2 id="带语言参数导出"><a href="#带语言参数导出" class="headerlink" title="带语言参数导出"></a>带语言参数导出</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile.sql<br></code></pre></td></tr></table></figure></p><h2 id="导出数据表"><a href="#导出数据表" class="headerlink" title="导出数据表"></a>导出数据表</h2><ol><li><p>导出数据表和表结构</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h 登录主机 -p<span class="hljs-string">&#x27;密码&#x27;</span> -P端口号 数据库名 表名 &gt; 文件名.sql<br></code></pre></td></tr></table></figure></p><p> 将特定数据库特定表中的数据和表格结构和数据全部返回。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -P3306 database_name table &gt; table.sql<br></code></pre></td></tr></table></figure></p></li><li><p>导出表结构却不导出表数据</p><p> 只返回特定数据库特定表格的表格结构，不返回数据，添加 <code>-d</code> 命令参数。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -P3306 -d database_name table &gt; table.sql<br></code></pre></td></tr></table></figure></p></li><li><p>导出表结构和满足 <code>WHERE</code> 条件的表数据</p><p> 只返回特定数据库中特定表的表格结构和满足特定条件的数据。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -P3306 database_name table -<span class="hljs-built_in">where</span>=<span class="hljs-string">&quot;time&gt;&#x27;2017-01-01&#x27;&quot;</span> &gt; table.sql<br></code></pre></td></tr></table></figure></p></li><li><p>导出数据却不导出表结构</p><p> 只返回特定数据库中特定表格的数据，不返回表格结构，添加 <code>-t</code> 命令参数。</p><p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -h localhost -p -t -P3306 database_name table &gt; table.sql<br></code></pre></td></tr></table></figure></p><h2 id="导入-SQL-文件"><a href="#导入-SQL-文件" class="headerlink" title="导入 SQL 文件"></a>导入 SQL 文件</h2></li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">source database.sql;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐬MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程</title>
      <link href="post/7f59cefa.html"/>
      <url>post/7f59cefa.html</url>
      
        <content type="html"><![CDATA[<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul><li>数据库: 数据库是一些关联表的集合。</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列: 一列（数据元素）包含了相同类型的数据, 例如邮政编码的数据。</li><li>行：一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>MySQL 是一个关系型数据库管理系统（RDBMS），由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL 是开源的，所以你不需要支付额外的费用。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 使用标准的 SQL 数据语言形式。</li><li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为 8TB。</li><li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>您可以使用 MySQL 二进制方式进入到 <code>mysql</code> 命令提示符下来连接 MySQL 数据库。</p><p>以下是在命令提示窗口中连接 MySQL 服务器的简单实例：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@host]<span class="hljs-comment"># mysql -u root -p</span><br>Enter password:******<br></code></pre></td></tr></table></figure></p><p>在登录成功后会出现 <code>mysql&gt;</code> 命令提示窗口，你可以在上面执行任何 SQL 语句。</p><p>以上命令执行后，登录成功输出结果如下:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 2854760 to server version: 5.0.9<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the buffer.<br></code></pre></td></tr></table></figure></p><p>在以上实例中，我们使用了 <code>root</code> 用户登录到 MySQL 服务器，当然你也可以使用其他 MySQL 用户登录。</p><p>如果用户权限足够，任何用户都可以在 <code>mysql</code> 的命令提示窗口中进行 SQL 操作。</p><p>退出 <code>mysql&gt;</code> 命令提示窗口可以使用 <code>exit</code> 命令，如下所示：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; exit<br>Bye<br></code></pre></td></tr></table></figure></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>我们可以在登陆 MySQL 服务后，使用 <code>CREATE DATABASE</code> 命令创建数据库，语法如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> 数据库名;<br></code></pre></td></tr></table></figure></p><h2 id="使用-CREATE-DATABASE-命令"><a href="#使用-CREATE-DATABASE-命令" class="headerlink" title="使用 CREATE DATABASE 命令"></a>使用 CREATE DATABASE 命令</h2><p>以下命令简单的演示了创建数据库的过程，数据名为 <code>TestDB</code>:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@host]<span class="hljs-comment"># mysql -u root -p</span><br>Enter password:******  <span class="hljs-comment"># 登录后进入终端</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE DATABASE TestDB;<br></code></pre></td></tr></table></figure></p><h2 id="使用-mysqladmin-创建数据库"><a href="#使用-mysqladmin-创建数据库" class="headerlink" title="使用 mysqladmin 创建数据库"></a>使用 mysqladmin 创建数据库</h2><p>使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。</p><p>所以我们这边使用 <code>root</code> 用户登录，<code>root</code> 用户拥有最高权限，可以使用 <code>mysql mysqladmin</code> 命令来创建数据库。</p><p>以下命令简单的演示了创建数据库的过程，数据名为 TestDB:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@host]<span class="hljs-comment"># mysqladmin -u root -p CREATE TestDB</span><br>Enter password:******<br></code></pre></td></tr></table></figure></p><p>以上命令执行成功后会创建 MySQL 数据库 TestDB。</p><h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><p>使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库，所以我们这边使用 root 用户登录，root 用户拥有最高权限。</p><p>在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。</p><h2 id="使用-DROP-DATABASE-命令"><a href="#使用-DROP-DATABASE-命令" class="headerlink" title="使用 DROP DATABASE 命令"></a>使用 DROP DATABASE 命令</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure></p><p>例如删除名为 <code>TestDB</code> 的数据库：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP DATABASE TestDB;<br></code></pre></td></tr></table></figure></p><h2 id="使用-mysqladmin-删除数据库"><a href="#使用-mysqladmin-删除数据库" class="headerlink" title="使用 mysqladmin 删除数据库"></a>使用 mysqladmin 删除数据库</h2><p>你也可以使用 <code>mysqladmin</code> 命令在终端来执行删除命令。</p><p>以下实例删除数据库 TestDB：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root@host]<span class="hljs-comment"># mysqladmin -u root -p DROP TestDB</span><br>Enter password:******<br></code></pre></td></tr></table></figure></p><p>执行以上删除数据库命令后，会出现一个提示框，来确认是否真的删除数据库：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Dropping the database is potentially a very bad thing to <span class="hljs-keyword">do</span>.<br>Any data stored <span class="hljs-keyword">in</span> the database will be destroyed.<br><br>Do you really want to drop the <span class="hljs-string">&#x27;TestDB&#x27;</span> database [y/N] y<br>Database <span class="hljs-string">&quot;TestDB&quot;</span> dropped<br></code></pre></td></tr></table></figure></p><h1 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h1><p>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。</p><p>从命令提示窗口中选择MySQL数据库</p><p>在 <code>mysql&gt;</code> 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p><p>以下实例选取了数据库 <code>TestDB</code>:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root@host]<span class="hljs-comment"># mysql -u root -p</span><br>Enter password:******<br>mysql&gt; use TestDB;<br>Database changed<br>mysql&gt;<br></code></pre></td></tr></table></figure></p><p>执行以上命令后，你就已经成功选择了 TestDB 数据库，在后续的操作中都会在 TestDB 数据库中执行。</p><p>注意:所有的数据库名，表名，表字段都是区分大小写的。所以你在使用SQL命令时需要输入正确的名称。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型（<code>INTEGER</code>、<code>SMALLINT</code>、<code>DECIMAL</code> 和 <code>NUMERIC</code>），以及近似数值数据类型（<code>FLOAT</code>、<code>REAL</code> 和 <code>DOUBLE PRECISION</code>）。</p><p>关键字 <code>INT</code> 是 <code>INTEGER</code> 的同义词，关键字 <code>DEC</code> 是 <code>DECIMAL</code> 的同义词。</p><p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 <code>TINYINT</code>、<code>MEDIUMINT</code> 和 <code>BIGINT</code>。下面的表显示了需要的每个整数类型的存储和范围。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围（有符号）</th><th style="text-align:center">范围（无符号）</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1 byte</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 bytes</td><td style="text-align:center">(-32 768，32 767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 bytes</td><td style="text-align:center">(-8 388 608，8 388 607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或<br>INTEGER</td><td style="text-align:center">4 bytes</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8 bytes</td><td style="text-align:center">(-9 223 372 036 854 775 808，<br>9 223 372 036 854 775 807)</td><td style="text-align:center">(0，<br>18 446 744 073 709 551 615)</td><td style="text-align:center">极大整数值</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">4 bytes</td><td style="text-align:center">(-3.402 823 466 E+38，<br>-1.175 494 351 E-38)，<br>0，<br>(1.175 494 351 E-38，<br>3.402 823 466 351 E+38)</td><td style="text-align:center">0，<br>(1.175 494 351 E-38，<br>3.402 823 466 E+38)</td><td style="text-align:center">单精度浮点数值</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">8 bytes</td><td style="text-align:center">(-1.797 693 134 862 315 7 E+308，<br>-2.225 073 858 507 201 4 E-308)，<br>0，<br>(2.225 073 858 507 201 4 E-308，<br>1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">0，<br>(2.225 073 858 507 201 4 E-308，<br>1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">双精度浮点数值</td></tr><tr><td style="text-align:center">DECIMAL</td><td style="text-align:center">DECIMAL(M, D)，<br>如果 M&gt;D，<br>为 M+2 ，否则为 D+2</td><td style="text-align:center">依赖于 M 和 D 的值</td><td style="text-align:center">依赖于 M 和 D 的值</td><td style="text-align:center">小数值</td></tr></tbody></table></div><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为 <code>DATETIME</code>、<code>DATE</code>、<code>TIMESTAMP</code>、<code>TIME</code> 和 <code>YEAR</code>。</p><p>每个时间类型有一个有效值范围和一个“零”值，当指定不合法的 MySQL 不能表示的值时使用“零”值。</p><p><code>TIMESTAMP</code> 类型有专有的自动更新特性，将在后面描述。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3 bytes</td><td style="text-align:center">1000-01-01 /<br> 9999-12-31</td><td style="text-align:center">YYYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3 bytes</td><td style="text-align:center">&#39;-838:59:59&#39; /<br>&#39;838:59:59&#39;</td><td style="text-align:center">HH:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1 bytes</td><td style="text-align:center">1901 / 2155</td><td style="text-align:center">YYYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8 bytes</td><td style="text-align:center">1000-01-01 00:00:00 /<br>9999-12-31 23:59:59</td><td style="text-align:center">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4 bytes</td><td style="text-align:center">1970-01-01 00:00:00 /<br>结束时间是第 2147483647 秒，<br>北京时间 2038-1-19 11:14:07，<br>格林尼治时间 2038-1-19 03:14:07</td><td style="text-align:center">YYYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table></div><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指 <code>CHAR</code>、<code>VARCHAR</code>、<code>BINARY</code>、<code>VARBINARY</code>、<code>BLOB</code>、<code>TEXT</code>、<code>ENUM</code> 和 <code>SET</code>。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">0-65535 bytes</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">短文本字符串</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">中等长度文本数据</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">极大文本数据</td></tr></tbody></table></div><p><strong>注意：</strong></p><ul><li><p><code>char(n)</code> 和 <code>varchar(n)</code> 中括号中 <code>n</code> 代表字符的个数，并不代表字节个数，比如 <code>CHAR(30)</code> 就可以存储 30 个字符。</p></li><li><p><code>CHAR</code> 和 <code>VARCHAR</code> 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p></li><li><p><code>BINARY</code> 和 <code>VARBINARY</code> 类似于 <code>CHAR</code> 和 <code>VARCHAR</code>，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p></li><li><p><code>BLOB</code> 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 <code>BLOB</code> 类型：<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>。它们区别在于可容纳存储范围不同。</p></li><li><p>有 4 种 <code>TEXT</code> 类型：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和 <code>LONGTEXT</code>。对应的这 4 种 <code>BLOB</code> 类型，可存储的最大长度不同，可根据实际情况选择。</p></li></ul><h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><h2 id="CREATE-TABLE-命令"><a href="#CREATE-TABLE-命令" class="headerlink" title="CREATE TABLE 命令"></a>CREATE TABLE 命令</h2><p>以下为创建 MySQL 数据表的 SQL 通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name (column_name column_type);<br></code></pre></td></tr></table></figure></p><p>以下例子中我们将在 <code>TestDB</code> 数据库中创建数据表 <code>tbl</code>：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`tbl`</span>(<br>   <span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">UNSIGNED</span> AUTO_INCREMENT,<br>   <span class="hljs-string">`title`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   <span class="hljs-string">`author`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   <span class="hljs-string">`submission_date`</span> <span class="hljs-built_in">DATE</span>,<br>   PRIMARY <span class="hljs-keyword">KEY</span> ( <span class="hljs-string">`id`</span> )<br>)<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br></code></pre></td></tr></table></figure></p><p><strong>实例解析：</strong></p><ul><li>如果你不想字段为 <code>NULL</code> 可以设置字段的属性为 <code>NOT NULL</code>， 在操作数据库时如果输入该字段的数据为 <code>NULL</code>，就会报错。</li><li><code>AUTO_INCREMENT</code> 定义列为自增的属性，一般用于主键，数值会自动加 1。</li><li><code>PRIMARY KEY</code> 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li><code>ENGINE</code> 设置存储引擎，<code>CHARSET</code> 设置编码。</li></ul><h2 id="在命令提示窗口中创建表"><a href="#在命令提示窗口中创建表" class="headerlink" title="在命令提示窗口中创建表"></a>在命令提示窗口中创建表</h2><p>通过 <code>mysql&gt;</code> 命令窗口可以很简单的创建MySQL数据表。你可以使用 SQL 语句 <code>CREATE TABLE</code> 来创建数据表。</p><p>以下为创建数据表 tbl 实例:</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE tbl(<br>    -&gt; id INT NOT NULL AUTO_INCREMENT,<br>    -&gt; title VARCHAR(100) NOT NULL,<br>    -&gt; author VARCHAR(40) NOT NULL,<br>    -&gt; submission_date DATE,<br>    -&gt; PRIMARY KEY ( id )<br>    -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;<br>Query OK, 0 rows affected (0.16 sec)<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：MySQL 命令终止符为分号 <code>;</code> 。</p><h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><p>MySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p><h2 id="DROP-TABLE-命令"><a href="#DROP-TABLE-命令" class="headerlink" title="DROP TABLE 命令"></a>DROP TABLE 命令</h2><p>以下为删除MySQL数据表的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> table_name ;<br></code></pre></td></tr></table></figure></p><h2 id="在命令提示窗口中删除数据表"><a href="#在命令提示窗口中删除数据表" class="headerlink" title="在命令提示窗口中删除数据表"></a>在命令提示窗口中删除数据表</h2><p>在 <code>mysql&gt;</code> 命令提示窗口中删除数据表 SQL 语句为 DROP TABLE ：</p><p>以下实例删除了数据表 <code>tbl</code>:</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DROP TABLE tbl<br>Query OK, 0 rows affected (0.8 sec)<br></code></pre></td></tr></table></figure></p><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>MySQL 表中使用 <code>INSERT INTO</code> 语句来插入数据。</p><p>INSERT INTO 命令</p><p>以下为向 MySQL 数据表插入数据通用的 <code>INSERT INTO</code> 的 SQL 语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name ( field1, field2,...fieldN )<br>                       <span class="hljs-keyword">VALUES</span><br>                       ( value1, value2,...valueN );<br></code></pre></td></tr></table></figure></p><p>如果数据是字符型，必须使用单引号或者双引号，如：<code>&quot;value&quot;</code>。</p><h2 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h2><p>以下我们将使用 <code>INSERT INTO</code> 语句向 MySQL 数据表 <code>tbl</code> 插入数据</p><p>以下实例中我们将向 <code>tbl</code> 表插入三条数据:</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT INTO tbl <br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 PHP&quot;, &quot;PHP&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO tbl<br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 MySQL&quot;, &quot;MySQL&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO tbl<br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 JAVA&quot;, &quot;JAVA&quot;, &#x27;2021-01-01&#x27;);<br>Query OK, 1 rows affected (0.00 sec)<br>mysql&gt; INSERT INTO tbl<br>    -&gt; (title, author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 Python&quot;, &quot;Python&quot;, &#x27;2021-01-01&#x27;);<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br></code></pre></td></tr></table></figure></p><p><strong>注意</strong>：使用箭头标记 <code>-&gt;</code> 不是 SQL 语句的一部分，它仅仅表示一个新行，如果一条SQL语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号 <code>;</code>。</p><p>在以上实例中，我们并没有提供 <code>id</code> 的数据，因为该字段我们在创建表的时候已经设置它为 <code>AUTO_INCREMENT</code>(自动增加) 属性。 所以，该字段会自动递增而不需要我们去设置。实例中 <code>NOW()</code> 是一个 MySQL 函数，该函数返回日期和时间。</p><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="SELECT-命令"><a href="#SELECT-命令" class="headerlink" title="SELECT 命令"></a>SELECT 命令</h2><p>MySQL 数据库使用 <code>SELECT</code> 语句来查询数据。</p><p>以下为在 MySQL 数据库中查询数据通用的 SELECT 语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, column_name<br><span class="hljs-keyword">FROM</span> table_name<br>[<span class="hljs-keyword">WHERE</span> Clause]<br>[<span class="hljs-keyword">LIMIT</span> N][ <span class="hljs-keyword">OFFSET</span> M]<br></code></pre></td></tr></table></figure></p><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号 <code>,</code> 分割，并使用 <code>WHERE</code> 语句来设定查询条件。</li><li><code>SELECT</code> 命令可以读取一条或者多条记录。</li><li>你可以使用星号 <code>*</code> 来代替其他字段，<code>SELECT</code> 语句会返回表的所有字段数据。</li><li>你可以使用 <code>WHERE</code> 语句来包含任何条件。</li><li>你可以使用 <code>LIMIT</code> 属性来设定返回的记录数。</li><li>你可以通过 <code>OFFSET</code> 指定 <code>SELECT</code> 语句开始查询的数据偏移量。默认情况下偏移量为 0。</li></ul><h2 id="在命令提示窗口中获取数据"><a href="#在命令提示窗口中获取数据" class="headerlink" title="在命令提示窗口中获取数据"></a>在命令提示窗口中获取数据</h2><p>以下实例我们将通过 <code>SELECT</code> 命令来获取数据表 <code>tbl</code> 的数据：</p><p>读取数据表：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl;<br></code></pre></td></tr></table></figure></p><p>输出结果：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>|  3 | 学习 JAVA   | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h1><h2 id="WHERE-子句语法"><a href="#WHERE-子句语法" class="headerlink" title="WHERE 子句语法"></a>WHERE 子句语法</h2><p>我们知道从 MySQL 表中使用 <code>SELECT</code> 语句来读取数据。</p><p>如需有条件地从表中选取数据，可将 <code>WHERE</code> 子句添加到 <code>SELECT</code> 语句中。</p><p>语法</p><p>以下是 <code>SELECT</code> 语句使用 <code>WHERE</code> 子句从数据表中读取数据的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <span class="hljs-keyword">FROM</span> table_name1, table_name2...<br>[<span class="hljs-keyword">WHERE</span> condition1 [<span class="hljs-keyword">AND</span> [<span class="hljs-keyword">OR</span>]] condition2.....<br></code></pre></td></tr></table></figure></p><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用 <code>WHERE</code> 语句来设定查询条件。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li><code>WHERE</code> 子句也可以运用于 SQL 的 <code>DELETE</code> 或者 <code>UPDATE</code> 命令。</li><li><code>WHERE</code> 子句类似于程序语言中的 <code>if</code> 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下为操作符列表，可用于 <code>WHERE</code> 子句中。</p><p>下表中实例假定 A 为 10, B 为 20</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等号，检测两个值是否相等，<br>如果相等返回true</td><td style="text-align:center">(A = B) 返回false。</td></tr><tr><td style="text-align:center">&lt;&gt;, !=</td><td style="text-align:center">不等于，检测两个值是否相等，<br>如果不相等返回true</td><td style="text-align:center">(A != B) 返回 true。</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号，检测左边的值是否大于右边的值, <br>如果左边的值大于右边的值返回true</td><td style="text-align:center">(A &gt; B) 返回false。</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号，检测左边的值是否小于右边的值, <br>如果左边的值小于右边的值返回true</td><td style="text-align:center">(A &lt; B) 返回 true。</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于号，检测左边的值是否大于或等于右边的值, <br>如果左边的值大于或等于右边的值返回true</td><td style="text-align:center">(A &gt;= B) 返回false。</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于号，检测左边的值是否小于或等于右边的值, <br>如果左边的值小于或等于右边的值返回true</td><td style="text-align:center">(A &lt;= B) 返回 true。</td></tr></tbody></table></div><p>如果我们想在 MySQL 数据表中读取指定的数据，<code>WHERE</code> 子句是非常有用的。</p><p>使用主键来作为 <code>WHERE</code> 子句的条件查询是非常快速的。</p><p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p><h2 id="BINARY-关键字"><a href="#BINARY-关键字" class="headerlink" title="BINARY 关键字"></a>BINARY 关键字</h2><p>MySQL 的 <code>WHERE</code> 子句的字符串比较是不区分大小写的。 你可以使用 <code>BINARY</code> 关键字来设定 <code>WHERE</code> 子句的字符串比较是区分大小写的。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl WHERE BINARY author=&#x27;mysql&#x27;;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">BINARY</span> author=<span class="hljs-string">&#x27;MySQL&#x27;</span>;<br>+<span class="hljs-comment">----+------------+--------+-----------------+</span><br>| id | title      | author | submission_date |<br>+<span class="hljs-comment">----+------------+--------+-----------------+</span><br>|  2 | 学习 MySQL | MySQL  | 2021-01-12      |<br>+<span class="hljs-comment">----+------------+--------+-----------------+</span><br></code></pre></td></tr></table></figure></p><p>实例中使用了 <code>BINARY</code> 关键字，是区分大小写的，所以 <code>author=&#39;mysql&#39;</code> 的查询条件是没有数据的。</p><h1 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE 更新"></a>UPDATE 更新</h1><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 <code>UPDATE</code> 命令来操作。</p><p>以下是 <code>UPDATE</code> 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table_name <span class="hljs-keyword">SET</span> field1=<span class="hljs-keyword">new</span>-value1, field2=<span class="hljs-keyword">new</span>-value2<br>[<span class="hljs-keyword">WHERE</span> Clause]<br></code></pre></td></tr></table></figure></p><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li><li>当你需要更新数据表中指定行的数据时 <code>WHERE</code> 子句是非常有用的。</li></ul><p>在命令提示窗口中更新数据</p><p>以下我们将在 <code>UPDATE</code> 命令使用 <code>WHERE</code> 子句来更新 <code>tbl</code> 表中指定的数据：</p><p>以下实例将更新数据表中 <code>id</code> 为 <code>3</code> 的 <code>title</code> 字段值：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; UPDATE tbl SET title=&#x27;学习 C++&#x27; WHERE id = 3;<br>Query OK, 1 rows affected (0.01 sec)<br> <br>mysql&gt; SELECT * FROM tbl WHERE id = 3;<br>+<span class="hljs-comment">----+----------+--------+-----------------+</span><br>| id | title    | author | submission_date |<br>+<span class="hljs-comment">----+----------+--------+-----------------+</span><br>|  3 | 学习 C++ | JAVA   | 2021-01-01      |<br>+<span class="hljs-comment">----+----------+--------+-----------------+</span><br></code></pre></td></tr></table></figure></p><p>从结果上看，<code>id</code> 为 <code>3</code> 的 <code>title</code> 已被修改。</p><h1 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h1><h2 id="DELETE-FROM-命令"><a href="#DELETE-FROM-命令" class="headerlink" title="DELETE FROM 命令"></a>DELETE FROM 命令</h2><p>你可以使用 SQL 的 <code>DELETE FROM</code> 命令来删除 MySQL 数据表中的记录。</p><p>以下是 SQL DELETE 语句从 MySQL 数据表中删除数据的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> Clause]<br></code></pre></td></tr></table></figure></p><ul><li>如果没有指定 <code>WHERE</code> 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p>当你想删除数据表中指定的记录时 <code>WHERE</code> 子句是非常有用的。</p><h2 id="在命令提示窗口中删除数据"><a href="#在命令提示窗口中删除数据" class="headerlink" title="在命令提示窗口中删除数据"></a>在命令提示窗口中删除数据</h2><p>这里我们将在 <code>DELETE</code> 命令中使用 <code>WHERE</code> 子句来删除 MySQL 数据表 tbl 所选的数据。</p><p>以下实例将删除 tbl 表中 id 为3 的记录：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; DELETE FROM tbl WHERE id=3;<br>Query OK, 1 row affected (0.23 sec)<br></code></pre></td></tr></table></figure></p><h2 id="多表连接删除"><a href="#多表连接删除" class="headerlink" title="多表连接删除"></a>多表连接删除</h2><p>在 MySQL 中可以同时删除两个表以上的数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> orders, items <span class="hljs-keyword">FROM</span> orders, items <br><span class="hljs-keyword">WHERE</span> orders.userid = items.userid <br><span class="hljs-keyword">AND</span> orders.orderid = items.orderid <br></code></pre></td></tr></table></figure></p><h1 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h1><p>我们知道在 MySQL 中使用 <code>SELECT</code> 命令来读取数据， 同时我们可以在 <code>SELECT</code> 语句中使用 <code>WHERE</code> 子句来获取指定的记录。</p><p><code>WHERE</code> 子句中可以使用等号 <code>=</code> 来设定获取数据的条件，如 <code>author = &#39;MySQL&#39;</code>。</p><p>但是有时候我们需要获取 <code>author</code> 字段含有 <code>P</code> 字符的所有记录，这时我们就需要在 <code>WHERE</code> 子句中使用 <code>LIKE</code> 子句。</p><p><code>LIKE</code> 子句中使用百分号 <code>%</code> 字符来表示任意字符，类似于 <code>UNIX</code> 或正则表达式中的星号 <code>*</code>。</p><p>如果没有使用百分号 <code>%</code>, <code>LIKE</code> 子句与等号 = 的效果是一样的。</p><h2 id="LIKE-子句语法"><a href="#LIKE-子句语法" class="headerlink" title="LIKE 子句语法"></a>LIKE 子句语法</h2><p>以下是 SELECT 语句使用 <code>LIKE</code> 子句从数据表中读取数据的通用语法：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> field1 <span class="hljs-keyword">LIKE</span> condition1 [<span class="hljs-keyword">AND</span> [<span class="hljs-keyword">OR</span>]] filed2 = <span class="hljs-string">&#x27;somevalue&#x27;</span><br></code></pre></td></tr></table></figure></p><ul><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以在 <code>WHERE</code> 子句中使用 <code>LIKE</code> 子句。</li><li>你可以使用 <code>LIKE</code> 子句代替等号 <code>=</code>。</li><li><code>LIKE</code> 通常与 <code>%</code> 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li>你可以在 <code>DELETE</code> 或 <code>UPDATE</code> 命令中使用 <code>WHERE...LIKE</code> 子句来指定条件。</li></ul><h2 id="在命令提示符中使用-LIKE-子句"><a href="#在命令提示符中使用-LIKE-子句" class="headerlink" title="在命令提示符中使用 LIKE 子句"></a>在命令提示符中使用 LIKE 子句</h2><p>以下我们将在 <code>SELECT</code> 命令中使用 <code>WHERE...LIKE</code> 子句来从 MySQL 数据表 <code>tbl</code> 中读取数据。</p><p>以下是我们将 <code>tbl</code> 表中获取 <code>author</code> 字段中以 P 为开头的所有记录：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl  WHERE author LIKE &#x27;P%&#x27;;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h1><p>下面为大家介绍 MySQL <code>UNION</code> 操作符的语法和实例。</p><p>MySQL <code>UNION</code> 操作符用于连接两个以上的 <code>SELECT</code> 语句的结果组合到一个结果集合中。多个 <code>SELECT</code> 语句会删除重复的数据。</p><h2 id="UNION-操作符语法"><a href="#UNION-操作符语法" class="headerlink" title="UNION 操作符语法"></a>UNION 操作符语法</h2><p>MySQL <code>UNION</code> 操作符语法格式：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> expression1, expression2, ... expression_n<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">tables</span><br>[<span class="hljs-keyword">WHERE</span> conditions]<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span>]<br><span class="hljs-keyword">SELECT</span> expression1, expression2, ... expression_n<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">tables</span><br>[<span class="hljs-keyword">WHERE</span> conditions];<br></code></pre></td></tr></table></figure></p><p>参数</p><ul><li><strong>expression1, expression2, ... expression_n</strong>: 要检索的列。</li><li><strong>tables</strong>: 要检索的数据表。</li><li><strong>WHERE conditions</strong>: 可选，检索条件。</li><li><strong>DISTINCT</strong>: 可选，删除结果集中重复的数据。默认情况下 <code>UNION</code> 操作符已经删除了重复数据，所以 <code>DISTINCT</code> 修饰符对结果没啥影响。</li><li><strong>ALL</strong>: 可选，返回所有结果集，包含重复数据。</li></ul><p>演示数据库</p><p>下面是选自 <code>Websites</code> 表的数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM Websites;<br>+<span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br>| id | name         | url                       | alexa | country |<br>+<span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br>| 1  | Google       | https://www.google.cm/    | 1     | USA     |<br>| 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      |<br>| 3  | 微博          | https://weibo.com/         | 20    | CN      |<br>| 4  | Facebook     | https://www.facebook.com/ | 3     | USA     |<br>| 5  | stackoverflow | https://stackoverflow.com/ |   0 | IND     |<br>+<span class="hljs-comment">----+---------------+---------------------------+-------+---------+</span><br></code></pre></td></tr></table></figure></p><p>下面是 <code>apps</code> 表的数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM apps;<br>+<span class="hljs-comment">----+------------+-------------------------+---------+</span><br>| id | app_name   | url                     | country |<br>+<span class="hljs-comment">----+------------+-------------------------+---------+</span><br>|  1 | QQ APP     | https://im.qq.com/       | CN      |<br>|  2 | 微博 APP | https://weibo.com/       | CN      |<br>|  3 | 淘宝 APP | https://www.taobao.com/ | CN      |<br>+<span class="hljs-comment">----+------------+-------------------------+---------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="在命令提示符中使用-UNION-操作符"><a href="#在命令提示符中使用-UNION-操作符" class="headerlink" title="在命令提示符中使用 UNION 操作符"></a>在命令提示符中使用 UNION 操作符</h2><p>下面的 SQL 语句从 <code>Websites</code> 和 <code>apps</code> 表中选取所有不同的 <code>country</code>（只有不同的值），执行 SQL 输出结果如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT country FROM Websites<br>    -&gt; UNION<br>    -&gt; SELECT country FROM apps<br>    -&gt; ORDER BY country;<br>+<span class="hljs-comment">---------+</span><br>| country |<br>+<span class="hljs-comment">---------+</span><br>|  CN     |<br>|  IND    |<br>|  USA    |<br>+<span class="hljs-comment">---------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p><strong>注释</strong>：<code>UNION</code> 不能用于列出两个表中所有的 <code>country</code>。如果一些网站和 APP 来自同一个国家，每个国家只会列出一次。<code>UNION</code> 只会选取不同的值。请使用 <code>UNION ALL</code> 来选取重复的值。</p><h2 id="在命令提示符中使用-UNION-ALL-操作符"><a href="#在命令提示符中使用-UNION-ALL-操作符" class="headerlink" title="在命令提示符中使用 UNION ALL 操作符"></a>在命令提示符中使用 UNION ALL 操作符</h2><p>下面的 SQL 语句使用 <code>UNION ALL</code> 从 <code>Websites</code> 和 <code>apps</code> 表中选取所有的 <code>country</code>（有重复的值）：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT country FROM Websites<br>    -&gt; UNION ALL<br>    -&gt; SELECT country FROM apps<br>    -&gt; ORDER BY country;<br>+<span class="hljs-comment">---------+</span><br>| country |<br>+<span class="hljs-comment">---------+</span><br>|  CN     |<br>|  CN     |<br>|  CN     |<br>|  CN     |<br>|  IND    |<br>|  USA    |<br>|  USA    |<br>|  USA    |<br>+<span class="hljs-comment">---------+</span><br>8 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><p><strong>带有 <code>WHERE</code> 的 <code>UNION ALL</code></strong></p><p>下面的 SQL 语句使用 <code>UNION ALL</code> 从 <code>Websites</code> 和 <code>apps</code> 表中选取所有的中国(CN)的数据（有重复的值）：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT country, name FROM Websites<br>    -&gt; WHERE country=&#x27;CN&#x27;<br>    -&gt; UNION ALL<br>    -&gt; SELECT country, app_name FROM apps<br>    -&gt; WHERE country=&#x27;CN&#x27;<br>    -&gt; ORDER BY country;<br>+<span class="hljs-comment">---------+------------+</span><br>| country | name       |<br>+<span class="hljs-comment">---------+------------+</span><br>| CN      | 淘宝       |<br>| CN      | QQ APP     |<br>| CN      | 微博 APP   |<br>| CN      | 微博       |<br>| CN      | 淘宝 APP   |<br>+<span class="hljs-comment">---------+------------+</span><br>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.03</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="排序语句"><a href="#排序语句" class="headerlink" title="排序语句"></a>排序语句</h1><p>我们知道从 MySQL 表中使用 <code>SELECT</code> 语句来读取数据。</p><p>如果我们需要对读取的数据进行排序，我们就可以使用 MySQL 的 <code>ORDER BY</code> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p><h2 id="ORDER-BY-子句语法"><a href="#ORDER-BY-子句语法" class="headerlink" title="ORDER BY 子句语法"></a>ORDER BY 子句语法</h2><p>以下是 <code>SELECT</code> 语句使用 <code>ORDER BY</code> 子句将查询数据排序后再返回数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <span class="hljs-keyword">FROM</span> table_name1, table_name2...<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> field1 [<span class="hljs-keyword">ASC</span> [<span class="hljs-keyword">DESC</span>][默认 <span class="hljs-keyword">ASC</span>]], [field2...] [<span class="hljs-keyword">ASC</span> [<span class="hljs-keyword">DESC</span>][默认 <span class="hljs-keyword">ASC</span>]]<br></code></pre></td></tr></table></figure></p><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 <code>ASC</code> 或 <code>DESC</code> 关键字来设置查询结果是按升序或降序排列。默认情况下，它是按升序排列。</li><li>你可以添加 <code>WHERE...LIKE</code> 子句来设置条件。</li></ul><h2 id="在命令提示符中使用-ORDER-BY-子句"><a href="#在命令提示符中使用-ORDER-BY-子句" class="headerlink" title="在命令提示符中使用 ORDER BY 子句"></a>在命令提示符中使用 ORDER BY 子句</h2><p>以下将在 <code>SELECT</code> 语句中使用 <code>ORDER BY</code> 子句来读取 MySQL 数据表 <code>tbl</code> 中的数据：</p><p>尝试以下实例，结果将按升序及降序排列。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl ORDER BY submission_date ASC;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  3 | 学习 C++    | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> submission_date <span class="hljs-keyword">DESC</span>;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>|  3 | 学习 C++    | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="分组语句"><a href="#分组语句" class="headerlink" title="分组语句"></a>分组语句</h1><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><h2 id="GROUP-BY-子句语法"><a href="#GROUP-BY-子句语法" class="headerlink" title="GROUP BY 子句语法"></a>GROUP BY 子句语法</h2><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, <span class="hljs-keyword">function</span>(column_name)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br><br></code></pre></td></tr></table></figure></p><p>本章节实例使用到了以下表结构及数据，使用前我们可以先将以下数据导入数据库中。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`employee_tbl`</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`employee_tbl`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`name`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">`date`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`singin`</span> <span class="hljs-built_in">tinyint</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;登录次数&#x27;</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`employee_tbl`</span> <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;2016-04-22 15:25:33&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>), <br>(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;2016-04-20 15:25:47&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>), <br>(<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小丽&#x27;</span>, <span class="hljs-string">&#x27;2016-04-19 15:26:02&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>), <br>(<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;2016-04-07 15:26:14&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>), <br>(<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;2016-04-11 15:26:40&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>), <br>(<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;2016-04-04 15:26:54&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p>导入成功后，执行以下 SQL 语句：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM employee_tbl;<br>+<span class="hljs-comment">----+------+---------------------+--------+</span><br>| id | name | date                | singin |<br>+<span class="hljs-comment">----+------+---------------------+--------+</span><br>|  1 | 小明 | 2016-04-22 15:25:33 |      1 |<br>|  2 | 小王 | 2016-04-20 15:25:47 |      3 |<br>|  3 | 小丽 | 2016-04-19 15:26:02 |      2 |<br>|  4 | 小王 | 2016-04-07 15:26:14 |      4 |<br>|  5 | 小明 | 2016-04-11 15:26:40 |      4 |<br>|  6 | 小明 | 2016-04-04 15:26:54 |      2 |<br>+<span class="hljs-comment">----+------+---------------------+--------+</span><br>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>接下来我们使用 <code>GROUP BY</code> 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name, COUNT(*) FROM employee_tbl GROUP BY name;<br>+<span class="hljs-comment">------+----------+</span><br>| name | COUNT(*) |<br>+<span class="hljs-comment">------+----------+</span><br>| 小丽 |        1 |<br>| 小明 |        3 |<br>| 小王 |        2 |<br>+<span class="hljs-comment">------+----------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="使用-WITH-ROLLUP"><a href="#使用-WITH-ROLLUP" class="headerlink" title="使用 WITH ROLLUP"></a>使用 WITH ROLLUP</h2><p><code>WITH ROLLUP</code> 可以实现在分组统计数据基础上再进行相同的统计（SUM, AVG, COUNT…）。</p><p>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name, SUM(singin) AS singin_count FROM employee_tbl GROUP BY name WITH ROLLUP;<br>+<span class="hljs-comment">------+--------------+</span><br>| name | singin_count |<br>+<span class="hljs-comment">------+--------------+</span><br>| 小丽 |            2 |<br>| 小明 |            7 |<br>| 小王 |            7 |<br>| NULL |           16 |<br>+<span class="hljs-comment">------+--------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>其中记录 <code>NULL</code> 表示所有人的登录次数。</p><p>我们可以使用 <code>COALESCE</code> 来设置一个可以取代 <code>NUll</code> 的名称</p><p> <strong> COALESCE 语法：</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COALESCE</span>(a, b, c) <span class="hljs-keyword">FROM</span> ...;<br></code></pre></td></tr></table></figure></p><p>参数说明：如果 <code>a == NULL</code>，则选择 <code>b</code>；如果<code>b == NULL</code>，则选择 <code>c</code>；如果 <code>a != NULL</code>，则选择<code>a</code>；如果 <code>a</code> <code>b</code> <code>c</code> 都为 <code>NULL</code> ，则返回为 <code>NULL</code>（没意义）。</p><p>以下实例中如果名字为空我们使用总数代替：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT COALESCE(name, &#x27;总数&#x27;), SUM(singin) AS singin_count FROM employee_tbl GROUP BY name WITH ROLLUP;<br>+<span class="hljs-comment">------------------------+--------------+</span><br>| COALESCE(name, &#x27;总数&#x27;) | singin_count |<br>+<span class="hljs-comment">------------------------+--------------+</span><br>| 小丽                   |            2 |<br>| 小明                   |            7 |<br>| 小王                   |            7 |<br>| 总数                   |           16 |<br>+<span class="hljs-comment">------------------------+--------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h1><p>在前几章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。</p><p>本章节将向大家介绍如何使用 MySQL 的 <code>JOIN</code> 在两个或多个表中查询数据。</p><p>你可以在 <code>SELECT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句中使用 MySQL 的 <code>JOIN</code> 来联合多表查询。</p><p>JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li><li><strong>LEFT JOIN（左连接）</strong>：获取左表所有记录，即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）</strong>： 与 <code>LEFT JOIN</code> 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><p>我们在 <code>testDB</code> 数据库中有两张表 <code>tcount_tbl</code> 和 <code>tbl</code>。两张数据表数据如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tcount_tbl;<br>+<span class="hljs-comment">--------+-------+</span><br>| author | count |<br>+<span class="hljs-comment">--------+-------+</span><br>| JAVA   |    10 |<br>| MySQL  |    20 |<br>| C++    |    30 |<br>+<span class="hljs-comment">--------+-------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br> <br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl;<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>| id | title       | author | submission_date |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>|  1 | 学习 PHP    | PHP    | 2021-01-12      |<br>|  2 | 学习 MySQL  | MySQL  | 2021-01-12      |<br>|  3 | 学习 C++    | JAVA   | 2021-01-01      |<br>|  4 | 学习 Python | Python | 2021-01-01      |<br>|  5 | MySQL 教程  | MySQL  | 2021-01-12      |<br>|  6 | JAVA 教程   | JAVA   | 2021-01-12      |<br>+<span class="hljs-comment">----+-------------+--------+-----------------+</span><br>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>接下来我们就使用 <code>MySQL</code> 的<code>INNER JOIN</code> (也可以省略 <code>INNER</code> 使用 <code>JOIN</code>，效果一样)来连接以上两张表来读取 <code>tbl</code> 表中所有 <code>author</code> 字段在 <code>tcount_tbl</code> 表对应的 <code>count</code> 字段值：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt;  SELECT a.id, a.author, b.count FROM tbl a INNER JOIN tcount_tbl b ON a.author = b.author;<br>+<span class="hljs-comment">----+--------+-------+</span><br>| id | author | count |<br>+<span class="hljs-comment">----+--------+-------+</span><br>|  2 | MySQL  |    20 |<br>|  3 | JAVA   |    10 |<br>|  5 | MySQL  |    20 |<br>|  6 | JAVA   |    10 |<br>+<span class="hljs-comment">----+--------+-------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>以上 SQL 语句等价于以下 <code>WHERE</code> 子句：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT a.id, a.author, b.count FROM tbl a, tcount_tbl b WHERE a.author = b.author;<br>+<span class="hljs-comment">----+--------+-------+</span><br>| id | author | count |<br>+<span class="hljs-comment">----+--------+-------+</span><br>|  2 | MySQL  |    20 |<br>|  3 | JAVA   |    10 |<br>|  5 | MySQL  |    20 |<br>|  6 | JAVA   |    10 |<br>+<span class="hljs-comment">----+--------+-------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><p>MySQL <code>LEFT JOIN</code> 与 <code>JOIN</code> 有所不同。 <code>LEFT JOIN</code> 会读取左边数据表的全部数据，即便右边表无对应数据。</p><p>尝试以下实例，以 <code>tbl</code> 为左表，<code>tcount_tbl</code> 为右表，理解 <code>LEFT JOIN</code> 的应用：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT a.id, a.author, b.count FROM tbl a LEFT JOIN tcount_tbl b ON a.author = b.author;<br>+<span class="hljs-comment">----+--------+-------+</span><br>| id | author | count |<br>+<span class="hljs-comment">----+--------+-------+</span><br>|  3 | JAVA   |    10 |<br>|  6 | JAVA   |    10 |<br>|  2 | MySQL  |    20 |<br>|  5 | MySQL  |    20 |<br>|  1 | PHP    |  NULL |<br>|  4 | Python |  NULL |<br>+<span class="hljs-comment">----+--------+-------+</span><br>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>以上实例中使用了 <code>LEFT JOIN</code>，该语句会读取左边的数据表 <code>tbl</code> 的所有选取的字段数据，即便在右侧表 <code>tcount_tbl</code> 中 没有对应的 <code>author</code> 字段值。</p><h2 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h2><p>MySQL <code>RIGHT JOIN</code> 会读取右边数据表的全部数据，即便左边边表无对应数据。</p><p>尝试以下实例，以 <code>tbl</code> 为左表，<code>tcount_tbl</code> 为右表，理解 <code>RIGHT JOIN</code> 的应用：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT a.id, a.author, b.count FROM tbl a RIGHT JOIN tcount_tbl b ON a.author = b.author;<br>+<span class="hljs-comment">------+--------+-------+</span><br>| id   | author | count |<br>+<span class="hljs-comment">------+--------+-------+</span><br>|    2 | MySQL  |    20 |<br>|    3 | JAVA   |    10 |<br>|    5 | MySQL  |    20 |<br>|    6 | JAVA   |    10 |<br>| NULL | NULL   |    30 |<br>+<span class="hljs-comment">------+--------+-------+</span><br>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>以上实例中使用了 <code>RIGHT JOIN</code>，该语句会读取右边的数据表 <code>tcount_tbl</code> 的所有选取的字段数据，即便在左侧表 <code>tbl</code> 中没有对应的 <code>author</code> 字段值。</p><h1 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h1><p>我们已经知道 MySQL 使用 <code>SELECT</code> 命令及 <code>WHERE</code> 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p><h2 id="NULL-值运算符"><a href="#NULL-值运算符" class="headerlink" title="NULL 值运算符"></a>NULL 值运算符</h2><p>为了处理这种情况，MySQL 提供了三大运算符:</p><ul><li><strong>IS NULL</strong>: 当列的值是 <code>NULL</code>，此运算符返回 <code>true</code>。</li><li><strong>IS NOT NULL</strong>: 当列的值不为 <code>NULL</code>, 运算符返回 <code>true</code>。</li><li><strong>&lt;=&gt;</strong>: 比较操作符（不同于 <code>=</code> 运算符），当比较的的两个值相等或者都为 <code>NULL</code> 时返回 <code>true</code>。</li></ul><p>关于 <code>NULL</code> 的条件比较运算是比较特殊的。你不能使用 <code>= NULL</code> 或 <code>!= NULL</code> 在列中查找 <code>NULL</code> 值 。</p><p>在 MySQL 中，<code>NULL</code> 值与任何其它值的比较（即使是 <code>NULL</code>）永远返回 <code>NULL</code>，即 <code>NULL = NULL</code> 返回 <code>NULL</code>。</p><p>MySQL 中处理 <code>NULL</code> 使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 运算符。</p><p><strong>注意：</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *, columnName1 + <span class="hljs-keyword">IFNULL</span>(columnName2, <span class="hljs-number">0</span>) <span class="hljs-keyword">FROM</span> tableName;<br></code></pre></td></tr></table></figure></p><p><code>columnName1</code>，<code>columnName2</code> 为 <code>int</code> 型，当 <code>columnName2</code> 中，有值为 <code>NULL</code> 时，<code>columnName1 + columnName2 = NULL</code>，<code>IFNULL(columnName2, 0)</code> 把 <code>columnName2</code> 中 <code>NULL</code> 值转为 <code>0</code>。</p><h2 id="在命令提示符中使用-NULL-值"><a href="#在命令提示符中使用-NULL-值" class="headerlink" title="在命令提示符中使用 NULL 值"></a>在命令提示符中使用 NULL 值</h2><p>以下实例中假设数据库 <code>TestDB</code> 中的表 <code>tbl</code> 含有两列 <code>author</code> 和 <code>count</code>, <code>count</code> 中设置插入 <code>NULL</code> 值。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl;<br>+<span class="hljs-comment">---------------+--------------+</span><br>| author | count |<br>+<span class="hljs-comment">---------------+--------------+</span><br>| TestDB        | NULL         |<br>| Google        | NULL         |<br>| FK            | 20           |<br>| Baidu         | 20           |<br>+<span class="hljs-comment">---------------+--------------+</span><br>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><p>以下实例中你可以看到 <code>=</code> 和 <code>!=</code> 运算符是不起作用的：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl WHERE count = NULL;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">count</span> != <span class="hljs-literal">NULL</span>;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><p>查找数据表中 <code>tbl</code> 列是否为 <code>NULL</code>，必须使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code>，如下实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl WHERE count IS NULL;<br>+<span class="hljs-comment">--------+-------+</span><br>| author | count |<br>+<span class="hljs-comment">--------+-------+</span><br>| TestDB | NULL  |<br>| Google | NULL  |<br>+<span class="hljs-comment">---- ---+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">count</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br>+<span class="hljs-comment">--------+-------+</span><br>| author | count |<br>+<span class="hljs-comment">--------+-------+</span><br>| FK     | 20    |<br>| Baidu  | 20    |<br>+<span class="hljs-comment">--------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>在前面的章节我们已经了解到 MySQL 可以通过 <code>LIKE</code> 子句来进行模糊匹配。</p><p>MySQL 同样也支持其他正则表达式的匹配， MySQL 中使用 <code>REGEXP</code> 操作符来进行正则表达式匹配。</p><p>下表中的正则模式可应用于 <code>REGEXP</code> 操作符中。</p><div class="table-container"><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串的开始位置。<br>如果设置了 RegExp 对象的 Multiline 属性，<code>^</code> 也匹配 <code>\n</code> 或 <code>\r</code> 之后的位置。</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串的结束位置。<br>如果设置了 RegExp 对象的 Multiline 属性，<code>$</code> 也匹配 <code>\n</code> 或 <code>\r</code> 之前的位置。</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除 <code>\n</code> 之外的任何单个字符。<br>要匹配包括 <code>\n</code> 在内的任何字符，请使用像 <code>[.\n]</code> 的模式。</td></tr><tr><td style="text-align:center">[...]</td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。<br>例如，<code>[abc]</code> 可以匹配 <code>plain</code> 中的 <code>a</code>。</td></tr><tr><td style="text-align:center"><html>[^...]</html></td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。<br>例如，<code>[\^abc]</code> 可以匹配 <code>plain</code> 中的<code>p</code>。</td></tr><tr><td style="text-align:center">p1&vert;p2&vert;p3</td><td style="text-align:center">匹配 p1 或 p2 或 p3。<br>例如，<code>z</code>&vert;<code>food</code> 能匹配 <code>z</code> 或 <code>food</code>。<code>(z</code>&vert;<code>f)ood</code> 则匹配 <code>zood</code> 或 <code>food</code>。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的子表达式零次或多次。<br>例如，<code>zo*</code> 能匹配 <code>z</code> 以及 <code>zoo</code>。<code>*</code> 等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的子表达式一次或多次。<br>例如，<code>zo+</code> 能匹配 <code>zo</code> 以及 <code>zoo</code>，但不能匹配 <code>z</code>。<code>+</code> 等价于 <code>&#123;1,&#125;</code>。</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center"><code>n</code> 是一个非负整数。匹配确定的 <code>n</code> 次。<br>例如，<code>o&#123;2&#125;</code> 不能匹配 <code>Bob</code> 中的 <code>o</code>，但是能匹配 <code>food</code> 中的两个 <code>o</code>。</td></tr><tr><td style="text-align:center">{n, m}</td><td style="text-align:center"><code>m</code> 和 <code>n</code> 均为非负整数，其中 <code>n &lt;= m</code>。<br>最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次。</td></tr></tbody></table></div><p>了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的 SQL 语句。以下我们将列出几个小实例（表名：<code>person_tbl</code>）来加深我们的理解：</p><p>查找 <code>name</code> 字段中以 <code>st</code> 为开头的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^st&#x27;;<br></code></pre></td></tr></table></figure></p><p>查找 <code>name</code> 字段中以 <code>ok</code> 为结尾的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;ok$&#x27;;<br></code></pre></td></tr></table></figure></p><p>查找 <code>name</code> 字段中包含 <code>mar</code> 字符串的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;mar&#x27;;<br></code></pre></td></tr></table></figure></p><p>查找 <code>name</code> 字段中以元音字符开头或以 <code>ok</code> 字符串结尾的所有数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^[aeiou]|ok$&#x27;;<br></code></pre></td></tr></table></figure></p><h1 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h1><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到 <code>ALTER</code> 命令。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| i     | int(11) | YES  |     | NULL    |       |<br>| c     | char(1) | YES  |     | NULL    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="删除，添加或修改表字段"><a href="#删除，添加或修改表字段" class="headerlink" title="删除，添加或修改表字段"></a>删除，添加或修改表字段</h2><p>如下命令使用了 <code>ALTER</code> 命令及 <code>DROP</code> 子句来删除以上创建表的 <code>i</code> 字段：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl  DROP i;<br></code></pre></td></tr></table></figure></p><p>如果数据表中只剩余一个字段则无法使用 <code>DROP</code> 来删除字段。</p><p>MySQL 中使用 <code>ADD</code> 子句来向数据表中添加列，如下实例在表 <code>testalter_tbl</code> 中添加 <code>i</code> 字段，并定义数据类型:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;<br></code></pre></td></tr></table></figure></p><p>执行以上命令后，<code>i</code> 字段会自动添加到数据表字段的末尾。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| c     | char(1) | YES  |     | NULL    |       |<br>| i     | int(11) | YES  |     | NULL    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>如果你需要指定新增字段的位置，可以使用 MySQL 提供的关键字 <code>FIRST</code> (设定位第一列)， <code>AFTER</code> 字段名（设定位于某个字段之后）。</p><p>尝试以下 <code>ALTER TABLE</code> 语句, 在执行成功后，使用 <code>SHOW COLUMNS</code> 查看表结构的变化：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">DROP</span> i;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ADD</span> i <span class="hljs-built_in">INT</span> <span class="hljs-keyword">FIRST</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">DROP</span> i;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ADD</span> i <span class="hljs-built_in">INT</span> <span class="hljs-keyword">AFTER</span> c;<br></code></pre></td></tr></table></figure></p><p><code>FIRST</code> 和 <code>AFTER</code> 关键字可用于 <code>ADD</code> 与 <code>MODIFY</code> 子句，所以如果你想重置数据表字段的位置就需要先使用 <code>DROP</code> 删除字段然后使用 <code>ADD</code> 来添加字段并设置位置。</p><h2 id="修改字段类型及名称"><a href="#修改字段类型及名称" class="headerlink" title="修改字段类型及名称"></a>修改字段类型及名称</h2><p>如果需要修改字段类型及名称, 你可以在 <code>ALTER</code> 命令中使用 <code>MODIFY</code> 或 <code>CHANGE</code> 子句 。</p><p>例如，把字段 <code>c</code> 的类型从 <code>CHAR(1)</code> 改为 <code>CHAR(10)</code>，可以执行以下命令:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10);<br></code></pre></td></tr></table></figure></p><p>使用 <code>CHANGE</code> 子句, 语法有很大的不同。 在 <code>CHANGE</code> 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;<br>mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT;<br></code></pre></td></tr></table></figure></p><h2 id="ALTER-TABLE-对-NULL-值和默认值的影响"><a href="#ALTER-TABLE-对-NULL-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 NULL 值和默认值的影响"></a>ALTER TABLE 对 NULL 值和默认值的影响</h2><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p><p>以下实例，指定字段 <code>j</code> 为 <code>NOT NULL</code> 且默认值为 <code>100</code> 。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl <br>    -&gt; MODIFY j BIGINT NOT NULL DEFAULT 100;<br></code></pre></td></tr></table></figure></p><p>如果你不设置默认值，MySQL会自动设置该字段默认为 <code>NULL</code>。</p><h2 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h2><p>你可以使用 <code>ALTER</code> 来修改字段的默认值，尝试以下实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;<br>mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| c     | char(1) | YES  |     | NULL    |       |<br>| i     | int(11) | YES  |     | 1000    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>你也可以使用 <code>ALTER</code> 命令及 <code>DROP</code> 子句来删除字段的默认值，如下实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;<br>mysql&gt; SHOW COLUMNS FROM testalter_tbl;<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| Field | Type    | Null | Key | Default | Extra |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>| c     | char(1) | YES  |     | NULL    |       |<br>| i     | int(11) | YES  |     | NULL    |       |<br>+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>Changing a <span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>:<br></code></pre></td></tr></table></figure></p><p>修改数据表类型，可以使用 <code>ALTER</code> 命令及 <code>TYPE</code> 子句来完成。尝试以下实例，我们将表 <code>testalter_tbl</code> 的类型修改为 <code>MYISAM</code> ：</p><p>注意：查看数据表类型可以使用 <code>SHOW TABLE STATUS</code> 语句，并使用 <code>\G</code> 格式化输出。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ENGINE = MYISAM;<br>mysql&gt; SHOW TABLE STATUS LIKE &#x27;testalter_tbl&#x27; \G<br>*************************** 1. row ****************<br>           Name: testalter_tbl<br>           Type: MyISAM<br>     Row_format: Fixed<br>           Rows: 0<br> Avg_row_length: 0<br>    Data_length: 0<br>Max_data_length: 25769803775<br>   Index_length: 1024<br>      Data_free: 0<br> Auto_increment: NULL<br>    Create_time: 2007-06-03 08:04:36<br>    Update_time: 2007-06-03 08:04:36<br>     Check_time: NULL<br> Create_options:<br>        <span class="hljs-keyword">Comment</span>:<br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>如果需要修改数据表的名称，可以在 <code>ALTER TABLE</code> 语句中使用 <code>RENAME</code> 子句来实现。</p><p>尝试以下实例将数据表 <code>testalter_tbl</code> 重命名为 <code>alter_tbl</code>：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;<br></code></pre></td></tr></table></figure></p><p><code>ALTER</code> 命令还可以用来创建及删除 MySQL 数据表的索引，该功能我们会在接下来的章节中介绍。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务。</p><ul><li>在 MySQL 中只有使用了 <code>Innodb</code> 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 <code>INSERT</code>，<code>UPDATE</code>, <code>DELETE</code> 语句。</li></ul><p>一般来说，事务是必须满足 4 个条件（<code>ACID</code>）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。</p><ul><li>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 <code>COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令 <code>BEGIN</code> 或 <code>START TRANSACTION</code>，或者执行命令 <code>SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。</p><p>事务控制语句：</p><ul><li><code>BEGIN</code> 或 <code>START TRANSACTION</code> 显式地开启一个事务；</li><li><code>COMMIT</code> 也可以使用 <code>COMMIT WORK</code>，不过二者是等价的。<code>COMMIT</code> 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li><li><code>ROLLBACK</code> 也可以使用 <code>ROLLBACK WORK</code>，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li><li><code>SAVEPOINT identifier</code>，<code>SAVEPOINT</code> 允许在事务中创建一个保存点，一个事务中可以有多个 <code>SAVEPOINT</code>；</li><li><code>RELEASE SAVEPOINT identifier</code> 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li><li><code>ROLLBACK TO identifier</code> 把事务回滚到标记点；</li><li><code>SET TRANSACTION</code> 用来设置事务的隔离级别。<code>InnoDB</code> 存储引擎提供事务的隔离级别有<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code> 和 <code>SERIALIZABLE</code>。</li></ul><p>MYSQL 事务处理主要有两种方法：</p><ol><li><p>用 <code>BEGIN</code>，<code>ROLLBACK</code>，<code>COMMIT</code> 来实现</p><ul><li><code>BEGIN</code>：开始一个事务</li><li><code>ROLLBACK</code>：事务回滚</li><li><code>COMMIT</code>：事务确认</li></ul></li><li><p>直接用 <code>SET</code> 来改变 MySQL 的自动提交模式:</p><ul><li><code>SET AUTOCOMMIT=0</code>：禁止自动提交</li><li><code>SET AUTOCOMMIT=1</code>：开启自动提交</li></ul></li></ol><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE transaction_test( id int(5)) engine=innodb;  # 创建数据表<br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; SELECT * FROM transaction_test;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">BEGIN</span>;  <span class="hljs-comment"># 开始事务</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO transaction_test VALUE(5);<br>Query OK, 1 rows affected (0.01 sec)<br><br>mysql&gt; INSERT INTO transaction_test VALUE(6);<br>Query OK, 1 rows affected (0.00 sec)<br><br>mysql&gt; COMMIT;  # 提交事务<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT * FROM transaction_test;<br>+<span class="hljs-comment">------+</span><br>| id   |<br>+<span class="hljs-comment">------+</span><br>| 5    |<br>| 6    |<br>+<span class="hljs-comment">------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">BEGIN</span>;  <span class="hljs-comment"># 开始事务</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO transaction_test VALUE(7);<br>Query OK, 1 rows affected (0.00 sec)<br><br>mysql&gt; rollback;  # 回滚<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; SELECT * FROM transaction_test;  # 因为回滚所以数据没有插入<br>+<span class="hljs-comment">------+</span><br>| id   |<br>+<span class="hljs-comment">------+</span><br>| 5    |<br>| 6    |<br>+<span class="hljs-comment">------+</span><br>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高 MySQL 的检索速度。</p><p>打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。</p><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 <code>WHERE</code> 子句的条件)。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code>。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。</p><p>建立索引会占用磁盘空间的索引文件。</p><h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> indexName <span class="hljs-keyword">ON</span> table_name (column_name);<br></code></pre></td></tr></table></figure></p><p>如果是 <code>CHAR</code>，<code>VARCHAR</code> 类型，<code>length</code> 可以小于字段实际长度；如果是 <code>BLOB</code> 和 <code>TEXT</code> 类型，必须指定 <code>length</code>。</p><h3 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">table</span> tableName <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> indexName(columnName);<br></code></pre></td></tr></table></figure></p><h3 id="创建表的时候直接指定"><a href="#创建表的时候直接指定" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable(  <br><span class="hljs-keyword">ID</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-keyword">INDEX</span> [indexName] (username(<span class="hljs-keyword">length</span>))<br>);<br></code></pre></td></tr></table></figure></p><h3 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> [indexName] <span class="hljs-keyword">ON</span> mytable;<br></code></pre></td></tr></table></figure></p><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> indexName <span class="hljs-keyword">ON</span> mytable(username(<span class="hljs-keyword">length</span>));<br></code></pre></td></tr></table></figure></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">table</span> mytable <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> [indexName] (username(<span class="hljs-keyword">length</span>));<br></code></pre></td></tr></table></figure></p><h3 id="创建表的时候直接指定-1"><a href="#创建表的时候直接指定-1" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h3><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable(<br><span class="hljs-keyword">ID</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> [indexName] (username(<span class="hljs-keyword">length</span>))<br>);<br></code></pre></td></tr></table></figure></p><h2 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h2><p>有四种方式来添加数据表的索引：</p><ul><li><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list)</code>：该语句添加一个主键，这意味着索引值必须是唯一的，且不能为 <code>NULL</code>。</li><li><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list)</code>：这条语句创建索引的值必须是唯一的（除了 <code>NULL</code> 外，<code>NULL</code> 可能会出现多次）。</li><li><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list)</code>：添加普通索引，索引值可出现多次。</li><li><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list)</code>：该语句指定了索引为 <code>FULLTEXT</code>，用于全文索引。</li></ul><p>以下实例为在表中添加索引。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c);<br></code></pre></td></tr></table></figure></p><p>你还可以在 <code>ALTER</code> 命令中使用 <code>DROP</code> 子句来删除索引。尝试以下实例删除索引:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c;<br></code></pre></td></tr></table></figure></p><h2 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h2><p>主键作用于列上（可以一个列或多个列联合主键），添加主键索引时，你需要确保该主键默认不为空（<code>NOT NULL</code>）。实例如下：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;<br>mysql&gt; ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);<br></code></pre></td></tr></table></figure></p><p>你也可以使用 <code>ALTER</code> 命令删除主键：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure></p><p>删除主键时只需指定 <code>PRIMARY KEY</code>，但在删除索引时，你必须知道索引名。</p><h2 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h2><p>你可以使用 <code>SHOW INDEX</code> 命令来列出表中的相关的索引信息。可以通过添加 <code>\G</code> 来格式化输出信息。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW INDEX FROM table_name; \G<br></code></pre></td></tr></table></figure></p><h1 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h1><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，MySQL 会自动删除表并释放所有空间。</p><p>临时表在 MySQL 3.23 版本中添加，如果你的 MySQL 版本低于 3.23 版本就无法使用 MySQL 的临时表。不过现在一般很少有再使用这么低版本的 MySQL 数据库服务了。</p><p>MySQL 临时表只在当前连接可见，如果你使用 PHP 脚本来创建 MySQL 临时表，那每当 PHP 脚本执行完成后，该临时表也会自动销毁。</p><p>如果你使用了其他 MySQL 客户端程序连接 MySQL 数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p><h2 id="创建-MySQL-临时表"><a href="#创建-MySQL-临时表" class="headerlink" title="创建 MySQL 临时表"></a>创建 MySQL 临时表</h2><p>以下展示了使用 <code>TEMPORARY</code> 关键字创建 MySQL 临时表的简单实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (<br>    -&gt; product_name VARCHAR(50) NOT NULL,<br>    -&gt; total_sales DECIMAL(12, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; avg_unit_price DECIMAL(7, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; total_units_sold INT UNSIGNED NOT NULL DEFAULT 0<br>);<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO SalesSummary<br>    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)<br>    -&gt; VALUES<br>    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);<br><br>mysql&gt; SELECT * FROM SalesSummary;<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| product_name | total_sales | avg_unit_price | total_units_sold |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| cucumber     |      100.25 |          90.00 |                2 |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><p>用查询直接创建临时表：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TEMPORARY</span> <span class="hljs-keyword">TABLE</span> 临时表名 <span class="hljs-keyword">AS</span><br>(<br>    <span class="hljs-keyword">SELECT</span> *  <span class="hljs-keyword">FROM</span> 旧的表名<br>);<br></code></pre></td></tr></table></figure></p><p>当你使用 <code>SHOW TABLES</code> 命令显示数据表列表时，你将无法看到 <code>SalesSummary</code> 表。</p><p>如果你退出当前 MySQL 会话，再使用 <code>SELECT</code> 命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p><h2 id="删除-MySQL-临时表"><a href="#删除-MySQL-临时表" class="headerlink" title="删除 MySQL 临时表"></a>删除 MySQL 临时表</h2><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前 MySQL 会话使用 <code>DROP TABLE</code> 命令来手动删除临时表。</p><p>以下是手动删除临时表的实例：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (<br>    -&gt; product_name VARCHAR(50) NOT NULL,<br>    -&gt; total_sales DECIMAL(12, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; avg_unit_price DECIMAL(7, 2) NOT NULL DEFAULT 0.00,<br>    -&gt; total_units_sold INT UNSIGNED NOT NULL DEFAULT 0,<br>);<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; INSERT INTO SalesSummary<br>    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)<br>    -&gt; VALUES<br>    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);<br><br>mysql&gt; SELECT * FROM SalesSummary;<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| product_name | total_sales | avg_unit_price | total_units_sold |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>| cucumber     |      100.25 |          90.00 |                2 |<br>+<span class="hljs-comment">--------------+-------------+----------------+------------------+</span><br>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> SalesSummary;<br>mysql&gt;  SELECT * FROM SalesSummary;<br>ERROR 1146: Table &#x27;TestDB.SalesSummary&#x27; doesn&#x27;t exist<br></code></pre></td></tr></table></figure></p><h1 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h1><p>如果我们需要完全的复制 MySQL 的数据表，包括表的结构，索引，默认值等。如果仅仅使用<code>CREATE TABLE ... SELECT</code> 命令，是无法实现的。</p><p>完整的复制 MySQL 数据表的步骤如下：</p><ol><li>使用 <code>SHOW CREATE TABLE</code> 命令获取创建数据表（<code>CREATE TABLE</code>）语句，该语句包含了原数据表的结构，索引等。</li><li>复制以下命令显示的SQL语句，修改数据表名，并执行 SQL 语句，通过以上命令将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 <code>INSERT INTO ... SELECT</code> 语句来实现。</li></ol><p>尝试以下实例来复制表 <code>tbl</code>。</p><ol><li><p>获取数据表的完整结构。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SHOW CREATE TABLE tbl \G;<br>*************************** 1. row ***************************<br>      Table: tbl<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">Table</span>: <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`tbl`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> auto_increment,<br>  <span class="hljs-string">`title`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">`author`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">`submission_date`</span> <span class="hljs-built_in">date</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span>  (<span class="hljs-string">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`AUTHOR_INDEX`</span> (<span class="hljs-string">`author`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-keyword">ERROR</span>:<br><span class="hljs-keyword">No</span> <span class="hljs-keyword">query</span> specified<br></code></pre></td></tr></table></figure></p></li><li><p>修改SQL语句的数据表名，并执行SQL语句。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE `clone_tbl` (<br>  -&gt; `id` int(11) NOT NULL auto_increment,<br>  -&gt; `title` varchar(100) NOT NULL default &#x27;&#x27;,<br>  -&gt; `author` varchar(40) NOT NULL default &#x27;&#x27;,<br>  -&gt; `submission_date` date default NULL,<br>  -&gt; PRIMARY KEY  (`id`),<br>  -&gt; UNIQUE KEY `AUTHOR_INDEX` (`author`)<br>  -&gt; ) ENGINE=InnoDB;<br>Query OK, 0 rows affected (1.80 sec)<br></code></pre></td></tr></table></figure></p></li><li><p>执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。 如果你想拷贝数据表的数据你可以使用 INSERT INTO... SELECT 语句来实现。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT INTO clone_tbl (id,<br>    -&gt;                        title,<br>    -&gt;                        author,<br>    -&gt;                        submission_date)<br>    -&gt; SELECT id,title, author, submission_date<br>    -&gt; FROM tbl;<br>Query OK, 3 rows affected (0.07 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure></p><p>执行以上步骤后，你将完整的复制表，包括表结构及表数据。</p></li></ol><p><strong>另一种完整复制表的方法:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> targetTable <span class="hljs-keyword">LIKE</span> sourceTable;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> targetTable <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> sourceTable;<br></code></pre></td></tr></table></figure></p><p><strong>可以拷贝一个表中其中的一些字段:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>);<br></code></pre></td></tr></table></figure></p><p><strong>可以将新建的表的字段改名:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, username <span class="hljs-keyword">AS</span> uname, <span class="hljs-keyword">password</span> <span class="hljs-keyword">AS</span> pass <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>);<br></code></pre></td></tr></table></figure></p><p><strong>可以拷贝一部分数据:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">LEFT</span>(username, <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;s&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p><strong>可以在创建表的同时定义表中的字段信息:</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> newadmin (<span class="hljs-keyword">id</span> <span class="hljs-built_in">INTEGER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>) <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>);<br></code></pre></td></tr></table></figure></p><h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><ul><li>查询结果信息：<code>SELECT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句影响的记录数。</li><li>数据库和数据表的信息：包含了数据库及数据表的结构信息。</li><li>MySQL 服务器信息：包含了数据库服务器的当前状态，版本号等。</li></ul><p>在 MySQL 的命令提示符中，我们可以很容易的获取以上服务器信息。</p><h2 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h2><p>以下命令语句可以在 MySQL 的命令提示符使用，也可以在脚本中使用。</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">SELECT VERSION( )</td><td style="text-align:center">服务器版本信息</td></tr><tr><td style="text-align:center">SELECT DATABASE( )</td><td style="text-align:center">当前数据库名（或者返回空）</td></tr><tr><td style="text-align:center">SELECT USER( )</td><td style="text-align:center">当前用户名</td></tr><tr><td style="text-align:center">SHOW STATUS</td><td style="text-align:center">服务器状态</td></tr><tr><td style="text-align:center">SHOW VARIABLES</td><td style="text-align:center">服务器配置变量</td></tr></tbody></table></div><h1 id="序列使用"><a href="#序列使用" class="headerlink" title="序列使用"></a>序列使用</h1><p>MySQL 序列是一组整数：<code>1, 2, 3, ...</code>，由于一张数据表只能有一个字段自增主键，如果你想实现其他字段也实现自动增加，就可以使用 MySQL 序列来实现。</p><h2 id="使用-AUTO-INCREMENT"><a href="#使用-AUTO-INCREMENT" class="headerlink" title="使用 AUTO_INCREMENT"></a>使用 AUTO_INCREMENT</h2><p>MySQL 中最简单使用序列的方法就是使用 <code>AUTO_INCREMENT</code> 来定义列。</p><p>以下实例中创建了数据表 <code>insect</code>，<code>insect</code> 表中 <code>id</code> 无需指定值可实现自动增长。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE insect<br>    -&gt; (<br>    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,<br>    -&gt; PRIMARY KEY (id),<br>    -&gt; name VARCHAR(30) NOT NULL, # type of insect<br>    -&gt; date DATE NOT NULL, # date collected<br>    -&gt; origin VARCHAR(30) NOT NULL # where collected<br>);<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; INSERT INTO insect (id, name, date, origin) VALUES<br>    -&gt; (NULL, &#x27;housefly&#x27;, &#x27;2001-09-10&#x27;, &#x27;kitchen&#x27;),<br>    -&gt; (NULL, &#x27;millipede&#x27;, &#x27;2001-09-10&#x27;, &#x27;driveway&#x27;),<br>    -&gt; (NULL, &#x27;grasshopper&#x27;, &#x27;2001-09-10&#x27;, &#x27;front yard&#x27;);<br>Query OK, 3 rows affected (0.02 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br><br>mysql&gt; SELECT * FROM insect ORDER BY id;<br>+<span class="hljs-comment">----+-------------+------------+------------+</span><br>| id | name        | date       | origin     |<br>+<span class="hljs-comment">----+-------------+------------+------------+</span><br>|  1 | housefly    | 2001-09-10 | kitchen    |<br>|  2 | millipede   | 2001-09-10 | driveway   |<br>|  3 | grasshopper | 2001-09-10 | front yard |<br>+<span class="hljs-comment">----+-------------+------------+------------+</span><br>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></p><h2 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h2><p>在 MySQL 的客户端中你可以使用 SQL 中的 <code>LAST_INSERT_ID( )</code> 函数来获取最后的插入表中的自增列的值。</p><h2 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h2><p>如果你删除了数据表中的多条记录，并希望对剩下数据的 <code>AUTO_INCREMENT</code> 列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。操作如下所示：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE insect DROP id;<br>mysql&gt; ALTER TABLE insect<br>    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,<br>    -&gt; ADD PRIMARY KEY (id);<br></code></pre></td></tr></table></figure></p><h2 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h2><p>一般情况下序列的开始值为 1，但如果你需要指定一个开始值 100，那我们可以通过以下语句来实现：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE insect<br>    -&gt; (<br>    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,<br>    -&gt; PRIMARY KEY (id),<br>    -&gt; name VARCHAR(30) NOT NULL,<br>    -&gt; date DATE NOT NULL,<br>    -&gt; origin VARCHAR(30) NOT NULL<br>)engine=innodb auto_increment=100 charset=utf8;<br></code></pre></td></tr></table></figure></p><p>或者你也可以在表创建成功后，通过以下语句来实现：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;<br></code></pre></td></tr></table></figure></p><h1 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h1><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p><p>本章节我们将为大家介绍如何防止数据表出现重复数据及如何删除数据表中的重复数据。</p><h2 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h2><p>你可以在 MySQL 数据表中设置指定的字段为 <code>PRIMARY KEY</code>（主键） 或者 <code>UNIQUE</code>（唯一） 索引来保证数据的唯一性。</p><p>让我们尝试一个实例：下表中无索引及主键，所以该表允许出现多条重复记录。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person_tbl<br>(<br>    first_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>),<br>    last_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>),<br>    sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">10</span>)<br>);<br></code></pre></td></tr></table></figure></p><p>如果你想设置表中字段 <code>first_name</code>，<code>last_name</code> 数据不能重复，你可以设置双主键模式来设置数据的唯一性，如果你设置了双主键，那么那个键的默认值不能为 <code>NULL</code>，可设置为 <code>NOT NULL</code>。如下所示：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person_tbl<br>(<br>   first_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   last_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">10</span>),<br>   PRIMARY <span class="hljs-keyword">KEY</span> (last_name, first_name)<br>);<br></code></pre></td></tr></table></figure></p><p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功，并抛出错误。</p><p><code>INSERT IGNORE INTO</code> 与 <code>INSERT INTO</code> 的区别就是 <code>INSERT IGNORE INTO</code> 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p><p>以下实例使用了 <code>INSERT IGNORE INTO</code>，执行后不会出错，也不会向数据表中插入重复数据：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; INSERT IGNORE INTO person_tbl (last_name, first_name)<br>    -&gt; VALUES( &#x27;Jay&#x27;, &#x27;Thomas&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br>mysql&gt; INSERT IGNORE INTO person_tbl (last_name, first_name)<br>    -&gt; VALUES( &#x27;Jay&#x27;, &#x27;Thomas&#x27;);<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure></p><p><code>INSERT IGNORE INTO</code> 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。而 <code>REPLACE INTO</code> 如果存在 <code>PRIMARY</code> 或 <code>UNIQUE</code> 相同的记录，则先删除掉。再插入新记录。</p><p>另一种设置数据的唯一性方法是添加一个 <code>UNIQUE</code> 索引，如下所示：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person_tbl<br>(<br>   first_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   last_name <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>   sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">10</span>),<br>   <span class="hljs-keyword">UNIQUE</span> (last_name, first_name)<br>);<br></code></pre></td></tr></table></figure></p><h2 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h2><p>以下我们将统计表中 <code>first_name</code> 和 <code>last_name</code> 的重复记录数：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name<br>    -&gt; FROM person_tbl<br>    -&gt; GROUP BY last_name, first_name<br>    -&gt; HAVING repetitions &gt; 1;<br></code></pre></td></tr></table></figure></p><p>以上查询语句将返回 <code>person_tbl</code> 表中重复的记录数。一般情况下，查询重复的值，请执行以下操作：</p><ul><li>确定哪一列包含的值可能会重复。</li><li>在列选择列表使用 <code>COUNT(*)</code> 列出的那些列。</li><li>在 <code>GROUP BY</code> 子句中列出的列。</li><li><code>HAVING</code> 子句设置重复数大于1。</li></ul><h2 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h2><p>如果你需要读取不重复的数据可以在 <code>SELECT</code> 语句中使用 <code>DISTINCT</code> 关键字来过滤重复数据。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT DISTINCT last_name, first_name<br>    -&gt; FROM person_tbl;<br></code></pre></td></tr></table></figure></p><p>你也可以使用 <code>GROUP BY</code> 来读取数据表中不重复的数据：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT last_name, first_name<br>    -&gt; FROM person_tbl<br>    -&gt; GROUP BY (last_name, first_name);<br></code></pre></td></tr></table></figure></p><h2 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h2><p>如果你想删除数据表中的重复数据，你可以使用以下的 SQL 语句：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE TABLE tmp<br>    -&gt; SELECT last_name, first_name, sex<br>    -&gt; FROM person_tbl<br>    -&gt; GROUP BY (last_name, first_name, sex);<br>mysql&gt; DROP TABLE person_tbl;<br>mysql&gt; ALTER TABLE tmp RENAME TO person_tbl;<br></code></pre></td></tr></table></figure></p><p>当然你也可以在数据表中添加 <code>INDEX</code>（索引） 和 <code>PRIMARY KEY</code>（主键）这种简单的方法来删除表中的重复记录。方法如下：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; ALTER IGNORE TABLE person_tbl<br>    -&gt; ADD PRIMARY KEY (last_name, first_name);<br></code></pre></td></tr></table></figure></p><h1 id="及-SQL-注入"><a href="#及-SQL-注入" class="headerlink" title="及 SQL 注入"></a>及 SQL 注入</h1><p>如果您通过网页获取用户输入的数据并将其插入一个 MySQL 数据库，那么就有可能发生 SQL 注入安全的问题。</p><p>本章节将为大家介绍如何防止 SQL 注入，并通过脚本来过滤 SQL 中注入的字符。</p><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p><p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p><p>以下实例中，输入的用户名必须为字母、数字及下划线的组合，且用户名长度为 8 到 20 个字符之间：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/^\w&#123;8, 20&#125;$/&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$matches</span>))<br>&#123;<br>   <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM users </span><br><span class="hljs-string">                          WHERE username=<span class="hljs-variable">$matches</span>[0]&quot;</span>);<br>&#125;<br> <span class="hljs-keyword">else</span> <br>&#123;<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;username 输入异常&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>让我们看下在没有过滤特殊字符时，出现的 SQL 情况：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 设定 $name 中插入了我们不需要的SQL语句</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;Qadir&#x27;; DELETE FROM users;&quot;</span>;<br>mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM users WHERE name=&#x27;<span class="hljs-subst">&#123;$name&#125;</span>&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure></p><p>以上的注入语句中，我们没有对 <code>$name</code> 的变量进行过滤，<code>$name</code> 中插入了我们不需要的 SQL 语句，将删除 <code>users</code> 表中的所有数据。</p><p>在 PHP 中的 <code>mysqli_query()</code> 是不允许执行多个 SQL 语句的，但是在 <code>SQLite</code> 和 <code>PostgreSQL</code> 是可以同时执行多条 SQL 语句的，所以我们对这些用户的数据需要进行严格的验证。</p><p><strong>防止SQL注入，我们需要注意以下几个要点：</strong></p><ol><li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双&quot;-&quot;进行转换等。</li><li>永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>SQL 注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用 SQL 注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN 等。采用 MDCSOFT-IPS 可以有效的防御 SQL 注入，XSS 攻击等。</li></ol><h2 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h2><p>在脚本语言，如 Perl 和 PHP 你可以对用户输入的数据进行转义从而来防止 SQL 注入。</p><p>PHP 的 MySQL 扩展提供了 <code>mysqli_real_escape_string()</code> 函数来转义特殊的输入字符。</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (get_magic_quotes_gpc()) <br>&#123;<br>  <span class="hljs-variable">$name</span> = stripslashes(<span class="hljs-variable">$name</span>);<br>&#125;<br><span class="hljs-variable">$name</span> = mysqli_real_escape_string(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$name</span>);<br> mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM users WHERE name=&#x27;<span class="hljs-subst">&#123;$name&#125;</span>&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure></p><h2 id="LIKE-语句中的注入"><a href="#LIKE-语句中的注入" class="headerlink" title="LIKE 语句中的注入"></a>LIKE 语句中的注入</h2><p><code>LIKE</code> 查询时，如果用户输入的值有 <code>_</code> 和 <code>%</code>，则会出现这种情况：用户本来只是想查询 <code>abcd_</code>，查询结果中却有 <code>abcd_</code>、<code>abcde</code>、<code>abcdf</code> 等等；用户要查询 <code>30%</code>（注：百分之三十）时也会出现问题。</p><p>在PHP脚本中我们可以使用 <code>addcslashes()</code> 函数来处理以上情况，如下实例：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sub</span> = addcslashes(mysqli_real_escape_string(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;%something_&quot;</span>), <span class="hljs-string">&quot;%_&quot;</span>);<br><span class="hljs-comment">// $sub == \%something\_</span><br> mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;SELECT * FROM messages WHERE subject LIKE &#x27;<span class="hljs-subst">&#123;$sub&#125;</span>%&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure></p><p><code>addcslashes()</code> 函数在指定的字符前添加反斜杠。</p><p>语法格式:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">addcslashes(<span class="hljs-keyword">string</span>, characters)<br></code></pre></td></tr></table></figure></p><h1 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h1><p>MySQL 中你可以使用 <code>SELECT...INTO OUTFILE</code> 语句来简单的导出数据到文本文件上。</p><h2 id="使用-SELECT-INTO-OUTFILE-语句导出数据"><a href="#使用-SELECT-INTO-OUTFILE-语句导出数据" class="headerlink" title="使用 SELECT ... INTO OUTFILE 语句导出数据"></a>使用 SELECT ... INTO OUTFILE 语句导出数据</h2><p>以下实例中我们将数据表 <code>tbl</code> 数据导出到 <code>/tmp/TestDB.txt</code> 文件中:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM tbl <br>    -&gt; INTO OUTFILE &#x27;/tmp/TestDB.txt&#x27;;<br></code></pre></td></tr></table></figure></p><p>你可以通过命令选项来设置数据输出的指定格式，以下实例为导出 <code>CSV</code> 格式：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT * FROM passwd INTO OUTFILE &#x27;/tmp/TestDB.txt&#x27;<br>    -&gt; FIELDS TERMINATED BY &#x27;,&#x27; ENCLOSED BY &#x27;&quot;&#x27;<br>    -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;<br></code></pre></td></tr></table></figure></p><p>在下面的例子中，生成一个文件，各值用逗号隔开。这种格式可以被许多程序使用。</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a, b, a+b <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">OUTFILE</span> <span class="hljs-string">&#x27;/tmp/result.text&#x27;</span><br><span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-keyword">OPTIONALLY</span> <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span><br><span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\n&#x27;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span>;<br></code></pre></td></tr></table></figure></p><p><strong><code>SELECT ... INTO OUTFILE</code> 语句有以下属性:</strong></p><ul><li><code>LOAD DATA INFILE</code> 是 <code>SELECT ... INTO OUTFILE</code> 的逆操作，<code>SELECT</code> 句法。为了将一个数据库的数据写入一个文件，使用 <code>SELECT ... INTO OUTFILE</code>；为了将文件读回数据库，使用 <code>LOAD DATA INFILE</code>。</li><li><code>SELECT...INTO OUTFILE &#39;file_name&#39;</code> 形式的 <code>SELECT</code> 可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有 <code>FILE</code> 权限，才能使用此语法。</li><li>输出不能是一个已存在的文件。防止文件数据被篡改。</li><li>你需要有一个登陆服务器的账号来检索文件。否则 <code>SELECT ... INTO OUTFILE</code> 不会起任何作用。</li><li>在 <code>UNIX</code> 中，该文件被创建后是可读的，权限由 MySQL 服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除。</li></ul><h2 id="导出表作为原始数据"><a href="#导出表作为原始数据" class="headerlink" title="导出表作为原始数据"></a>导出表作为原始数据</h2><p><code>mysqldump</code> 是 MySQL 用于转存储数据库的实用程序。它主要产生一个 SQL 脚本，其中包含从头重新创建数据库所必需的命令 <code>CREATE TABLE INSERT</code> 等。</p><p>使用 <code>mysqldump</code> 导出数据需要使用 <code>--tab</code> 选项来指定导出文件指定的目录，该目标必须是可写的。</p><p>以下实例将数据表 <code>tbl</code> 导出到 <code>/tmp</code> 目录中：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p --no-create-info --tab=/tmp TestDB tbl<br>password ******<br></code></pre></td></tr></table></figure></p><h2 id="导出-SQL-格式的数据"><a href="#导出-SQL-格式的数据" class="headerlink" title="导出 SQL 格式的数据"></a>导出 SQL 格式的数据</h2><p>导出 SQL 格式的数据到指定文件，如下所示：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p TestDB tbl &gt; dump.txt<br>password ******<br></code></pre></td></tr></table></figure></p><p>以上命令创建的文件内容如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL dump 8.23</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Host: localhost    Database: TestDB</span><br><span class="hljs-comment">---------------------------------------------------------</span><br><span class="hljs-comment">-- Server version       3.23.58</span><br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Table structure for table `tbl`</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tbl (<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> auto_increment,<br>  title <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  author <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  submission_date <span class="hljs-built_in">date</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span>  (<span class="hljs-keyword">id</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> AUTHOR_INDEX (author)<br>) <span class="hljs-keyword">TYPE</span>=MyISAM;<br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Dumping data for table `tbl`</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <br>       <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Learn PHP&#x27;</span>,<span class="hljs-string">&#x27;John Poul&#x27;</span>,<span class="hljs-string">&#x27;2007-05-24&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <br>       <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Learn MySQL&#x27;</span>,<span class="hljs-string">&#x27;Abdul S&#x27;</span>,<span class="hljs-string">&#x27;2007-05-24&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <br>       <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;JAVA Tutorial&#x27;</span>,<span class="hljs-string">&#x27;Sanjay&#x27;</span>,<span class="hljs-string">&#x27;2007-05-06&#x27;</span>);<br></code></pre></td></tr></table></figure></p><p>如果你需要导出整个数据库的数据，可以使用以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p TestDB &gt; database_dump.txt<br>password ******<br></code></pre></td></tr></table></figure></p><p>如果需要备份所有数据库，可以使用以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p --all-databases &gt; database_dump.txt<br>password ******<br></code></pre></td></tr></table></figure></p><p><code>--all-databases</code> 选项在 MySQL 3.23.12 及以后版本加入。</p><p>该方法可用于实现数据库的备份策略。</p><h2 id="将数据表及数据库拷贝至其他主机"><a href="#将数据表及数据库拷贝至其他主机" class="headerlink" title="将数据表及数据库拷贝至其他主机"></a>将数据表及数据库拷贝至其他主机</h2><p>如果你需要将数据拷贝至其他的 MySQL 服务器上, 你可以在 <code>mysqldump</code> 命令中指定数据库名及数据表。</p><p>在源主机上执行以下命令，将数据备份至 <code>dump.txt</code> 文件中:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p database_name table_name &gt; dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p>如果完整备份数据库，则无需使用特定的表名称。</p><p>如果你需要将备份的数据库导入到 MySQL 服务器中，可以使用以下命令，使用以下命令你需要确认数据库已经创建：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysql -u root -p database_name &lt; dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p>你也可以使用以下命令将导出的数据直接导入到远程的服务器上，但请确保两台服务器是相通的，是可以相互访问的：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqldump -u root -p database_name \<br>       | mysql -h other-host.com database_name<br></code></pre></td></tr></table></figure></p><p>以上命令中使用了管道来将导出的数据导入到指定的远程主机上。</p><h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><h2 id="mysql-命令导入"><a href="#mysql-命令导入" class="headerlink" title="mysql 命令导入"></a>mysql 命令导入</h2><p>使用 <code>mysql</code> 命令导入语法格式为：</p><p><code>mysql -u用户名 -p密码 &lt; 要导入的数据库数据(TestDB.sql)</code></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysql -uroot -p123456 &lt; TestDB.sql<br></code></pre></td></tr></table></figure></p><p>以上命令将将备份的整个数据库 <code>TestDB.sql</code> 导入。</p><h2 id="source-命令导入"><a href="#source-命令导入" class="headerlink" title="source 命令导入"></a>source 命令导入</h2><p><code>source</code> 命令导入数据库需要先登录到数库终端：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; CREATE DATABASE abc;      # 创建数据库<br>mysql&gt; USE abc;                  # 使用已创建的数据库 <br>mysql&gt; SET names utf8;           # 设置编码<br>mysql&gt; source /home/abc/abc.sql  # 导入备份数据库<br></code></pre></td></tr></table></figure></p><h2 id="使用-LOAD-DATA-导入数据"><a href="#使用-LOAD-DATA-导入数据" class="headerlink" title="使用 LOAD DATA 导入数据"></a>使用 LOAD DATA 导入数据</h2><p>MySQL 中提供了<code>LOAD DATA INFILE</code> 语句来插入数据。 以下实例中将从当前目录中读取文件 <code>dump.txt</code>，将该文件中的数据插入到当前数据库的 <code>mytbl</code> 表中。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl;<br></code></pre></td></tr></table></figure></p><p>如果指定 <code>LOCAL</code> 关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p><p>你能明确地在 <code>LOAD DATA</code> 语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。</p><p>两个命令的 <code>FIELDS</code> 和 <code>LINES</code> 子句的语法是一样的。两个子句都是可选的，但是如果两个同时被指定，<code>FIELDS</code> 子句必须出现在 <code>LINES</code> 子句之前。</p><p>如果用户指定一个 <code>FIELDS</code> 子句，它的子句（<code>TERMINATED BY</code>、<code>[OPTIONALLY] ENCLOSED BY</code> 和 <code>ESCAPED BY</code>）也是可选的，不过，用户必须至少指定它们中的一个。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl<br>    -&gt; FIELDS TERMINATED BY &#x27;:&#x27;<br>    -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;<br></code></pre></td></tr></table></figure></p><p><code>LOAD DATA</code> 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。</p><p>如，在数据文件中的列顺序是 <code>a, b, c</code>，但在插入表的列顺序为 <code>b, c, a</code>，则数据导入语法如下：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; <br>    -&gt; INTO TABLE mytbl (b, c, a);<br></code></pre></td></tr></table></figure></p><h2 id="使用-mysqlimport-导入数据"><a href="#使用-mysqlimport-导入数据" class="headerlink" title="使用 mysqlimport 导入数据"></a>使用 mysqlimport 导入数据</h2><p><code>mysqlimport</code> 客户端提供了 <code>LOAD DATA INFILEQL</code> 语句的一个命令行接口。<code>mysqlimport</code> 的大多数选项直接对应 <code>LOAD DATA INFILE</code> 子句。</p><p>从文件 <code>dump.txt</code> 中将数据导入到 <code>mytbl</code> 数据表中, 可以使用以下命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqlimport -u root -p --<span class="hljs-built_in">local</span> mytbl dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p><code>mysqlimport</code> 命令可以指定选项来设置指定格式,命令语句格式如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqlimport -u root -p --<span class="hljs-built_in">local</span> --fields-terminated-by=<span class="hljs-string">&quot;:&quot;</span> \<br>   --lines-terminated-by=<span class="hljs-string">&quot;\r\n&quot;</span>  mytbl dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p><code>mysqlimport</code> 语句中使用 <code>--columns</code> 选项来设置列的顺序：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysqlimport -u root -p --<span class="hljs-built_in">local</span> --columns=b,c,a \<br>    mytbl dump.txt<br>password *****<br></code></pre></td></tr></table></figure></p><p><strong>mysqlimport 的常用选项介绍</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">-d or --delete</td><td style="text-align:center">新数据导入数据表中之前删除数据数据表中的所有信息</td></tr><tr><td style="text-align:center">-f or --force</td><td style="text-align:center">不管是否遇到错误，mysqlimport 将强制继续插入数据</td></tr><tr><td style="text-align:center">-i or --ignore</td><td style="text-align:center">mysqlimport 跳过或者忽略那些有相同唯一关键字的行，<br>导入文件中的数据将被忽略。</td></tr><tr><td style="text-align:center">-l or -lock-tables</td><td style="text-align:center">数据被插入之前锁住表，这样就防止了在更新数据库时，<br>用户的查询和更新受到影响。</td></tr><tr><td style="text-align:center">-r or -replace</td><td style="text-align:center">这个选项与 -i 选项的作用相反；<br>此选项将替代表中有相同唯一关键字的记录。</td></tr><tr><td style="text-align:center">--fields -enclosed -by=char</td><td style="text-align:center">指定文本文件中数据的记录时以什么括起的，<br>很多情况下数据以双引号括起。<br>默认的情况下数据是没有被字符括起的。</td></tr><tr><td style="text-align:center">--fields -terminated -by=char</td><td style="text-align:center">指定各个数据的值之间的分隔符，在句号分隔的文件中，分隔符是句号。<br>可以用此选项指定数据之间的分隔符。默认的分隔符是跳格符（Tab）</td></tr><tr><td style="text-align:center">--lines -terminated -by=str</td><td style="text-align:center">此选项指定文本文件中行与行之间数据的分隔字符串或者字符。<br>默认的情况下 mysqlimport 以 newline 为行分隔符。<br>您可以选择用一个字符串来替代一个单个的字符： 一个新行或者一个回车。</td></tr></tbody></table></div><p><code>mysqlimport</code> 命令常用的选项还有 <code>-v</code> 显示版本（version），<code>-p</code> 提示输入密码（password）等。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">ASCII(s)</td><td style="text-align:center">返回字符串 s 的第一个字符的 ASCII 码。</td><td style="text-align:center">返回 CustomerName 字段第一个字母的 ASCII 码： <br> <code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td></tr><tr><td style="text-align:center">CHAR_LENGTH(s)</td><td style="text-align:center">返回字符串 s 的字符数</td><td style="text-align:center">返回字符串 GOOGLE 的字符数： <br> <code>SELECT CHAR_LENGTH(&quot;GOOGLE&quot;) AS LengthOfString;</code></td></tr><tr><td style="text-align:center">CHARACTER_LENGTH(s)</td><td style="text-align:center">返回字符串 s 的字符数</td><td style="text-align:center">返回字符串 GOOGLE 的字符数： <br> <code>SELECT CHARACTER_LENGTH(&quot;GOOGLE&quot;) AS LengthOfString;</code></td></tr><tr><td style="text-align:center">CONCAT(s1, s2 ... sn)</td><td style="text-align:center">字符串 s1, s2 等多个字符串合并为一个字符串</td><td style="text-align:center">合并多个字符串： <br> <code>SELECT CONCAT(&quot;SQL &quot;, &quot;Baidu &quot;, &quot;Google &quot;, &quot;Facebook&quot;) AS ConcatenatedString;</code></td></tr><tr><td style="text-align:center">CONCAT_WS(x, s1, s2 ... sn)</td><td style="text-align:center">同 CONCAT(s1, s2, ...) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td><td style="text-align:center">合并多个字符串，并添加分隔符s： <br> <code>SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString;</code></td></tr><tr><td style="text-align:center">FIELD(s, s1, s2 ...)</td><td style="text-align:center">返回第一个字符串 s 在字符串列表(s1, s2 ...)中的位置</td><td style="text-align:center">返回字符串 c 在列表值中的位置： <br> <code>SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);  -- 3</code></td></tr><tr><td style="text-align:center">FIND_IN_SET(s1, s2)</td><td style="text-align:center">返回在字符串s2中与s1匹配的字符串的位置</td><td style="text-align:center">返回字符串 c 在指定字符串中的位置： <br> <code>SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;);  -- 5</code></td></tr><tr><td style="text-align:center">FORMAT(x, n)</td><td style="text-align:center">函数可以将数字 x 进行格式化 &quot;#,###.##&quot;, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td><td style="text-align:center">格式化数字 &quot;#,###.##&quot; 形式： <br> <code>SELECT FORMAT(250500.5634, 2);  -- 250,500.56</code></td></tr><tr><td style="text-align:center">INSERT(s1, x, len, s2)</td><td style="text-align:center">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td><td style="text-align:center">从字符串第一个位置开始的 6 个字符替换为 baidu： <br> <code>SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;baidu&quot;);  -- baidu.com</code></td></tr><tr><td style="text-align:center">LOCATE(s1, s)</td><td style="text-align:center">从字符串 s 中获取 s1 的开始位置</td><td style="text-align:center">获取 b 在字符串 abc 中的位置： <br> <code>SELECT LOCATE(&#39;st&#39;, &#39;myteststring&#39;);  -- 5</code> <br> 返回字符串 abc 中 b 的位置： <br> <code>SELECT LOCATE(&#39;b&#39;, &#39;abc&#39;);  -- 2</code></td></tr><tr><td style="text-align:center">LCASE(s)</td><td style="text-align:center">将字符串 s 的所有字母变成小写字母</td><td style="text-align:center">字符串 GOOGLE 转换为小写： <br> <code>SELECT LCASE(&#39;GOOGLE&#39;);  -- google</code></td></tr><tr><td style="text-align:center">LEFT(s, n)</td><td style="text-align:center">返回字符串 s 的前 n 个字符</td><td style="text-align:center">返回字符串 GOOGLE 中的前两个字符： <br> <code>SELECT LEFT(&#39;GOOGLE&#39;, 2);  -- GO</code></td></tr><tr><td style="text-align:center">LOWER(s)</td><td style="text-align:center">将字符串 s 的所有字母变成小写字母：</td><td style="text-align:center">字符串 GOOGLE 转换为小写： <br> <code>SELECT LOWER(&#39;GOOGLE&#39;);  -- google</code></td></tr><tr><td style="text-align:center">LPAD(s1, len, s2)</td><td style="text-align:center">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td><td style="text-align:center">将字符串 xx 填充到 abc 字符串的开始处： <br> <code>SELECT LPAD(&#39;abc&#39;, 5,&#39;xx&#39;);  -- xxabc</code></td></tr><tr><td style="text-align:center">LTRIM(s)</td><td style="text-align:center">去掉字符串 s 开始处的空格</td><td style="text-align:center">去掉字符串 GOOGLE 开始处的空格： <br> <code>SELECT LTRIM(&quot;    GOOGLE&quot;) AS LeftTrimmedString;-- GOOGLE</code></td></tr><tr><td style="text-align:center">MID(s, n, len)</td><td style="text-align:center">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s, n, len)</td><td style="text-align:center">从字符串 GOOGLE 中的第 2 个位置截取 3个 字符： <br> <code>SELECT MID(&quot;GOOGLE&quot;, 2, 3) AS ExtractString;  -- OOG</code></td></tr><tr><td style="text-align:center">POSITION(s1 IN s)</td><td style="text-align:center">从字符串 s 中获取 s1 的开始位置</td><td style="text-align:center">返回字符串 abc 中 b 的位置： <br> <code>SELECT POSITION(&#39;b&#39; in &#39;abc&#39;);  -- 2</code></td></tr><tr><td style="text-align:center">REPEAT(s, n)</td><td style="text-align:center">将字符串 s 重复 n 次</td><td style="text-align:center">将字符串 GOOGLE 重复三次： <br> <code>SELECT REPEAT(&#39;GOOGLE&#39;, 3);  -- GOOGLEGOOGLEGOOGLE</code></td></tr><tr><td style="text-align:center">REPLACE(s, s1, s2)</td><td style="text-align:center">将字符串 s2 替代字符串 s 中的字符串 s1</td><td style="text-align:center">将字符串 abc 中的字符 a 替换为字符 x： <br> <code>SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;x&#39;);  -- xbc</code></td></tr><tr><td style="text-align:center">REVERSE(s)</td><td style="text-align:center">将字符串s的顺序反过来</td><td style="text-align:center">将字符串 abc 的顺序反过来： <br> <code>SELECT REVERSE(&#39;abc&#39;);  -- cba</code></td></tr><tr><td style="text-align:center">RIGHT(s, n)</td><td style="text-align:center">返回字符串 s 的后 n 个字符</td><td style="text-align:center">返回字符串 GOOGLE 的后两个字符： <br> <code>SELECT RIGHT(&#39;GOOGLE&#39;, 2);  -- LE</code></td></tr><tr><td style="text-align:center">RPAD(s1, len, s2)</td><td style="text-align:center">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td><td style="text-align:center">将字符串 xx 填充到 abc 字符串的结尾处： <br> <code>SELECT RPAD(&#39;abc&#39;, 5,&#39;xx&#39;);  -- abcxx</code></td></tr><tr><td style="text-align:center">RTRIM(s)</td><td style="text-align:center">去掉字符串 s 结尾处的空格</td><td style="text-align:center">去掉字符串 GOOGLE 的末尾空格： <br> <code>SELECT RTRIM(&quot;GOOGLE     &quot;) AS RightTrimmedString;  -- GOOGLE</code></td></tr><tr><td style="text-align:center">SPACE(n)</td><td style="text-align:center">返回 n 个空格</td><td style="text-align:center">返回 10 个空格： <br> <code>SELECT SPACE(10);</code></td></tr><tr><td style="text-align:center">STRCMP(s1, s2)</td><td style="text-align:center">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td><td style="text-align:center">比较字符串： <br> <code>SELECT STRCMP(&quot;GOOGLE&quot;, &quot;GOOGLE&quot;);  -- 0</code></td></tr><tr><td style="text-align:center">SUBSTR(s, start, length)</td><td style="text-align:center">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td style="text-align:center">从字符串 GOOGLE 中的第 2 个位置截取 3 个 字符： <br> <code>SELECT SUBSTR(&quot;GOOGLE&quot;, 2, 3) AS ExtractString;  -- OOG</code></td></tr><tr><td style="text-align:center">SUBSTRING(s, start, length)</td><td style="text-align:center">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td style="text-align:center">从字符串 GOOGLE 中的第 2 个位置截取 3 个字符： <br> <code>SELECT SUBSTRING(&quot;GOOGLE&quot;, 2, 3) AS ExtractString;  -- OOG</code></td></tr><tr><td style="text-align:center">SUBSTRING_INDEX(s, delimiter, number)</td><td style="text-align:center">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 <br> 如果 number 是正数，返回第 number 个字符左边的字符串。 <br> 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td><td style="text-align:center"><code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;, &#39;*&#39;, 1);  -- a</code> <br> <code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;, &#39;*&#39;, -1);  -- b</code> <br> <code>SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;a*b*c*d*e&#39;, &#39;*&#39;, 3), &#39;*&#39;, -1);  -- c</code></td></tr><tr><td style="text-align:center">TRIM(s)</td><td style="text-align:center">去掉字符串 s 开始和结尾处的空格</td><td style="text-align:center">去掉字符串 GOOGLE 的首尾空格： <br> <code>SELECT TRIM(&#39;    GOOGLE    &#39;) AS TrimmedString;</code></td></tr><tr><td style="text-align:center">UCASE(s)</td><td style="text-align:center">将字符串转换为大写</td><td style="text-align:center">将字符串 google 转换为大写： <br> <code>SELECT UCASE(&quot;google&quot;);  -- GOOGLE</code></td></tr><tr><td style="text-align:center">UPPER(s)</td><td style="text-align:center">将字符串转换为大写</td><td style="text-align:center">将字符串 google 转换为大写： <br> <code>SELECT UPPER(&quot;google&quot;);  -- GOOGLE</code></td></tr></tbody></table></div><h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">ABS(x)</td><td style="text-align:center">返回 x 的绝对值</td><td style="text-align:center"><code>SELECT ABS(-1);  -- 返回1</code></td></tr><tr><td style="text-align:center">ACOS(x)</td><td style="text-align:center">求 x 的反余弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT ACOS(0.25);</code></td></tr><tr><td style="text-align:center">ASIN(x)</td><td style="text-align:center">求反正弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT ASIN(0.25);</code></td></tr><tr><td style="text-align:center">ATAN(x)</td><td style="text-align:center">求反正切值（参数是弧度）</td><td style="text-align:center"><code>SELECT ATAN(2.5);</code></td></tr><tr><td style="text-align:center">ATAN2(n, m)</td><td style="text-align:center">求反正切值（参数是弧度）</td><td style="text-align:center"><code>SELECT ATAN2(-0.8, 2);</code></td></tr><tr><td style="text-align:center">AVG(expression)</td><td style="text-align:center">返回一个表达式的平均值，expression 是一个字段</td><td style="text-align:center">返回 Products 表中 Price 字段的平均值： <br> <code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td></tr><tr><td style="text-align:center">CEIL(x)</td><td style="text-align:center">返回大于或等于 x 的最小整数</td><td style="text-align:center"><code>SELECT CEIL(1.5);  -- 返回2</code></td></tr><tr><td style="text-align:center">CEILING(x)</td><td style="text-align:center">返回大于或等于 x 的最小整数</td><td style="text-align:center"><code>SELECT CEILING(1.5);  -- 返回2</code></td></tr><tr><td style="text-align:center">COS(x)</td><td style="text-align:center">求余弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT COS(2);</code></td></tr><tr><td style="text-align:center">COT(x)</td><td style="text-align:center">求余切值（参数是弧度）</td><td style="text-align:center"><code>SELECT COT(6);</code></td></tr><tr><td style="text-align:center">COUNT(expression)</td><td style="text-align:center">返回查询的记录总数，expression 参数是一个字段或者 * 号</td><td style="text-align:center">返回 Products 表中 products 字段总共有多少条记录： <br> <code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td></tr><tr><td style="text-align:center">DEGREES(x)</td><td style="text-align:center">将弧度转换为角度</td><td style="text-align:center"><code>SELECT DEGREES(3.1415926535898);  -- 180</code></td></tr><tr><td style="text-align:center">n DIV m</td><td style="text-align:center">整除，n 为被除数，m 为除数</td><td style="text-align:center">计算 10 除于 5： <br> <code>SELECT 10 DIV 5;  -- 2</code></td></tr><tr><td style="text-align:center">EXP(x)</td><td style="text-align:center">返回 e 的 x 次方</td><td style="text-align:center">计算 e 的三次方： <br> <code>SELECT EXP(3);  -- 20.085536923188</code></td></tr><tr><td style="text-align:center">FLOOR(x)</td><td style="text-align:center">返回小于或等于 x 的最大整数</td><td style="text-align:center">小于或等于 1.5 的整数： <br> <code>SELECT FLOOR(1.5);  -- 返回1</code></td></tr><tr><td style="text-align:center">GREATEST(expr1, expr2, expr3, ...)</td><td style="text-align:center">返回列表中的最大值</td><td style="text-align:center">返回以下数字列表中的最大值： <br> <code>SELECT GREATEST(3, 12, 34, 8, 25);  -- 34</code> <br> 返回以下字符串列表中的最大值： <br> <code>SELECT GREATEST(&quot;Google&quot;, &quot;Baidu&quot;, &quot;Apple&quot;);  -- Google</code></td></tr><tr><td style="text-align:center">LEAST(expr1, expr2, expr3, ...)</td><td style="text-align:center">返回列表中的最小值</td><td style="text-align:center">返回以下数字列表中的最小值： <br> <code>SELECT LEAST(3, 12, 34, 8, 25);  -- 3</code> <br> 返回以下字符串列表中的最小值： <br> <code>SELECT LEAST(&quot;Google&quot;, &quot;Baidu&quot;, &quot;Apple&quot;);  -- Apple</code></td></tr><tr><td style="text-align:center">LN(x)</td><td style="text-align:center">返回数字 x 的自然对数，以 e 为底。</td><td style="text-align:center">返回 2 的自然对数： <br> <code>SELECT LN(2);  -- 0.6931471805599453</code></td></tr><tr><td style="text-align:center">LOG(x) 或 LOG(base, x)</td><td style="text-align:center">返回自然对数（以 e 为底的对数）， <br> 如果带有 base 参数，则 base 为指定带底数。</td><td style="text-align:center"><code>SELECT LOG(20.085536923188);  -- 3</code> <br> <code>SELECT LOG(2, 4);  -- 2</code></td></tr><tr><td style="text-align:center">LOG10(x)</td><td style="text-align:center">返回以 10 为底的对数</td><td style="text-align:center"><code>SELECT LOG10(100);  -- 2</code></td></tr><tr><td style="text-align:center">LOG2(x)</td><td style="text-align:center">返回以 2 为底的对数</td><td style="text-align:center">返回以 2 为底 6 的对数： <br> <code>SELECT LOG2(6);  -- 2.584962500721156</code></td></tr><tr><td style="text-align:center">MAX(expression)</td><td style="text-align:center">返回字段 expression 中的最大值</td><td style="text-align:center">返回数据表 Products 中字段 Price 的最大值： <br> <code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td></tr><tr><td style="text-align:center">MIN(expression)</td><td style="text-align:center">返回字段 expression 中的最小值</td><td style="text-align:center">返回数据表 Products 中字段 Price 的最小值： <br> <code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td></tr><tr><td style="text-align:center">MOD(x,y)</td><td style="text-align:center">返回 x 除以 y 以后的余数</td><td style="text-align:center">5 除于 2 的余数： <br> <code>SELECT MOD(5, 2);  -- 1</code></td></tr><tr><td style="text-align:center">PI()</td><td style="text-align:center">返回圆周率(3.141593）</td><td style="text-align:center"><code>SELECT PI();  --3.141593</code></td></tr><tr><td style="text-align:center">POW(x,y)</td><td style="text-align:center">返回 x 的 y 次方</td><td style="text-align:center">2 的 3 次方： <br> <code>SELECT POW(2, 3);  -- 8</code></td></tr><tr><td style="text-align:center">POWER(x,y)</td><td style="text-align:center">返回 x 的 y 次方</td><td style="text-align:center">2 的 3 次方： <br> <code>SELECT POWER(2, 3);  -- 8</code></td></tr><tr><td style="text-align:center">RADIANS(x)</td><td style="text-align:center">将角度转换为弧度</td><td style="text-align:center">180 度转换为弧度： <br> <code>SELECT RADIANS(180);  -- 3.1415926535898</code></td></tr><tr><td style="text-align:center">RAND()</td><td style="text-align:center">返回 0 到 1 的随机数</td><td style="text-align:center"><code>SELECT RAND();  --0.93099315644334</code></td></tr><tr><td style="text-align:center">ROUND(x)</td><td style="text-align:center">返回离 x 最近的整数,四舍五入</td><td style="text-align:center"><code>SELECT ROUND(1.23456);  --1</code></td></tr><tr><td style="text-align:center">SIGN(x)</td><td style="text-align:center">返回 x 的符号，x 是负数、0、 正数分别返回 -1、0 和 1</td><td style="text-align:center"><code>SELECT SIGN(-10);  -- (-1)</code></td></tr><tr><td style="text-align:center">SIN(x)</td><td style="text-align:center">求正弦值（参数是弧度）</td><td style="text-align:center"><code>SELECT SIN(RADIANS(30));  -- 0.5</code></td></tr><tr><td style="text-align:center">SQRT(x)</td><td style="text-align:center">返回x的平方根</td><td style="text-align:center">25 的平方根： <br> <code>SELECT SQRT(25);  -- 5</code></td></tr><tr><td style="text-align:center">SUM(expression)</td><td style="text-align:center">返回指定字段的总和</td><td style="text-align:center">计算 OrderDetails 表中字段 Quantity 的总和： <br> <code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td></tr><tr><td style="text-align:center">TAN(x)</td><td style="text-align:center">求正切值（参数是弧度）</td><td style="text-align:center"><code>SELECT TAN(1.75);  -- (-5.52037992250933)</code></td></tr><tr><td style="text-align:center">TRUNCATE(x, y)</td><td style="text-align:center">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td><td style="text-align:center"><code>SELECT TRUNCATE(1.23456, 3);  -- 1.234</code></td></tr></tbody></table></div><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">ADDDATE(d, n)</td><td style="text-align:center">计算起始日期 d 加上 n 天的日期</td><td style="text-align:center"><code>SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY);  --2017-06-25</code></td></tr><tr><td style="text-align:center">ADDTIME(t, n)</td><td style="text-align:center">n 是一个时间表达式，时间 t 加上时间表达式 n</td><td style="text-align:center">加 5 秒： <br> <code>SELECT ADDTIME(&#39;2011-11-11 11:11:11&#39;, 5);  --2011-11-11 11:11:16</code> <br> 添加 2 小时, 10 分钟, 5 秒： <br> <code>SELECT ADDTIME(&quot;2020-06-15 09:34:21&quot;, &quot;2:10:5&quot;);  -- 2020-06-15 11:44:26</code></td></tr><tr><td style="text-align:center">CURDATE()</td><td style="text-align:center">返回当前日期</td><td style="text-align:center"><code>SELECT CURDATE();  -- 2018-09-19</code></td></tr><tr><td style="text-align:center">CURRENT_DATE()</td><td style="text-align:center">返回当前日期</td><td style="text-align:center"><code>SELECT CURRENT_DATE();  -- 2018-09-19</code></td></tr><tr><td style="text-align:center">CURRENT_TIME</td><td style="text-align:center">返回当前时间</td><td style="text-align:center"><code>SELECT CURRENT_TIME();  -- 19:59:02</code></td></tr><tr><td style="text-align:center">CURRENT_TIMESTAMP()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT CURRENT_TIMESTAMP();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">CURTIME()</td><td style="text-align:center">返回当前时间</td><td style="text-align:center"><code>SELECT CURTIME();  -- 19:59:02</code></td></tr><tr><td style="text-align:center">DATE()</td><td style="text-align:center">从日期或日期时间表达式中提取日期值</td><td style="text-align:center"><code>SELECT DATE(&quot;2017-06-15&quot;);  -- 2017-06-15</code></td></tr><tr><td style="text-align:center">DATEDIFF(d1, d2)</td><td style="text-align:center">计算日期 d1 和 d2 之间相隔的天数</td><td style="text-align:center"><code>SELECT DATEDIFF(&#39;2001-01-01&#39;, &#39;2001-02-02&#39;);  -- (-32)</code></td></tr><tr><td style="text-align:center">DATE_ADD(d，INTERVAL expr type)</td><td style="text-align:center">计算起始日期 d 加上一个时间段后的日期</td><td style="text-align:center"><code>SELECT ADDDATE(&#39;2011-11-11 11:11:11&#39;, 1);  -- 2011-11-12 11:11:11（默认是天）</code> <br> <code>SELECT ADDDATE(&#39;2011-11-11 11:11:11&#39;, INTERVAL 5 MINUTE);  -- 2011-11-11 11:16:11 （TYPE的取值与上面那个列出来的函数类似）</code></td></tr><tr><td style="text-align:center">DATE_FORMAT(d, f)</td><td style="text-align:center">按表达式 f 的要求显示日期 d</td><td style="text-align:center"><code>SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;);  -- 2011-11-11 11:11:11 AM</code></td></tr><tr><td style="text-align:center">DATE_SUB(date, INTERVAL expr type)</td><td style="text-align:center">函数从日期减去指定的时间间隔。</td><td style="text-align:center">Orders 表中 OrderDate 字段减去 2 天： <br> <code>SELECT OrderId, DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders;</code></td></tr><tr><td style="text-align:center">DAY(d)</td><td style="text-align:center">返回日期值 d 的日期部分</td><td style="text-align:center"><code>SELECT DAY(&quot;2017-06-15&quot;);  -- 15</code></td></tr><tr><td style="text-align:center">DAYNAME(d)</td><td style="text-align:center">返回日期 d 是星期几，如 Monday, Tuesday</td><td style="text-align:center"><code>SELECT DAYNAME(&#39;2011-11-11 11:11:11&#39;);  --Friday</code></td></tr><tr><td style="text-align:center">DAYOFMONTH(d)</td><td style="text-align:center">计算日期 d 是本月的第几天</td><td style="text-align:center"><code>SELECT DAYOFMONTH(&#39;2011-11-11 11:11:11&#39;);  --11</code></td></tr><tr><td style="text-align:center">DAYOFWEEK(d)</td><td style="text-align:center">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td><td style="text-align:center"><code>SELECT DAYOFWEEK(&#39;2011-11-11 11:11:11&#39;);  --6</code></td></tr><tr><td style="text-align:center">DAYOFYEAR(d)</td><td style="text-align:center">计算日期 d 是本年的第几天</td><td style="text-align:center"><code>SELECT DAYOFYEAR(&#39;2011-11-11 11:11:11&#39;);  --315</code></td></tr><tr><td style="text-align:center">EXTRACT(type FROM d)</td><td style="text-align:center">从日期 d 中获取指定的值，type 指定返回的值。 <br> type可取值为： <br> MICROSECOND <br> SECOND <br> MINUTE <br> HOUR <br> DAY <br> WEEK <br> MONTH <br> QUARTER <br> YEAR <br> SECOND_MICROSECOND <br> MINUTE_MICROSECOND <br> MINUTE_SECOND <br> HOUR_MICROSECOND <br> HOUR_SECOND <br> HOUR_MINUTE <br> DAY_MICROSECOND <br> DAY_SECOND <br> DAY_MINUTE <br> DAY_HOUR <br> YEAR_MONTH</td><td style="text-align:center"><code>SELECT EXTRACT(MINUTE FROM &#39;2011-11-11 11:11:11&#39;);  -- 11</code></td></tr><tr><td style="text-align:center">FROM_DAYS(n)</td><td style="text-align:center">计算从 0000 年 1 月 1 日开始 n 天后的日期</td><td style="text-align:center"><code>SELECT FROM_DAYS(1111);  -- 0003-01-16</code></td></tr><tr><td style="text-align:center">HOUR(t)</td><td style="text-align:center">返回 t 中的小时值</td><td style="text-align:center"><code>SELECT HOUR(&#39;1:2:3&#39;);  -- 1</code></td></tr><tr><td style="text-align:center">LAST_DAY(d)</td><td style="text-align:center">返回给给定日期的那一月份的最后一天</td><td style="text-align:center"><code>SELECT LAST_DAY(&quot;2017-06-20&quot;);  -- 2017-06-30</code></td></tr><tr><td style="text-align:center">LOCALTIME()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT LOCALTIME();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">LOCALTIMESTAMP()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT LOCALTIMESTAMP();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">MAKEDATE(year, day-of-year)</td><td style="text-align:center">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td><td style="text-align:center"><code>SELECT MAKEDATE(2017, 3);  -- 2017-01-03</code></td></tr><tr><td style="text-align:center">MAKETIME(hour, minute, second)</td><td style="text-align:center">组合时间，参数分别为小时、分钟、秒</td><td style="text-align:center"><code>SELECT MAKETIME(11, 35, 4);  -- 11:35:04</code></td></tr><tr><td style="text-align:center">MICROSECOND(date)</td><td style="text-align:center">返回日期参数所对应的微秒数</td><td style="text-align:center"><code>SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;);  -- 23</code></td></tr><tr><td style="text-align:center">MINUTE(t)</td><td style="text-align:center">返回 t 中的分钟值</td><td style="text-align:center"><code>SELECT MINUTE(&#39;1:2:3&#39;);  -- 2</code></td></tr><tr><td style="text-align:center">MONTHNAME(d)</td><td style="text-align:center">返回日期当中的月份名称，如 November</td><td style="text-align:center"><code>SELECT MONTHNAME(&#39;2011-11-11 11:11:11&#39;);  -- November</code></td></tr><tr><td style="text-align:center">MONTH(d)</td><td style="text-align:center">返回日期d中的月份值，1 到 12</td><td style="text-align:center"><code>SELECT MONTH(&#39;2011-11-11 11:11:11&#39;);  --11</code></td></tr><tr><td style="text-align:center">NOW()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT NOW();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">PERIOD_ADD(period, number)</td><td style="text-align:center">为 年-月 组合日期添加一个时段</td><td style="text-align:center"><code>SELECT PERIOD_ADD(201703, 5);  -- 201708</code></td></tr><tr><td style="text-align:center">PERIOD_DIFF(period1, period2)</td><td style="text-align:center">返回两个时段之间的月份差值</td><td style="text-align:center"><code>SELECT PERIOD_DIFF(201710, 201703);  -- 7</code></td></tr><tr><td style="text-align:center">QUARTER(d)</td><td style="text-align:center">返回日期d是第几季节，返回 1 到 4</td><td style="text-align:center"><code>SELECT QUARTER(&#39;2011-11-11 11:11:11&#39;);  -- 4</code></td></tr><tr><td style="text-align:center">SECOND(t)</td><td style="text-align:center">返回 t 中的秒钟值</td><td style="text-align:center"><code>SELECT SECOND(&#39;1:2:3&#39;);  -- 3</code></td></tr><tr><td style="text-align:center">SEC_TO_TIME(s)</td><td style="text-align:center">将以秒为单位的时间 s 转换为时分秒的格式</td><td style="text-align:center"><code>SELECT SEC_TO_TIME(4320);  -- 01:12:00</code></td></tr><tr><td style="text-align:center">STR_TO_DATE(string, format_mask)</td><td style="text-align:center">将字符串转变为日期</td><td style="text-align:center"><code>SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;);  -- 2017-08-10</code></td></tr><tr><td style="text-align:center">SUBDATE(d, n)</td><td style="text-align:center">日期 d 减去 n 天后的日期</td><td style="text-align:center"><code>SELECT SUBDATE(&#39;2011-11-11 11:11:11&#39;, 1);  --2011-11-10 11:11:11 (默认是天)</code></td></tr><tr><td style="text-align:center">SUBTIME(t, n)</td><td style="text-align:center">时间 t 减去 n 秒的时间</td><td style="text-align:center"><code>SELECT SUBTIME(&#39;2011-11-11 11:11:11&#39;, 5);  --2011-11-11 11:11:06 (秒)</code></td></tr><tr><td style="text-align:center">SYSDATE()</td><td style="text-align:center">返回当前日期和时间</td><td style="text-align:center"><code>SELECT SYSDATE();  -- 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:center">TIME(expression)</td><td style="text-align:center">提取传入表达式的时间部分</td><td style="text-align:center"><code>SELECT TIME(&quot;19:30:10&quot;);  -- 19:30:10</code></td></tr><tr><td style="text-align:center">TIME_FORMAT(t, f)</td><td style="text-align:center">按表达式 f 的要求显示时间 t</td><td style="text-align:center"><code>SELECT TIME_FORMAT(&#39;11:11:11&#39;, &#39;%r&#39;);  -- 11:11:11 AM</code></td></tr><tr><td style="text-align:center">TIME_TO_SEC(t)</td><td style="text-align:center">将时间 t 转换为秒</td><td style="text-align:center"><code>SELECT TIME_TO_SEC(&#39;1:12:00&#39;);  -- 4320</code></td></tr><tr><td style="text-align:center">TIMEDIFF(time1, time2)</td><td style="text-align:center">计算时间差值</td><td style="text-align:center"><code>SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;);  -- 00:00:01</code></td></tr><tr><td style="text-align:center">TIMESTAMP(expression, interval)</td><td style="text-align:center">单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td><td style="text-align:center"><code>SELECT TIMESTAMP(&quot;2017-07-23&quot;, &quot;13:10:11&quot;);  -- 2017-07-23 13:10:11</code></td></tr><tr><td style="text-align:center">TO_DAYS(d)</td><td style="text-align:center">计算日期 d 距离 0000 年 1 月 1 日的天数</td><td style="text-align:center"><code>SELECT TO_DAYS(&#39;0001-01-01 01:01:01&#39;);  -- 366</code></td></tr><tr><td style="text-align:center">WEEK(d)</td><td style="text-align:center">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td style="text-align:center"><code>SELECT WEEK(&#39;2011-11-11 11:11:11&#39;);  -- 45</code></td></tr><tr><td style="text-align:center">WEEKDAY(d)</td><td style="text-align:center">日期 d 是星期几，0 表示星期一，1 表示星期二</td><td style="text-align:center"><code>SELECT WEEKDAY(&quot;2017-06-15&quot;);  -- 3</code></td></tr><tr><td style="text-align:center">WEEKOFYEAR(d)</td><td style="text-align:center">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td style="text-align:center"><code>SELECT WEEKOFYEAR(&#39;2011-11-11 11:11:11&#39;);  -- 45</code></td></tr><tr><td style="text-align:center">YEAR(d)</td><td style="text-align:center">返回年份</td><td style="text-align:center"><code>SELECT YEAR(&quot;2017-06-15&quot;);  -- 2017</code></td></tr><tr><td style="text-align:center">YEARWEEK(date, mode)</td><td style="text-align:center">返回年份及第几周（0 到 53），mode 中 0 表示周天，1表示周一，以此类推</td><td style="text-align:center"><code>SELECT YEARWEEK(&quot;2017-06-15&quot;);  -- 201724</code></td></tr></tbody></table></div><h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">BIN(x)</td><td style="text-align:center">返回 x 的二进制编码</td><td style="text-align:center">15 的 2 进制编码： <br> <code>SELECT BIN(15);  -- 1111</code></td></tr><tr><td style="text-align:center">BINARY(s)</td><td style="text-align:center">将字符串 s 转换为二进制字符串</td><td style="text-align:center"><code>SELECT BINARY &quot;GOOGLE&quot;;  -- GOOGLE</code></td></tr><tr><td style="text-align:center">CASE expression <br> WHEN condition1 THEN result1 <br> WHEN condition2 THEN result2 <br> ... <br> WHEN conditionN THEN resultN <br> ELSE result</td><td style="text-align:center">END &vert; CASE 表示函数开始，END 表示函数结束。 <br> 如果 condition1 成立，则返回 result1,  <br> 如果 condition2 成立，则返回 result2， <br> 当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td><td style="text-align:center"><code>SELECT CASE</code> <br> <code>WHEN 1 &gt; 0</code> <br> <code>THEN &#39;1 &gt; 0&#39;</code> <br> <code>WHEN 2 &gt; 0</code> <br> <code>THEN &#39;2 &gt; 0&#39;</code> <br> <code>ELSE &#39;3 &gt; 0&#39;</code> <br> <code>END</code> <br> <code>-- 1 &gt; 0</code></td></tr><tr><td style="text-align:center">CAST(x AS type)</td><td style="text-align:center">转换数据类型</td><td style="text-align:center">字符串日期转换为日期： <br> <code>SELECT CAST(&quot;2017-08-29&quot; AS DATE);  -- 2017-08-29</code></td></tr><tr><td style="text-align:center">COALESCE(expr1, expr2, ...., expr_n)</td><td style="text-align:center">返回参数中的第一个非空表达式（从左向右）</td><td style="text-align:center"><code>SELECT COALESCE(NULL, NULL, NULL, &#39;baidu.com&#39;, NULL, &#39;google.com&#39;);  -- baidu.com</code></td></tr><tr><td style="text-align:center">CONNECTION_ID()</td><td style="text-align:center">返回唯一的连接 ID</td><td style="text-align:center"><code>SELECT CONNECTION_ID();  -- 4292835</code></td></tr><tr><td style="text-align:center">CONV(x, f1, f2)</td><td style="text-align:center">返回 f1 进制数变成 f2 进制数</td><td style="text-align:center"><code>SELECT CONV(15, 10, 2);  -- 1111</code></td></tr><tr><td style="text-align:center">CONVERT(s USING cs)</td><td style="text-align:center">函数将字符串 s 的字符集变成 cs</td><td style="text-align:center"><code>SELECT CHARSET(&#39;ABC&#39;)  --utf-8</code> <br> <code>SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk))  --gbk</code></td></tr><tr><td style="text-align:center">CURRENT_USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT CURRENT_USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">DATABASE()</td><td style="text-align:center">返回当前数据库名</td><td style="text-align:center"><code>SELECT DATABASE();  -- testdb</code></td></tr><tr><td style="text-align:center">IF(expr, v1, v2)</td><td style="text-align:center">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td><td style="text-align:center"><code>SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)  --正确</code></td></tr><tr><td style="text-align:center">IFNULL(v1, v2)</td><td style="text-align:center">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td style="text-align:center"><code>SELECT IFNULL(NULL, &#39;Hello Word&#39;)  --Hello Word</code></td></tr><tr><td style="text-align:center">ISNULL(expression)</td><td style="text-align:center">判断表达式是否为 NULL</td><td style="text-align:center"><code>SELECT ISNULL(NULL);  --1</code></td></tr><tr><td style="text-align:center">LAST_INSERT_ID()</td><td style="text-align:center">返回最近生成的 AUTO_INCREMENT 值</td><td style="text-align:center"><code>SELECT LAST_INSERT_ID();  --6</code></td></tr><tr><td style="text-align:center">NULLIF(expr1, expr2)</td><td style="text-align:center">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td><td style="text-align:center"><code>SELECT NULLIF(25, 25);  --</code></td></tr><tr><td style="text-align:center">SESSION_USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT SESSION_USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">SYSTEM_USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT SYSTEM_USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">USER()</td><td style="text-align:center">返回当前用户</td><td style="text-align:center"><code>SELECT USER();  -- root@localhost</code></td></tr><tr><td style="text-align:center">VERSION()</td><td style="text-align:center">返回数据库的版本号</td><td style="text-align:center"><code>SELECT VERSION()  -- 5.6.34</code></td></tr></tbody></table></div><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>本章节我们主要介绍 MySQL 的运算符及运算符的优先级。 MySQL 主要有以下几种运算符：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>MySQL 支持的算术运算符包括:</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加法</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减法</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘法</td></tr><tr><td style="text-align:center">/ 或 DIV</td><td style="text-align:center">除法</td></tr><tr><td style="text-align:center">% 或 MOD</td><td style="text-align:center">取余</td></tr></tbody></table></div><p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p><ol><li><p>加</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 1+2;<br>+<span class="hljs-comment">-----+</span><br>| 1+2 |<br>+<span class="hljs-comment">-----+</span><br>|   3 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>减</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 1-2;<br>+<span class="hljs-comment">-----+</span><br>| 1-2 |<br>+<span class="hljs-comment">-----+</span><br>|  -1 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>乘</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2*3;<br>+<span class="hljs-comment">-----+</span><br>| 2*3 |<br>+<span class="hljs-comment">-----+</span><br>|   6 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>除</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2/3;<br>+<span class="hljs-comment">--------+</span><br>| 2/3    |<br>+<span class="hljs-comment">--------+</span><br>| 0.6667 |<br>+<span class="hljs-comment">--------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>商</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 10 DIV 4;<br>+<span class="hljs-comment">----------+</span><br>| 10 DIV 4 |<br>+<span class="hljs-comment">----------+</span><br>|        2 |<br>+<span class="hljs-comment">----------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>取余</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 10 MOD 4;<br>+<span class="hljs-comment">----------+</span><br>| 10 MOD 4 |<br>+<span class="hljs-comment">----------+</span><br>|        2 |<br>+<span class="hljs-comment">----------+</span><br></code></pre></td></tr></table></figure></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2></li></ol><p><code>SELECT</code> 语句中的条件语句经常要使用比较运算符。通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 <code>1</code>，为假则返回 <code>0</code>，比较结果不确定则返回 <code>NULL</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">描述</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&gt;, !=</td><td style="text-align:center">不等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">在两值之间</td><td style="text-align:center">&gt;=min &amp;&amp; &lt;=max</td></tr><tr><td style="text-align:center">NOT BETWEEN</td><td style="text-align:center">不在两值之间</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IN</td><td style="text-align:center">在集合中</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">NOT IN</td><td style="text-align:center">不在集合中</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">严格比较两个 NULL 值是否相等</td><td style="text-align:center">两个操作码均为 NULL 时，其所得值为1； <br> 而当一个操作码为 NULL 时，其所得值为0</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">模糊匹配</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">REGEXP 或 RLIKE</td><td style="text-align:center">正则式匹配</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IS NULL</td><td style="text-align:center">为空</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IS NOT NULL</td><td style="text-align:center">不为空</td></tr></tbody></table></div><ol><li><p>等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2=3;<br>+<span class="hljs-comment">-----+</span><br>| 2=3 |<br>+<span class="hljs-comment">-----+</span><br>|   0 |<br>+<span class="hljs-comment">-----+</span><br>mysql&gt; SELECT NULL = NULL;<br>+<span class="hljs-comment">-------------+</span><br>| NULL = NULL |<br>+<span class="hljs-comment">-------------+</span><br>|        NULL |<br>+<span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>不等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;&gt;3;<br>+<span class="hljs-comment">------+</span><br>| 2&lt;&gt;3 |<br>+<span class="hljs-comment">------+</span><br>|    1 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>安全等于</p><p> 与 <code>=</code> 的区别在于当两个操作码均为 <code>NULL</code> 时，其所得值为 <code>1</code> 而不为 <code>NULL</code>，而当一个操作码为 <code>NULL</code> 时，其所得值为 <code>0</code> 而不为 <code>NULL</code>。</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;=&gt;3;<br>+<span class="hljs-comment">-------+</span><br>| 2&lt;=&gt;3 |<br>+<span class="hljs-comment">-------+</span><br>|     0 |<br>+<span class="hljs-comment">-------+</span><br>mysql&gt; SELECT NULL=NULL;<br>+<span class="hljs-comment">-----------+</span><br>| NULL=NULL |<br>+<span class="hljs-comment">-----------+</span><br>|      NULL |<br>+<span class="hljs-comment">-----------+</span><br>mysql&gt; SELECT NULL&lt;=&gt;NULL;<br>+<span class="hljs-comment">-------------+</span><br>| NULL&lt;=&gt;NULL |<br>+<span class="hljs-comment">-------------+</span><br>|           1 |<br>+<span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>小于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;3;<br>+<span class="hljs-comment">-----+</span><br>| 2&lt;3 |<br>+<span class="hljs-comment">-----+</span><br>|   1 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>小于等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&lt;=3;<br>+<span class="hljs-comment">------+</span><br>| 2&lt;=3 |<br>+<span class="hljs-comment">------+</span><br>|    1 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>大于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&gt;3;<br>+<span class="hljs-comment">-----+</span><br>| 2&gt;3 |<br>+<span class="hljs-comment">-----+</span><br>|   0 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>大于等于</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2&gt;=3;<br>+<span class="hljs-comment">------+</span><br>| 2&gt;=3 |<br>+<span class="hljs-comment">------+</span><br>|    0 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>BETWEEN</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 5 BETWEEN 1 AND 10;<br>+<span class="hljs-comment">--------------------+</span><br>| 5 BETWEEN 1 AND 10 |<br>+<span class="hljs-comment">--------------------+</span><br>|                  1 |<br>+<span class="hljs-comment">--------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>IN</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 5 IN (1, 2, 3, 4, 5);<br>+<span class="hljs-comment">------------------+</span><br>| 5 IN (1, 2, 3, 4, 5) |<br>+<span class="hljs-comment">----------------------+</span><br>|                    1 |<br>+<span class="hljs-comment">----------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>NOT IN</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 5 NOT IN (1, 2, 3, 4, 5);<br>+<span class="hljs-comment">--------------------------+</span><br>| 5 NOT IN (1, 2, 3, 4, 5) |<br>+<span class="hljs-comment">--------------------------+</span><br>|                        0 |<br>+<span class="hljs-comment">--------------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>IS NULL</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NULL IS NULL;<br>+<span class="hljs-comment">--------------+</span><br>| NULL IS NULL |<br>+<span class="hljs-comment">--------------+</span><br>|            1 |<br>+<span class="hljs-comment">--------------+</span><br>mysql&gt; SELECT &#x27;a&#x27; IS NULL;<br>+<span class="hljs-comment">-------------+</span><br>| &#x27;a&#x27; IS NULL |<br>+<span class="hljs-comment">-------------+</span><br>|           0 |<br>+<span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>IS NOT NULL</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NULL IS NOT NULL;<br>+<span class="hljs-comment">------------------+</span><br>| NULL IS NOT NULL |<br>+<span class="hljs-comment">------------------+</span><br>|                0 |<br>+<span class="hljs-comment">------------------+</span><br>mysql&gt; SELECT &#x27;a&#x27; IS NOT NULL;<br>+<span class="hljs-comment">-----------------+</span><br>| &#x27;a&#x27; IS NOT NULL |<br>+<span class="hljs-comment">-----------------+</span><br>|               1 |<br>+<span class="hljs-comment">-----------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>LIKE</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT &#x27;12345&#x27; LIKE &#x27;12%&#x27;;<br>+<span class="hljs-comment">--------------------+</span><br>| &#x27;12345&#x27; LIKE &#x27;12%&#x27; |<br>+<span class="hljs-comment">--------------------+</span><br>|                  1 |<br>+<span class="hljs-comment">--------------------+</span><br>mysql&gt; SELECT &#x27;12345&#x27; LIKE &#x27;12_&#x27;;<br>+<span class="hljs-comment">--------------------+</span><br>| &#x27;12345&#x27; LIKE &#x27;12_&#x27; |<br>+<span class="hljs-comment">--------------------+</span><br>|                  0 |<br>+<span class="hljs-comment">--------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>REGEXP</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT &#x27;beijing&#x27; REGEXP &#x27;jing&#x27;;<br>+<span class="hljs-comment">-------------------------+</span><br>| &#x27;beijing&#x27; REGEXP &#x27;jing&#x27; |<br>+<span class="hljs-comment">-------------------------+</span><br>|                       1 |<br>+<span class="hljs-comment">-------------------------+</span><br>mysql&gt; SELECT &#x27;beijing&#x27; REGEXP &#x27;xi&#x27;;<br>+<span class="hljs-comment">-----------------------+</span><br>| &#x27;beijing&#x27; REGEXP &#x27;xi&#x27; |<br>+<span class="hljs-comment">-----------------------+</span><br>|                     0 |<br>+<span class="hljs-comment">-----------------------+</span><br></code></pre></td></tr></table></figure></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2></li></ol><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 <code>1</code>。如果表达式是假，结果返回 <code>0</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符号</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">NOT 或 !</td><td style="text-align:center">逻辑非</td></tr><tr><td style="text-align:center">AND</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:center">逻辑或</td></tr><tr><td style="text-align:center">XOR</td><td style="text-align:center">逻辑异或</td></tr></tbody></table></div><ol><li><p>与</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2 AND 0;<br>+<span class="hljs-comment">---------+</span><br>| 2 AND 0 |<br>+<span class="hljs-comment">---------+</span><br>|       0 |<br>+<span class="hljs-comment">---------+</span><br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT 2 AND 1;<br>+<span class="hljs-comment">---------+</span><br>+<span class="hljs-comment">---------+</span><br>| 2 AND 1 |<br>+<span class="hljs-comment">---------+</span><br>|       1 |<br>+<span class="hljs-comment">---------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 2 OR 0;<br>+<span class="hljs-comment">--------+</span><br>| 2 OR 0 |<br>+<span class="hljs-comment">--------+</span><br>|      1 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT 2 OR 1;<br>+<span class="hljs-comment">--------+</span><br>| 2 OR 1 |<br>+<span class="hljs-comment">--------+</span><br>|      1 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT 0 OR 0;<br>+<span class="hljs-comment">--------+</span><br>| 0 OR 0 |<br>+<span class="hljs-comment">--------+</span><br>|      0 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT 1 || 0;<br>+<span class="hljs-comment">--------+</span><br>| 1 || 0 |<br>+<span class="hljs-comment">--------+</span><br>|      1 |<br>+<span class="hljs-comment">--------+</span><br>mysql&gt; SELECT NULL OR 1;<br>+<span class="hljs-comment">-----------+</span><br>| NULL OR 1 |<br>+<span class="hljs-comment">-----------+</span><br>|         1 |<br>+<span class="hljs-comment">-----------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>非</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT NOT 1;<br>+<span class="hljs-comment">-------+</span><br>| NOT 1 |<br>+<span class="hljs-comment">-------+</span><br>|     0 |<br>+<span class="hljs-comment">-------+</span><br>mysql&gt; SELECT !0;<br>+<span class="hljs-comment">----+</span><br>| !0 |<br>+<span class="hljs-comment">----+</span><br>|  1 |<br>+<span class="hljs-comment">----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>异或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 1 XOR 1;<br>+<span class="hljs-comment">---------+</span><br>| 1 XOR 1 |<br>+<span class="hljs-comment">---------+</span><br>|       0 |<br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT 0 XOR 0;<br>+<span class="hljs-comment">---------+</span><br>| 0 XOR 0 |<br>+<span class="hljs-comment">---------+</span><br>|       0 |<br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT 1 XOR 0;<br>+<span class="hljs-comment">---------+</span><br>| 1 XOR 0 |<br>+<span class="hljs-comment">---------+</span><br>|       1 |<br>+<span class="hljs-comment">---------+</span><br>mysql&gt; SELECT NULL XOR 1;<br>+<span class="hljs-comment">------------+</span><br>| NULL XOR 1 |<br>+<span class="hljs-comment">------------+</span><br>|       NULL |<br>+<span class="hljs-comment">------------+</span><br>mysql&gt; SELECT 1 ^ 0;<br>+<span class="hljs-comment">-------+</span><br>| 1 ^ 0 |<br>+<span class="hljs-comment">-------+</span><br>|     1 |<br>+<span class="hljs-comment">-------+</span><br></code></pre></td></tr></table></figure></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2></li></ol><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符号</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center">&vert;</td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">取反</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td></tr></tbody></table></div><ol><li><p>按位与</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3&amp;5;<br>+<span class="hljs-comment">-----+</span><br>| 3&amp;5 |<br>+<span class="hljs-comment">-----+</span><br>|   1 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3|5;<br>+<span class="hljs-comment">-----+</span><br>| 3|5 |<br>+<span class="hljs-comment">-----+</span><br>|   7 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位异或</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3^5;<br>+<span class="hljs-comment">-----+</span><br>| 3^5 |<br>+<span class="hljs-comment">-----+</span><br>|   6 |<br>+<span class="hljs-comment">-----+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位取反</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT ~18446744073709551612;<br>+<span class="hljs-comment">-----------------------+</span><br>| ~18446744073709551612 |<br>+<span class="hljs-comment">-----------------------+</span><br>|                     3 |<br>+<span class="hljs-comment">-----------------------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位右移</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3&gt;&gt;1;<br>+<span class="hljs-comment">------+</span><br>| 3&gt;&gt;1 |<br>+<span class="hljs-comment">------+</span><br>|    1 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p></li><li><p>按位左移</p><p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql&gt; SELECT 3&lt;&lt;1;<br>+<span class="hljs-comment">------+</span><br>| 3&lt;&lt;1 |<br>+<span class="hljs-comment">------+</span><br>|    6 |<br>+<span class="hljs-comment">------+</span><br></code></pre></td></tr></table></figure></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2></li></ol><p>最低优先级为： <code>:=</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">优先级顺序</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">:=</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">&vert;&vert;, OR, XOR</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">&amp;&amp;, AND</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">NOT</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">BETWEEN, CASE, WHEN, THEN, ELSE</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">=, &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">&vert;</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">&amp;</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">&lt;&lt;, &gt;&gt;</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">-, +</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">*, /, DIV, %, MOD</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">^</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">- (一元减号), ~ (一元比特反转)</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">!</td></tr></tbody></table></div><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="关键字汇总"><a href="#关键字汇总" class="headerlink" title="关键字汇总"></a>关键字汇总</h2><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">关键字</th><th style="text-align:center">关键字</th></tr></thead><tbody><tr><td style="text-align:center">ADD</td><td style="text-align:center">ALL</td><td style="text-align:center">ALTER</td></tr><tr><td style="text-align:center">ANALYZE</td><td style="text-align:center">AND</td><td style="text-align:center">AS</td></tr><tr><td style="text-align:center">ASC</td><td style="text-align:center">ASENSITIVE</td><td style="text-align:center">BEFORE</td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">BIGINT</td><td style="text-align:center">BINARY</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">BOTH</td><td style="text-align:center">BY</td></tr><tr><td style="text-align:center">CALL</td><td style="text-align:center">CASCADE</td><td style="text-align:center">CASE</td></tr><tr><td style="text-align:center">CHANGE</td><td style="text-align:center">CHAR</td><td style="text-align:center">CHARACTER</td></tr><tr><td style="text-align:center">CHECK</td><td style="text-align:center">COLLATE</td><td style="text-align:center">COLUMN</td></tr><tr><td style="text-align:center">CONDITION</td><td style="text-align:center">CONNECTION</td><td style="text-align:center">CONSTRAINT</td></tr><tr><td style="text-align:center">CONTINUE</td><td style="text-align:center">CONVERT</td><td style="text-align:center">CREATE</td></tr><tr><td style="text-align:center">CROSS</td><td style="text-align:center">CURRENT_DATE</td><td style="text-align:center">CURRENT_TIME</td></tr><tr><td style="text-align:center">CURRENT_TIMESTAMP</td><td style="text-align:center">CURRENT_USER</td><td style="text-align:center">CURSOR</td></tr><tr><td style="text-align:center">DATABASE</td><td style="text-align:center">DATABASES</td><td style="text-align:center">DAY_HOUR</td></tr><tr><td style="text-align:center">DAY_MICROSECOND</td><td style="text-align:center">DAY_MINUTE</td><td style="text-align:center">DAY_SECOND</td></tr><tr><td style="text-align:center">DEC</td><td style="text-align:center">DECIMAL</td><td style="text-align:center">DECLARE</td></tr><tr><td style="text-align:center">DEFAULT</td><td style="text-align:center">DELAYED</td><td style="text-align:center">DELETE</td></tr><tr><td style="text-align:center">DESC</td><td style="text-align:center">DESCRIBE</td><td style="text-align:center">DETERMINISTIC</td></tr><tr><td style="text-align:center">DISTINCT</td><td style="text-align:center">DISTINCTROW</td><td style="text-align:center">DIV</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">DROP</td><td style="text-align:center">DUAL</td></tr><tr><td style="text-align:center">EACH</td><td style="text-align:center">ELSE</td><td style="text-align:center">ELSEIF</td></tr><tr><td style="text-align:center">ENCLOSED</td><td style="text-align:center">ESCAPED</td><td style="text-align:center">EXISTS</td></tr><tr><td style="text-align:center">EXIT</td><td style="text-align:center">EXPLAIN</td><td style="text-align:center">FALSE</td></tr><tr><td style="text-align:center">FETCH</td><td style="text-align:center">FLOAT</td><td style="text-align:center">FLOAT4</td></tr><tr><td style="text-align:center">FLOAT8</td><td style="text-align:center">FOR</td><td style="text-align:center">FORCE</td></tr><tr><td style="text-align:center">FOREIGN</td><td style="text-align:center">FROM</td><td style="text-align:center">FULLTEXT</td></tr><tr><td style="text-align:center">GOTO</td><td style="text-align:center">GRANT</td><td style="text-align:center">GROUP</td></tr><tr><td style="text-align:center">HAVING</td><td style="text-align:center">HIGH_PRIORITY</td><td style="text-align:center">HOUR_MICROSECOND</td></tr><tr><td style="text-align:center">HOUR_MINUTE</td><td style="text-align:center">HOUR_SECOND</td><td style="text-align:center">IF</td></tr><tr><td style="text-align:center">IGNORE</td><td style="text-align:center">IN</td><td style="text-align:center">INDEX</td></tr><tr><td style="text-align:center">INFILE</td><td style="text-align:center">INNER</td><td style="text-align:center">INOUT</td></tr><tr><td style="text-align:center">INSENSITIVE</td><td style="text-align:center">INSERT</td><td style="text-align:center">INT</td></tr><tr><td style="text-align:center">INT1</td><td style="text-align:center">INT2</td><td style="text-align:center">INT3</td></tr><tr><td style="text-align:center">INT4</td><td style="text-align:center">INT8</td><td style="text-align:center">INTEGER</td></tr><tr><td style="text-align:center">INTERVAL</td><td style="text-align:center">INTO</td><td style="text-align:center">IS</td></tr><tr><td style="text-align:center">ITERATE</td><td style="text-align:center">JOIN</td><td style="text-align:center">KEY</td></tr><tr><td style="text-align:center">KEYS</td><td style="text-align:center">KILL</td><td style="text-align:center">LABEL</td></tr><tr><td style="text-align:center">LEADING</td><td style="text-align:center">LEAVE</td><td style="text-align:center">LEFT</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">LIMIT</td><td style="text-align:center">LINEAR</td></tr><tr><td style="text-align:center">LINES</td><td style="text-align:center">LOAD</td><td style="text-align:center">LOCALTIME</td></tr><tr><td style="text-align:center">LOCALTIMESTAMP</td><td style="text-align:center">LOCK</td><td style="text-align:center">LONG</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">LONGTEXT</td><td style="text-align:center">LOOP</td></tr><tr><td style="text-align:center">LOW_PRIORITY</td><td style="text-align:center">MATCH</td><td style="text-align:center">MEDIUMBLOB</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">MIDDLEINT</td></tr><tr><td style="text-align:center">MINUTE_MICROSECOND</td><td style="text-align:center">MINUTE_SECOND</td><td style="text-align:center">MOD</td></tr><tr><td style="text-align:center">MODIFIES</td><td style="text-align:center">NATURAL</td><td style="text-align:center">NOT</td></tr><tr><td style="text-align:center">NO_WRITE_TO_BINLOG</td><td style="text-align:center">NULL</td><td style="text-align:center">NUMERIC</td></tr><tr><td style="text-align:center">ON</td><td style="text-align:center">OPTIMIZE</td><td style="text-align:center">OPTION</td></tr><tr><td style="text-align:center">OPTIONALLY</td><td style="text-align:center">OR ORDER</td></tr><tr><td style="text-align:center">OUT</td><td style="text-align:center">OUTER</td><td style="text-align:center">OUTFILE</td></tr><tr><td style="text-align:center">PRECISION</td><td style="text-align:center">PRIMARY</td><td style="text-align:center">PROCEDURE</td></tr><tr><td style="text-align:center">PURGE</td><td style="text-align:center">RAID0</td><td style="text-align:center">RANGE</td></tr><tr><td style="text-align:center">READ</td><td style="text-align:center">READS</td><td style="text-align:center">REAL</td></tr><tr><td style="text-align:center">REFERENCES</td><td style="text-align:center">REGEXP</td><td style="text-align:center">RELEASE</td></tr><tr><td style="text-align:center">RENAME</td><td style="text-align:center">REPEAT</td><td style="text-align:center">REPLACE</td></tr><tr><td style="text-align:center">REQUIRE</td><td style="text-align:center">RESTRICT</td><td style="text-align:center">RETURN</td></tr><tr><td style="text-align:center">REVOKE</td><td style="text-align:center">RIGHT</td><td style="text-align:center">RLIKE</td></tr><tr><td style="text-align:center">SCHEMA</td><td style="text-align:center">SCHEMAS</td><td style="text-align:center">SECOND_MICROSECOND</td></tr><tr><td style="text-align:center">SELECT</td><td style="text-align:center">SENSITIVE</td><td style="text-align:center">SEPARATOR</td></tr><tr><td style="text-align:center">SET</td><td style="text-align:center">SHOW</td><td style="text-align:center">SMALLINT</td></tr><tr><td style="text-align:center">SPATIAL</td><td style="text-align:center">SPECIFIC</td><td style="text-align:center">SQL</td></tr><tr><td style="text-align:center">SQLEXCEPTION</td><td style="text-align:center">SQLSTATE</td><td style="text-align:center">SQLWARNING</td></tr><tr><td style="text-align:center">SQL_BIG_RESULT</td><td style="text-align:center">SQL_CALC_FOUND_ROWS</td><td style="text-align:center">SQL_SMALL_RESULT</td></tr><tr><td style="text-align:center">SSL</td><td style="text-align:center">STARTING</td><td style="text-align:center">STRAIGHT_JOIN</td></tr><tr><td style="text-align:center">TABLE</td><td style="text-align:center">TERMINATED</td><td style="text-align:center">THEN</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">TINYINT</td><td style="text-align:center">TINYTEXT</td></tr><tr><td style="text-align:center">TO</td><td style="text-align:center">TRAILING</td><td style="text-align:center">TRIGGER</td></tr><tr><td style="text-align:center">TRUE</td><td style="text-align:center">UNDO</td><td style="text-align:center">UNION</td></tr><tr><td style="text-align:center">UNIQUE</td><td style="text-align:center">UNLOCK</td><td style="text-align:center">UNSIGNED</td></tr><tr><td style="text-align:center">UPDATE</td><td style="text-align:center">USAGE</td><td style="text-align:center">USE</td></tr><tr><td style="text-align:center">USING</td><td style="text-align:center">UTC_DATE</td><td style="text-align:center">UTC_TIME</td></tr><tr><td style="text-align:center">UTC_TIMESTAMP</td><td style="text-align:center">VALUES</td><td style="text-align:center">VARBINARY</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">VARCHARACTER</td><td style="text-align:center">VARYING</td></tr><tr><td style="text-align:center">WHEN</td><td style="text-align:center">WHERE</td><td style="text-align:center">WHILE</td></tr><tr><td style="text-align:center">WITH</td><td style="text-align:center">WRITE</td><td style="text-align:center">X509</td></tr><tr><td style="text-align:center">XOR</td><td style="text-align:center">YEAR_MONTH</td><td style="text-align:center">ZEROFILL</td></tr></tbody></table></div><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>在 SQL 语句中每个关键字都会按照顺序往下执行，而每一步操作，会生成一个虚拟表，最后的虚拟表就是最终结果。</p><p>基本 SQL 语句如下：</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">(8)<span class="hljs-keyword">SELECT</span> (<span class="hljs-number">9</span>)<span class="hljs-keyword">DISTINCT</span> &lt;select_list&gt;<br>(<span class="hljs-number">1</span>)<span class="hljs-keyword">FROM</span> &lt;left_table&gt;<br>(<span class="hljs-number">3</span>) &lt;join_type&gt; <span class="hljs-keyword">JOIN</span> &lt;right_table&gt;<br>(<span class="hljs-number">2</span>)       <span class="hljs-keyword">ON</span> &lt;join_condition&gt;<br>(<span class="hljs-number">4</span>)<span class="hljs-keyword">WHERE</span> &lt;where_condition&gt;<br>(<span class="hljs-number">5</span>)<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &lt;group_by_list&gt;<br>(<span class="hljs-number">6</span>)<span class="hljs-keyword">WITH</span>&#123;<span class="hljs-keyword">CUBE</span>|<span class="hljs-keyword">ROLLUP</span>&#125;<br>(<span class="hljs-number">7</span>)<span class="hljs-keyword">HAVING</span> &lt;having_condition&gt;<br>(<span class="hljs-number">10</span>)<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &lt;order_by_list&gt;<br>(<span class="hljs-number">11</span>)<span class="hljs-keyword">LIMIT</span> &lt;limit_number&gt;<br></code></pre></td></tr></table></figure></p><p>执行顺序：</p><ol><li>FROM ： 对 <code>FROM</code> 左边的表和右边的表计算笛卡尔积，产生虚表 <code>VT1</code>；</li><li>ON ： 对虚拟表 <code>VT1</code> 进行 <code>ON</code> 筛选，只有那些符合条件的行才会被记录在虚拟表 <code>VT2</code> 中；</li><li>JOIN ：如果是 <code>OUT JOIN</code>，那么将保留表中（如左表或者右表）未匹配的行作为外部行添加到虚拟表 <code>VT2</code> 中，从而产生虚拟表 <code>VT3</code>；</li><li>WHERE ：对虚拟表 <code>VT3</code> 进行 <code>WHERE</code> 条件过滤，只有符合的记录才会被放入到虚拟表 VT4；</li><li>GROUP BY ：根据 <code>GROUP BY</code> 子句中的列，对虚拟表 <code>VT4</code> 进行分组操作，产生虚拟表 <code>VT5</code>；</li><li>CUBE | ROLLUP ：对虚拟表 <code>VT5</code> 进行 <code>CUBE</code> 或者 <code>ROLLUP</code> 操作，产生虚拟表 <code>VT6</code>；</li><li>HAVING ：对虚拟表 <code>VT6</code> 进行 <code>HAVING</code> 条件过滤，只有符合的记录才会被插入到虚拟表 <code>VT7</code> 中；</li><li>SELECT ：执行 <code>SELECT</code> 操作，选择指定的列，插入到虚拟表 <code>VT8</code> 中；</li><li>DISTINCT ：对虚拟表 <code>VT8</code> 中的记录进行去重，产生虚拟表 <code>VT9</code>；</li><li>ORDER BY ：将虚拟表 <code>VT9</code> 中的记录按照进行排序操作，产生虚拟表 <code>VT10</code>；</li><li>LIMIT ：取出指定行的记录，产生虚拟表 <code>VT11</code>，并将结果返回。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 👨‍💻大数据 </tag>
            
            <tag> 🐬MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据精选清单</title>
      <link href="post/fc3d946f.html"/>
      <url>post/fc3d946f.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>精选的大数据工具、框架、资源和其他清单。</p><blockquote><p>本文翻译自：<a href="https://github.com/onurakpolat/awesome-bigdata">Awesome Big Data</a><br>灵感来自：<a href="https://github.com/ziadoz/awesome-php">awesome-php</a> &amp; <a href="https://github.com/vinta/awesome-python">awesome-python</a> &amp; <a href="https://github.com/Sdogruyol/awesome-ruby">awesome-ruby</a> &amp; <a href="http://hadoopecosystemtable.github.io/">hadoopecosystemtable</a> &amp; <a href="http://usefulstuff.io/big-data/">big-data</a></p></blockquote><h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><ul><li><a href="https://www.mysql.com/">MySQL</a> - 世界上最流行的开源数据库。</li><li><a href="https://www.postgresql.org/">PostgreSQL</a> - 世界上最先进的开源数据库。</li><li><a href="http://www.oracle.com/us/corporate/features/database-12c/index.html">Oracle Database</a> - 对象关系数据库管理系统。</li><li><a href="http://www.teradata.com/products-and-services/teradata-database/">Teradata</a> - 高性能 MPP 数据仓库平台。</li></ul><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ul><li><a href="https://github.com/facebook/bistro">Bistro</a> - 用于批处理和流分析的通用数据处理引擎。它基于一种新的数据模型，该模型通过函数来表示数据，并通过列操作来处理数据，而不仅仅使用 MapReduce 或 SQL 等传统方法来设置操作。</li><li><a href="https://www.ibm.com/analytics/us/en/technology/stream-computing/">IBM Streams</a> - 分布式处理和实时分析平台。可以和大数据生态系统中的许多流行技术（Kafka、HDFS、Spark 等）集成。</li><li><a href="http://hadoop.apache.org/">Apache Hadoop</a> - 分布式处理框架。集成了 MapReduce（并行处理）、YARN（作业调度）和 HDFS（分布式文件系统）。</li><li><a href="https://github.com/caskdata/tigon">Tigon</a> - 高吞吐的实时流处理框架。</li><li><a href="http://pachyderm.io/">Pachyderm</a> - Pachyderm 是一个基于 Docker 和 Kubernetes 的数据存储平台，可以用在重复的数据处理和分析场景。</li><li><a href="https://github.com/polyaxon/polyaxon">Polyaxon</a> - 一个可复制、可扩展的机器学习和深度学习平台。</li></ul><h1 id="分布式编程"><a href="#分布式编程" class="headerlink" title="分布式编程"></a>分布式编程</h1><ul><li><a href="https://github.com/addthis/hydra">AddThis Hydra</a> - 分布式数据处理和存储系统，最初由 AddThis 开发。</li><li><a href="http://databricks.github.io/simr/">AMPLab SIMR</a> - 在 Hadoop MapReduce v1 上运行 Spark。</li><li><a href="https://apex.apache.org/">Apache APEX</a> - 用于大数据流和批处理的统一企业平台。</li><li><a href="https://beam.apache.org/">Apache Beam</a> - 用于定义和执行数据处理工作流的统一模型和一组特定于语言的 sdk。</li><li><a href="http://crunch.apache.org/">Apache Crunch</a> - 一个简单的 Java API，用于处理 Join 和数据聚合之类的任务，这些任务在普通 MapReduce 上实现起来很繁琐。</li><li><a href="http://incubator.apache.org/projects/datafu.html">Apache DataFu</a> - 由 LinkedIn 为 Hadoop 和 Pig 开发的用户定义函数的集合。</li><li><a href="http://flink.apache.org/">Apache Flink</a> - 分布式处理引擎框架，用于在无界和有界数据流上进行有状态计算。</li><li><a href="http://gearpump.apache.org/">Apache Gearpump</a> - 基于 Akka 的实时大数据流引擎。</li><li><a href="http://gora.apache.org/">Apache Gora</a> - 内存数据模型和持久性框架。</li><li><a href="http://hama.apache.org/">Apache Hama</a> - BSP（Bulk Synchronous Parallel）计算框架。</li><li><a href="https://wiki.apache.org/hadoop/MapReduce/">Apache MapReduce</a> - 在集群上使用并行分布式算法处理大型数据集的编程模型。</li><li><a href="https://pig.apache.org/">Apache Pig</a> - 用于表达 Hadoop 数据分析程序的高级语言。</li><li><a href="http://reef.apache.org/">Apache REEF</a> - 用来简化和统一低层大数据系统的保留性评估执行框架。</li><li><a href="http://incubator.apache.org/projects/s4.html">Apache S4</a> - 一个常规用途的、分布式的、可伸缩的、容错的、可插入式的平台，主要用于处理连续的数据流。</li><li><a href="http://spark.apache.org/">Apache Spark</a> - 快速、通用的大规模数据处理引擎。</li><li><a href="https://spark.apache.org/docs/latest/streaming-programming-guide.html">Apache Spark Streaming</a> - 实时流处理引擎，属于 Spark 的一部分。</li><li><a href="http://storm.apache.org">Apache Storm</a> - Twitter 开发的，可在 YARN 上进行流处理的框架。</li><li><a href="http://samza.apache.org/">Apache Samza</a> - 基于 Kafka 和 YARN 的流处理的框架。</li><li><a href="http://tez.apache.org/">Apache Tez</a> - 基于 YARN 的，可执行复杂 DAG（有向无环图）任务的应用程序框架。</li><li><a href="https://incubator.apache.org/projects/twill.html">Apache Twill</a> - YARN 上的抽象，减少了开发分布式应用程序的复杂性。</li><li><a href="http://bigflow.cloud/en/index.html">Baidu Bigflow</a> - 一个允许编写分布式计算程序的接口，它提供了许多简单、灵活、强大的 API 来轻松处理任何规模的数据。</li><li><a href="http://cascalog.org/">Cascalog</a> - 数据处理和查询库。</li><li><a href="http://vldbarc.org/pvldb/vldb2010/pvldb_vol3/I08.pdf">Cheetah</a> - MapReduce 之上的高性能，用户自定义数据仓库。</li><li><a href="http://www.cascading.org/">Concurrent Cascading</a> - Hadoop 上的数据管理 / 分析框架。</li><li><a href="https://github.com/damballa/parkour">Damballa Parkour</a> - 为 Clojure 开发的 MapReduce 库。</li><li><a href="https://github.com/datasalt/pangool">Datasalt Pangool</a> - 可替代 MapReduce 范式。</li><li><a href="https://www.datatorrent.com/">DataTorrent StrAM</a> - 实时计算引擎，旨在以一种尽可能畅通的方式支持分布式、异步、实时的内存大数据计算，同时最小化开销和对性能的影响。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-scheduling-mapreduce-jobs-more-efficiently-with-corona/10151142560538920">Facebook Corona</a> - Hadoop 的增强，可以消除单点故障。</li><li><a href="http://peregrine_mapreduce.bitbucket.org/">Facebook Peregrine</a> - Map Reduce 框架。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920">Facebook Scuba</a> - 分布式内存数据存储。</li><li><a href="https://googledevelopers.blogspot.it/2014/06/cloud-platform-at-google-io-new-big.html">Google Dataflow</a> - 创建数据管道来帮助我们摄取、转换和分析数据。</li><li><a href="https://research.google.com/archive/mapreduce.html">Google MapReduce</a> - Map Reduce 框架。</li><li><a href="https://research.google.com/pubs/pub41378.html">Google MillWheel</a> - 容错流处理框架。</li><li><a href="https://www.ibm.com/analytics/us/en/technology/stream-computing/">IBM Streams</a> - 用于分布式处理和实时分析的平台。 提供开箱即用的高级分析工具包，如地理空间、时间序列等。</li><li><a href="https://code.google.com/p/jaql/">JAQL</a> - 声明式编程语言，用于处理结构化、半结构化和非结构化数据。</li><li><a href="http://kitesdk.org/docs/current/">Kite</a> - 一组库、工具、示例和文档，重点在于简化在 Hadoop 生态系统之上构建系统的过程。</li><li><a href="http://druid.io/">Metamarkets Druid</a> - 用于实时分析大型数据集的框架。</li><li><a href="https://github.com/Netflix/PigPen">Netflix PigPen</a> - 是 Clojure 语音的 Map-Reduce，可以编译到 Apache Pig 或者 Cascading 中。</li><li><a href="http://discoproject.org/">Nokia Disco</a> - 诺基亚开发的 MapReduce 框架。</li><li><a href="http://www.onyxplatform.org/">Onyx</a> - 云的分布式计算。</li><li><a href="https://medium.com/@Pinterest_Engineering/pinlater-an-asynchronous-job-execution-system-b8664cb8aa7d">Pinterest Pinlater</a> - 异步作业执行系统。</li><li><a href="http://crs4.github.io/pydoop/">Pydoop</a> - 用 Python 编写，并采用 MapReduce 和 HDFS 技术对 Hadoop 进行扩展的 API。</li><li><a href="https://github.com/ray-project/ray">Ray</a> - 用于构建和运行分布式应用程序的快速而简单的框架。</li><li><a href="http://blueflood.io/">Rackerlabs Blueflood</a> - 多租户分布式度量处理系统。</li><li><a href="https://github.com/skale-me/skale-engine">Skale</a> - NodeJS 上的高性能分布式数据处理框架。</li><li><a href="http://stratosphere.eu/">Stratosphere</a> - 通用集群计算框架。</li><li><a href="https://streamdrill.com/">Streamdrill</a> - Streamdrill 在计算不同时间窗口上的事件流活动非常有用，并找出最活跃的时间窗口。</li><li><a href="https://github.com/IBMStreams/streamsx.topology">streamsx.topology</a> - 用于在 Java，Python 或 Scala 中构建 IBM Streams 应用程序的库。</li><li><a href="https://github.com/UnderstandLingBV/Tuktu">Tuktu</a> - 易于使用的批处理和流式计算平台，可以使用 Scala，Akka 和 Play 构建。</li><li><a href="https://github.com/twitter/heron">Twitter Heron</a> - 由 Twitter 开发的一个实时、分布式、容错的流处理引擎，主要用于代替 Storm。</li><li><a href="https://github.com/twitter/scalding">Twitter Scalding</a> - 用于 Map Reduce 作业的 Scala 库，基于 Cascading 构建。</li><li><a href="https://github.com/twitter/summingbird">Twitter Summingbird</a> - Summingbird 是一个类库，它允许我们编写看起来像原生 Scala 或 Java 集合转换的 MapReduce 程序，并在许多着名的分布式 MapReduce 平台上执行，包括 Storm 和 Scalding，由 Twitter 开发。</li><li><a href="https://blog.twitter.com/engineering/en_us/a/2014/tsar-a-timeseries-aggregator.html">Twitter TSAR</a> - Twitter 开发的时间序列聚合器。</li><li><a href="http://www.wallaroolabs.com/community">Wallaroo</a> - 超快弹性数据处理引擎，可以使有状态、分析、流处理和事件驱动的 AI 应用程序能够快速投入生产，而无需考虑规模。它为开发人员提供了几种语言的 API 来实现他们的自定义业务逻辑。</li></ul><h1 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h1><ul><li><a href="https://github.com/linkedin/ambry">Ambry</a> - 分布式对象存储，支持存储数万亿个小的不可变对象或者数十亿个大对象。</li><li><a href="http://hadoop.apache.org/">Apache HDFS</a> - 提供对应用程序数据的高吞吐量访问的分布式文件系统。</li><li><a href="http://kudu.apache.org/">Apache Kudu</a> - Hadoop 的存储层可实现对数据的快速分析。</li><li><a href="https://www.beegfs.io/content/">BeeGFS</a> - 之前称为 FhGFS，是一种并行分布式文件系统。</li><li><a href="http://ceph.com/ceph-storage/file-system/">Ceph Filesystem</a> -一个支持POSIX接口的文件系统。</li><li><a href="http://disco.readthedocs.org/en/latest/howto/ddfs.html">Disco DDFS</a> - 分布式文件系统。</li><li><a href="https://www.facebook.com/note.php?note_id=76191543919">Facebook Haystack</a> - 对象存储系统。</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">Google GFS</a> - 分布式文件系统。</li><li><a href="http://static.googleusercontent.com/media/research.google.reverse-proxy.org/en/us/university/relations/facultysummit2010/storage_architecture_and_challenges.pdf">Google Colossus</a> - 分布式文件系统（GFS2）。</li><li><a href="https://research.google.com/pubs/pub36971.html">Google Megastore</a> - 可扩展、高可用的存储。</li><li><a href="https://www.gridgain.com/">GridGain</a> - GGFS，Hadoop 兼容的内存文件系统。</li><li><a href="http://wiki.lustre.org/">Lustre file system</a> - 高性能分布式文件系统。</li><li><a href="https://hadoop.apache.org/docs/current/hadoop-azure-datalake/index.html">Microsoft Azure Data Lake Store</a> - Azure 上兼容 HDFS 的存储。</li><li><a href="https://www.quantcast.com/about-us/quantcast-file-system/">Quantcast File System QFS</a> - 开源分布式文件系统。</li><li><a href="http://gluster.org/">Red Hat GlusterFS</a> - 横向扩展网络附加的存储文件系统。</li><li><a href="https://github.com/chrislusf/seaweedfs">Seaweed-FS</a> - 简单且高度可伸缩的分布式文件系统。</li><li><a href="http://www.alluxio.org/">Alluxio</a> - 开源的基于内存的分布式存储系统。</li><li><a href="https://www.tahoe-lafs.org/trac/tahoe-lafs">Tahoe-LAFS</a> - 去中心化的云存储系统。</li><li><a href="https://github.com/baidu/bfs">Baidu File System</a> - 分布式文件系统。</li></ul><h1 id="分布式索引"><a href="#分布式索引" class="headerlink" title="分布式索引"></a>分布式索引</h1><ul><li><a href="https://github.com/pilosa/pilosa">Pilosa</a> - 开源的分布式位图索引，极大地加速了跨多个大规模数据集的查询。</li></ul><h1 id="文档数据模型"><a href="#文档数据模型" class="headerlink" title="文档数据模型"></a>文档数据模型</h1><ul><li><a href="https://www.actian.com/data-management/ingres-sql-rdbms/">Actian Versant</a> - 面向对象的商业数据库管理系统。</li><li><a href="https://crate.io/">Crate Data</a> - 是一个开源的大规模可扩展数据存储，它不需要任何管理。</li><li><a href="http://www.infoq.com/news/2014/06/facebook-apollo">Facebook Apollo</a> - Facebook 的类似于 Paxos 的 NoSQL 数据库。</li><li><a href="http://comsysto.github.io/jumbodb/">jumboDB</a> - 基于 Hadoop 的面向文档的数据存储。</li><li><a href="https://engineering.linkedin.com/data">LinkedIn Espresso</a> - 可水平扩展的面向文档 NoSQL 数据存储。</li><li><a href="http://www.marklogic.com/">MarkLogic</a> - 模式无关的企业 NoSQL 数据库技术。</li><li><a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Microsoft Azure DocumentDB</a> - NoSQL 云数据库服务，支持 MongoDB 协议</li><li><a href="https://www.mongodb.com/">MongoDB</a> - 面向文档的数据库系统。</li><li><a href="https://ravendb.net/">RavenDB</a> - 支持事务的开源文档数据库。</li><li><a href="https://rethinkdb.com/">RethinkDB</a> - 支持表 join 和 group by 等查询的文档数据库。</li></ul><h1 id="Key-Map-数据模型"><a href="#Key-Map-数据模型" class="headerlink" title="Key Map 数据模型"></a>Key Map 数据模型</h1><p><strong>注意</strong>: 业界存在一些术语混淆，存在两种不同的东西被称为“列式数据库”。这里列出的一些是围绕“键 - 映射”数据模型构建的分布式持久性数据库：所有数据都有一个(可能是组合的)键，键值对的映射与之关联。在某些系统中，多个这样的值映射可以与一个键关联，这些映射称为“列族”(值映射键称为“列”)。</p><p>另一种也称为“列式数据库”的技术，特点是它在磁盘或内存中如何存储数据。这些系统将所有行的相同列值数据存储在一起。因此，需要做更多的工作来获得给定键的所有列，但是需要更少的工作来获得给定列的所有值。</p><p>前一种在这里称为“键映射数据模型”。这些和 <a href="#Key-value-数据模型">Key-value 数据模型</a> 存储之间的界限相当模糊。</p><p>后者更多地是关于存储格式而不是数据模型，这些数据库我们把它归到 <a href="#列式数据库">列式数据库</a> 里面去了。</p><p>你可以到 Prof. Daniel Abadi 的博文：<a href="http://dbmsmusings.blogspot.com/2010/03/distinguishing-two-major-types-of_29.html">Distinguishing two major types of Column Stores</a>。</p><ul><li><a href="http://accumulo.apache.org/">Apache Accumulo</a> - 构建在 Hadoop 之上的分布式键值存储系统。</li><li><a href="http://cassandra.apache.org/">Apache Cassandra</a> - 受 BigTable 启发的、面向列的分布式数据存储。</li><li><a href="http://hbase.apache.org/">Apache HBase</a> - 受 BigTable 启发的、面向列的分布式数据存储。</li><li><a href="https://github.com/baidu/tera">Baidu Tera</a> - 受 BigTable 启发的一种大型分布式表格存储系统，具有高性能、可伸缩等存储特点，最初的设计是为了管理万亿量级的超链和网页信息。</li><li><a href="https://code.facebook.com/posts/321111638043166/hydrabase-the-evolution-of-hbase-facebook/">Facebook HydraBase</a> - 由 Facebook 开发的 HBase 演化版本。</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf">Google BigTable</a> - 面向列的分布式数据存储。</li><li><a href="https://cloud.google.com/datastore/docs/concepts/overview">Google Cloud Datastore</a> - 一个完全托管的无模式数据库，用于在 BigTable 上存储非关系数据。</li><li><a href="http://www.hypertable.org/">Hypertable</a> - 受 BigTable 启发的、面向列的分布式数据存储。</li><li><a href="https://github.com/infinidb/infinidb/">InfiniDB</a> - 通过MySQL接口访问，并使用大规模并行处理来并行化查询。</li><li><a href="https://github.com/caskdata/tephra">Tephra</a> - 使 HBase 支持事务</li><li><a href="https://blog.twitter.com/engineering/en_us/a/2014/manhattan-our-real-time-multi-tenant-distributed-database-for-twitter-scale.html">Twitter Manhattan</a> - Twitter 开发的实时、多租户分布式数据库。</li><li><a href="http://www.scylladb.com/">ScyllaDB</a> - 使用 C++ 编写的面向列的分布式数据存储，完全兼容 Apache Cassandra。</li></ul><h1 id="Key-value-数据模型"><a href="#Key-value-数据模型" class="headerlink" title="Key-value 数据模型"></a>Key-value 数据模型</h1><ul><li><a href="http://www.aerospike.com/">Aerospike</a> - 一个分布式，高可用的 K-V 类型的 NOSQL 数据库。提供类似传统数据库的ACID操作。</li><li><a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a> - 分布式 key/value 存储，Dynamo 论文的实现。</li><li><a href="https://open.dgraph.io/post/badger/">Badger</a> - 一个快速、简单、高效和持久的键值存储，是用 Go 编写。</li><li><a href="https://github.com/boltdb/bolt">Bolt</a> - 可在 Go 语言中使用的嵌入式键值数据库。</li><li><a href="https://github.com/Bobris/BTDB">BTDB</a> - .Net 中的 Key Value 数据库，包含 Object DB Layer，RPC，dynamic IL 等等。</li><li><a href="https://github.com/tidwall/buntdb">BuntDB</a> - Go 语言的一个快速，可嵌入，基于内存的 key/value 数据库，支持自定义索引和地理空间。</li><li><a href="https://github.com/cbd/edis">Edis</a> - 协议兼容 Redis 的数据库，可替代 Redis。</li><li><a href="https://github.com/nathanmarz/elephantdb">ElephantDB</a> - 专门用于从 Hadoop 导出数据的分布式数据库。</li><li><a href="https://geteventstore.com/">EventStore</a> - 分布式时间序列数据库。</li><li><a href="https://github.com/griddb/griddb_nosql">GridDB</a> - 一款高度可扩展的 NoSQL 数据库，非常适用于物联网和大数据领域，还具有高可靠性和高性能这些特性。</li><li><a href="https://github.com/rescrv/HyperDex">HyperDex</a> - 可扩展的下一代键值和文档存储，具有多种功能，包括一致性，容错性和高性能。</li><li><a href="https://ignite.apache.org/index.html">Ignite</a> - 分布式内存网格数据库，具有可持久化，分布式事务，分布式计算等特点，此外还支持丰富的键值存储以及SQL语法。</li><li><a href="https://github.com/linkedin-sna/sna-page/tree/master/krati">LinkedIn Krati</a> - 一个简单的持久化数据存储，具有非常低的延迟和高吞吐量。</li><li><a href="http://www.project-voldemort.com/voldemort/">Linkedin Voldemort</a> - 分布式 key/value 存储系统。</li><li><a href="http://www.oracle.com/technetwork/database/database-technologies/nosqldb/overview/index.html">Oracle NoSQL Database</a> - Oracle 公司开发的分布式 key/value 存储系统。</li><li><a href="https://redis.io/">Redis</a> - 一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</li><li><a href="https://github.com/basho/riak">Riak</a> - 去中心化的数据库存储。</li><li><a href="https://github.com/twitter/storehaus">Storehaus</a> - Twitter 开发的用于异步 key/value 存储的类库。</li><li><a href="https://github.com/tidwall/summitdb">SummitDB</a> - 基于内存的 NoSQL 键/值数据库，具有磁盘持久性，并支持 Raft 一致性算法。</li><li><a href="https://github.com/tarantool/tarantool">Tarantool</a> - 一个高效的 NoSQL 数据库和一个 Lua 应用服务器。</li><li><a href="https://github.com/pingcap/tikv">TiKV</a> - 一个基于 Rust 的分布式键值数据库，并受谷歌 Spanner 和 HBase 的启发。</li><li><a href="https://github.com/tidwall/tile38">Tile38</a> - 具有空间索引和实时地理围栏的地理位置数据库。支持各种对象类型，包括纬度/经度点，边界框，XYZ切片，Geohashes 和 GeoJSON。</li><li><a href="https://github.com/Treode/store">TreodeDB</a> - key-value 存储，支持数据副本、分片以及提供原子多行写。</li></ul><h1 id="图数据模型"><a href="#图数据模型" class="headerlink" title="图数据模型"></a>图数据模型</h1><ul><li><a href="http://www.agensgraph.com/">AgensGraph</a> - 基于 PostgreSQL 的新一代多模型图数据库。</li><li><a href="http://giraph.apache.org/">Apache Giraph</a> - 一个可伸缩的分布式迭代图处理系统，基于 Hadoop 平台，灵感来自 BSP (bulk synchronous parallel) 和 Google 的 Pregel。</li><li><a href="http://spark.apache.org/docs/0.7.3/bagel-programming-guide.html">Apache Spark Bagel</a> - Bagel 是谷歌 Pregel 图处理框架的 Spark 实现，支持基本的图形计算、组合器（combiners）和聚合器（aggregators）。目前已经被 GraphX 替代，在 Spark 2.0.0 版本已经被移除。</li><li><a href="https://www.arangodb.com/">ArangoDB</a> - 多模型分布式数据库。</li><li><a href="https://github.com/dgraph-io/dgraph">DGraph</a> - 一个可伸缩的、分布式的、低延迟的、高吞吐量的图数据库，旨在提供谷歌生产级别的规模和吞吐量，具有足够低的延迟，可以在 TB 级的结构化数据上为实时用户查询提供服务。</li><li><a href="https://github.com/krotik/eliasdb">EliasDB</a> - 一个轻量级的基于图的数据库，不需要任何第三方库。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/tao-the-power-of-the-graph/10151525983993920">Facebook TAO</a> - TAO 是 Facebook 广泛使用的分布式数据存储，用于存储和服务社交图。</li><li><a href="https://github.com/gchq/Gaffer">GCHQ Gaffer</a> - Gaffer 是 GCHQ（英国政府通讯总部）于 2015 年 12 月 14 日在 GitHub 上公布的第一个开源项目，Gaffer 是个大规模图形数据库，可以方便存储大规模图的框架，节点和边界有数据统计，比如计数，直方图和草图。这些统计数据是时间窗口的节点和边界属性，可以根据时间动态更新。</li><li><a href="https://github.com/cayleygraph/cayley">Google Cayley</a> - 开源的图数据库。</li><li><a href="http://kowshik.github.io/JPregel/pregel_paper.pdf">Google Pregel</a> - 图处理框架。</li><li><a href="https://turi.com/products/create/docs/">GraphLab PowerGraph</a> - 包含 C++ 实现的 GraphLab API 以及一组基于GraphLab API 构建的高性能机器学习和数据挖掘工具包。</li><li><a href="https://amplab.cs.berkeley.edu/publication/graphx-grades/">GraphX</a> - 一个分布式图处理框架，它是基于 Spark 平台提供对图计算和图挖掘简洁易用的而丰富的接口，极大的方便了对分布式图处理的需求。</li><li><a href="https://github.com/tinkerpop/gremlin">Gremlin</a> - 图遍历语言。</li><li><a href="https://github.com/paulhoule/infovore">Infovore</a> - 一个 Map/Reduce 框架，用来处理大量的 RDF 数据集，注入 Freebase 和 DBpedia，基于 Hadoop 构建。</li><li><a href="https://01.org/graphbuilder/">Intel GraphBuilder</a> - 基于 Hadoop 构造的大型图工具。</li><li><a href="http://janusgraph.org">JanusGraph</a> - 开源分布式图形数据库，后端存储可以选择多种组件包括 Bigtable、HBase、Cassandra 等，同时索引后端也可以选择很多种，包括 Elasticsearch、Solr、Lucene 等。</li><li><a href="https://www.blazegraph.com/mapgraph-technology/">MapGraph</a> - 一个高级的 API 用于快速开发基于 GPU 的高性能图形分析应用。</li><li><a href="https://github.com/Microsoft/GraphEngine">Microsoft Graph Engine</a> - 一个基于内存的分布式大规模图数据处理引擎，能够帮助用户更方便地构建实时查询应用和高吞吐量离线分析平台。在此之前，它在学术界更广为人之的名称是 Trinity。</li><li><a href="https://neo4j.com/">Neo4j</a> - 一个高性能的 NOSQL图数据库，完全由 Java 实现。</li><li><a href="http://orientdb.com/">OrientDB</a> - 文档图形数据库。</li><li><a href="https://github.com/xslogic/phoebus">Phoebus</a> - 大型图处理框架。</li><li><a href="http://thinkaurelius.github.io/titan/">Titan</a> - 建立在 Cassandra 之上的分布式图数据库。</li><li><a href="https://github.com/twitter-archive/flockdb">Twitter FlockDB</a> - 分布式图数据库。</li><li><a href="https://nodexl.codeplex.com/">NodeXL</a> - Microsoft® Excel® 2007，2010，2013 和 2016 免费开源的模板，可以很容易的探索网络图。</li></ul><h1 id="列式数据库"><a href="#列式数据库" class="headerlink" title="列式数据库"></a>列式数据库</h1><p><strong>注意</strong>：请读一下 <a href="#Key-value-数据模型">Key-value 数据模型</a> 章节的说明。</p><ul><li><a href="http://the-paper-trail.org/blog/columnar-storage/">Columnar Storage</a> - 解释什么是列式存储，以及我们什么时候需要它。</li><li><a href="http://www.actian.com/">Actian Vector</a> - 面向列的分析数据库。</li><li><a href="http://db.lcs.mit.edu/projects/cstore/">C-Store</a> - 面向列的 DBMS。</li><li><a href="https://clickhouse.yandex/">ClickHouse</a> - 一个开源的列式数据库（DBMS），主要用于在线分析处理查询（OLAP）。</li><li><a href="http://eventql.io/">EventQL</a> - 为大规模事件收集和分析而构建的分布式、面向列的数据库。</li><li><a href="https://www.monetdb.org/">MonetDB</a> - 列式存储数据库。</li><li><a href="http://parquet.apache.org/">Parquet</a> - 灵感来自于2010年 Google 发表的 Dremel 论文，是一种列式存储格式，与语言、平台无关，并且不需要和任何一种数据处理框架绑定。</li><li><a href="https://pivotal.io/pivotal-greenplum">Pivotal Greenplum</a> - 为特定目的而构建的专用分析数据仓库，它提供了一个列式存储引擎和一个传统的基于行的引擎。</li><li><a href="https://www.vertica.com/">Vertica</a> - 设计用于管理大量快速增长的数据，提供非常快的查询性能。</li><li><a href="http://sqream.com/">SQream DB</a> - 以色列大数据公司开发的跑在 GPU 上的大数据数据库，设计用于分析和数据仓库，使用 ANSI-92 SQL，适用于10TB到1PB的数据集。</li><li><a href="https://cloud.google.com/bigquery/what-is-bigquery">Google BigQuery</a> - Google 推出的一项 Web 服务，该服务让开发者可以使用 Google 的架构来运行 SQL 语句对超级大的数据库进行操作。</li><li><a href="https://aws.amazon.com/redshift/">Amazon Redshift</a> - 一个支持 SQL 查询的、快速、可扩展的列式存储数据库，它支持 PB 级的数量查询，是适用于企业级的数据仓库。</li><li><a href="https://github.com/shunfei/indexr">IndexR</a> - 一个开源的大数据存储格式，于 2017 年 1 月初正式开源，旨在通过添加索引、优化编码方式、提高 IO 效率等各种优化方式来提高计算层和存储层的数据交换效率，从而提升整体性能。</li><li><a href="https://github.com/cswinter/LocustDB">LocustDB</a> - 一个大规模并行且高性能的分析数据库 (Analytics Database)，可快速处理你的所有数据，目前处于实验性阶段。</li></ul><h1 id="NewSQL-数据库"><a href="#NewSQL-数据库" class="headerlink" title="NewSQL 数据库"></a>NewSQL 数据库</h1><ul><li><a href="http://www.actian.com/products/operational-databases/">Actian Ingres</a> - 商业支持，开源 SQL 关系数据库管理系统。</li><li><a href="https://github.com/biokoda/actordb">ActorDB</a> - 分布式的 SQL 数据库，可实现可伸缩的 K/V 存储系统。ActorDB 基于 Actor 计算模型，与传统的集中式数据库不同，ActorDB 由任意数量的被成为 actor 的独立和并发 SQL 数据库组成。</li><li><a href="http://aws.amazon.com/redshift/">Amazon RedShift</a> - 基于 PostgreSQL 的数据仓库服务。</li><li><a href="https://github.com/probcomp/BayesDB">BayesDB</a> - 一个贝叶斯数据库，内建贝叶斯查询语言 BQL，用户无需统计方面知识即可解决一些基本的科学数据问题</li><li><a href="http://bedrockdb.com/">Bedrock</a> - 构建在 SQLite 之上的简单、模块化、网络化、分布式事务层。</li><li><a href="https://www.citusdata.com/">CitusDB</a> - 通过分片和副本扩展 PostgreSQL。</li><li><a href="https://github.com/cockroachdb/cockroach">Cockroach</a> - 可伸缩、地理复制、事务性数据存储。</li><li><a href="https://github.com/bloomberg/comdb2">Comdb2</a> - 一个基于乐观并发控制技术的集群 RDBMS。</li><li><a href="http://www.datomic.com/">Datomic</a> - 分布式数据库旨在支持可伸缩、灵活和智能的应用程序。</li><li><a href="https://foundationdb.com/">FoundationDB</a> - 分布式数据库，受 F1 启发。</li><li><a href="https://research.google.com/pubs/pub41344.html">Google F1</a> - 构建在 Spanner 之上的分布式 SQL 数据库。</li><li><a href="https://research.google.com/archive/spanner.html">Google Spanner</a> - Google的全球级的分布式数据库，具有可扩展，多版本，全球分布式、同步复制等特性。</li><li><a href="http://hstore.cs.brown.edu/">H-Store</a> - 一个实验性的数据库管理系统。它专为驻线交易处理应用程序（OLTP）而设计。</li><li><a href="https://github.com/VCNC/haeinsa">Haeinsa</a> - Haeinsa 是 HBase 可线性扩展的多行，多表事务库。使用两阶段锁定和乐观并发控制来实现事务。 事务的隔离级别是可序列化的。基于 Percolator 实现。</li><li><a href="https://www.percona.com/doc/percona-server/5.5/performance/handlersocket.html">HandlerSocket</a> - MySQL/MariaDB 的 NoSQL 插件。</li><li><a href="http://www.infinisql.org/">InfiniSQL</a> - 无限扩展的 RDBMS.</li><li><a href="https://github.com/rayokota/kareldb">KarelDB</a> - 由 Apache Kafka 支持的关系数据库。</li><li><a href="https://www.mapd.com/">Map-D</a> - GPU 内存数据库，大数据分析可视化平台。</li><li><a href="http://www.memsql.com/">MemSQL</a> - 一款内存数据库，它通过将数据存在内存中，将 SQL 语句预编译为 C++ 而获得极速执行效率。</li><li><a href="http://www.nuodb.com/">NuoDB</a> - 符合 SQL/ACID 的分布式数据库。</li><li><a href="http://www.oracle.com/technetwork/database/database-technologies/timesten/overview/index.html">Oracle TimesTen in-Memory Database</a> - 基于内存的关系数据库管理系统，具有持久性和可恢复性。</li><li><a href="http://gemfirexd.docs.pivotal.io/latest/">Pivotal GemFire XD</a> - 低延迟、基于内存、分布式 SQL 数据存储。为内存表数据提供 SQL 接口，可在 HDFS 中持久存储。</li><li><a href="https://hana.sap.com/abouthana.html">SAP HANA</a> - 基于内存、面向列、关系数据库管理系统。</li><li><a href="http://senseidb.github.io/sensei/">SenseiDB</a> - 分布式、实时、半结构化的数据库。</li><li><a href="http://skydb.io/">Sky</a> - 用于灵活、高性能的行为数据分析的数据库。</li><li><a href="http://www.symmetricds.org/">SymmetricDS</a> - 用于文件和数据库同步的开源软件。</li><li><a href="https://github.com/pingcap/tidb">TiDB</a> - 一款定位于在线事务处理/在线分析处理的融合型数据库产品，实现了一键水平伸缩，强一致性的多副本数据安全，分布式事务，实时 OLAP 等重要特性。受 Google F1 启发。</li><li><a href="https://www.voltdb.com/">VoltDB</a> - 声称是最快的内存数据库。</li><li><a href="https://github.com/YugaByte/yugabyte-db">yugabyteDB</a> - 与 PostgreSQL 兼容的开源，高性能，分布式SQL数据库。</li></ul><h1 id="时间序列数据库"><a href="#时间序列数据库" class="headerlink" title="时间序列数据库"></a>时间序列数据库</h1><ul><li><a href="http://axibase.com/products/axibase-time-series-database/">Axibase Time Series Database</a> - 基于 HBase 的时间序列数据库，内置可视化、规则引擎和 SQL 支持。</li><li><a href="http://chronix.io/">Chronix</a> - 一种时间序列存储器，用于存储高度压缩的时间序列，并支持快速访问数据。</li><li><a href="http://square.github.io/cube/">Cube</a> - 使用 MongoDB 来存储时间序列数据。</li><li><a href="https://spotify.github.io/heroic/#!/index">Heroic</a> - 基于 Cassandra 和 Elasticsearch 的可扩展时间序列数据库。</li><li><a href="https://www.influxdata.com/">InfluxDB</a> - 分布式时间序列数据库。</li><li><a href="https://www.circonus.com/irondb/">IronDB</a> - 可扩展、通用时间序列数据库。</li><li><a href="https://github.com/kairosdb/kairosdb">Kairosdb</a> - 和 OpenTSDB 类似，但是构建在 Cassandra 之上。</li><li><a href="http://m3db.github.io/m3/m3db/">M3DB</a> - 一个分布式时间序列数据库，可用于长期存储实时指标。</li><li><a href="https://opennms.github.io/newts/">Newts</a> - 基于 Apache Cassandra 的时间序列数据库。</li><li><a href="https://github.com/taosdata/TDengine/">TDengine</a> - 使用 IoT 的独特功能的 C 语言中的时间序列数据库，以提高读 / 写吞吐量并减少存储数据所需的空间。</li><li><a href="http://opentsdb.net">OpenTSDB</a> - 构建在 HBase 之上的分布式时间序列数据库。</li><li><a href="https://prometheus.io/">Prometheus</a> - 时间序列数据库和服务监控系统。</li><li><a href="https://github.com/facebookincubator/beringei">Beringei</a> - Facebook 的内存时间序列数据库。</li><li><a href="http://traildb.io/">TrailDB</a> - 用于存储和查询一系列事件的有效工具。</li><li><a href="https://github.com/druid-io/druid/">Druid</a> - MetaMarket 公司研发，专为海量数据集上的做高性能 OLAP (OnLine Analysis Processing)而设计的数据存储和分析系统</li><li><a href="http://basho.com/products/riak-ts/">Riak-TS</a> - 唯一专为物联网和时间序列数据优化的企业级 NoSQL 时间序列数据库。</li><li><a href="https://github.com/akumuli/Akumuli">Akumuli</a> - 一个数值型时间序列数据库，可以存储、处理时序列数据。</li><li><a href="https://github.com/Pardot/Rhombus">Rhombus</a> - ACassandra 的时间序列对象存储。</li><li><a href="https://github.com/dalmatinerdb/dalmatinerdb">Dalmatiner DB</a> - 快速分布式度量数据库</li><li><a href="https://github.com/rackerlabs/blueflood">Blueflood</a> - 一种用于摄取和处理时间序列数据的分布式系统。</li><li><a href="https://github.com/NationalSecurityAgency/timely">Timely</a> - 一个时间序列数据库应用程序，它提供了基于 Accumulo 和 Grafana 的对时间序列数据的安全访问。</li><li><a href="https://github.com/transceptor-technology/siridb-server">SiriDB</a> - 具有集群功能的高扩展性、健壮性和快速的开源时间序列数据库。</li><li><a href="https://github.com/improbable-eng/thanos">Thanos</a> - 一组组件，可以使用多个 Prometheus 部署创建具有无限存储容量的高可用度量系统。</li><li><a href="https://github.com/VictoriaMetrics/VictoriaMetrics">VictoriaMetrics</a> - 与 Prometheus 兼容的快速，可扩展的开源 TSDB，包括单节点和群集版本。</li></ul><h1 id="类-SQL-处理系统"><a href="#类-SQL-处理系统" class="headerlink" title="类 SQL 处理系统"></a>类 SQL 处理系统</h1><ul><li><a href="http://www.actian.com/analytic-database/vectorh-sql-hadoop">Actian SQL for Hadoop</a> - 高性能交互式 SQL，可以利用它访问 Hadoop 上的数据。</li><li><a href="http://drill.apache.org/">Apache Drill</a> - 一个低延迟的分布式海量数据交互式查询引擎，使用 ANSI SQL 兼容语法，本质上是一个分布式的 MPP 查询层。目的在于支持更广泛的数据源，数据格式，以及查询语言。受 Google的Dremel 启发。</li><li><a href="https://cwiki.apache.org/confluence/display/Hive/HCatalog">Apache HCatalog</a> - Hadoop 的表存储管理工具。</li><li><a href="http://hive.apache.org/">Apache Hive</a> - 基于 Hadoop 的一个数据仓库工具，可以将结构化数据文件映射为一张数据库表，并提供类 SQL 查询功能。</li><li><a href="http://calcite.apache.org/">Apache Calcite</a> - 一款开源 SQL 解析工具，可以将各种 SQL 语句解析成抽象语法术AST(Abstract Syntax Tree)，之后通过操作 AST 就可以把 SQL 中所要表达的算法与关系体现在具体代码之中。</li><li><a href="http://phoenix.apache.org/index.html">Apache Phoenix</a> - 构建在 HBase 之上的关系型数据库层，可以对 HBase 中的数据进行低延迟访问。</li><li><a href="http://www.teradata.com/products-and-services/Teradata-Aster/teradata-aster-database">Aster Database</a> - 类 SQL 分析处理。</li><li><a href="https://www.cloudera.com/products/apache-hadoop/impala.html">Cloudera Impala</a> - 实时交互 SQL 大数据查询工具，受 Dremel 启发。</li><li><a href="http://www.cascading.org/projects/lingual/">Concurrent Lingual</a> - Cascading 上的 SQL 查询语言。</li><li><a href="http://www.datasalt.com/products/splout-sql/">Datasalt Splout SQL</a> - 针对大数据集的完整 SQL 查询引擎。</li><li><a href="https://www.dremio.com/">Dremio</a> - 一个基于Apache Arrow的开源，类似SQL的数据服务平台。</li><li><a href="https://prestodb.io/">Facebook PrestoDB</a> - 分布式 SQL 查询引擎。</li><li><a href="https://research.google.com/pubs/pub36632.html">Google BigQuery</a> - Google 推出的一项 Web 服务，该服务让开发者可以使用 Google 的架构来运行 SQL 语句对超级大的数据库进行操作，是 Dremel 的实现。</li><li><a href="https://www.pipelinedb.com/">PipelineDB</a> - 一个开源的关系数据库，它可以在实时流数据上执行 SQL 查询，并将结果增量地存储在表中。</li><li><a href="https://pivotal.io/pivotal-hdb">Pivotal HDB</a> - Hadoop 上的类 SQL 数据仓库系统。</li><li><a href="http://rainstor.com/products/rainstor-database/">RainstorDB</a> - 用于存储 PB 级结构化和半结构化数据量的数据库。</li><li><a href="https://github.com/apache/spark/tree/master/sql">Spark Catalyst</a> - Apache Spark 的查询优化框架。</li><li><a href="https://databricks.com/blog/2014/03/26/spark-sql-manipulating-structured-data-using-spark-2.html">SparkSQL</a> - 使用 Spark 操作结构化的数据。</li><li><a href="https://www.splicemachine.com/">Splice Machine</a> - 兼具了 SQL 和 NoSQL 的各自优势，且能对操作型和分析型应用进行实时处理，具有 ACID 特性。</li><li><a href="https://hortonworks.com/innovation/stinger/">Stinger</a> - 由 Hortonworks 开发的一个彻底提升 Hive 效率的工具。</li><li><a href="http://tajo.apache.org/">Tajo</a> - Hadoop 之上的分布式数据仓库系统。</li><li><a href="https://wiki.trafodion.org/wiki/index.php/Main_Page">Trafodion</a> - 由惠普开发并开源的基于 Hadoop 平台的事务数据库引擎。提供了一个基于 Hadoop 平台的交易型 SQL 引擎，是一个擅长处理交易型负载的 Hadoop 大数据解决方案。</li></ul><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><ul><li><a href="https://aws.amazon.com/kinesis/">Amazon Kinesis</a> - 一种在 AWS 上流式处理数据的平台，让您可以轻松地加载和分析流数据，同时还可让您根据具体需求来构建自定义流数据应用程序。</li><li><a href="https://aws.amazon.com/glue/">Amazon Web Services Glue</a> -  一项完全托管的提取、转换和加载（ETL）服务，让用户能够轻松准备和加载数据进行分析。</li><li><a href="http://chukwa.apache.org/">Apache Chukwa</a> - 数据采集系统。</li><li><a href="http://flume.apache.org/">Apache Flume</a> - 一个分布式的、可靠的、易用的系统，可以有效地将来自很多不同源系统的大量日志数据收集、汇总或者转移到一个数据中心存储。</li><li><a href="http://kafka.apache.org/">Apache Kafka</a> - 分布式发布订阅消息系统。</li><li><a href="https://nifi.apache.org/">Apache NiFi</a> - 一个易用、强大、可靠的数据处理与分发系统</li><li><a href="http://sqoop.apache.org/">Apache Sqoop</a> - 一款开源的工具，主要用于在 Hadoop/Hive 与传统的数据库（MySQL、Oracle...）间进行数据的传递</li><li><a href="http://www.embulk.org">Embulk</a> - 开源的批量数据加载器，帮助在各种数据库、存储、文件格式和云服务之间传输数据。</li><li><a href="https://github.com/facebookarchive/scribe">Facebook Scribe</a> - 流日志数据聚合器。</li><li><a href="http://www.fluentd.org">Fluentd</a> - 用于收集事件和日志的工具。</li><li><a href="https://research.google.com/pubs/pub41318.html">Google Photon</a> - 地理分布式系统，用于实时连接多个连续流动的数据流，具有高可伸缩性和低延迟。</li><li><a href="https://github.com/mozilla-services/heka">Heka</a> - 开源流处理系统。</li><li><a href="https://github.com/sonalgoyal/hiho">HIHO</a> - 用于将不同数据源的数据和 Hadoop 进行连接的框架。</li><li><a href="https://github.com/papertrail/kestrel">Kestrel</a> - 分布式消息队列系统。</li><li><a href="https://engineering.linkedin.com/data">LinkedIn Databus</a> - LinkedIn 开源的一个低延迟、可靠的、支持事务的、保持一致性的数据变更抓取系统。</li><li><a href="https://github.com/linkedin/kamikaze">LinkedIn Kamikaze</a> - 一种实用工具包，对 document lists 提供一系列的实现。</li><li><a href="https://github.com/linkedin/white-elephant">LinkedIn White Elephant</a> - 一个 Hadoop 日志收集器和展示器，它提供了用户角度的 Hadoop 集群可视化。</li><li><a href="https://www.elastic.co/products/logstash">Logstash</a> - 一个开源的日志收集管理工具，可以采集来自不同数据源的数据，并对数据进行处理后输出到多种输出源。</li><li><a href="https://github.com/Netflix/suro">Netflix Suro</a> - Netflix 开源的一款工具，它能够在数据被发送到不同的数据平台（如 Hadoop、Elasticsearch）之前，收集不同应用服务器上的事件数据。</li><li><a href="https://github.com/pinterest/secor">Pinterest Secor</a> - 实现 Kafka 日志持久性的服务</li><li><a href="https://github.com/linkedin/gobblin">Linkedin Gobblin</a> - 一套分布式数据集成框架，旨在简化大数据集成工作当中的各类常见任务，具体包括数据流与批量生态系统的提取、复制、组织与生命周期管理。</li><li><a href="https://github.com/skizzehq/skizze">Skizze</a> - 一种概率数据结构服务和存储。</li><li><a href="https://github.com/streamsets/datacollector">StreamSets Data Collector</a> - 使用一个简单的 IDE 来连续大数据摄取基础设施。</li><li><a href="https://github.com/apache/incubator-pulsar">Yahoo Pulsar</a> - 由 Yahoo 开发并开源的一个企业级的发布订阅消息系统。</li><li><a href="https://www.alooma.com/integrations/mysql">Alooma</a> - 实时的数据管道服务，支持将 MySQL 等数据源的数据移动到数据仓库中。</li></ul><h1 id="服务编程"><a href="#服务编程" class="headerlink" title="服务编程"></a>服务编程</h1><ul><li><a href="http://akka.io/">Akka Toolkit</a> - 基于 Actor 模型，提供了一个用于构建可扩展的（Scalable）、弹性的（Resilient）、快速响应的（Responsive）应用程序的平台。</li><li><a href="http://avro.apache.org/">Apache Avro</a> - 数据序列化系统。</li><li><a href="http://curator.apache.org/">Apache Curator</a> - 为 Apache ZooKeeper 开发的类库。</li><li><a href="http://karaf.apache.org/">Apache Karaf</a> - Apache 旗下的一个开源项目，同时也是一个基于 OSGi 的运行环境，Karaf 提供了一个轻量级的 OSGi 容器，可以用于部署各种组件，应用程序。</li><li><a href="http://thrift.apache.org//">Apache Thrift</a> - Facebook 开源的跨语言的 RPC 通信框架。</li><li><a href="http://zookeeper.apache.org/">Apache Zookeeper</a> - 一个分布式应用程序协调服务。</li><li><a href="https://research.google.com/archive/chubby.html">Google Chubby</a> - 一个分布式锁服务，Chubby 底层一致性实现就是以 Paxos 为基础的</li><li><a href="https://github.com/Hydrospheredata/mist">Hydrosphere Mist</a> - 一个将 Apache Spark 分析任务和机器学习模型转换为实时、批处理或反应性 web 服务的服务。</li><li><a href="https://engineering.linkedin.com/data">Linkedin Norbert</a> - 集群管理系统。</li><li><a href="https://github.com/mara/data-integration">Mara</a> - 一个轻量级的自定义ETL框架。</li><li><a href="https://www.open-mpi.org/">OpenMPI</a> - 消息传递框架。</li><li><a href="https://www.serf.io/">Serf</a> - 去中心化的服务发现和编排解决方案。</li><li><a href="https://github.com/spotify/luigi">Spotify Luigi</a> - 用于构建批处理作业的复杂管道的 Python 包。它处理依赖项解析、工作流管理、可视化、处理故障、命令行集成等等。</li><li><a href="https://github.com/spring-projects/spring-xd">Spring XD</a> - 用于数据摄取、实时分析、批处理和数据导出的分布式和可扩展系统。</li><li><a href="https://github.com/twitter/elephant-bird">Twitter Elephant Bird</a> - 用于处理 LZOP 压缩数据的库。</li><li><a href="https://twitter.github.io/finagle/">Twitter Finagle</a> - JVM的异步网络堆栈。</li></ul><h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><ul><li><a href="https://github.com/apache/incubator-airflow">Apache Airflow</a> - Airbnb 开源的一个用 Python 编写的工作流管理平台。</li><li><a href="http://aurora.apache.org/">Apache Aurora</a> - 长期运行服务和计划作业的 Mesos 框架。</li><li><a href="http://falcon.apache.org/">Apache Falcon</a> - 数据管理框架。</li><li><a href="http://oozie.apache.org/">Apache Oozie</a> - 工作流作业调度器。</li><li><a href="https://docs.microsoft.com/en-us/azure/data-factory/data-factory-introduction">Azure Data Factory</a> - 可大规模简化 ETL 的混合数据集成服务</li><li><a href="http://mesos.github.io/chronos/">Chronos</a> - 分布式和容错调度器。</li><li><a href="https://azkaban.github.io/">Linkedin Azkaban</a> - 批处理工作流作业调度程序。</li><li><a href="https://github.com/ottogroup/schedoscope">Schedoscope</a> - 用于 Hadoop 作业的敏捷调度 Scala DSL。</li><li><a href="https://github.com/radlab/sparrow">Sparrow</a> - 调度平台。</li></ul><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul><li><a href="https://studio.azureml.net/">Azure ML Studio</a> - 基于云的 R、Python 机器学习平台。</li><li><a href="https://github.com/harthur/brain">brain</a> - JavaScript 中的神经网络。</li><li><a href="https://github.com/OryxProject/oryx">Oryx</a> - 实时大规模机器学习。</li><li><a href="http://www.cascading.org/projects/pattern/">Concurrent Pattern</a> - Cascading 上的机器学习框架。</li><li><a href="https://github.com/karpathy/convnetjs">convnetjs</a> - Javascript 中的深入学习，可以在浏览器中训练卷积神经网络(或普通神经网络)。</li><li><a href="https://github.com/deeplearning4j/DataVec">DataVec</a> - 一个用于 Java 和 Scala 深度学习的矢量化和数据预处理库。Deeplearning4j生态系统的一部分。</li><li><a href="https://github.com/deeplearning4j">Deeplearning4j</a> - 美国 AI 创业公司 Skymind 开源并维护的一个基于 Java/JVM 的深度学习框架，可使用 CPU 或 GPU 运行。</li><li><a href="https://github.com/danielsdeleo/Decider">Decider</a> - Ruby中灵活且可扩展的机器学习。</li><li><a href="http://www.heatonresearch.com/encog/">ENCOG</a> - 支持多种高级算法的机器学习框架，以及支持规范化和处理数据的类。</li><li><a href="http://www.etcml.com/">etcML</a> - 在线免费文本分析工具是由美国的斯坦福大学计算机教授开发的基于成熟的文本分析引擎</li><li><a href="https://github.com/etsy/Conjecture">Etsy Conjecture</a> - Scalding 中可扩展的机器学习。</li><li><a href="https://github.com/gojek/feast">Feast</a> - 用于管理、发现和访问机器学习特性的特性存储库。Feast 为模型训练和模型服务提供了一致的特征数据视图。</li><li><a href="https://dato.com/products/create/">GraphLab Create</a> - Python 中的机器学习平台，包含大量 ML 工具包、数据工程和部署工具。</li><li><a href="https://github.com/h2oai/h2o-3/">H2O</a> - 使用 Hadoop、R 和 Python 进行统计、机器学习和数学运行时。</li><li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a> - 用于图形结构化数据的 Python 无监督机器学习库。</li><li><a href="https://github.com/fchollet/keras">Keras</a> - 一个高层神经网络 API，Keras 由纯 Python 编写而成并基 Tensorflow、Theano 以及 CNTK 后端。受 Torch 启发。</li><li><a href="https://github.com/johnsonc/lambdo">Lambdo</a> - 是一个工作流引擎，通过将一个分析管道、特征工程和机器学习、模型训练和预测结合起来，通过用户定义（Python）函数实现表填充和列评估，大大简化了数据处理和分析。</li><li><a href="http://mahout.apache.org/">Mahout</a> - 是 Apache Software Foundation（ASF）旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序。</li><li><a href="http://www.mlbase.org/">MLbase</a> - 是Spark生态圈的一部分，专注于机器学习，包含三个组件：MLlib、MLI、ML Optimizer。</li><li><a href="https://github.com/nikolaypavlov/MLPNeuralNet">MLPNeuralNet</a> - 一个针对 iOS 和 Mac OS 系统的快速多层感知神经网络库，可通过已训练的神经网络预测新实例。</li><li><a href="https://github.com/ml-tooling/ml-workspace">ML Workspace</a> - 基于 Web 的多合一 IDE，专门用于机器学习和数据科学。</li><li><a href="http://moa.cms.waikato.ac.nz">MOA</a> - 实时进行大数据流挖掘和大规模机器学习。</li><li><a href="https://monkeylearn.com/">MonkeyLearn</a> - 让文本挖掘变得很容易，可以从文本中提取和分类数据。</li><li><a href="https://github.com/deeplearning4j/nd4j">ND4J</a> - JVM 的矩阵库，可以认为是 Java 中的 Numpy。</li><li><a href="https://github.com/numenta/nupic">nupic</a> - 一个实现了HTM学习算法的机器智能平台。</li><li><a href="http://predictionio.incubator.apache.org/index.html">PredictionIO</a> - 面向开发人员和数据科学家的开源机器学习服务，构建在 Hadoop，Mahout 和 Cascading 之上。</li><li><a href="https://github.com/deeplearning4j/rl4j">RL4J</a> - 一个与 Deeplearning4j 集成的强化学习框架。</li><li><a href="http://samoa.incubator.apache.org/">SAMOA</a> - 分布式流数据机器学习框架。</li><li><a href="https://github.com/scikit-learn/scikit-learn">scikit-learn</a> - 专门面向机器学习的 Python 开源框架，实现了各种成熟的算法。</li><li><a href="http://spark.apache.org/docs/0.9.0/mllib-guide.html">Spark MLlib</a> - 使用 Spark 实现一些常见的机器学习算法和实用程序，包括分类、回归、聚类、协同过滤、降维以及底层优化。</li><li><a href="https://users.soe.ucsc.edu/~niejiazhong/slides/chandra.pdf">Sibyl</a> - 谷歌大型机器学习系统。</li><li><a href="https://github.com/tensorflow/tensorflow">TensorFlow</a> - 一个采用数据流图（data flow graphs），用于数值计算的开源软件库。</li><li><a href="https://github.com/theano">Theano</a> - 蒙特利尔大学支持的以 Python 为核心的机器学习类库。</li><li><a href="https://github.com/torch">Torch</a> - 一个基于 BSD License 的开源的机器学习的框架。</li><li><a href="https://github.com/amplab/velox-modelserver">Velox</a> - 服务于机器学习预测的系统。</li><li><a href="https://github.com/JohnLangford/vowpal_wabbit/wiki">Vowpal Wabbit</a> - 由微软和雅虎赞助的学习系统。</li><li><a href="http://www.cs.waikato.ac.nz/ml/weka/">WEKA</a> - 一套机器学习软件。</li><li><a href="https://github.com/BIDData/BIDMach">BidMach</a> - CPU 和 GPU 加速库的机器学习库。</li></ul><h1 id="基准"><a href="#基准" class="headerlink" title="基准"></a>基准</h1><ul><li><a href="https://issues.apache.org/jira/browse/MAPREDUCE-3561">Apache Hadoop Benchmarking</a> - 测试 Hadoop 性能的微基准测试。</li><li><a href="https://github.com/SWIMProjectUCB/SWIM/wiki">Berkeley SWIM Benchmark</a> - 真实大数据工作负载基准。</li><li><a href="https://github.com/intel-hadoop/HiBench">Intel HiBench</a> - Hadoop 基准套件。</li><li><a href="https://issues.apache.org/jira/browse/MAPREDUCE-5116">PUMA Benchmarking</a> - MapReduce 应用程序的基准测试套件。</li><li><a href="http://yahoohadoop.tumblr.com/post/98294079296/gridmix3-emulating-production-workload-for">Yahoo Gridmix3</a> - 来自 Yahoo 工程师团队的 Hadoop 集群基准测试。</li><li><a href="https://github.com/deeplearning4j/dl4j-benchmark">Deeplearning4j Benchmarks</a> - 对流行的模型和配置进行基准测试，并输出性能和版本统计信息。</li></ul><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><ul><li><a href="http://ranger.apache.org/">Apache Ranger</a> - 一个用在 Hadoop 平台上并提供操作、监控、管理综合数据安全的框架。</li><li><a href="http://eagle.apache.org/">Apache Eagle</a> - 由 eBay 公司开源的一个识别大数据平台上的安全和性能问题的开源解决方案。</li><li><a href="http://knox.apache.org/">Apache Knox Gateway</a> - Hadoop 集群中用于数据处理的 REST API 网关。</li><li><a href="http://incubator.apache.org/projects/sentry.html">Apache Sentry</a> - 为 Hadoop 集群中的元数据和数据存储提供集中、细粒度的访问控制。</li><li><a href="https://github.com/kotobukki/BDA/">BDA</a> - Hadoop 和 Spark 的漏洞检测器。</li></ul><h1 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h1><ul><li><a href="http://ambari.apache.org/">Apache Ambari</a> - 一个集中部署、管理、监控Hadoop 分布式集群的工具。</li><li><a href="http://bigtop.apache.org//">Apache Bigtop</a> - 一个针对基础设施工程师和数据科学家的开源项目，旨在全面打包、测试和配置领先的开源大数据组件 / 项目，包括但不限于 Hadoop、HBase 和 Spark 。</li><li><a href="http://helix.apache.org/">Apache Helix</a> - 集群管理框架。</li><li><a href="http://mesos.apache.org/">Apache Mesos</a> - 一个类似于 YARN 的集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享，可以运行 Hadoop、MPI、Hypertable、Spark。</li><li><a href="https://github.com/apache/incubator-slider">Apache Slider</a> - 是一个 YARN 应用程序，用于在 YARN 上部署现有的分布式应用程序。</li><li><a href="http://whirr.apache.org/">Apache Whirr</a> - 运行云服务的一组 Java 类库。</li><li><a href="https://hortonworks.com/hadoop/yarn/">Apache YARN</a> - 集群管理系统。</li><li><a href="http://brooklyncentral.github.io/">Brooklyn</a> - 简化应用程序部署和管理的库。</li><li><a href="http://buildoop.github.io/">Buildoop</a> - 类似于 Apache BigTop，基于 Groovy 语言开发。</li><li><a href="http://gethue.com/">Cloudera HUE</a> - 用于与 Hadoop 交互的 Web 应用程序。</li><li><a href="http://www.wired.com/2012/08/facebook-prism/">Facebook Prism</a> - 多数据中心复制系统。</li><li><a href="https://www.wired.com/2013/03/google-borg-twitter-mesos/all/">Google Borg</a> - Google 的内部大型集群管理系统。</li><li><a href="https://www.youtube.com/watch?v=0ZFMlO98Jkc">Google Omega</a> - Google 内部第三代的集群管理框架。</li><li><a href="https://hortonworks.com/blog/introducing-hoya-hbase-on-yarn/">Hortonworks HOYA</a> - 可以在 YARN 上部署 HBase 集群的应用程序。</li><li><a href="https://kubernetes.io/">Kubernetes</a> - Google 团队发起并维护的基于 Docker 的开源容器集群管理系统。</li><li><a href="https://github.com/mesosphere/marathon">Marathon</a> - 一个 Mesos 框架，能够支持运行长服务。</li></ul><h1 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h1><ul><li><a href="https://github.com/etsy/411">411</a> - 一个 Web 应用程序，用于通过计划搜索 Elasticsearch 而产生的警报管理。</li><li><a href="https://github.com/adobe-research/spindle">Adobe spindle</a> - 使用 Scala、Spark 和 Parquet 进行 web 分析的下一代系统。</li><li><a href="http://metron.apache.org/">Apache Metron</a> - 一个集成了各种开源大数据技术的平台，以提供用于安全监视和分析的集中式工具。</li><li><a href="http://nutch.apache.org/">Apache Nutch</a> - 开源 web 爬虫程序</li><li><a href="http://oodt.apache.org/">Apache OODT</a> - NASA 开源的用于做数据管理的系统。</li><li><a href="https://tika.apache.org/">Apache Tika</a> - 使用 Java 编写的内容检测和分析框架。</li><li><a href="https://github.com/salesforce/Argus">Argus</a> - 时序监控报警平台。</li><li><a href="https://github.com/uber/AthenaX">AthenaX</a> - 一个流分析平台，允许用户使用结构化查询语言（SQL）运行生产质量的大规模流分析。</li><li><a href="https://github.com/Netflix/atlas">Atlas</a> - 用于管理维度时间序列数据的系统。</li><li><a href="https://count.ly/">Countly</a> - 基于 Node.js 和 MongoDB 的开源移动和 web 分析平台。</li><li><a href="https://www.dominodatalab.com/">Domino</a> - 运行、扩展、共享和部署模型，不需要任何基础设施。</li><li><a href="http://www.eclipse.org/birt/">Eclipse BIRT</a> - 基于 Elasticsearch 的报告系统。</li><li><a href="https://github.com/Yelp/elastalert">ElastAert</a> - 为 ES 打造的报警监控工具。</li><li><a href="https://github.com/Codecademy/EventHub">Eventhub</a> - 开源事件分析平台。</li><li><a href="https://github.com/allegro/hermes">Hermes</a> - 构建在 Kafka 之上的异步消息代理。</li><li><a href="http://hipi.cs.virginia.edu/">HIPI Library</a> - 使用 Hadoop 的 MapReduce 来执行图像处理任务的 API。</li><li><a href="https://www.splunk.com/en_us/download/hunk.html">Hunk</a> - Hadoop 的分析工具。</li><li><a href="http://opensource.indeedeng.io/imhotep/">Imhotep</a> - 大型分析平台。</li><li><a href="https://www.indicative.com/">Indicative</a> - Web 和移动分析工具，具有数据仓库（AWS，BigQuery）集成。</li><li><a href="https://jupyter.org/">Jupyter</a> - 基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</li><li><a href="http://madlib.incubator.apache.org/community/">MADlib</a> - RDBMS 的数据处理库，用于分析数据。</li><li><a href="https://github.com/influxdata/kapacitor">Kapacitor</a> - 用于对时间序列数据进行处理、监视和警报的开源框架。</li><li><a href="http://kylin.apache.org/">Kylin</a> - 一个开源的分布式分析引擎，提供 Hadoop/Spark 之上的 SQL 查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由 eBay Inc. 开发并贡献至开源社区，能在亚秒内查询巨大的 Hive 表。</li><li><a href="https://github.com/pivotalsoftware/PivotalR">PivotalR</a> - 支持在 Pivotal HD/HAWQ 以及 PostgreSQL 上运行 R。</li><li><a href="https://github.com/rakam-io/rakam">Rakam</a> - 开源实时自定义分析平台，由 PostgreSQL，Kinesis 和 PrestoDB 提供支持。</li><li><a href="https://www.qubole.com/">Qubole</a> - 能够自动扩展 Hadoop 集群以及内置的链接器。</li><li><a href="https://sense.io/">Sense</a> - 数据科学和大数据分析的云平台。</li><li><a href="https://github.com/SnappyDataInc/snappydata">SnappyData</a> - 一个统一 OLTP + OLAP + 流式写入 的内存分布式数据库。</li><li><a href="https://github.com/snowplow/snowplow">Snowplow</a> - 由 Hadoop，Kinesis，Redshift 和 Postgres 支持的企业级 Web 和事件分析。</li><li><a href="http://amplab-extras.github.io/SparkR-pkg/">SparkR</a> - 用于 Spark 的 R 前端。</li><li><a href="https://www.splunk.com/">Splunk</a> - 一款成熟的商业化日志处理分析产品。</li><li><a href="https://www.sumologic.com/">Sumo Logic</a> - 基于云的日志处理分析产品。</li><li><a href="http://www.talend.com/products/big-data/">Talend</a> - YARN、Hadoop、HBASE、Hive、HCatalog 和 Pig 的统一开源环境。</li><li><a href="https://warp.one//">Warp</a> - 大数据示例查询工具(OS X 应用)。</li></ul><h1 id="搜索引擎和框架"><a href="#搜索引擎和框架" class="headerlink" title="搜索引擎和框架"></a>搜索引擎和框架</h1><ul><li><a href="http://lucene.apache.org/">Apache Lucene</a> - 一套用于全文检索和搜索的开放源码程序库。</li><li><a href="http://lucene.apache.org/solr/">Apache Solr</a> - 是 Apache Lucene 项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。</li><li><a href="https://github.com/strapdata/elassandra">Elassandra</a> - 是 ElasticSearch 的一个分支，经过修改，可以作为 Apache Cassandra 的插件运行，具有可扩展和灵活的点对点架构。</li><li><a href="https://www.elastic.co/">ElasticSearch</a> - 一个基于 Lucene 库的搜索引擎。它提供了一个分布式、支持多租户的全文搜索引擎，具有 HTTP Web 接口和无模式 JSON 文档。</li><li><a href="https://www.enigma.com/">Enigma.io</a> – 免费增值的 Web 应用程序，用于对 Web 上抓取的海量数据集进行浏览，过滤，分析，搜索和导出。</li><li><a href="https://www.facebook.com/publications/219621248185635/">Facebook Unicorn</a> - 社交图搜索平台。</li><li><a href="https://googleblog.blogspot.it/2010/06/our-new-search-index-caffeine.html">Google Caffeine</a> - 一个高性能、出色的缓存类库</li><li><a href="https://research.google.com/pubs/pub36726.html">Google Percolator</a> - 由 Google 公司开发的、为大数据集群进行增量处理更新的系统，主要用于 google 网页搜索索引服务。</li><li><a href="https://blogs.apache.org/hbase/entry/coprocessor_introduction">HBase Coprocessor</a> - HBase 的协处理器，Percolator 的实现。</li><li><a href="http://ngdata.github.io/hbase-indexer/">Lily HBase Indexer</a> - 一款快速、简单的 HBase 的内容检索方案，它可以帮助你在 Solr 中建立 HBase 的数据索引，从而通过 Solr 进行数据检索。</li><li><a href="http://senseidb.github.io/bobo/">LinkedIn Bobo</a> - 完全用 Java 编写的 Faceted Search 实现，是 Apache Lucene 的扩展。</li><li><a href="https://github.com/linkedin/cleo">LinkedIn Cleo</a> - 一个灵活的软件库，用于处理一些预输入和自动完成的搜索功能。</li><li><a href="https://engineering.linkedin.com/search/did-you-mean-galene">LinkedIn Galene</a> - LinkedIn 的搜索架构。</li><li><a href="https://github.com/senseidb/zoie">LinkedIn Zoie</a> - 一个用 Java 编写的实时搜索/索引系统。</li><li><a href="http://mg4j.di.unimi.it/">MG4J</a> - MG4J（Managing Gigabytes for Java）是一个用 Java 编写的大型文档集合的全文搜索引擎，它是高度可定制的，高性能的，并提供了最先进的功能和新的研究算法。</li><li><a href="http://sphinxsearch.com/">Sphinx Search Server</a> - 全文搜索引擎。</li><li><a href="http://vespa.ai/">Vespa</a> - 在大型数据集上进行低延迟计算的引擎。它存储和索引数据，以便可以在服务时执行对数据的查询，选择和处理</li><li><a href="https://github.com/facebookresearch/faiss">Facebook Faiss</a> - 用于高效相似性搜索和密集向量聚类的库。 它包含的算法可搜索任意大小的向量集，最多可搜索到不适合 RAM 的向量。 它还包含用于评估和参数调整的支持代码。Faiss 用 C++ 编写，带有完整的 Python/numpy 包装器。</li><li><a href="https://github.com/spotify/annoy">Annoy</a> - 具有 Python 绑定的 C++库，用于搜索空间中接近给定查询点的点。 它还会创建大型的基于文件的只读数据结构，这些数据结构被映射到内存中，以便许多进程可以共享相同的数据。</li></ul><h1 id="MySQL-分支和发展"><a href="#MySQL-分支和发展" class="headerlink" title="MySQL 分支和发展"></a>MySQL 分支和发展</h1><ul><li><a href="https://aws.amazon.com/rds/">Amazon RDS</a> - AWS 的 MySQL 数据库。</li><li><a href="http://www.drizzle.org/">Drizzle</a> - MySQL 6.0的发展。</li><li><a href="https://cloud.google.com/sql/docs/">Google Cloud SQL</a> - Google 云中的 MySQL 数据库。</li><li><a href="https://mariadb.org/">MariaDB</a> - MySQL 的一个分支，采用GPL授权许可。目的是完全兼容 MySQL，包括 API 和命令行。</li><li><a href="https://www.mysql.com/products/cluster/">MySQL Cluster</a> - 使用 NDB 集群存储引擎实现 MySQL 集群。</li><li><a href="https://www.percona.com/software/mysql-database/percona-server">Percona Server</a> - MySQL 增强版，可以替代它。</li><li><a href="https://github.com/renecannao/proxysql">ProxySQL</a> - MySQL 的高性能代理。</li><li><a href="https://www.percona.com/">TokuDB</a> - MySQL 和 MariaDB 的存储引擎。</li><li><a href="http://webscalesql.org/">WebScaleSQL</a> - Facebook、 Google、Twitter 和 Linkedin 四家公司的MySQL 团队发起的 MySQL 开源组织，旨在改进 MySQL 在规模和性能等方面的问题。</li></ul><h1 id="PostgreSQL-分支和发展"><a href="#PostgreSQL-分支和发展" class="headerlink" title="PostgreSQL 分支和发展"></a>PostgreSQL 分支和发展</h1><ul><li><a href="http://db.cs.yale.edu/hadoopdb/hadoopdb.html">HadoopDB</a> - MapReduce 和 DBMS 的混合体。</li><li><a href="http://www-01.ibm.com/software/data/netezza/">IBM Netezza</a> - 高性能数据仓库设备。</li><li><a href="http://www.postgres-xl.org/">Postgres-XL</a> - 可伸缩的基于 PostgreSQL 的开源数据库集群。</li><li><a href="http://www-users.cs.umn.edu/~sarwat/RecDB/">RecDB</a> - 完全在 PostgreSQL 内部构建的开源推荐引擎。</li><li><a href="http://www.stormdb.com/community/stado">Stado</a> - 仅针对数据仓库和数据集市应用程序的开源 MPP 数据库系统。</li><li><a href="https://www.scribd.com/doc/3159239/70-Everest-PGCon-RT">Yahoo Everest</a> - 由 PostgreSQL 派生的 PB 级数据库 / MPP。</li><li><a href="http://www.timescale.com/">TimescaleDB</a> - 针对快速摄取和复杂查询而优化的开源时间序列数据库。</li><li><a href="https://www.pipelinedb.com/">PipelineDB</a> - 开源的流式数据库，基于 PostgreSQL 数据库改造的，允许我们通过 SQL 的方式，对数据流做操作，并把操作结果储存起来。</li></ul><h1 id="Memcached-分支和发展"><a href="#Memcached-分支和发展" class="headerlink" title="Memcached 分支和发展"></a>Memcached 分支和发展</h1><ul><li><a href="https://www.facebook.com/notes/facebook-engineering/mcdipper-a-key-value-cache-for-flash-storage/10151347090423920">Facebook McDipper</a> - 用于闪存的 key/value 缓存，设计目的在于提高闪存存储的使用效率。</li><li><a href="https://www.facebook.com/notes/facebook-engineering/scaling-memcache-at-facebook/10151411410803920">Facebook Memcached</a> - Memcache 的分支。</li><li><a href="https://github.com/twitter/twemproxy">Twemproxy</a> - 一个快速、轻量级的 memcached 和 redis 代理。</li><li><a href="https://github.com/twitter/fatcache">Twitter Fatcache</a> - 用于闪存的 key/value 缓存。</li><li><a href="https://github.com/twitter/twemcache">Twitter Twemcache</a> - Memcache 的分支。</li></ul><h1 id="嵌入式数据库"><a href="#嵌入式数据库" class="headerlink" title="嵌入式数据库"></a>嵌入式数据库</h1><ul><li><a href="http://www.actian.com/products/operational-databases/">Actian PSQL</a> - 由 Pervasive Software 开发的符合 ACID 的 DBMS，针对嵌入应用程序进行了优化。</li><li><a href="https://www.oracle.com/database/berkeley-db/index.html">BerkeleyDB</a> - 可为 key/value 数据提供高性能的嵌入式数据库。</li><li><a href="https://github.com/krestenkrab/hanoidb">HanoiDB</a> - Erlang LSM BTree 存储。</li><li><a href="https://github.com/google/leveldb">LevelDB</a> - Google 开源的持久化KV单机数据库，具有很高的随机写，顺序读/写性能。</li><li><a href="https://symas.com/mdb/">LMDB</a> - 由 Symas 开发的基于 Btree-based 的高性能 mmap key-value 数据库。</li><li><a href="http://rocksdb.org/">RocksDB</a> - Facebook 公司基于 LevelDB 开发的一款开源嵌入式数据库引擎。</li></ul><h1 id="商业智能"><a href="#商业智能" class="headerlink" title="商业智能"></a>商业智能</h1><ul><li><a href="https://www.bimeanalytics.com/?lang=en">BIME Analytics</a> - 商业智能云平台。</li><li><a href="https://github.com/ankane/blazer">Blazer</a> - 使商业智能变得简单。</li><li><a href="https://chartio.com">Chartio</a> - 商业智能平台，可以可视化和浏览我们的数据。</li><li><a href="https://www.datapine.com/">datapine</a> - 自助式商业智能工具。</li><li><a href="https://www.gooddata.com/">GoodData</a> - 商业智能和大数据分析软件。</li><li><a href="https://www.jaspersoft.com/">Jaspersoft</a> - 强大的商业智能套件。</li><li><a href="https://www.jedox.com/en/">Jedox Palo</a> - 可定制的商业智能平台.</li><li><a href="https://jethro.io/">Jethrodata</a> - 交互式大数据分析。</li><li><a href="https://intermix.io/">intermix.io</a> - Amazon Redshift 的性能监控</li><li><a href="https://github.com/metabase/metabase">Metabase</a> - 一个简单、开源的方式，通过给公司成员提问，从得到的数据中进行分析、学习。</li><li><a href="http://www.microsoft.com/en-us/server-cloud/solutions/business-intelligence/default.aspx">Microsoft</a> - 商业智能软件及平台。</li><li><a href="https://www.microstrategy.com/">Microstrategy</a> - 用于商业智能、移动智能和网络应用程序的软件平台。</li><li><a href="https://numeracy.co/">Numeracy</a> - 快速，干净的 SQL 客户端和商业智能。</li><li><a href="http://www.pentaho.com/">Pentaho</a> - 商业智能平台。</li><li><a href="http://www.qlik.com/us/">Qlik</a> - 商业智能及分析平台。</li><li><a href="https://redash.io/">Redash</a> - 开源商业智能平台，支持多个数据源和计划查询。</li><li><a href="https://www.meteorite.bi/">Saiku Analytics</a> - 开源分析平台。</li><li><a href="https://www.knowage-suite.com/">Knowage</a> - 开源商业智能平台。 前 <a href="http://www.spagobi.org/">SpagoBi</a>。</li><li><a href="http://sparklinedata.com/">SparklineData SNAP</a> - 基于 Apache Spark 的商业智能平台。</li><li><a href="https://www.tableau.com/">Tableau</a> - 商业智能平台。</li><li><a href="https://www.zoomdata.com/">Zoomdata</a> - 大数据分析平台。</li></ul><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><ul><li><a href="https://github.com/airbnb/airpal">Airpal</a> - PrestoDB 的 Web UI。</li><li><a href="http://www.anychart.com">AnyChart</a> - 一套灵活的 JavaScript（HTML5）库，可满足您的所有数据可视化需求。</li><li><a href="https://github.com/samizdatco/arbor">Arbor</a> - 一个使用 web workers 和 jQuery 创建的图可视化库。</li><li><a href="https://github.com/LucidWorks/banana">Banana</a> - 可视化存储在 Solr 中的日志和带时间戳的数据，是 Kibana 的一部分。</li><li><a href="https://github.com/ufukomer/bloomery">Bloomery</a> - Impala 的 Web UI。</li><li><a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> - 一个 Python 交互式可视化库，支持现代化 Web 浏览器，提供非常完美的展示功能。</li><li><a href="http://c3js.org/">C3</a> - 基于 D3 的可重用图表库。</li><li><a href="https://github.com/CartoDB/cartodb">CartoDB</a> - 开源的云上地理空间数据库，允许存储和可视化 web 上的数据。使用 CartoDB 可以快速创建基于地图的可视化效果。</li><li><a href="http://chartd.co/">chartd</a> - 响应式、视网膜兼容图表，仅需要一个 img 标签。</li><li><a href="http://www.chartjs.org/">Chart.js</a> - 一套开源、简单、干净并且有吸引力的基于 HTML5 技术的 JavaScript 图表工具。</li><li><a href="https://github.com/gionkunz/chartist-js">Chartist.js</a> - 非常简单而且实用的 JavaScript 前端图表生成器。</li><li><a href="http://square.github.io/crossfilter/">Crossfilter</a> -  一个 JavaScript 库，用于在 JavaScript 中制作交互式的仪表板，可以与 dc.js 、d3.js 一起工作。</li><li><a href="https://github.com/square/cubism">Cubism</a> - 用于时间序列可视化的 JavaScript 库。</li><li><a href="http://cytoscape.github.io/">Cytoscape</a> - 一个专注于网络可视化和分析的开源软件。</li><li><a href="http://dc-js.github.io/dc.js/">DC.js</a> - 一个用于网页作图、生成互动图形的 JavaScript 函数库。</li><li><a href="https://d3js.org/">D3</a> - 目前最流行的数据可视化库之一，小型，灵活，高效的数据可视化库，用来创建和操作基于数据的交互式文档。</li><li><a href="https://github.com/CSNW/d3.compose">D3.compose</a> - 由可重复使用的图表和组件组成复杂的、数据驱动的可视化文件。</li><li><a href="http://d3plus.org">D3Plus</a> - d3.js 的一组相当强大的可重用图表和样式。</li><li><a href="https://devexpress.github.io/devextreme-reactive/react/chart/">DevExtreme React Chart</a> - 基于高性能插件的 React 图表，用于 Bootstrap 和 Material Design。</li><li><a href="https://github.com/ecomfe/echarts">Echarts</a> - 一款由百度前端技术部开发的，基于Javascript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。</li><li><a href="https://github.com/HumbleSoftware/envisionjs">Envisionjs</a> - 一个基于 HTML5 技术的数据可视化库。</li><li><a href="https://metrictools.org/">FnordMetric</a> - 一个开源的 Web 应用，可用于创建实时仪表板，方便可视化任何数据。</li><li><a href="https://frappe.io/charts">Frappe Charts</a> - 一个受 Github 启发的轻量级 SVG 图表库，它不依赖任何类库和框架。</li><li><a href="https://github.com/Freeboard/freeboard">Freeboard</a> - 让用户创建他们自己的用来监控物联网部署的仪表盘，该代码在 GitHub上免费提供，你可以通过这些仪表板展示跟踪空气质量、住宅电器、酿酒情况和实时环境条件变化。</li><li><a href="https://github.com/gephi/gephi">Gephi</a> - 一款开源免费跨平台基于 JVM 的网络分析领域的数据可视化处理软件。</li><li><a href="https://developers.google.com/chart/">Google Charts</a> - 一种交互式 Web 服务，可根据用户提供的数据创建图形图表。</li><li><a href="https://grafana.com/">Grafana</a> - 一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</li><li><a href="http://graphiteapp.org/">Graphite</a> - 一款开源的监控绘图工具。</li><li><a href="https://www.highcharts.com/">Highcharts</a> - 兼容 IE6+、完美支持移动端、图表类型丰富、方便快捷的 HTML5 交互性图表库。</li><li><a href="http://ipython.org/">IPython</a> - 一种基于 Python 的交互式解释器。相较于原生的 Python Shell，IPython 提供了更为强大的编辑和交互功能。</li><li><a href="https://www.elastic.co/products/kibana">Kibana</a> - Elasticsearch 的开源数据可视化插件。</li><li><a href="http://lumify.io/">Lumify</a> - 开源大数据分析可视化平台。</li><li><a href="https://github.com/matplotlib/matplotlib">Matplotlib</a> - Python 编程语言及其数值数学扩展包 Numpy 的可视化操作界面。</li><li><a href="https://metricsgraphicsjs.org/">Metricsgraphic.js</a> - 一个建立在 D3 基础上，为可视化和时间序列化的数据而优化的库。</li><li><a href="http://nvd3.org/">NVD3</a> - d3.js 的图表组件。</li><li><a href="https://github.com/benpickles/peity">Peity</a> - 渐进式 SVG 条形图，折线图和饼图。</li><li><a href="https://plot.ly/">Plot.ly</a> - Plotly 为个人和协作提供在线图形，分析和统计工具，以及 Python，R，MATLAB，Perl，Julia，Arduino 和 REST 的科学图形库。</li><li><a href="https://github.com/plotly/plotly.js">Plotly.js</a> - 一个开源的交互式 JavaScript 图形库，建立在 d3.js 和 webgl 之上，并支持 20 多种类型的交互式图表。</li><li><a href="https://github.com/okfn/recline">Recline</a> - 简单而强大的库，可以使用纯 Javascript 和 HTML 构建数据应用程序。</li><li><a href="https://github.com/getredash/redash">Redash</a> - 查询和可视化数据的开源平台。</li><li><a href="http://recharts.org/">ReCharts</a> - 一个基于React组件的可组合图表库。</li><li><a href="http://shiny.rstudio.com/">Shiny</a> - R 的 Web 应用程序框架。</li><li><a href="https://github.com/jacomyal/sigma.js">Sigma.js</a> - 专门用于图形绘制的 JavaScript 库。</li><li><a href="https://github.com/apache/incubator-superset">Superset</a> - 由 Airbnb 开发并开源一个数据探索和可视化平台，设计用来提供直观的，可视化的，交互式的分析体验。</li><li><a href="https://github.com/vega/vega">Vega</a> - 一个可视化的语法。</li><li><a href="https://github.com/ZEPL/zeppelin">Zeppelin</a> - 一个基于 Web 的 notebook，提供交互数据分析和可视化。</li><li><a href="https://www.zingchart.com/">Zing Charts</a> - 一个功能强大的 JavaScript 图表。</li></ul><h1 id="物联网与传感器"><a href="#物联网与传感器" class="headerlink" title="物联网与传感器"></a>物联网与传感器</h1><ul><li><a href="http://edgent.apache.org/">Apache Edgent (Incubating)</a> - 一种编程模型和具有微内核风格的运行时，可嵌入到网关和小型的物联网设备中。</li><li><a href="https://azure.microsoft.com/en-us/services/iot-hub/">Azure IoT Hub</a> - 托管服务，支持 IoT 设备与 Azure 之间的双向通信。</li><li><a href="https://www.tempoiq.com/">TempoIQ</a> - 基于云计算的传感器分析。</li><li><a href="http://2lemetry.com/">2lemetry</a> - 物联网平台。</li><li><a href="https://www.pubnub.com/">Pubnub</a> - 数据流网络。</li><li><a href="https://www.thingworx.com/">ThingWorx</a> - 可用于查找数据来源，使数据与情境相关，合成数据，同时协调流程，以提供强大的 Web、移动和 AR 体验的平台。</li><li><a href="https://ifttt.com/">IFTTT</a> - 一个新生的网络服务平台，通过其他不同平台的条件来决定是否执行下一条命令。</li><li><a href="https://evrythng.com/">Evrything</a>- 使产品智能化。</li><li><a href="https://github.com/marty90/netlytics/">NetLytics</a> - 用于在Spark上处理网络数据的分析平台。</li></ul><h1 id="阅读材料"><a href="#阅读材料" class="headerlink" title="阅读材料"></a>阅读材料</h1><ul><li><a href="https://amplab.cs.berkeley.edu/benchmark/">Big Data Benchmark</a> - Redshift，Hive，Shark，Impala 和 Stiger/Tez的基准。</li><li><a href="https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis">NoSQL Comparison</a> - Cassandra，MongoDB，CouchDB，Redis，Riak，HBase，Couchbase，Neo4j，Hypertable，ElasticSearch，Accumulo，VoltDB 和 Scalaris 的比较。</li><li><a href="https://www.datadoghq.com/blog/monitoring-kafka-performance-metrics?ref=awesome">Monitoring Kafka performance</a> - 监视 Apache Kafka 的指南，包括度量收集的本地方法。</li><li><a href="https://www.datadoghq.com/blog/monitor-hadoop-metrics?ref=awesome">Monitoring Hadoop performance</a> - 监视 Hadoop 的指南，概述了 Hadoop 体系结构以及度量收集的本机方法。</li><li><a href="https://www.datadoghq.com/blog/how-to-monitor-cassandra-performance-metrics/?ref=awesome">Monitoring Cassandra performance</a> - 监控 Cassandra 的指南，包括度量收集的本地方法。</li></ul><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><h2 id="2015-2016"><a href="#2015-2016" class="headerlink" title="2015 - 2016"></a>2015 - 2016</h2><ul><li><a href="http://www.vldb.org/pvldb/vol8/p1804-ching.pdf">2015</a> - <strong>Facebook</strong> - One Trillion Edges: Graph Processing at Facebook-Scale.</li></ul><h2 id="2013-2014"><a href="#2013-2014" class="headerlink" title="2013 - 2014"></a>2013 - 2014</h2><ul><li><a href="http://infolab.stanford.edu/~ullman/mmds/book.pdf">2014</a> - <strong>Stanford</strong> - Mining of Massive Datasets.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/03/eurosys13-paper83.pdf">2013</a> - <strong>AMPLab</strong> - Presto: Distributed Machine Learning and Graph Processing with Sparse Matrices.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/01/dmx1.pdf">2013</a> - <strong>AMPLab</strong> - MLbase: A Distributed Machine-learning System.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/02/shark_sigmod2013.pdf">2013</a> - <strong>AMPLab</strong> - Shark: SQL and Rich Analytics at Scale.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/05/grades-graphx_with_fonts.pdf">2013</a> - <strong>AMPLab</strong> - GraphX: A Resilient Distributed Graph System on Spark.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf">2013</a> - <strong>Google</strong> - HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm.</li><li><a href="http://research.microsoft.com/pubs/200169/now-vldb.pdf">2013</a> - <strong>Microsoft</strong> - Scalable Progressive Analytics on Big Data in the Cloud.</li><li><a href="http://static.druid.io/docs/druid.pdf">2013</a> - <strong>Metamarkets</strong> - Druid: A Real-time Analytical Data Store.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p764-rae.pdf">2013</a> - <strong>Google</strong> - Online, Asynchronous Schema Change in F1.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/41344.pdf">2013</a> - <strong>Google</strong> - F1: A Distributed SQL Database That Scales.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p734-akidau.pdf">2013</a> - <strong>Google</strong> - MillWheel: Fault-Tolerant Stream Processing at Internet Scale.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p767-wiener.pdf">2013</a> - <strong>Facebook</strong> - Scuba: Diving into Data at Facebook.</li><li><a href="http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p871-curtiss.pdf">2013</a> - <strong>Facebook</strong> - Unicorn: A System for Searching the Social Graph.</li><li><a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">2013</a> - <strong>Facebook</strong> - Scaling Memcache at Facebook.</li></ul><h2 id="2011-2012"><a href="#2011-2012" class="headerlink" title="2011 - 2012"></a>2011 - 2012</h2><ul><li><a href="http://vldb.org/pvldb/vol5/p1771_georgelee_vldb2012.pdf">2012</a> - <strong>Twitter</strong> - The Unified Logging Infrastructurefor Data Analytics at Twitter.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2013/04/blinkdb_vldb12_demo.pdf">2012</a> - <strong>AMPLab</strong> - Blink and It’s Done: Interactive Queries on Very Large Data.</li><li><a href="https://www.usenix.org/system/files/login/articles/zaharia.pdf">2012</a> - <strong>AMPLab</strong> - Fast and Interactive Analytics over Hadoop Data with Spark.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2012/03/mod482-xin1.pdf">2012</a> - <strong>AMPLab</strong> - Shark: Fast Data Analysis Using Coarse-grained Distributed Memory.</li><li><a href="https://www.usenix.org/legacy/event/nsdi11/tech/full_papers/Bolosky.pdf">2012</a> - <strong>Microsoft</strong> - Paxos Replicated State Machines as the Basis of a High-Performance Data Store.</li><li><a href="http://research.microsoft.com/pubs/178045/ppaoxs-paper29.pdf">2012</a> - <strong>Microsoft</strong> - Paxos Made Parallel.</li><li><a href="https://arxiv.org/pdf/1203.5485.pdf">2012</a> - <strong>AMPLab</strong> - BlinkDB: Queries with Bounded Errors and Bounded Response Times on Very Large Data.</li><li><a href="http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf">2012</a> - <strong>Google</strong> - Processing a trillion cells per mouse click.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">2012</a> - <strong>Google</strong> - Spanner: Google’s Globally-Distributed Database.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/euro118-ananthanarayanan.pdf">2011</a> - <strong>AMPLab</strong> - Scarlett: Coping with Skewed Popularity Content in MapReduce Clusters.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/Mesos-A-Platform-for-Fine-Grained-Resource-Sharing-in-the-Data-Center.pdf">2011</a> - <strong>AMPLab</strong> - Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36971.pdf">2011</a> - <strong>Google</strong> - Megastore: Providing Scalable, Highly Available Storage for Interactive Services.</li></ul><h2 id="2001-2010"><a href="#2001-2010" class="headerlink" title="2001 - 2010"></a>2001 - 2010</h2><ul><li><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf">2010</a> - <strong>Facebook</strong> - Finding a needle in Haystack: Facebook’s photo storage.</li><li><a href="https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/Spark-Cluster-Computing-with-Working-Sets.pdf">2010</a> - <strong>AMPLab</strong> - Spark: Cluster Computing with Working Sets.</li><li><a href="http://kowshik.github.io/JPregel/pregel_paper.pdf">2010</a> - <strong>Google</strong> - Pregel: A System for Large-Scale Graph Processing.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36726.pdf">2010</a> - <strong>Google</strong> - Large-scale Incremental Processing Using Distributed Transactions and Notiﬁcations base of Percolator and Caffeine.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36632.pdf">2010</a> - <strong>Google</strong> - Dremel: Interactive Analysis of Web-Scale Datasets.</li><li><a href="http://leoneu.github.io/">2010</a> - <strong>Yahoo</strong> - S4: Distributed Stream Computing Platform.</li><li><a href="http://www.cs.umd.edu/~abadi/papers/hadoopdb.pdf">2009</a> - HadoopDB: An Architectural Hybrid of MapReduce and DBMS Technologies for Analytical Workloads.    </li><li><a href="https://cwiki.apache.org/confluence/download/attachments/120729877/chukwa_cca08.pdf?version=1&amp;modificationDate=1562667399000&amp;api=v2">2008</a> - <strong>AMPLab</strong> - Chukwa: A large-scale monitoring system.</li><li><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf">2007</a> - <strong>Amazon</strong> - Dynamo: Amazon’s Highly Available Key-value Store.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf">2006</a> - <strong>Google</strong> - The Chubby lock service for loosely-coupled distributed systems.</li><li><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en//archive/bigtable-osdi06.pdf">2006</a> - <strong>Google</strong> - Bigtable: A Distributed Storage System for Structured Data.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf">2004</a> - <strong>Google</strong> - MapReduce: Simplied Data Processing on Large Clusters.</li><li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">2003</a> - <strong>Google</strong> - The Google File System.</li></ul><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><ul><li><a href="https://www.manning.com/livevideo/spark-in-motion">Spark in Motion</a> - Spark in Motion 教你如何使用 Spark 进行批处理和流数据分析。</li><li><a href="https://www.manning.com/livevideo/machine-learning-data-science-and-deep-learning-with-python">Machine Learning, Data Science and Deep Learning with Python </a> - LiveVideo 教程涵盖了机器学习，Tensorflow，人工智能和神经网络。</li></ul><h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><ul><li><a href="https://www.manning.com/books/data-science-at-scale-with-python-and-dask">Data Science at Scale with Python and Dask</a> - 使用 Python 和 Dask 进行大规模数据科学教学，将教您如何构建可处理大量数据的分布式数据项目。</li><li><a href="https://www.manning.com/books/streaming-data">Streaming Data</a> - 介绍了流数据和实时数据系统的概念和要求。</li><li><a href="https://www.manning.com/books/storm-applied">Storm Applied</a> - 将 Apache Storm 用于与处理和分析实时数据流相关的实际任务的实用指南。</li><li><a href="http://www.cambridge.org/us/academic/subjects/engineering/communications-and-signal-processing/fundamentals-stream-processing-application-design-systems-and-analytics">Fundamentals of Stream Processing: Application Design, Systems, and Analytics</a> - 该指南结合了流处理中的基本构建块和新兴研究，非常适合应用程序设计人员，系统构建人员，分析开发人员以及该领域的学生和研究人员。</li><li><a href="http://www.springer.com/us/book/9780387710020">Stream Data Processing: A Quality of Service Perspective</a> - 提出了适用于流和复杂事件处理的新范例。</li><li><a href="https://www.manning.com/books/event-streams-in-action">Unified Log Processing</a> - 统一日志处理是在企业中实施事件流（Kafka 或 Kinesis）的统一日志的实用指南</li><li><a href="https://www.manning.com/books/kafka-streams-in-action">Kafka Streams in Action</a> - 在 Kafka 平台的数据上实现流处理所需的一切知识，可以集中精力从数据中获取更多信息，而无需花费时间或精力。</li><li><a href="https://www.manning.com/books/big-data">Big Data</a> - 教您使用一种架构来构建大数据系统，该架构利用了群集硬件以及专门用于捕获和分析 Web 规模数据的新工具。</li><li><a href="https://www.manning.com/books/spark-in-action">Spark in Action</a> &amp; <a href="https://www.manning.com/books/spark-in-action-second-edition">Spark in Action 2nd Ed.</a> - 教您使用Spark有效处理批处理和流式数据所需的理论和技能。 完全更新为Spark 2.0。</li><li><a href="https://www.manning.com/books/kafka-in-action">Kafka in Action</a> - 快速介绍与Kafka合作的各个方面的信息，您需要真正利用它的好处。</li><li><a href="https://www.manning.com/books/fusion-in-action">Fusion in Action</a> - 教您建立功能齐全的数据分析管道，包括文档和数据搜索以及分布式数据集群。</li><li><a href="https://www.manning.com/books/reactive-data-handling">Reactive Data Handling</a> - Reactive Data Handling 是由 Manuel Bernhardt 选择的五个精选章节的集合，向您介绍构建能够处理大数据负载实时处理的反应式应用程序。</li></ul><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><ul><li><a href="http://book.mixu.net/distsys/">Distributed Systems for fun and profit</a> - 分布式系统理论。 包括有关时间和顺序，复制和不可能结果的部分。</li></ul><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><ul><li><a href="https://www.manning.com/books/graph-powered-machine-learning">Graph-Powered Machine Learning</a> - Alessandro Negro 结合图论和模型来改善机器学习项目。</li></ul><h2 id="数据可视化-1"><a href="#数据可视化-1" class="headerlink" title="数据可视化"></a>数据可视化</h2><ul><li><a href="https://www.youtube.com/watch?v=5Zg-C8AAIGg">The beauty of data visualization</a></li><li><a href="https://www.youtube.com/watch?v=R-oiKt7bUU8">Designing Data Visualizations with Noah Iliinsky</a></li><li><a href="https://www.youtube.com/watch?v=jbkSRLYSojo">Hans Rosling&#39;s 200 Countries, 200 Years, 4 Minutes</a></li><li><a href="https://www.youtube.com/watch?v=qTEchen97rQ">Ice Bucket Challenge Data Visualization</a></li></ul><h1 id="其他清单"><a href="#其他清单" class="headerlink" title="其他清单"></a>其他清单</h1><ul><li>Other awesome lists <a href="https://github.com/bayandin/awesome-awesomeness">awesome-awesomeness</a>.</li><li>Even more lists <a href="https://github.com/sindresorhus/awesome">awesome</a>.</li><li>Another list? <a href="https://github.com/jnv/lists">list</a>.</li><li>WTF! <a href="https://github.com/t3chnoboy/awesome-awesome-awesome">awesome-awesome-awesome</a>.</li><li>Analytics <a href="https://github.com/onurakpolat/awesome-analytics">awesome-analytics</a>.</li><li>Public Datasets <a href="https://github.com/awesomedata/awesome-public-datasets">awesome-public-datasets</a>.</li><li>Graph Classification <a href="https://github.com/benedekrozemberczki/awesome-graph-classification">awesome-graph-classification</a>.</li><li>Network Embedding <a href="https://github.com/chihming/awesome-network-embedding">awesome-network-embedding</a>.</li><li>Community Detection <a href="https://github.com/benedekrozemberczki/awesome-community-detection">awesome-community-detection</a>.</li><li>Decision Tree Papers <a href="https://github.com/benedekrozemberczki/awesome-decision-tree-papers">awesome-decision-tree-papers</a>.</li><li>Fraud Detection Papers <a href="https://github.com/benedekrozemberczki/awesome-fraud-detection-papers">awesome-fraud-detection-papers</a>.</li><li>Gradient Boosting Papers <a href="https://github.com/benedekrozemberczki/awesome-gradient-boosting-papers">awesome-gradient-boosting-papers</a>.</li><li>Monte Carlo Tree Search Papers <a href="https://github.com/benedekrozemberczki/awesome-monte-carlo-tree-search-papers">awesome-monte-carlo-tree-search-papers</a>.</li><li>Kafka <a href="https://github.com/monksy/awesome-kafka">awesome-kafka</a>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 📑文档 </tag>
            
            <tag> 👨‍💻大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Hexo 中插入 ECharts 动态图表</title>
      <link href="post/6f565d8c.html"/>
      <url>post/6f565d8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="ECharts-简介"><a href="#ECharts-简介" class="headerlink" title="ECharts 简介"></a>ECharts 简介</h1><p><a href="https://echarts.apache.org/">ECharts</a> 是一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（Chrome，Firefox，Safari，IE8/9/10/11等），底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。它提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于 BI 的漏斗图，仪表盘，并且支持图与图之间的混搭。</p><h1 id="Hexo-中的-ECharts"><a href="#Hexo-中的-ECharts" class="headerlink" title="Hexo 中的 ECharts"></a>Hexo 中的 ECharts</h1><p>ECharts 的 Hexo 插件目前有三个版本，分别为：</p><ul><li><a href="https://github.com/zhoulvjun/hexo-tag-echarts">hexo-tag-echarts</a><ul><li>需要手动引入 ECharts.js</li></ul></li><li><a href="https://github.com/kchen0x/hexo-tag-echarts3">hexo-tag-echarts3</a><ul><li>自动引入 <a href="https://cdn.bootcss.com/echarts/3.8.0/echarts.min.js">https://cdn.bootcss.com/echarts/3.8.0/echarts.min.js</a></li></ul></li><li><a href="https://github.com/gyx138/hexo-tag-echarts4">hexo-tag-echarts4</a><ul><li>自动引入 <a href="https://cdn.bootcss.com/echarts/4.3.0/echarts.min.js">https://cdn.bootcss.com/echarts/4.3.0/echarts.min.js</a></li></ul></li></ul><p>本文使用的是 Hexo 的 ECharts 插件 <a href="https://github.com/zhoulvjun/hexo-tag-echarts">hexo-tag-echarts</a>，只需要在 Hexo 文档中引入一次 ECharts.js 就可以渲染整个页面的图表了。插件的安装和使用非常的简单，只需要进入博客目录，然后打开命令行，用 <code>npm</code> 安装一下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-tag-echarts --save<br></code></pre></td></tr></table></figure></p><p>之后在文章内使用 <code>echarts</code> 的 <code>tag</code> 就可以了</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>\\TODO echarts option goes here<br>&#123;% endecharts %&#125;<br></code></pre></td></tr></table></figure></p><p>其中 <code>echarts</code> 是标签名，<code>endecharts</code> 是结束标签，不需要更改，<code>400</code> 是图表容器的高度，默认是按正常比例缩放的，<code>&#39;90%&#39;</code> 是图表容器的相对宽度，默认是 <code>100%</code>。在标签之间的部分，需要自己填充的图表数据和属性，更多自定义属性可以查看 <a href="https://echarts.apache.org/zh/option.html#title">ECharts 配置项文档</a>。</p><h1 id="图表示例"><a href="#图表示例" class="headerlink" title="图表示例"></a>图表示例</h1><p>现在你已经基本学会了在 Hexo 中插入 ECharts 图表了，下面再展示一些基本的图表，更多炫酷的图表可以自己去尝试一下。</p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        trigger: &#x27;axis&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    xAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;category&#x27;,</span><br><span class="hljs-code">        data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    yAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;value&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="hljs-code">        type: &#x27;line&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts369" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts369'));        // 指定图表的配置项和数据        var option = {    tooltip: {        trigger: 'axis'    },    xAxis: {        type: 'category',        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [820, 932, 901, 934, 1290, 1330, 1320],        type: 'line'    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="柱状图、条形图"><a href="#柱状图、条形图" class="headerlink" title="柱状图、条形图"></a>柱状图、条形图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    xAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;category&#x27;,</span><br><span class="hljs-code">        data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    yAxis: &#123;</span><br><span class="hljs-code">        type: &#x27;value&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        data: [120, 200, 150, 80, 70, 110, 130],</span><br><span class="hljs-code">        type: &#x27;bar&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts6135" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts6135'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    xAxis: {        type: 'category',        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [120, 200, 150, 80, 70, 110, 130],        type: 'bar'    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="环形图、饼状图"><a href="#环形图、饼状图" class="headerlink" title="环形图、饼状图"></a>环形图、饼状图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        trigger: &#x27;item&#x27;,</span><br><span class="hljs-code">        formatter: &#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    legend: &#123;</span><br><span class="hljs-code">        orient: &#x27;vertical&#x27;,</span><br><span class="hljs-code">        left: 10,</span><br><span class="hljs-code">        data: [&#x27;直接访问&#x27;, &#x27;邮件营销&#x27;, &#x27;联盟广告&#x27;, &#x27;视频广告&#x27;, &#x27;搜索引擎&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            name: &#x27;访问来源&#x27;,</span><br><span class="hljs-code">            type: &#x27;pie&#x27;,</span><br><span class="hljs-code">            radius: [&#x27;50%&#x27;, &#x27;70%&#x27;],</span><br><span class="hljs-code">            avoidLabelOverlap: false,</span><br><span class="hljs-code">            label: &#123;</span><br><span class="hljs-code">                show: false,</span><br><span class="hljs-code">                position: &#x27;center&#x27;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            emphasis: &#123;</span><br><span class="hljs-code">                label: &#123;</span><br><span class="hljs-code">                    show: true,</span><br><span class="hljs-code">                    fontSize: &#x27;30&#x27;,</span><br><span class="hljs-code">                    fontWeight: &#x27;bold&#x27;</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            labelLine: &#123;</span><br><span class="hljs-code">                show: false</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            data: [</span><br><span class="hljs-code">                &#123;value: 335, name: &#x27;直接访问&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 310, name: &#x27;邮件营销&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 234, name: &#x27;联盟广告&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 135, name: &#x27;视频广告&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 1548, name: &#x27;搜索引擎&#x27;&#125;</span><br><span class="hljs-code">            ]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts3656" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts3656'));        // 指定图表的配置项和数据        var option = {    tooltip: {        trigger: 'item',        formatter: '{a} <br/>{b}: {c} ({d}%)'    },    legend: {        orient: 'vertical',        left: 10,        data: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎']    },    series: [        {            name: '访问来源',            type: 'pie',            radius: ['50%', '70%'],            avoidLabelOverlap: false,            label: {                show: false,                position: 'center'            },            emphasis: {                label: {                    show: true,                    fontSize: '30',                    fontWeight: 'bold'                }            },            labelLine: {                show: false            },            data: [                {value: 335, name: '直接访问'},                {value: 310, name: '邮件营销'},                {value: 234, name: '联盟广告'},                {value: 135, name: '视频广告'},                {value: 1548, name: '搜索引擎'}            ]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    xAxis: &#123;&#125;,</span><br><span class="hljs-code">    yAxis: &#123;&#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        symbolSize: 20,</span><br><span class="hljs-code">        data: [</span><br><span class="hljs-code">            [10.0, 8.04],</span><br><span class="hljs-code">            [8.0, 6.95],</span><br><span class="hljs-code">            [13.0, 7.58],</span><br><span class="hljs-code">            [9.0, 8.81],</span><br><span class="hljs-code">            [11.0, 8.33],</span><br><span class="hljs-code">            [14.0, 9.96],</span><br><span class="hljs-code">            [6.0, 7.24],</span><br><span class="hljs-code">            [4.0, 4.26],</span><br><span class="hljs-code">            [12.0, 10.84],</span><br><span class="hljs-code">            [7.0, 4.82],</span><br><span class="hljs-code">            [5.0, 5.68]</span><br><span class="hljs-code">        ],</span><br><span class="hljs-code">        type: &#x27;scatter&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：<div id="echarts6954" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts6954'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    xAxis: {},    yAxis: {},    series: [{        symbolSize: 20,        data: [            [10.0, 8.04],            [8.0, 6.95],            [13.0, 7.58],            [9.0, 8.81],            [11.0, 8.33],            [14.0, 9.96],            [6.0, 7.24],            [4.0, 4.26],            [12.0, 10.84],            [7.0, 4.82],            [5.0, 5.68]        ],        type: 'scatter'    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    legend: &#123;</span><br><span class="hljs-code">        data: [&#x27;预算分配（Allocated Budget）&#x27;, &#x27;实际开销（Actual Spending）&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    radar: &#123;</span><br><span class="hljs-code">        name: &#123;</span><br><span class="hljs-code">            textStyle: &#123;</span><br><span class="hljs-code">                color: &#x27;#fff&#x27;,</span><br><span class="hljs-code">                backgroundColor: &#x27;#999&#x27;,</span><br><span class="hljs-code">                borderRadius: 3,</span><br><span class="hljs-code">                padding: [3, 5]</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        &#125;,</span><br><span class="hljs-code">        indicator: [</span><br><span class="hljs-code">            &#123; name: &#x27;销售（sales）&#x27;, max: 6500&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;管理（Administration）&#x27;, max: 16000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;信息技术（Information Techology）&#x27;, max: 30000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;客服（Customer Support）&#x27;, max: 38000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;研发（Development）&#x27;, max: 52000&#125;,</span><br><span class="hljs-code">            &#123; name: &#x27;市场（Marketing）&#x27;, max: 25000&#125;</span><br><span class="hljs-code">        ]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        name: &#x27;预算 vs 开销（Budget vs spending）&#x27;,</span><br><span class="hljs-code">        type: &#x27;radar&#x27;,</span><br><span class="hljs-code">        data: [</span><br><span class="hljs-code">            &#123;</span><br><span class="hljs-code">                value: [4300, 10000, 28000, 35000, 50000, 19000],</span><br><span class="hljs-code">                name: &#x27;预算分配（Allocated Budget）&#x27;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            &#123;</span><br><span class="hljs-code">                value: [5000, 14000, 28000, 31000, 42000, 21000],</span><br><span class="hljs-code">                name: &#x27;实际开销（Actual Spending）&#x27;</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        ]</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts8576" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8576'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    legend: {        data: ['预算分配（Allocated Budget）', '实际开销（Actual Spending）']    },    radar: {        name: {            textStyle: {                color: '#fff',                backgroundColor: '#999',                borderRadius: 3,                padding: [3, 5]            }        },        indicator: [            { name: '销售（sales）', max: 6500},            { name: '管理（Administration）', max: 16000},            { name: '信息技术（Information Techology）', max: 30000},            { name: '客服（Customer Support）', max: 38000},            { name: '研发（Development）', max: 52000},            { name: '市场（Marketing）', max: 25000}        ]    },    series: [{        name: '预算 vs 开销（Budget vs spending）',        type: 'radar',        data: [            {                value: [4300, 10000, 28000, 35000, 50000, 19000],                name: '预算分配（Allocated Budget）'            },            {                value: [5000, 14000, 28000, 31000, 42000, 21000],                name: '实际开销（Actual Spending）'            }        ]    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            type: &#x27;graph&#x27;,</span><br><span class="hljs-code">            layout: &#x27;none&#x27;,</span><br><span class="hljs-code">            symbolSize: 50,</span><br><span class="hljs-code">            label: &#123;</span><br><span class="hljs-code">                show: true</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            edgeSymbol: [&#x27;circle&#x27;, &#x27;arrow&#x27;],</span><br><span class="hljs-code">            edgeSymbolSize: [4, 10],</span><br><span class="hljs-code">            edgeLabel: &#123;</span><br><span class="hljs-code">                fontSize: 20</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            data: [&#123;</span><br><span class="hljs-code">                name: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                x: 300,</span><br><span class="hljs-code">                y: 300</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                x: 800,</span><br><span class="hljs-code">                y: 300</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;节点3&#x27;,</span><br><span class="hljs-code">                x: 550,</span><br><span class="hljs-code">                y: 100</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;节点4&#x27;,</span><br><span class="hljs-code">                x: 550,</span><br><span class="hljs-code">                y: 500</span><br><span class="hljs-code">            &#125;],</span><br><span class="hljs-code">            links: [&#123;</span><br><span class="hljs-code">                source: 0,</span><br><span class="hljs-code">                target: 1,</span><br><span class="hljs-code">                symbolSize: [5, 20],</span><br><span class="hljs-code">                label: &#123;</span><br><span class="hljs-code">                    show: true</span><br><span class="hljs-code">                &#125;,</span><br><span class="hljs-code">                lineStyle: &#123;</span><br><span class="hljs-code">                    width: 5,</span><br><span class="hljs-code">                    curveness: 0.2</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                label: &#123;</span><br><span class="hljs-code">                    show: true</span><br><span class="hljs-code">                &#125;,</span><br><span class="hljs-code">                lineStyle: &#123;</span><br><span class="hljs-code">                    curveness: 0.2</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点3&#x27;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点3&#x27;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点2&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点4&#x27;</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                source: &#x27;节点1&#x27;,</span><br><span class="hljs-code">                target: &#x27;节点4&#x27;</span><br><span class="hljs-code">            &#125;],</span><br><span class="hljs-code">            lineStyle: &#123;</span><br><span class="hljs-code">                opacity: 0.9,</span><br><span class="hljs-code">                width: 2,</span><br><span class="hljs-code">                curveness: 0</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts9619" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts9619'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: [        {            type: 'graph',            layout: 'none',            symbolSize: 50,            label: {                show: true            },            edgeSymbol: ['circle', 'arrow'],            edgeSymbolSize: [4, 10],            edgeLabel: {                fontSize: 20            },            data: [{                name: '节点1',                x: 300,                y: 300            }, {                name: '节点2',                x: 800,                y: 300            }, {                name: '节点3',                x: 550,                y: 100            }, {                name: '节点4',                x: 550,                y: 500            }],            links: [{                source: 0,                target: 1,                symbolSize: [5, 20],                label: {                    show: true                },                lineStyle: {                    width: 5,                    curveness: 0.2                }            }, {                source: '节点2',                target: '节点1',                label: {                    show: true                },                lineStyle: {                    curveness: 0.2                }            }, {                source: '节点1',                target: '节点3'            }, {                source: '节点2',                target: '节点3'            }, {                source: '节点2',                target: '节点4'            }, {                source: '节点1',                target: '节点4'            }],            lineStyle: {                opacity: 0.9,                width: 2,                curveness: 0            }        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="矩形树图"><a href="#矩形树图" class="headerlink" title="矩形树图"></a>矩形树图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: [&#123;</span><br><span class="hljs-code">        type: &#x27;treemap&#x27;,</span><br><span class="hljs-code">        data: [&#123;</span><br><span class="hljs-code">            name: &#x27;nodeA&#x27;,            // First tree</span><br><span class="hljs-code">            value: 10,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;nodeAa&#x27;,       // First leaf of first tree</span><br><span class="hljs-code">                value: 4</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;nodeAb&#x27;,       // Second leaf of first tree</span><br><span class="hljs-code">                value: 6</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;nodeB&#x27;,            // Second tree</span><br><span class="hljs-code">            value: 20,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;nodeBa&#x27;,       // Son of first tree</span><br><span class="hljs-code">                value: 20,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;nodeBa1&#x27;,  // Granson of first tree</span><br><span class="hljs-code">                    value: 20</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;]</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts1340" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts1340'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: [{        type: 'treemap',        data: [{            name: 'nodeA',            // First tree            value: 10,            children: [{                name: 'nodeAa',       // First leaf of first tree                value: 4            }, {                name: 'nodeAb',       // Second leaf of first tree                value: 6            }]        }, {            name: 'nodeB',            // Second tree            value: 20,            children: [{                name: 'nodeBa',       // Son of first tree                value: 20,                children: [{                    name: 'nodeBa1',  // Granson of first tree                    value: 20                }]            }]        }]    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="旭日图"><a href="#旭日图" class="headerlink" title="旭日图"></a>旭日图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: &#123;</span><br><span class="hljs-code">        type: &#x27;sunburst&#x27;,</span><br><span class="hljs-code">        data: [&#123;</span><br><span class="hljs-code">            name: &#x27;Grandpa&#x27;,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;Uncle Leo&#x27;,</span><br><span class="hljs-code">                value: 15,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Jack&#x27;,</span><br><span class="hljs-code">                    value: 2</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Mary&#x27;,</span><br><span class="hljs-code">                    value: 5,</span><br><span class="hljs-code">                    children: [&#123;</span><br><span class="hljs-code">                        name: &#x27;Jackson&#x27;,</span><br><span class="hljs-code">                        value: 2</span><br><span class="hljs-code">                    &#125;]</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Ben&#x27;,</span><br><span class="hljs-code">                    value: 4</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;, &#123;</span><br><span class="hljs-code">                name: &#x27;Father&#x27;,</span><br><span class="hljs-code">                value: 10,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;Me&#x27;,</span><br><span class="hljs-code">                    value: 5</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Brother Peter&#x27;,</span><br><span class="hljs-code">                    value: 1</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;Nancy&#x27;,</span><br><span class="hljs-code">            children: [&#123;</span><br><span class="hljs-code">                name: &#x27;Uncle Nike&#x27;,</span><br><span class="hljs-code">                children: [&#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Betty&#x27;,</span><br><span class="hljs-code">                    value: 1</span><br><span class="hljs-code">                &#125;, &#123;</span><br><span class="hljs-code">                    name: &#x27;Cousin Jenny&#x27;,</span><br><span class="hljs-code">                    value: 2</span><br><span class="hljs-code">                &#125;]</span><br><span class="hljs-code">            &#125;]</span><br><span class="hljs-code">        &#125;],</span><br><span class="hljs-code">        radius: [0, &#x27;90%&#x27;],</span><br><span class="hljs-code">        label: &#123;</span><br><span class="hljs-code">            rotate: &#x27;radial&#x27;</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts9579" style="width: 90%;height: 700px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts9579'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: {        type: 'sunburst',        data: [{            name: 'Grandpa',            children: [{                name: 'Uncle Leo',                value: 15,                children: [{                    name: 'Cousin Jack',                    value: 2                }, {                    name: 'Cousin Mary',                    value: 5,                    children: [{                        name: 'Jackson',                        value: 2                    }]                }, {                    name: 'Cousin Ben',                    value: 4                }]            }, {                name: 'Father',                value: 10,                children: [{                    name: 'Me',                    value: 5                }, {                    name: 'Brother Peter',                    value: 1                }]            }]        }, {            name: 'Nancy',            children: [{                name: 'Uncle Nike',                children: [{                    name: 'Cousin Betty',                    value: 1                }, {                    name: 'Cousin Jenny',                    value: 2                }]            }]        }],        radius: [0, '90%'],        label: {            rotate: 'radial'        }    }};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="平行坐标系"><a href="#平行坐标系" class="headerlink" title="平行坐标系"></a>平行坐标系</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27; %&#125;<br>&#123;<br><span class="hljs-code">    parallelAxis: [</span><br><span class="hljs-code">        &#123;dim: 0, name: &#x27;Price&#x27;&#125;,</span><br><span class="hljs-code">        &#123;dim: 1, name: &#x27;Net Weight&#x27;&#125;,</span><br><span class="hljs-code">        &#123;dim: 2, name: &#x27;Amount&#x27;&#125;,</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            dim: 3,</span><br><span class="hljs-code">            name: &#x27;Score&#x27;,</span><br><span class="hljs-code">            type: &#x27;category&#x27;,</span><br><span class="hljs-code">            data: [&#x27;Excellent&#x27;, &#x27;Good&#x27;, &#x27;OK&#x27;, &#x27;Bad&#x27;]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ],</span><br><span class="hljs-code">    series: &#123;</span><br><span class="hljs-code">        type: &#x27;parallel&#x27;,</span><br><span class="hljs-code">        lineStyle: &#123;</span><br><span class="hljs-code">            width: 4</span><br><span class="hljs-code">        &#125;,</span><br><span class="hljs-code">        data: [</span><br><span class="hljs-code">            [12.99, 100, 82, &#x27;Good&#x27;],</span><br><span class="hljs-code">            [9.99, 80, 77, &#x27;OK&#x27;],</span><br><span class="hljs-code">            [20, 120, 60, &#x27;Excellent&#x27;]</span><br><span class="hljs-code">        ]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts9051" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts9051'));        // 指定图表的配置项和数据        var option = {    parallelAxis: [        {dim: 0, name: 'Price'},        {dim: 1, name: 'Net Weight'},        {dim: 2, name: 'Amount'},        {            dim: 3,            name: 'Score',            type: 'category',            data: ['Excellent', 'Good', 'OK', 'Bad']        }    ],    series: {        type: 'parallel',        lineStyle: {            width: 4        },        data: [            [12.99, 100, 82, 'Good'],            [9.99, 80, 77, 'OK'],            [20, 120, 60, 'Excellent']        ]    }};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="桑基图"><a href="#桑基图" class="headerlink" title="桑基图"></a>桑基图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27;&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;&#125;,</span><br><span class="hljs-code">    series: &#123;</span><br><span class="hljs-code">        type: &#x27;sankey&#x27;,</span><br><span class="hljs-code">        layout: &#x27;none&#x27;,</span><br><span class="hljs-code">        focusNodeAdjacency: &#x27;allEdges&#x27;,</span><br><span class="hljs-code">        data: [&#123;</span><br><span class="hljs-code">            name: &#x27;a&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;b&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;a1&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;a2&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;b1&#x27;</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            name: &#x27;c&#x27;</span><br><span class="hljs-code">        &#125;],</span><br><span class="hljs-code">        links: [&#123;</span><br><span class="hljs-code">            source: &#x27;a&#x27;,</span><br><span class="hljs-code">            target: &#x27;a1&#x27;,</span><br><span class="hljs-code">            value: 5</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;a&#x27;,</span><br><span class="hljs-code">            target: &#x27;a2&#x27;,</span><br><span class="hljs-code">            value: 3</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;b&#x27;,</span><br><span class="hljs-code">            target: &#x27;b1&#x27;,</span><br><span class="hljs-code">            value: 8</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;a&#x27;,</span><br><span class="hljs-code">            target: &#x27;b1&#x27;,</span><br><span class="hljs-code">            value: 3</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;b1&#x27;,</span><br><span class="hljs-code">            target: &#x27;a1&#x27;,</span><br><span class="hljs-code">            value: 1</span><br><span class="hljs-code">        &#125;, &#123;</span><br><span class="hljs-code">            source: &#x27;b1&#x27;,</span><br><span class="hljs-code">            target: &#x27;c&#x27;,</span><br><span class="hljs-code">            value: 2</span><br><span class="hljs-code">        &#125;]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts7600" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts7600'));        // 指定图表的配置项和数据        var option = {    tooltip: {},    series: {        type: 'sankey',        layout: 'none',        focusNodeAdjacency: 'allEdges',        data: [{            name: 'a'        }, {            name: 'b'        }, {            name: 'a1'        }, {            name: 'a2'        }, {            name: 'b1'        }, {            name: 'c'        }],        links: [{            source: 'a',            target: 'a1',            value: 5        }, {            source: 'a',            target: 'a2',            value: 3        }, {            source: 'b',            target: 'b1',            value: 8        }, {            source: 'a',            target: 'b1',            value: 3        }, {            source: 'b1',            target: 'a1',            value: 1        }, {            source: 'b1',            target: 'c',            value: 2        }]    }};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27;&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        trigger: &#x27;item&#x27;,</span><br><span class="hljs-code">        formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&quot;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    legend: &#123;</span><br><span class="hljs-code">        data: [&#x27;展现&#x27;,&#x27;点击&#x27;,&#x27;访问&#x27;,&#x27;咨询&#x27;,&#x27;订单&#x27;]</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            name:&#x27;漏斗图&#x27;,</span><br><span class="hljs-code">            type:&#x27;funnel&#x27;,</span><br><span class="hljs-code">            left: &#x27;10%&#x27;,</span><br><span class="hljs-code">            top: 60,</span><br><span class="hljs-code">            //x2: 80,</span><br><span class="hljs-code">            bottom: 60,</span><br><span class="hljs-code">            width: &#x27;80%&#x27;,</span><br><span class="hljs-code">            // height: &#123;totalHeight&#125; - y - y2,</span><br><span class="hljs-code">            min: 0,</span><br><span class="hljs-code">            max: 100,</span><br><span class="hljs-code">            minSize: &#x27;0%&#x27;,</span><br><span class="hljs-code">            maxSize: &#x27;100%&#x27;,</span><br><span class="hljs-code">            sort: &#x27;descending&#x27;,</span><br><span class="hljs-code">            gap: 2,</span><br><span class="hljs-code">            label: &#123;</span><br><span class="hljs-code">                show: true,</span><br><span class="hljs-code">                position: &#x27;inside&#x27;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            labelLine: &#123;</span><br><span class="hljs-code">                length: 10,</span><br><span class="hljs-code">                lineStyle: &#123;</span><br><span class="hljs-code">                    width: 1,</span><br><span class="hljs-code">                    type: &#x27;solid&#x27;</span><br><span class="hljs-code">                &#125;</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            itemStyle: &#123;</span><br><span class="hljs-code">                borderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">                borderWidth: 1</span><br><span class="hljs-code">            &#125;,</span><br><span class="hljs-code">            data: [</span><br><span class="hljs-code">                &#123;value: 60, name: &#x27;访问&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 40, name: &#x27;咨询&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 20, name: &#x27;订单&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 80, name: &#x27;点击&#x27;&#125;,</span><br><span class="hljs-code">                &#123;value: 100, name: &#x27;展现&#x27;&#125;</span><br><span class="hljs-code">            ]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts7646" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts7646'));        // 指定图表的配置项和数据        var option = {    tooltip: {        trigger: 'item',        formatter: "{a} <br/>{b} : {c}%"    },    legend: {        data: ['展现','点击','访问','咨询','订单']    },    series: [        {            name:'漏斗图',            type:'funnel',            left: '10%',            top: 60,            //x2: 80,            bottom: 60,            width: '80%',            // height: {totalHeight} - y - y2,            min: 0,            max: 100,            minSize: '0%',            maxSize: '100%',            sort: 'descending',            gap: 2,            label: {                show: true,                position: 'inside'            },            labelLine: {                length: 10,                lineStyle: {                    width: 1,                    type: 'solid'                }            },            itemStyle: {                borderColor: '#fff',                borderWidth: 1            },            data: [                {value: 60, name: '访问'},                {value: 40, name: '咨询'},                {value: 20, name: '订单'},                {value: 80, name: '点击'},                {value: 100, name: '展现'}            ]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% echarts 400 &#x27;90%&#x27;&#125;<br>&#123;<br><span class="hljs-code">    tooltip: &#123;</span><br><span class="hljs-code">        formatter: &#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&#x27;</span><br><span class="hljs-code">    &#125;,</span><br><span class="hljs-code">    series: [</span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code">            name: &#x27;业务指标&#x27;,</span><br><span class="hljs-code">            type: &#x27;gauge&#x27;,</span><br><span class="hljs-code">            detail: &#123;formatter: &#x27;&#123;value&#125;%&#x27;&#125;,</span><br><span class="hljs-code">            data: [&#123;value: 88.88, name: &#x27;完成率&#x27;&#125;]</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code">&#123;% endecharts %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="echarts8169" style="width: 90%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8169'));        // 指定图表的配置项和数据        var option = {    tooltip: {        formatter: '{a} <br/>{b} : {c}%'    },    series: [        {            name: '业务指标',            type: 'gauge',            detail: {formatter: '{value}%'},            data: [{value: 88.88, name: '完成率'}]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果你想了解更多，可以查看 ECharts 的 <a href="https://echarts.apache.org/en/index.html">英文文档</a> 或者 <a href="https://echarts.apache.org/zh/index.html">中文文档</a>，更多的实例和属性设置都可以找到，也可以在 ECharts 官网配置好图表属性后再引入到自己的 Hexo 文档中。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Hexo 中插入 Chart 动态图表</title>
      <link href="post/a6e75a2b.html"/>
      <url>post/a6e75a2b.html</url>
      
        <content type="html"><![CDATA[<p><div class="note info simple"><p>文章来源：<br>  作者: <a href="https://github.com/Shen-Yu">Shen-Yu</a><br>  链接: <a href="https://shen-yu.gitee.io/2020/chartjs/">https://shen-yu.gitee.io/2020/chartjs/</a><br>  来源: <a href="https://shen-yu.gitee.io/">岛</a><br>  著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></div></p><h1 id="Chartjs-简介"><a href="#Chartjs-简介" class="headerlink" title="Chartjs 简介"></a>Chartjs 简介</h1><p><a href="https://chartjs.bootcss.com/">Chartjs</a> 是一款简单优雅的数据可视化工具，对比其他图表库如 <a href="https://echarts.apache.org/">ECharts</a>、<a href="https://www.highcharts.com/">Highcharts</a>、<a href="https://c3js.org/">C3</a>、<a href="http://www.flotcharts.org/">Flot</a>、<a href="https://www.amcharts.com/javascript-charts/">amCharts</a> 等，它的画面效果、动态效果都更精致，它的 <a href="https://chartjs.bootcss.com/">文档首页</a> 就透出一股小清新，基于 HTML5 Canvas，它拥有更好的性能且响应式，基本满足了一般数据展示的需要，包括折线图，条形图，饼图，散点图，雷达图，极地图，甜甜圈图等。</p><h1 id="Hexo-中的-Chartjs"><a href="#Hexo-中的-Chartjs" class="headerlink" title="Hexo 中的 Chartjs"></a>Hexo 中的 Chartjs</h1><p>为了方便在 Hexo 中使用这么漂亮的图表库，我自己写了一个 Hexo 的 <a href="https://github.com/Shen-Yu/hexo-tag-chart">Chartjs</a> 插件。插件的安装和使用非常的简单，只需要进入博客目录，然后打开命令行，用 <code>npm</code> 安装一下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-tag-chart --save<br></code></pre></td></tr></table></figure></p><p>之后在文章内使用 <code>chart</code> 的 <code>tag</code> 就可以了</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>\\TODO option goes here<br>&#123;% endchart %&#125;<br></code></pre></td></tr></table></figure></p><p>其中 <code>chart</code> 是标签名，<code>endchart</code> 是结束标签，不需要更改，<code>90%</code> 是图表容器的相对宽度，默认是 <code>100%</code>，<code>300</code> 是图表容器的高度，默认是按正常比例缩放的，你可以通过设置 <code>options</code> 里面的 <code>aspectRatio</code> 属性来调整宽高比例，另外还有许多属性可以自定义，你可以查看 <a href="https://chartjs.bootcss.com/docs/">官方文档</a>。在标签之间的部分，需要自己填充的图表数据和属性。</p><h1 id="图表示例"><a href="#图表示例" class="headerlink" title="图表示例"></a>图表示例</h1><p>现在你已经基本学会了在 Hexo 中插入 Chart 图表了，下面再展示一些基本的图表，更多炫酷的图表可以自己去尝试一下。</p><h2 id="柱状图、条形图"><a href="#柱状图、条形图" class="headerlink" title="柱状图、条形图"></a>柱状图、条形图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;bar&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [65, 59, 80, 81, 56, 55, 40],</span><br><span class="hljs-code">      fill: false,</span><br><span class="hljs-code">      backgroundColor: [&#x27;rgba(255, 99, 132, 0.5)&#x27;, &#x27;rgba(255, 159, 64, 0.5)&#x27;, &#x27;rgba(255, 205, 86, 0.5)&#x27;, &#x27;rgba(75, 192, 192, 0.5)&#x27;, &#x27;rgba(54, 162, 235, 0.5)&#x27;, &#x27;rgba(153, 102, 255, 0.5)&#x27;, &#x27;rgba(201, 203, 207, 0.5)&#x27;],</span><br><span class="hljs-code">      borderColor: [&#x27;rgb(255, 99, 132)&#x27;, &#x27;rgb(255, 159, 64)&#x27;, &#x27;rgb(255, 205, 86)&#x27;, &#x27;rgb(75, 192, 192)&#x27;, &#x27;rgb(54, 162, 235)&#x27;, &#x27;rgb(153, 102, 255)&#x27;, &#x27;rgb(201, 203, 207)&#x27;],</span><br><span class="hljs-code">      borderWidth: 1</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    scales: &#123;</span><br><span class="hljs-code">      yAxes: [&#123;</span><br><span class="hljs-code">        ticks: &#123;</span><br><span class="hljs-code">          beginAtZero: true</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart4972" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart4972').getContext('2d');    var options = {  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [{      label: 'First Dataset',      data: [65, 59, 80, 81, 56, 55, 40],      fill: false,      backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(255, 159, 64, 0.5)', 'rgba(255, 205, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(201, 203, 207, 0.5)'],      borderColor: ['rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(54, 162, 235)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)'],      borderWidth: 1    }]  },  options: {    scales: {      yAxes: [{        ticks: {          beginAtZero: true        }      }]    }  }};    new Chart(ctx, options);</script></p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;line&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First dataset&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      data: [0, 10, 5, 2, 20, 30, 45]</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    responsive: true,</span><br><span class="hljs-code">    title: &#123;</span><br><span class="hljs-code">    display: true,</span><br><span class="hljs-code">    text: &#x27;Chart.js Line Chart&#x27;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart1925" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart1925').getContext('2d');    var options = {  type: 'line',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [{      label: 'First dataset',      backgroundColor: 'rgb(255, 99, 132)',      borderColor: 'rgb(255, 99, 132)',      data: [0, 10, 5, 2, 20, 30, 45]      }]  },  options: {    responsive: true,    title: {    display: true,    text: 'Chart.js Line Chart'    }  }};    new Chart(ctx, options);</script></p><h2 id="环形图、饼状图"><a href="#环形图、饼状图" class="headerlink" title="环形图、饼状图"></a>环形图、饼状图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;pie&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;Red&#x27;, &#x27;Blue&#x27;, &#x27;Yellow&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [300, 50, 100],</span><br><span class="hljs-code">      backgroundColor: [&#x27;rgb(255, 99, 132)&#x27;, &#x27;rgb(54, 162, 235)&#x27;, &#x27;rgb(255, 205, 86)&#x27;]</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart7635" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart7635').getContext('2d');    var options = {  type: 'pie',  data: {    labels: ['Red', 'Blue', 'Yellow'],    datasets: [{      label: 'First Dataset',      data: [300, 50, 100],      backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']    }]  }};    new Chart(ctx, options);</script></p><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;radar&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;Eating&#x27;, &#x27;Drinking&#x27;, &#x27;Sleeping&#x27;, &#x27;Designing&#x27;, &#x27;Coding&#x27;, &#x27;Cycling&#x27;, &#x27;Running&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [65, 59, 90, 81, 56, 55, 40],</span><br><span class="hljs-code">      fill: true,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgba(255, 99, 132, 0.2)&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      pointBackgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      pointBorderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBackgroundColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBorderColor: &#x27;rgb(255, 99, 132)&#x27;</span><br><span class="hljs-code">    &#125;, &#123;</span><br><span class="hljs-code">      label: &#x27;Second Dataset&#x27;,</span><br><span class="hljs-code">      data: [28, 48, 40, 19, 96, 27, 100],</span><br><span class="hljs-code">      fill: true,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgba(54, 162, 235, 0.2)&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      pointBackgroundColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      pointBorderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBackgroundColor: &#x27;#fff&#x27;,</span><br><span class="hljs-code">      pointHoverBorderColor: &#x27;rgb(54, 162, 235)&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    elements: &#123;</span><br><span class="hljs-code">      line: &#123;</span><br><span class="hljs-code">        tension: 0,</span><br><span class="hljs-code">        borderWidth: 3</span><br><span class="hljs-code">      &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart7209" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart7209').getContext('2d');    var options = {  type: 'radar',  data: {    labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],    datasets: [{      label: 'First Dataset',      data: [65, 59, 90, 81, 56, 55, 40],      fill: true,      backgroundColor: 'rgba(255, 99, 132, 0.2)',      borderColor: 'rgb(255, 99, 132)',      pointBackgroundColor: 'rgb(255, 99, 132)',      pointBorderColor: '#fff',      pointHoverBackgroundColor: '#fff',      pointHoverBorderColor: 'rgb(255, 99, 132)'    }, {      label: 'Second Dataset',      data: [28, 48, 40, 19, 96, 27, 100],      fill: true,      backgroundColor: 'rgba(54, 162, 235, 0.2)',      borderColor: 'rgb(54, 162, 235)',      pointBackgroundColor: 'rgb(54, 162, 235)',      pointBorderColor: '#fff',      pointHoverBackgroundColor: '#fff',      pointHoverBorderColor: 'rgb(54, 162, 235)'    }]  },  options: {    elements: {      line: {        tension: 0,        borderWidth: 3      }    }  }};    new Chart(ctx, options);</script></p><h2 id="气泡图"><a href="#气泡图" class="headerlink" title="气泡图"></a>气泡图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;bubble&#x27;,<br>  data: &#123;<br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First Dataset&#x27;,</span><br><span class="hljs-code">      data: [&#123;</span><br><span class="hljs-code">        x: 20,</span><br><span class="hljs-code">        y: 30,</span><br><span class="hljs-code">        r: 6</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 25,</span><br><span class="hljs-code">        y: 20,</span><br><span class="hljs-code">        r: 8</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 32,</span><br><span class="hljs-code">        y: 6,</span><br><span class="hljs-code">        r: 7</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 35,</span><br><span class="hljs-code">        y: 26,</span><br><span class="hljs-code">        r: 9</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 40,</span><br><span class="hljs-code">        y: 10,</span><br><span class="hljs-code">        r: 5</span><br><span class="hljs-code">      &#125;],</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(255, 99, 132)&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart8160" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart8160').getContext('2d');    var options = {  type: 'bubble',  data: {    datasets: [{      label: 'First Dataset',      data: [{        x: 20,        y: 30,        r: 6      }, {        x: 25,        y: 20,        r: 8      }, {        x: 32,        y: 6,        r: 7      }, {        x: 35,        y: 26,        r: 9      }, {        x: 40,        y: 10,        r: 5      }],      backgroundColor: 'rgb(255, 99, 132)'    }]  }};    new Chart(ctx, options);</script></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;scatter&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;First dataset&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      data: [&#123;</span><br><span class="hljs-code">        x: 12,</span><br><span class="hljs-code">        y: 45,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 12,</span><br><span class="hljs-code">        y: 13,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 56,</span><br><span class="hljs-code">        y: 3,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 5,</span><br><span class="hljs-code">        y: 87,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 43,</span><br><span class="hljs-code">        y: 76,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 34,</span><br><span class="hljs-code">        y: 8,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 9,</span><br><span class="hljs-code">        y: 53,</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;, &#123;</span><br><span class="hljs-code">      label: &#x27;Second dataset&#x27;,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgb(54, 162, 235)&#x27;,</span><br><span class="hljs-code">      data: [&#123;</span><br><span class="hljs-code">        x: 56,</span><br><span class="hljs-code">        y: 12,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 7,</span><br><span class="hljs-code">        y: 12,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 87,</span><br><span class="hljs-code">        y: 24,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 34,</span><br><span class="hljs-code">        y: 45,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 65,</span><br><span class="hljs-code">        y: 27,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 8,</span><br><span class="hljs-code">        y: 37,</span><br><span class="hljs-code">      &#125;, &#123;</span><br><span class="hljs-code">        x: 24,</span><br><span class="hljs-code">        y: 89,</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;],</span><br><span class="hljs-code">    options: &#123;</span><br><span class="hljs-code">      title: &#123;</span><br><span class="hljs-code">        display: true,</span><br><span class="hljs-code">        text: &#x27;Chart.js Scatter Chart&#x27;</span><br><span class="hljs-code">      &#125;,</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart4341" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart4341').getContext('2d');    var options = {  type: 'scatter',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [{      label: 'First dataset',      borderColor: 'rgb(255, 99, 132)',      backgroundColor: 'rgb(255, 99, 132)',      data: [{        x: 12,        y: 45,      }, {        x: 12,        y: 13,      }, {        x: 56,        y: 3,      }, {        x: 5,        y: 87,      }, {        x: 43,        y: 76,      }, {        x: 34,        y: 8,      }, {        x: 9,        y: 53,      }]    }, {      label: 'Second dataset',      borderColor: 'rgb(54, 162, 235)',      backgroundColor: 'rgb(54, 162, 235)',      data: [{        x: 56,        y: 12,      }, {        x: 7,        y: 12,      }, {        x: 87,        y: 24,      }, {        x: 34,        y: 45,      }, {        x: 65,        y: 27,      }, {        x: 8,        y: 37,      }, {        x: 24,        y: 89,      }]    }],    options: {      title: {        display: true,        text: 'Chart.js Scatter Chart'      },    }  }};    new Chart(ctx, options);</script></p><h2 id="混合图"><a href="#混合图" class="headerlink" title="混合图"></a>混合图</h2><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% chart 90% 300 %&#125;<br>&#123;<br>  type: &#x27;bar&#x27;,<br>  data: &#123;<br><span class="hljs-code">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;],</span><br><span class="hljs-code">    datasets: [&#123;</span><br><span class="hljs-code">      label: &#x27;Bar Dataset&#x27;,</span><br><span class="hljs-code">      data: [10, 20, 30, 40],</span><br><span class="hljs-code">      borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="hljs-code">      backgroundColor: &#x27;rgba(255, 99, 132)&#x27;</span><br><span class="hljs-code">    &#125;, &#123;</span><br><span class="hljs-code">      label: &#x27;Line Dataset&#x27;,</span><br><span class="hljs-code">      data: [20, 30, 40, 50],</span><br><span class="hljs-code">      type: &#x27;line&#x27;,</span><br><span class="hljs-code">      fill: false,</span><br><span class="hljs-code">      borderColor: &#x27;rgb(54, 162, 235)&#x27;</span><br><span class="hljs-code">    &#125;]</span><br><span class="hljs-code">  &#125;,</span><br><span class="hljs-code">  options: &#123;</span><br><span class="hljs-code">    scales: &#123;</span><br><span class="hljs-code">      yAxes: [&#123;</span><br><span class="hljs-code">        ticks: &#123;</span><br><span class="hljs-code">          beginAtZero: true</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">      &#125;]</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&#123;% endchart %&#125;</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div style="width: 90%;margin: 0 auto">    <canvas id="chart4503" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart4503').getContext('2d');    var options = {  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April'],    datasets: [{      label: 'Bar Dataset',      data: [10, 20, 30, 40],      borderColor: 'rgb(255, 99, 132)',      backgroundColor: 'rgba(255, 99, 132)'    }, {      label: 'Line Dataset',      data: [20, 30, 40, 50],      type: 'line',      fill: false,      borderColor: 'rgb(54, 162, 235)'    }]  },  options: {    scales: {      yAxes: [{        ticks: {          beginAtZero: true        }      }]    }  }};    new Chart(ctx, options);</script></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果你想了解更多，<a href="https://www.chartjs.org/">官方文档</a> 是不二之选。如果你英语不好，那么可以看看 <a href="https://chartjs.bootcss.com/">中文文档</a>，所有的例子和属性都能在里面找到，祝你玩得开心。</p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基本语法</title>
      <link href="post/c894e39a.html"/>
      <url>post/c894e39a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-应用"><a href="#Markdown-应用" class="headerlink" title="Markdown 应用"></a>Markdown 应用</h1><ul><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li><li>Markdown 编写的文档可以导出 HTML、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 .md 或 .markdown。</li></ul><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge 等。</p><h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>Markdown 标题有两种格式。</p><ol><li><p>使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p><p>= 和 - 标记语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一级标题<br>=======<br><br>二级标题<br>-------<br></code></pre></td></tr></table></figure></p><p><!-- 显示效果如下所示：> 一级标题> =======> 二级标题> ------- --></p></li><li><p>使用 <code>#</code> 号标记</p><p>使用 <code>#</code> 号克表示 1-6 级标题，一级标题对应一个 <code>#</code> 号，二级标题对应两个 <code>#</code> 号，以此类推。</p><p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure></p><p> <!-- 显示效果如下所示：> # 一级标题> ## 二级标题> ### 三级标题> #### 四级标题> ##### 五级标题> ###### 六级标题 --></p></li></ol><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个空格以上加上回车。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Markdown[<span class="hljs-string">空格</span>][<span class="hljs-symbol">空格</span>][<span class="hljs-string">回车</span>]<br>Markdown<br></code></pre></td></tr></table></figure></p><p>当然也可以在段落后面使用一个空行表示重新开始一个段落</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Markdown<br>[空行]<br>Markdown<br></code></pre></td></tr></table></figure></p><p>还可以使用 <code>&lt;br/&gt;</code> 实现强制换行</p><p>显示效果如下所示：</p><blockquote><p>Markdown<br>Markdown</p></blockquote><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-strong">__粗体文本__</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*斜粗体文本<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_斜粗体文本<span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span></span></span></span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><em>斜体文本</em><br><em>斜体文本</em>  </p><p><strong>粗体文本</strong><br><strong>粗体文本</strong></p><p><strong><em>斜粗体文本</em></strong><br><strong><em>斜粗体文本</em></strong></p></blockquote><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个以上的星号 <code>*</code>、减号 <code>-</code>、底线 <code>_</code> 来建立一个分隔线，行内不能有其他东西，也可以在星号 <code>*</code>、减号 <code>-</code>、底线 <code>_</code> 中间插入空格。下面每种写法都可以建立分隔线：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">- - -</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">* * *</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">_</span> <span class="hljs-emphasis">_ _</span></span></span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><hr><hr><hr><hr><hr><hr></blockquote><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <code>~~</code> 即可：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正常文本<br>~~删除文本~~<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>正常文本<br><del>删除文本</del></p></blockquote><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线文本<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><u>下划线文本</u></p></blockquote><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明，Markdown 脚注的格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[^ 要脚注的文本]<br>Markdown[^ Markdown]  <br><br>[^ Markdown ]：一种轻量级标记语言<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>Markdown<sup><a href="#fn_ Markdown" id="reffn_ Markdown"> Markdown</a></sup>。</p><blockquote id="fn_ Markdown"><sup> Markdown</sup>. 一种轻量级标记语言<a href="#reffn_ Markdown" title="Jump back to footnote [ Markdown] in the text."> &#8617;</a></blockquote></blockquote><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号 <code>*</code>、加号 <code>+</code>、减号 <code>-</code> 作为列表标记，这些标记后面都要添加一个空格，然后再填写内容：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表使用数字并加上 <code>.</code> 号来表示，如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><p>列表嵌套只需要在子列表中的选项前面添加四个空格即可：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">  -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">  -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">  1.</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">  2.</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ol><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ol></li></ol></blockquote><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号，然后后面紧跟一个空格符号：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块引用</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>区块引用</p></blockquote><p>另外区块是可以嵌套的，一个 <code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 最外层</span><br><span class="hljs-quote">&gt; &gt; 第一层嵌套</span><br><span class="hljs-quote">&gt; &gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p><br></p><p><strong>区块中使用列表</strong></p><p>区块中使用列表实例如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块中使用列表</span><br><span class="hljs-quote">&gt; 1. 第一项</span><br><span class="hljs-quote">&gt; 2. 第二项</span><br><span class="hljs-quote">&gt; + 第一项</span><br><span class="hljs-quote">&gt; + 第二项</span><br><span class="hljs-quote">&gt; + 第三项</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p><br></p><p><strong>列表中使用区块</strong></p><p>如果要在列表项目内放进区块，那么就需要在 <code>&gt;</code> 前添加四个空格的缩进。</p><p>区块中使用列表实例如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-code">    &gt; 列表中使用区块</span><br><span class="hljs-code">* 第二项</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><ul><li>第一项<blockquote><p>列表中使用区块</p></blockquote></li><li>第二项</li></ul><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号 <code>` </code> 或用三个反引号 <code>``` </code> 把它包起来例如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">` print `</span> 函数<br><span class="hljs-code">``` print ``` </span>函数<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><code>print</code> 函数<br><code>print</code> 函数</p></blockquote><p><br></p><p><strong>代码区块</strong></p><p>代码区块使用 4 个空格或者一个制表符（Tab 键）：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">空格</span>][<span class="hljs-symbol">空格</span>][<span class="hljs-string">空格</span>][<span class="hljs-symbol">空格</span>]print(&quot;Hello&quot;);<br>[Tab]print(&quot;World&quot;);<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>   print(&quot;Hello&quot;);<br>   print(&quot;World&quot;);</p></blockquote><p>你也可以用 <code>``` </code> 包裹一段代码，并指定一种语言（也可以不指定）：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">javascript</span>]<br>$(document).ready(function () &#123;<br><span class="hljs-code">    alert(&#x27;Hello World&#x27;);</span><br><span class="hljs-code">&#125;);</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">&#x27;Hello World&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1></blockquote><p>链接语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">链接名称</span>](<span class="hljs-link">链接地址</span>)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><a href="https://www.baidu.com/">Baidu</a><br>或者<br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p></blockquote><p><br></p><p><strong>高级链接</strong></p><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这个链接用 Google 作为网址变量 [<span class="hljs-string">Google</span>][<span class="hljs-symbol">Google</span>]<br>然后在文档的结尾为变量赋值（网址）<br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://www.google.com/</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>这个链接用 Google 作为网址变量 [Google][Google]<br>然后在文档的结尾为变量赋值（网址）</p><p>  [Google]: <a href="http://www.google.com/">http://www.google.com/</a></p></blockquote><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址</span>)<br>![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址 &quot;可选标题&quot;</span>)<br></code></pre></td></tr></table></figure></p><ul><li>开头一个感叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 <code>title</code> 属性的文字。</li></ul><p>使用实例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图标</span>](<span class="hljs-link">https://www.baidu.com/img/flexible/logo/pc/result.png</span>)<br>![<span class="hljs-string">图标</span>](<span class="hljs-link">https://www.baidu.com/img/flexible/logo/pc/result.png &quot;Baidu&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="https://www.baidu.com/img/flexible/logo/pc/result.png" alt="图标"><br><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="https://www.baidu.com/img/flexible/logo/pc/result.png" alt="图标" title="Baidu"></p></blockquote><p>当然，也可以像网址那样对图片网址使用变量:</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这个链接用 Baidu 作为网址变量 [<span class="hljs-string">Baidu</span>][<span class="hljs-symbol">Baidu</span>]。<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-symbol">Baidu</span>]: <span class="hljs-link">https://www.baidu.com/img/flexible/logo/pc/result.png</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>这个链接用 Baidu 作为网址变量 [Baidu][Baidu]。<br>然后在文档的结尾为变量赋值（网址）</p><p>[Baidu]: <a href="https://www.baidu.com/img/flexible/logo/pc/result.png">https://www.baidu.com/img/flexible/logo/pc/result.png</a></p></blockquote><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30%&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><img src= "https://cdn.jsdelivr.net/gh/Eurkon/CDN/hexo/images/user/loading.gif" data-lazy-src="https://www.baidu.com/img/flexible/logo/pc/result.png" width="30%"></p></blockquote><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><p>语法格式如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 表头 | 表头 |<br>| ---- | ---- |<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div></blockquote><p><br></p><p><strong>对齐方式</strong></p><p>我们可以设置表格的对齐方式：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐。</li><li><code>:-</code> 设置内容和标题栏居左对齐。</li><li><code>:-:</code> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 左对齐 | 居中对齐 | 右对齐 |<br>| :-----| :----: | ----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:center">居中对齐</th><th style="text-align:right">右对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:center">单元格</td><td style="text-align:right">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:center">单元格</td><td style="text-align:right">单元格</td></tr></tbody></table></div></blockquote><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code> 等 ，如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">普通文本：使用 Ctrl+Alt+Del 重启电脑<br>HTML文本：使用 <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span> 重启电脑<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p>普通文本：使用 Ctrl+Alt+Del 重启电脑<br>HTML文本：使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></blockquote><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**文本加粗**</span> <br>\<span class="hljs-emphasis">*\*</span> 正常显示星号 \<span class="hljs-emphasis">*\*</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><p><strong>文本加粗</strong><br>** 正常显示星号 **</p></blockquote><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\   反斜线<br>`   反引号<br><span class="hljs-bullet">*</span>   星号<br><span class="hljs-emphasis">_   下划线</span><br><span class="hljs-emphasis">&#123;&#125;  花括号</span><br><span class="hljs-emphasis">[]  方括号</span><br><span class="hljs-emphasis">()  小括号</span><br><span class="hljs-emphasis">#   井字号</span><br><span class="hljs-emphasis">+   加号</span><br><span class="hljs-emphasis">-   减号</span><br><span class="hljs-emphasis">.   英文句点</span><br><span class="hljs-emphasis">!   感叹号</span><br></code></pre></td></tr></table></figure></p><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符号<code>$$</code>包裹 <code>TeX</code> 或 <code>LaTeX</code> 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 <code>Mathjax</code> 对数学公式进行渲染。如：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125; <br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;<br>$$<br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><blockquote><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><ol><li><p>横向流程图源码格式：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>graph LR<br>A[方形] --&gt;B(圆角)<br><span class="hljs-code">    B --&gt; C&#123;条件a&#125;</span><br><span class="hljs-code">    C --&gt;|a=1| D[结果1]</span><br><span class="hljs-code">    C --&gt;|a=2| E[结果2]</span><br><span class="hljs-code">    F[横向流程图]</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><pre class="mermaid">  graph LRA[方形] -->B(圆角)   B --> C{条件a}   C -->|a=1| D[结果1]   C -->|a=2| E[结果2]   F[横向流程图]</pre></p></li><li><p>竖向流程图源码格式：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>graph TD<br>A[方形] --&gt; B(圆角)<br><span class="hljs-code">    B --&gt; C&#123;条件a&#125;</span><br><span class="hljs-code">    C --&gt; |a=1| D[结果1]</span><br><span class="hljs-code">    C --&gt; |a=2| E[结果2]</span><br><span class="hljs-code">    F[竖向流程图]</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><pre class="mermaid">  graph TDA[方形] --> B(圆角)   B --> C{条件a}   C --> |a=1| D[结果1]   C --> |a=2| E[结果2]   F[竖向流程图]</pre></p></li><li><p>标准流程图源码格式：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">flow</span>]<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="flowchart-0" class="flow-chart"></div></p></li><li><p>标准流程图源码格式（横向）：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">flow</span>]<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(yes)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="flowchart-1" class="flow-chart"></div></p></li></ol><h2 id="时序图-顺序图"><a href="#时序图-顺序图" class="headerlink" title="时序图(顺序图)"></a>时序图(顺序图)</h2><ol><li><p>UML时序图源码样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">sequence</span>]<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="sequence-0"></div></p></li><li><p>UML时序图源码复杂样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">sequence</span>]<br>Title: 标题：复杂使用<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象B-&gt;小三: 你好吗<br>小三--&gt;&gt;对象A: 对象B找我了<br>对象A-&gt;对象B: 你真的好吗？<br>Note over 小三, 对象B: 我们是朋友<br>participant C<br>Note right of C: 没人陪我玩<br>[<span class="hljs-code">```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><div id="sequence-1"></div></p></li><li><p>UML标准时序图样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>%% 时序图例子，-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头<br>  sequenceDiagram<br><span class="hljs-code">    participant 张三</span><br><span class="hljs-code">    participant 李四</span><br><span class="hljs-code">    张三-&gt;王五: 王五你好吗？</span><br><span class="hljs-code">    loop 健康检查</span><br><span class="hljs-code">        王五-&gt;王五: 与疾病战斗</span><br><span class="hljs-code">    end</span><br><span class="hljs-code">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="hljs-code">    李四--&gt;&gt;张三: 很好!</span><br><span class="hljs-code">    王五-&gt;李四: 你怎么样?</span><br><span class="hljs-code">    李四--&gt;王五: 很好!</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><pre class="mermaid">  %% 时序图例子，-> 直线，-->虚线，->>实线箭头 sequenceDiagram   participant 张三   participant 李四   张三->王五: 王五你好吗？   loop 健康检查       王五->王五: 与疾病战斗   end   Note right of 王五: 合理 食物 <br>看医生...   李四-->>张三: 很好!   王五->李四: 你怎么样?   李四-->王五: 很好!</pre></p></li></ol><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><p>甘特图样例：</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">```</span>][<span class="hljs-symbol">mermaid</span>]<br>%% 语法示例<br>  gantt<br>  dateFormat YYYY-MM-DD<br>  title 软件开发甘特图<br>  section 设计<br><span class="hljs-code">    需求: done, des1, 2014-01-06, 2014-01-08</span><br><span class="hljs-code">    原型: active, des2, 2014-01-09, 3d</span><br><span class="hljs-code">    UI设计: des3, after des2, 5d</span><br><span class="hljs-code">    未来任务: des4, after des3, 5d</span><br><span class="hljs-code">  section 开发</span><br><span class="hljs-code">    理解需求: crit, done, 2014-01-06, 24h</span><br><span class="hljs-code">    设计框架: crit, done, after des2, 2d</span><br><span class="hljs-code">    开发: crit, active, 3d</span><br><span class="hljs-code">    未来任务: crit, 5d</span><br><span class="hljs-code">    玩耍: 2d</span><br><span class="hljs-code">  section 测试</span><br><span class="hljs-code">    功能测试: active, a1, after des3, 3d</span><br><span class="hljs-code">    压力测试: after a1, 20h</span><br><span class="hljs-code">    测试报告: 48h</span><br><span class="hljs-code">[```]</span><br></code></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p><code>mermaid%% 语法示例  gantt  dateFormat YYYY-MM-DD  title 软件开发甘特图  section 设计    需求: done, des1, 2014-01-06, 2014-01-08    原型: active, des2, 2014-01-09, 3d    UI设计: des3, after des2, 5d    未来任务: des4, after des3, 5d  section 开发    理解需求: crit, done, 2014-01-06, 24h    设计框架: crit, done, after des2, 2d    开发: crit, active, 3d    未来任务: crit, 5d    玩耍: 2d  section 测试    功能测试: active, a1, after des3, 3d    压力测试: after a1, 20h    测试报告: 48h</code><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">  st=>start: 开始框  op=>operation: 处理框  cond=>condition: 判断框(是或否?)  sub1=>subroutine: 子流程  io=>inputoutput: 输入输出框  e=>end: 结束框  st->op->cond  cond(yes)->io->e  cond(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">  st=>start: 开始框  op=>operation: 处理框  cond=>condition: 判断框(是或否?)  sub1=>subroutine: 子流程  io=>inputoutput: 输入输出框  e=>end: 结束框  st(right)->op(right)->cond  cond(yes)->io(bottom)->e  cond(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">  对象A->对象B: 对象B你好吗?（请求）  Note right of 对象B: 对象B的描述  Note left of 对象A: 对象A的描述(提示)  对象B-->对象A: 我很好(响应)  对象A->对象B: 你真的好吗？</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">  Title: 标题：复杂使用  对象A->对象B: 对象B你好吗?（请求）  Note right of 对象B: 对象B的描述  Note left of 对象A: 对象A的描述(提示)  对象B-->对象A: 我很好(响应)  对象B->小三: 你好吗  小三-->>对象A: 对象B找我了  对象A->对象B: 你真的好吗？  Note over 小三, 对象B: 我们是朋友  participant C  Note right of C: 没人陪我玩</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 📃Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter</title>
      <link href="post/31e4c77c.html"/>
      <url>post/31e4c77c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h1><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table></div><h1 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h1><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图 (如果没有设置 top_img，文章页顶部将显示缩略图，可设为 false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块 (默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章版权链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
            <tag> 🦋Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="post/a1751c09.html"/>
      <url>post/a1751c09.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 📖教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💿Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
